From 5a4b7a13a6315fb51c0d076ac1055f5517a9ad97 Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Tue, 14 May 2019 16:31:41 -0400
Subject: [PATCH] Implemented PandaWire implementation (WIP)


diff --git a/src/main/java/dev/lockedthread/LockedSpigotConfig.java b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
index 5026eb5d7..c9d4d20d2 100644
--- a/src/main/java/dev/lockedthread/LockedSpigotConfig.java
+++ b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
@@ -90,6 +90,7 @@ public class LockedSpigotConfig {
     private static boolean server40TpsTimeUpdate;
     private static boolean serverVerbose;
     private static boolean serverPreventBreakingBlocksInUnloadedChunks;
+    private static boolean serverUsePandaWireImplementation;
 
     private static boolean explosionDestroyLava;
     private static boolean explosionSounds;
@@ -176,6 +177,7 @@ public class LockedSpigotConfig {
         server40TpsTimeUpdate = getBoolean("server.40-tps.time-update", false);
         serverVerbose = getBoolean("server.verbose", false);
         serverPreventBreakingBlocksInUnloadedChunks = getBoolean("server.prevent-breaking-blocks-in-unloaded-chunks", true);
+        serverUsePandaWireImplementation = getBoolean("server.use-panda-wire-implementation", true);
 
         explosionSounds = getBoolean("explosions.sound", false);
         explosionParticles = getBoolean("explosions.particles", false);
@@ -507,6 +509,10 @@ public class LockedSpigotConfig {
         return explosionUseObject2ObjectMapForExplosionLocations;
     }
 
+    public static boolean isServerUsePandaWireImplementation() {
+        return serverUsePandaWireImplementation;
+    }
+
     public static void init(File configFile) {
         System.out.println("Initializing static fields for LockedSpigot");
         LockedSpigotConfig.configFile = configFile;
diff --git a/src/main/java/dev/lockedthread/pandawire/PandaRedstoneWire.java b/src/main/java/dev/lockedthread/pandawire/PandaRedstoneWire.java
new file mode 100644
index 000000000..ce1f0ff3b
--- /dev/null
+++ b/src/main/java/dev/lockedthread/pandawire/PandaRedstoneWire.java
@@ -0,0 +1,301 @@
+package dev.lockedthread.pandawire;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+import net.minecraft.server.*;
+import org.apache.commons.lang3.ArrayUtils;
+import org.bukkit.event.block.BlockRedstoneEvent;
+
+import java.util.*;
+import java.util.stream.Collectors;
+
+public class PandaRedstoneWire extends BlockRedstoneWire {
+
+    private static final EnumDirection[] FACINGS_HORIZONTAL = new EnumDirection[]{EnumDirection.WEST, EnumDirection.EAST, EnumDirection.NORTH, EnumDirection.SOUTH};
+    private static final EnumDirection[] FACINGS_VERTICAL = new EnumDirection[]{EnumDirection.DOWN, EnumDirection.UP};
+    private static final EnumDirection[] FACINGS = ArrayUtils.addAll(PandaRedstoneWire.FACINGS_VERTICAL, PandaRedstoneWire.FACINGS_HORIZONTAL);
+    private static BaseBlockPosition[] surroundingBlocksOffset;
+
+    static {
+        Set<BaseBlockPosition> set = Arrays.stream(PandaRedstoneWire.FACINGS).map(EnumDirection::getM).collect(Collectors.toCollection(Sets::newLinkedHashSet));
+        for (EnumDirection facing2 : PandaRedstoneWire.FACINGS) {
+            BaseBlockPosition v1 = facing2.getM();
+            for (EnumDirection facing3 : PandaRedstoneWire.FACINGS) {
+                BaseBlockPosition v2 = facing3.getM();
+                set.add(new BlockPosition(v1.getX() + v2.getX(), v1.getY() + v2.getY(), v1.getZ() + v2.getZ()));
+            }
+        }
+        set.remove(BlockPosition.ZERO);
+        surroundingBlocksOffset = set.toArray(new BaseBlockPosition[0]);
+    }
+
+    private List<BlockPosition> turnOff;
+    private List<BlockPosition> turnOn;
+    private Set<BlockPosition> updatedRedstoneWire;
+    private boolean g;
+
+    public PandaRedstoneWire() {
+        this.turnOff = new ArrayList<>();
+        this.turnOn = new ArrayList<>();
+        this.updatedRedstoneWire = new LinkedHashSet<>();
+        this.g = true;
+        this.c(0.0f);
+        this.a(Block.e);
+        this.c("redstoneDust");
+        this.K();
+    }
+
+    private void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        this.calculateCurrentChanges(world, blockposition);
+        Set<BlockPosition> blocksNeedingUpdate = new LinkedHashSet<>();
+        for (BlockPosition posi : this.updatedRedstoneWire) {
+            this.addBlocksNeedingUpdate(world, posi, blocksNeedingUpdate);
+        }
+        Iterator<BlockPosition> it = new LinkedList<>(this.updatedRedstoneWire).descendingIterator();
+        while (it.hasNext()) {
+            this.addAllSurroundingBlocks(it.next(), blocksNeedingUpdate);
+        }
+        blocksNeedingUpdate.removeAll(this.updatedRedstoneWire);
+        this.updatedRedstoneWire.clear();
+        for (BlockPosition posi2 : blocksNeedingUpdate) {
+            world.d(posi2, this);
+        }
+    }
+
+    private void calculateCurrentChanges(World world, BlockPosition blockposition) {
+        if (world.getType(blockposition).getBlock() == this) {
+            this.turnOff.add(blockposition);
+        } else {
+            this.checkSurroundingWires(world, blockposition);
+        }
+        while (!this.turnOff.isEmpty()) {
+            BlockPosition pos = this.turnOff.remove(0);
+            IBlockData state = world.getType(pos);
+            int oldPower = state.get(PandaRedstoneWire.POWER);
+            this.g = false;
+            int blockPower = world.A(pos);
+            this.g = true;
+            int wirePower = this.getSurroundingWirePower(world, pos);
+            --wirePower;
+            int newPower = Math.max(blockPower, wirePower);
+            if (newPower < oldPower) {
+                if (blockPower > 0 && !this.turnOn.contains(pos)) {
+                    this.turnOn.add(pos);
+                }
+                this.setWireState(world, pos, state, 0);
+            } else if (newPower > oldPower) {
+                this.setWireState(world, pos, state, newPower);
+            }
+            this.checkSurroundingWires(world, pos);
+        }
+        while (!this.turnOn.isEmpty()) {
+            BlockPosition pos = this.turnOn.remove(0);
+            IBlockData state = world.getType(pos);
+            int oldPower = state.get(PandaRedstoneWire.POWER);
+            this.g = false;
+            int blockPower = world.A(pos);
+            this.g = true;
+            int wirePower = this.getSurroundingWirePower(world, pos);
+            --wirePower;
+            int newPower = Math.max(blockPower, wirePower);
+            if (oldPower != newPower) {
+                BlockRedstoneEvent event = new BlockRedstoneEvent(world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), oldPower, newPower);
+                world.getServer().getPluginManager().callEvent(event);
+                newPower = event.getNewCurrent();
+            }
+            if (newPower > oldPower) {
+                this.setWireState(world, pos, state, newPower);
+            }
+            this.checkSurroundingWires(world, pos);
+        }
+        this.turnOff.clear();
+        this.turnOn.clear();
+    }
+
+    private void addWireToList(World worldIn, BlockPosition pos, int otherPower) {
+        IBlockData state = worldIn.getType(pos);
+        if (state.getBlock() == this) {
+            int power = state.get(PandaRedstoneWire.POWER);
+            if (power < otherPower - 1 && !this.turnOn.contains(pos)) {
+                this.turnOn.add(pos);
+            }
+            if (power > otherPower && !this.turnOff.contains(pos)) {
+                this.turnOff.add(pos);
+            }
+        }
+    }
+
+    private void checkSurroundingWires(World worldIn, BlockPosition pos) {
+        IBlockData state = worldIn.getType(pos);
+        int ownPower = 0;
+        if (state.getBlock() == this) {
+            ownPower = state.get(PandaRedstoneWire.POWER);
+        }
+        for (EnumDirection facing : PandaRedstoneWire.FACINGS_HORIZONTAL) {
+            BlockPosition offsetPos = pos.shift(facing);
+            if (facing.k().c()) {
+                this.addWireToList(worldIn, offsetPos, ownPower);
+            }
+        }
+        for (EnumDirection facingVertical : PandaRedstoneWire.FACINGS_VERTICAL) {
+            BlockPosition offsetPos = pos.shift(facingVertical);
+            boolean solidBlock = worldIn.getType(offsetPos).getBlock().u();
+            for (EnumDirection facingHorizontal : PandaRedstoneWire.FACINGS_HORIZONTAL) {
+                if ((facingVertical == EnumDirection.UP && !solidBlock) || (facingVertical == EnumDirection.DOWN && solidBlock && !worldIn.getType(offsetPos.shift(facingHorizontal)).getBlock().isOccluding())) {
+                    this.addWireToList(worldIn, offsetPos.shift(facingHorizontal), ownPower);
+                }
+            }
+        }
+    }
+
+    private int getSurroundingWirePower(World worldIn, BlockPosition pos) {
+        int wirePower = 0;
+        for (EnumDirection enumfacing : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+            BlockPosition offsetPos = pos.shift(enumfacing);
+            wirePower = this.getPower(worldIn, offsetPos, wirePower);
+            if (worldIn.getType(offsetPos).getBlock().isOccluding() && !worldIn.getType(pos.up()).getBlock().isOccluding()) {
+                wirePower = this.getPower(worldIn, offsetPos.up(), wirePower);
+            } else {
+                if (worldIn.getType(offsetPos).getBlock().isOccluding()) {
+                    continue;
+                }
+                wirePower = this.getPower(worldIn, offsetPos.down(), wirePower);
+            }
+        }
+        return wirePower;
+    }
+
+    private void addBlocksNeedingUpdate(World worldIn, BlockPosition pos, Set<BlockPosition> set) {
+        List<EnumDirection> connectedSides = this.getSidesToPower(worldIn, pos);
+        for (EnumDirection facing : PandaRedstoneWire.FACINGS) {
+            BlockPosition offsetPos = pos.shift(facing);
+            if ((connectedSides.contains(facing.opposite()) || facing == EnumDirection.DOWN || (facing.k().c() && a(worldIn.getType(offsetPos), facing))) && this.canBlockBePoweredFromSide(worldIn.getType(offsetPos), facing, true)) {
+                set.add(offsetPos);
+            }
+        }
+        for (EnumDirection facing : PandaRedstoneWire.FACINGS) {
+            BlockPosition offsetPos = pos.shift(facing);
+            if ((connectedSides.contains(facing.opposite()) || facing == EnumDirection.DOWN) && worldIn.getType(offsetPos).getBlock().isOccluding()) {
+                for (EnumDirection facing2 : PandaRedstoneWire.FACINGS) {
+                    if (this.canBlockBePoweredFromSide(worldIn.getType(offsetPos.shift(facing2)), facing2, false)) {
+                        set.add(offsetPos.shift(facing2));
+                    }
+                }
+            }
+        }
+    }
+
+    private boolean canBlockBePoweredFromSide(IBlockData state, EnumDirection side, boolean isWire) {
+        if (state.getBlock() instanceof BlockPiston && state.get(BlockPiston.FACING) == side.opposite()) {
+            return false;
+        }
+        if (state.getBlock() instanceof BlockDiodeAbstract && state.get(BlockDiodeAbstract.FACING) != side.opposite()) {
+            return isWire && state.getBlock() instanceof BlockRedstoneComparator && state.get(BlockRedstoneComparator.FACING).k() != side.k() && side.k().c();
+        }
+        return !(state.getBlock() instanceof BlockRedstoneTorch) || (!isWire && state.get(BlockRedstoneTorch.FACING) == side);
+    }
+
+    private List<EnumDirection> getSidesToPower(World worldIn, BlockPosition pos) {
+        List<EnumDirection> retval = new ArrayList<>();
+        for (EnumDirection facing : PandaRedstoneWire.FACINGS_HORIZONTAL) {
+            if (this.d(worldIn, pos, facing)) {
+                retval.add(facing);
+            }
+        }
+        if (retval.isEmpty()) {
+            return Lists.newArrayList(PandaRedstoneWire.FACINGS_HORIZONTAL);
+        }
+        boolean northsouth = retval.contains(EnumDirection.NORTH) || retval.contains(EnumDirection.SOUTH);
+        boolean eastwest = retval.contains(EnumDirection.EAST) || retval.contains(EnumDirection.WEST);
+        if (northsouth) {
+            retval.remove(EnumDirection.EAST);
+            retval.remove(EnumDirection.WEST);
+        }
+        if (eastwest) {
+            retval.remove(EnumDirection.NORTH);
+            retval.remove(EnumDirection.SOUTH);
+        }
+        return retval;
+    }
+
+    private void addAllSurroundingBlocks(BlockPosition pos, Set<BlockPosition> set) {
+        for (BaseBlockPosition vect : PandaRedstoneWire.surroundingBlocksOffset) {
+            set.add(pos.a(vect));
+        }
+    }
+
+    private void setWireState(World worldIn, BlockPosition pos, IBlockData state, int power) {
+        state = state.set(PandaRedstoneWire.POWER, power);
+        worldIn.setTypeAndData(pos, state, 2);
+        this.updatedRedstoneWire.add(pos);
+    }
+
+    public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        if (!world.isClientSide) {
+            this.e(world, blockposition, iblockdata);
+            for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.VERTICAL) {
+                world.applyPhysics(blockposition.shift(enumdirection), this);
+            }
+            for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+                this.b(world, blockposition.shift(enumdirection));
+            }
+            for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+                BlockPosition blockposition2 = blockposition.shift(enumdirection);
+                if (world.getType(blockposition2).getBlock().isOccluding()) {
+                    this.b(world, blockposition2.up());
+                } else {
+                    this.b(world, blockposition2.down());
+                }
+            }
+        }
+    }
+
+    public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        super.remove(world, blockposition, iblockdata);
+        if (!world.isClientSide) {
+            for (EnumDirection enumdirection : EnumDirection.values()) {
+                world.applyPhysics(blockposition.shift(enumdirection), this);
+            }
+            this.e(world, blockposition, iblockdata);
+            for (EnumDirection enumdirection2 : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+                this.b(world, blockposition.shift(enumdirection2));
+            }
+            for (EnumDirection enumdirection2 : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+                BlockPosition blockposition2 = blockposition.shift(enumdirection2);
+                if (world.getType(blockposition2).getBlock().isOccluding()) {
+                    this.b(world, blockposition2.up());
+                } else {
+                    this.b(world, blockposition2.down());
+                }
+            }
+        }
+    }
+
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        if (!world.isClientSide) {
+            if (this.canPlace(world, blockposition)) {
+                this.e(world, blockposition, iblockdata);
+            } else {
+                this.b(world, blockposition, iblockdata, 0);
+                world.setAir(blockposition);
+            }
+        }
+    }
+
+    public int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
+        if (!this.g) {
+            return 0;
+        }
+        int i = iblockdata.get(BlockRedstoneWire.POWER);
+        return i == 0 ? 0 : enumdirection == EnumDirection.UP || this.getSidesToPower((World) iblockaccess, blockposition).contains(enumdirection) ? i : 0;
+    }
+
+    private boolean d(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
+        BlockPosition blockposition2 = blockposition.shift(enumdirection);
+        IBlockData iblockdata = iblockaccess.getType(blockposition2);
+        Block block = iblockdata.getBlock();
+        boolean flag = block.isOccluding();
+        boolean flag2 = iblockaccess.getType(blockposition.up()).getBlock().isOccluding();
+        return (!flag2 && flag && e(iblockaccess, blockposition2.up())) || a(iblockdata, enumdirection) || (block == Blocks.POWERED_REPEATER && iblockdata.get((IBlockState) BlockDiodeAbstract.FACING) == enumdirection) || (!flag && e(iblockaccess, blockposition2.down()));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 7c2008cb0..262ec18f7 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import dev.lockedthread.LockedSpigotConfig;
+import dev.lockedthread.pandawire.PandaRedstoneWire;
+
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
@@ -790,7 +793,11 @@ public class Block {
         a(52, "mob_spawner", (new BlockMobSpawner()).c(5.0F).a(Block.j).c("mobSpawner").K());
         a(53, "oak_stairs", (new BlockStairs(block1.getBlockData().set(BlockWood.VARIANT, BlockWood.EnumLogVariant.OAK))).c("stairsWood"));
         a(54, "chest", (new BlockChest(0)).c(2.5F).a(Block.f).c("chest"));
-        a(55, "redstone_wire", (new BlockRedstoneWire()).c(0.0F).a(Block.e).c("redstoneDust").K());
+        if (LockedSpigotConfig.isServerUsePandaWireImplementation()) {
+            a(55, "redstone_wire", new PandaRedstoneWire());
+        } else {
+            a(55, "redstone_wire", (new BlockRedstoneWire()).c(0.0F).a(Block.e).c("redstoneDust").K());
+        }
         a(56, "diamond_ore", (new BlockOre()).c(3.0F).b(5.0F).a(Block.i).c("oreDiamond"));
         a(57, "diamond_block", (new Block(Material.ORE, MaterialMapColor.G)).c(5.0F).b(10.0F).a(Block.j).c("blockDiamond").a(CreativeModeTab.b));
         a(58, "crafting_table", (new BlockWorkbench()).c(2.5F).a(Block.f).c("workbench"));
diff --git a/src/main/java/net/minecraft/server/EnumDirection.java b/src/main/java/net/minecraft/server/EnumDirection.java
new file mode 100644
index 000000000..1c4443311
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumDirection.java
@@ -0,0 +1,258 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by Fernflower decompiler)
+//
+
+package net.minecraft.server;
+
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Maps;
+
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Random;
+
+public enum EnumDirection implements INamable {
+    DOWN(0, 1, -1, "down", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.Y, new BaseBlockPosition(0, -1, 0)),
+    UP(1, 0, -1, "up", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.Y, new BaseBlockPosition(0, 1, 0)),
+    NORTH(2, 3, 2, "north", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.Z, new BaseBlockPosition(0, 0, -1)),
+    SOUTH(3, 2, 0, "south", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.Z, new BaseBlockPosition(0, 0, 1)),
+    WEST(4, 5, 1, "west", EnumDirection.EnumAxisDirection.NEGATIVE, EnumDirection.EnumAxis.X, new BaseBlockPosition(-1, 0, 0)),
+    EAST(5, 4, 3, "east", EnumDirection.EnumAxisDirection.POSITIVE, EnumDirection.EnumAxis.X, new BaseBlockPosition(1, 0, 0));
+
+    private static final EnumDirection[] n = new EnumDirection[6];
+    private static final EnumDirection[] o = new EnumDirection[4];
+    private static final Map<String, EnumDirection> p = Maps.newHashMap();
+
+    static {
+        for (EnumDirection var3 : values()) {
+            n[var3.g] = var3;
+            if (var3.k().c()) {
+                o[var3.i] = var3;
+            }
+            p.put(var3.j().toLowerCase(), var3);
+        }
+    }
+
+    private final int g;
+    private final int h;
+    private final int i;
+    private final String j;
+    private final EnumDirection.EnumAxis k;
+    private final EnumDirection.EnumAxisDirection l;
+    private final BaseBlockPosition m;
+
+    EnumDirection(int var3, int var4, int var5, String var6, EnumDirection.EnumAxisDirection var7, EnumDirection.EnumAxis var8, BaseBlockPosition var9) {
+        this.g = var3;
+        this.i = var5;
+        this.h = var4;
+        this.j = var6;
+        this.k = var8;
+        this.l = var7;
+        this.m = var9;
+    }
+
+    public static EnumDirection fromType1(int var0) {
+        return n[MathHelper.a(var0 % n.length)];
+    }
+
+    public static EnumDirection fromType2(int var0) {
+        return o[MathHelper.a(var0 % o.length)];
+    }
+
+    public static EnumDirection fromAngle(double var0) {
+        return fromType2(MathHelper.floor(var0 / 90.0D + 0.5D) & 3);
+    }
+
+    public static EnumDirection a(Random var0) {
+        return values()[var0.nextInt(values().length)];
+    }
+
+    public static EnumDirection a(EnumDirection.EnumAxisDirection var0, EnumDirection.EnumAxis var1) {
+        for (EnumDirection var5 : values()) {
+            if (var5.c() == var0 && var5.k() == var1) {
+                return var5;
+            }
+        }
+
+        throw new IllegalArgumentException("No such direction: " + var0 + " " + var1);
+    }
+
+    public BaseBlockPosition getM() {
+        return m;
+    }
+
+    public int a() {
+        return this.g;
+    }
+
+    public int b() {
+        return this.i;
+    }
+
+    public EnumDirection.EnumAxisDirection c() {
+        return this.l;
+    }
+
+    public EnumDirection opposite() {
+        return fromType1(this.h);
+    }
+
+    public EnumDirection e() {
+        switch (this) {
+            case NORTH:
+                return EAST;
+            case EAST:
+                return SOUTH;
+            case SOUTH:
+                return WEST;
+            case WEST:
+                return NORTH;
+            default:
+                throw new IllegalStateException("Unable to get Y-rotated facing of " + this);
+        }
+    }
+
+    public EnumDirection f() {
+        switch (this) {
+            case NORTH:
+                return WEST;
+            case EAST:
+                return NORTH;
+            case SOUTH:
+                return EAST;
+            case WEST:
+                return SOUTH;
+            default:
+                throw new IllegalStateException("Unable to get CCW facing of " + this);
+        }
+    }
+
+    public int getAdjacentX() {
+        return this.k == EnumDirection.EnumAxis.X ? this.l.a() : 0;
+    }
+
+    public int getAdjacentY() {
+        return this.k == EnumDirection.EnumAxis.Y ? this.l.a() : 0;
+    }
+
+    public int getAdjacentZ() {
+        return this.k == EnumDirection.EnumAxis.Z ? this.l.a() : 0;
+    }
+
+    public String j() {
+        return this.j;
+    }
+
+    public EnumDirection.EnumAxis k() {
+        return this.k;
+    }
+
+    public String toString() {
+        return this.j;
+    }
+
+    public String getName() {
+        return this.j;
+    }
+
+    public enum EnumDirectionLimit implements Iterable<EnumDirection> {
+        HORIZONTAL,
+        VERTICAL;
+
+        public EnumDirection[] a() {
+            switch (this) {
+                case HORIZONTAL:
+                    return new EnumDirection[]{EnumDirection.NORTH, EnumDirection.EAST, EnumDirection.SOUTH, EnumDirection.WEST};
+                case VERTICAL:
+                    return new EnumDirection[]{EnumDirection.UP, EnumDirection.DOWN};
+                default:
+                    throw new Error("Someone's been tampering with the universe!");
+            }
+        }
+
+        public EnumDirection a(Random var1) {
+            EnumDirection[] var2 = this.a();
+            return var2[var1.nextInt(var2.length)];
+        }
+
+        public boolean a(EnumDirection var1) {
+            return var1 != null && var1.k().d() == this;
+        }
+
+        public Iterator<EnumDirection> iterator() {
+            return Iterators.forArray(this.a());
+        }
+    }
+
+    public enum EnumAxisDirection {
+        POSITIVE(1, "Towards positive"),
+        NEGATIVE(-1, "Towards negative");
+
+        private final int c;
+        private final String d;
+
+        private EnumAxisDirection(int var3, String var4) {
+            this.c = var3;
+            this.d = var4;
+        }
+
+        public int a() {
+            return this.c;
+        }
+
+        public String toString() {
+            return this.d;
+        }
+    }
+
+    public enum EnumAxis implements INamable {
+        X("x", EnumDirection.EnumDirectionLimit.HORIZONTAL),
+        Y("y", EnumDirection.EnumDirectionLimit.VERTICAL),
+        Z("z", EnumDirection.EnumDirectionLimit.HORIZONTAL);
+
+        private static final Map<String, EnumDirection.EnumAxis> d = Maps.newHashMap();
+
+        static {
+            for (EnumAxis var3 : values()) {
+                d.put(var3.a().toLowerCase(), var3);
+            }
+        }
+
+        private final String e;
+        private final EnumDirection.EnumDirectionLimit f;
+
+        EnumAxis(String var3, EnumDirection.EnumDirectionLimit var4) {
+            this.e = var3;
+            this.f = var4;
+        }
+
+        public String a() {
+            return this.e;
+        }
+
+        public boolean b() {
+            return this.f == EnumDirection.EnumDirectionLimit.VERTICAL;
+        }
+
+        public boolean c() {
+            return this.f == EnumDirection.EnumDirectionLimit.HORIZONTAL;
+        }
+
+        public String toString() {
+            return this.e;
+        }
+
+        public boolean a(EnumDirection var1) {
+            return var1 != null && var1.k() == this;
+        }
+
+        public EnumDirection.EnumDirectionLimit d() {
+            return this.f;
+        }
+
+        public String getName() {
+            return this.e;
+        }
+    }
+}
-- 
2.21.0.windows.1

