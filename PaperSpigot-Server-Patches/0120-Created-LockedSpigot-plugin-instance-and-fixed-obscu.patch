From 72b0dba0ad343cd431c58e4483cd4b7f5a0774e0 Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Mon, 13 May 2019 14:57:07 -0400
Subject: [PATCH] Created LockedSpigot plugin instance and fixed obscurities


diff --git a/src/main/java/dev/lockedthread/LockedSpigotConfig.java b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
index 1074648f6..f9eb0622c 100644
--- a/src/main/java/dev/lockedthread/LockedSpigotConfig.java
+++ b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
@@ -4,6 +4,8 @@ import com.google.common.base.Throwables;
 import dev.lockedthread.commands.CommandFPS;
 import dev.lockedthread.commands.CommandTest;
 import dev.lockedthread.locations.RenderedLocation;
+import dev.lockedthread.menu.MenuListener;
+import dev.lockedthread.plugin.LockedSpigot;
 import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang3.tuple.Pair;
 import org.bukkit.Bukkit;
@@ -20,9 +22,9 @@ import java.util.logging.Level;
 
 public class LockedSpigotConfig {
 
-    private static File CONFIG_FILE;
+    public static File configFile;
     /*========================================================================*/
-    private static YamlConfiguration config;
+    public static YamlConfiguration config;
     /*========================================================================*/
 
     private static boolean ironGolemCancelFallDamage;
@@ -106,6 +108,7 @@ public class LockedSpigotConfig {
     private static boolean signPatchDupe;
     private static int signMaxLength;
     private static boolean signKeepInvalidUnicode;
+    private static LockedSpigot lockedSpigot;
 
     private static void load() {
         ironGolemCancelFallDamage = getBoolean("irongolem.cancel-falldamage", true);
@@ -204,10 +207,20 @@ public class LockedSpigotConfig {
         System.out.println("Created " + count + " RenderedLocations");
 
         try {
-            config.save(CONFIG_FILE);
+            config.save(configFile);
         } catch (IOException e) {
             e.printStackTrace();
         }
+        loadLockedSpigot();
+        registerListeners();
+    }
+
+    private static void loadLockedSpigot() {
+        lockedSpigot = new LockedSpigot();
+    }
+
+    private static void registerListeners() {
+        MinecraftServer.getServer().server.getPluginManager().registerEvents(new MenuListener(), lockedSpigot);
     }
 
     public static void registerCommands() {
@@ -485,11 +498,11 @@ public class LockedSpigotConfig {
 
     public static void init(File configFile) {
         System.out.println("Initializing static fields for LockedSpigot");
-        CONFIG_FILE = configFile;
+        LockedSpigotConfig.configFile = configFile;
         config = new YamlConfiguration();
         try {
             System.out.println("Loading LockedSpigot config from " + configFile.getName());
-            config.load(CONFIG_FILE);
+            config.load(LockedSpigotConfig.configFile);
         } catch (IOException ignored) {
         } catch (InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Could not load locked.yml, please correct your syntax errors", ex);
diff --git a/src/main/java/dev/lockedthread/commands/CommandFPS.java b/src/main/java/dev/lockedthread/commands/CommandFPS.java
index 70aa04d2c..06f7efd17 100644
--- a/src/main/java/dev/lockedthread/commands/CommandFPS.java
+++ b/src/main/java/dev/lockedthread/commands/CommandFPS.java
@@ -48,7 +48,7 @@ public class CommandFPS extends Command {
                 .build())
                 .setInventoryClickEventConsumer(event -> {
                     player.setSandToggle(false);
-                    event.getWhoClicked().closeInventory();
+                    event.setCancelled(true);
                 }) : MenuItem.of(ItemStackBuilder.of(LockedSpigotConfig.getFpsMenuFallingBlockMaterial())
                 .setDisplayName(LockedSpigotConfig.getFpsMenuFallingBlockName())
                 .setLore(LockedSpigotConfig.getFpsMenuFallingBlockLore().stream().map(s -> s.replace("{mode}", "&c&lDISABLE")).collect(Collectors.toList()))
@@ -57,7 +57,7 @@ public class CommandFPS extends Command {
                 .build())
                 .setInventoryClickEventConsumer(event -> {
                     player.setSandToggle(true);
-                    event.getWhoClicked().closeInventory();
+                    event.setCancelled(true);
                 });
     }
 
diff --git a/src/main/java/dev/lockedthread/plugin/LockedSpigot.java b/src/main/java/dev/lockedthread/plugin/LockedSpigot.java
new file mode 100644
index 000000000..9a4c2d48e
--- /dev/null
+++ b/src/main/java/dev/lockedthread/plugin/LockedSpigot.java
@@ -0,0 +1,137 @@
+package dev.lockedthread.plugin;
+
+import com.avaje.ebean.EbeanServer;
+import dev.lockedthread.LockedSpigotConfig;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.PluginLoader;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List;
+import java.util.logging.Logger;
+
+public class LockedSpigot implements Plugin {
+
+    @Override
+    public File getDataFolder() {
+        return new File(Bukkit.getWorldContainer(), "plugins");
+    }
+
+    @Override
+    public PluginDescriptionFile getDescription() {
+        return new PluginDescriptionFile("LockedSpigot", "1.0", "dev.lockedthread.plugin.LockedSpigot");
+    }
+
+    @Override
+    public FileConfiguration getConfig() {
+        return LockedSpigotConfig.config;
+    }
+
+    @Override
+    public InputStream getResource(String filename) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public void saveConfig() {
+        try {
+            LockedSpigotConfig.config.save(LockedSpigotConfig.configFile);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void saveDefaultConfig() {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public void saveResource(String resourcePath, boolean replace) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public void reloadConfig() {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public PluginLoader getPluginLoader() {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public Server getServer() {
+        return MinecraftServer.getServer().server;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+
+    @Override
+    public void onDisable() {
+        System.out.println("Disabling LockedSpigot plugin instance");
+    }
+
+    @Override
+    public void onLoad() {
+        System.out.println("Loading LockedSpigot plugin instance");
+    }
+
+    @Override
+    public void onEnable() {
+        System.out.println("Enabling LockedSpigot plugin instance");
+    }
+
+    @Override
+    public boolean isNaggable() {
+        return false;
+    }
+
+    @Override
+    public void setNaggable(boolean canNag) {
+
+    }
+
+    @Override
+    public EbeanServer getDatabase() {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public Logger getLogger() {
+        return Bukkit.getLogger();
+    }
+
+    @Override
+    public String getName() {
+        return "LockedSpigotPluginInstance";
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+}
diff --git a/src/main/java/dev/lockedthread/regions/LargeRegion.java b/src/main/java/dev/lockedthread/regions/LargeRegion.java
index 4f3c9062a..0fc2034e7 100644
--- a/src/main/java/dev/lockedthread/regions/LargeRegion.java
+++ b/src/main/java/dev/lockedthread/regions/LargeRegion.java
@@ -9,7 +9,7 @@ public class LargeRegion implements Region {
     private int z;
     private int sizeX;
     private int sizeZ;
-    private Chunk[][] chunks;
+    private Chunk[][] chunks2d;
 
     public LargeRegion(World world, int x, int cgx, int z, int cgz) {
         this.world = world;
@@ -17,10 +17,10 @@ public class LargeRegion implements Region {
         this.z = z;
         this.sizeX = cgx - x + 1;
         this.sizeZ = cgz - z + 1;
-        this.chunks = new Chunk[this.sizeX][this.sizeZ];
+        this.chunks2d = new Chunk[this.sizeX][this.sizeZ];
         for (int chunkX = 0; chunkX < this.sizeX; ++chunkX) {
             for (int chunkZ = 0; chunkZ < this.sizeZ; ++chunkZ) {
-                this.chunks[chunkX][chunkZ] = world.getChunkAt(chunkX + x, chunkZ + z);
+                this.chunks2d[chunkX][chunkZ] = world.getChunkAt(chunkX + x, chunkZ + z);
             }
         }
     }
@@ -43,7 +43,7 @@ public class LargeRegion implements Region {
     public IBlockData getIBlockDataAt(int x, int y, int z) {
         int cx = (x >> 4) - this.x;
         int cz = (z >> 4) - this.z;
-        ChunkSection[] sections = cx < 0 || cx >= this.sizeX || cz < 0 || cz >= this.sizeZ ? this.world.getChunkAt(x >> 4, z >> 4).getSections() : this.chunks[(x >> 4) - this.x][(z >> 4) - this.z].getSections();
+        ChunkSection[] sections = cx < 0 || cx >= this.sizeX || cz < 0 || cz >= this.sizeZ ? this.world.getChunkAt(x >> 4, z >> 4).getSections() : this.chunks2d[(x >> 4) - this.x][(z >> 4) - this.z].getSections();
         if (y >= 0 && y >> 4 < sections.length) {
             ChunkSection chunksection = sections[y >> 4];
             if (chunksection != null) {
-- 
2.21.0.windows.1

