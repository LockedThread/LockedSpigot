From eea52eb3440e5327c0f67e6b2f35a100dd974f0b Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Sat, 4 May 2019 15:57:16 -0400
Subject: [PATCH] Major code cleanup and first impl of LockedSpigotConfig


diff --git a/src/main/java/dev/lockedthread/LockedSpigotConfig.java b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
new file mode 100644
index 000000000..b5469c45b
--- /dev/null
+++ b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
@@ -0,0 +1,98 @@
+package dev.lockedthread;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.logging.Level;
+
+public class LockedSpigotConfig {
+
+    private static File CONFIG_FILE;
+    /*========================================================================*/
+    static YamlConfiguration config;
+    static int version;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            System.out.println("Loading LockedSpigot config from " + configFile.getName());
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load locked.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().copyDefaults(true);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+        readConfig(LockedSpigotConfig.class, null);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        config.addDefault(path, def);
+        return config.getFloat(path, config.getFloat(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index a685e0812..eaef5eaa4 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -85,6 +85,6 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
 
     // Paperspigot - Signature change, Object -> BaseBlockPosition
     public int compareTo(BaseBlockPosition object) {
-        return this.g((BaseBlockPosition) object);
+        return this.g(object);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index 28da1365a..1845ee0d5 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -159,7 +159,7 @@ public abstract class BiomeBase {
     }
 
     public WorldGenTreeAbstract a(Random random) {
-        return (WorldGenTreeAbstract) (random.nextInt(10) == 0 ? this.aB : this.aA);
+        return random.nextInt(10) == 0 ? this.aB : this.aA;
     }
 
     public WorldGenerator b(Random random) {
@@ -296,7 +296,7 @@ public abstract class BiomeBase {
                         }
 
                         if (l1 < k && (iblockdata == null || iblockdata.getBlock().getMaterial() == Material.AIR)) {
-                            if (this.a((BlockPosition) blockposition_mutableblockposition.c(i, l1, j)) < 0.15F) {
+                            if (this.a(blockposition_mutableblockposition.c(i, l1, j)) < 0.15F) {
                                 iblockdata = Blocks.ICE.getBlockData();
                             } else {
                                 iblockdata = Blocks.WATER.getBlockData();
@@ -352,7 +352,7 @@ public abstract class BiomeBase {
     }
 
     public static BiomeBase getBiome(int i) {
-        return getBiome(i, (BiomeBase) null);
+        return getBiome(i, null);
     }
 
     public static BiomeBase getBiome(int i, BiomeBase biomebase) {
@@ -391,12 +391,10 @@ public abstract class BiomeBase {
         BiomeBase[] abiomebase = BiomeBase.biomes;
         int i = abiomebase.length;
 
-        for (int j = 0; j < i; ++j) {
-            BiomeBase biomebase = abiomebase[j];
-
+        for (BiomeBase biomebase : abiomebase) {
             if (biomebase != null) {
                 if (BiomeBase.o.containsKey(biomebase.ah)) {
-                    throw new Error("Biome \"" + biomebase.ah + "\" is defined as both ID " + ((BiomeBase) BiomeBase.o.get(biomebase.ah)).id + " and " + biomebase.id);
+                    throw new Error("Biome \"" + biomebase.ah + "\" is defined as both ID " + BiomeBase.o.get(biomebase.ah).id + " and " + biomebase.id);
                 }
 
                 BiomeBase.o.put(biomebase.ah, biomebase);
@@ -422,26 +420,22 @@ public abstract class BiomeBase {
         static {
             try {
                 SyntheticClass_1.switchMap[EnumCreatureType.MONSTER.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 SyntheticClass_1.switchMap[EnumCreatureType.CREATURE.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 SyntheticClass_1.switchMap[EnumCreatureType.WATER_CREATURE.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 SyntheticClass_1.switchMap[EnumCreatureType.AMBIENT.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
@@ -480,10 +474,10 @@ public abstract class BiomeBase {
         }
     }
 
-    public static enum EnumTemperature {
+    public enum EnumTemperature {
 
         OCEAN, COLD, MEDIUM, WARM;
 
-        private EnumTemperature() {}
+        EnumTemperature() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 281738980..b37592307 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -101,7 +101,7 @@ public class Block {
     }
 
     public static Block getById(int i) {
-        return (Block) Block.REGISTRY.a(i);
+        return Block.REGISTRY.a(i);
     }
 
     public static IBlockData getByCombinedId(int i) {
@@ -119,10 +119,10 @@ public class Block {
         MinecraftKey minecraftkey = new MinecraftKey(s);
 
         if (Block.REGISTRY.d(minecraftkey)) {
-            return (Block) Block.REGISTRY.get(minecraftkey);
+            return Block.REGISTRY.get(minecraftkey);
         } else {
             try {
-                return (Block) Block.REGISTRY.a(Integer.parseInt(s));
+                return Block.REGISTRY.a(Integer.parseInt(s));
             } catch (NumberFormatException numberformatexception) {
                 return null;
             }
@@ -692,7 +692,7 @@ public class Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[0]);
+        return new BlockStateList(this);
     }
 
     public BlockStateList P() {
@@ -965,10 +965,8 @@ public class Block {
 
         while (iterator.hasNext()) {
             block13 = (Block) iterator.next();
-            Iterator iterator1 = block13.P().a().iterator();
 
-            while (iterator1.hasNext()) {
-                IBlockData iblockdata = (IBlockData) iterator1.next();
+            for (IBlockData iblockdata : block13.P().a()) {
                 int i = Block.REGISTRY.b(block13) << 4 | block13.toLegacyData(iblockdata);
                 // TacoSpigot start
 
diff --git a/src/main/java/net/minecraft/server/BlockAnvil.java b/src/main/java/net/minecraft/server/BlockAnvil.java
index 43b1d00dd..d00e44851 100644
--- a/src/main/java/net/minecraft/server/BlockAnvil.java
+++ b/src/main/java/net/minecraft/server/BlockAnvil.java
@@ -4,12 +4,12 @@ import com.google.common.base.Predicate;
 
 public class BlockAnvil extends BlockFalling {
 
-    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", (Predicate) EnumDirection.EnumDirectionLimit.HORIZONTAL);
+    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", EnumDirection.EnumDirectionLimit.HORIZONTAL);
     public static final BlockStateInteger DAMAGE = BlockStateInteger.of("damage", 0, 2);
 
     protected BlockAnvil() {
         super(Material.HEAVY);
-        this.j(this.blockStateList.getBlockData().set(BlockAnvil.FACING, EnumDirection.NORTH).set(BlockAnvil.DAMAGE, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockAnvil.FACING, EnumDirection.NORTH).set(BlockAnvil.DAMAGE, 0));
         this.e(0);
         this.a(CreativeModeTab.c);
     }
@@ -25,7 +25,7 @@ public class BlockAnvil extends BlockFalling {
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
         EnumDirection enumdirection1 = entityliving.getDirection().e();
 
-        return super.getPlacedState(world, blockposition, enumdirection, f, f1, f2, i, entityliving).set(BlockAnvil.FACING, enumdirection1).set(BlockAnvil.DAMAGE, Integer.valueOf(i >> 2));
+        return super.getPlacedState(world, blockposition, enumdirection, f, f1, f2, i, entityliving).set(BlockAnvil.FACING, enumdirection1).set(BlockAnvil.DAMAGE, i >> 2);
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumDirection enumdirection, float f, float f1, float f2) {
@@ -37,11 +37,11 @@ public class BlockAnvil extends BlockFalling {
     }
 
     public int getDropData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockAnvil.DAMAGE)).intValue();
+        return (Integer) iblockdata.get(BlockAnvil.DAMAGE);
     }
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        EnumDirection enumdirection = (EnumDirection) iblockaccess.getType(blockposition).get(BlockAnvil.FACING);
+        EnumDirection enumdirection = iblockaccess.getType(blockposition).get(BlockAnvil.FACING);
 
         if (enumdirection.k() == EnumDirection.EnumAxis.X) {
             this.a(0.0F, 0.0F, 0.125F, 1.0F, 1.0F, 0.875F);
@@ -60,19 +60,19 @@ public class BlockAnvil extends BlockFalling {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockAnvil.FACING, EnumDirection.fromType2(i & 3)).set(BlockAnvil.DAMAGE, Integer.valueOf((i & 15) >> 2));
+        return this.getBlockData().set(BlockAnvil.FACING, EnumDirection.fromType2(i & 3)).set(BlockAnvil.DAMAGE, (i & 15) >> 2);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockAnvil.FACING)).b();
+        int i = b0 | iblockdata.get(BlockAnvil.FACING).b();
 
-        i |= ((Integer) iblockdata.get(BlockAnvil.DAMAGE)).intValue() << 2;
+        i |= (Integer) iblockdata.get(BlockAnvil.DAMAGE) << 2;
         return i;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockAnvil.FACING, BlockAnvil.DAMAGE});
+        return new BlockStateList(this, BlockAnvil.FACING, BlockAnvil.DAMAGE);
     }
 
     public static class TileEntityContainerAnvil implements ITileEntityContainer {
@@ -94,7 +94,7 @@ public class BlockAnvil extends BlockFalling {
         }
 
         public IChatBaseComponent getScoreboardDisplayName() {
-            return new ChatMessage(Blocks.ANVIL.a() + ".name", new Object[0]);
+            return new ChatMessage(Blocks.ANVIL.a() + ".name");
         }
 
         public Container createContainer(PlayerInventory playerinventory, EntityHuman entityhuman) {
diff --git a/src/main/java/net/minecraft/server/BlockBrewingStand.java b/src/main/java/net/minecraft/server/BlockBrewingStand.java
index 0bb2b5021..cefd76015 100644
--- a/src/main/java/net/minecraft/server/BlockBrewingStand.java
+++ b/src/main/java/net/minecraft/server/BlockBrewingStand.java
@@ -9,7 +9,7 @@ public class BlockBrewingStand extends BlockContainer {
 
     public BlockBrewingStand() {
         super(Material.ORE);
-        this.j(this.blockStateList.getBlockData().set(BlockBrewingStand.HAS_BOTTLE[0], Boolean.valueOf(false)).set(BlockBrewingStand.HAS_BOTTLE[1], Boolean.valueOf(false)).set(BlockBrewingStand.HAS_BOTTLE[2], Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockBrewingStand.HAS_BOTTLE[0], Boolean.FALSE).set(BlockBrewingStand.HAS_BOTTLE[1], Boolean.FALSE).set(BlockBrewingStand.HAS_BOTTLE[2], Boolean.FALSE));
     }
 
     public String getName() {
@@ -95,7 +95,7 @@ public class BlockBrewingStand extends BlockContainer {
         IBlockData iblockdata = this.getBlockData();
 
         for (int j = 0; j < 3; ++j) {
-            iblockdata = iblockdata.set(BlockBrewingStand.HAS_BOTTLE[j], Boolean.valueOf((i & 1 << j) > 0));
+            iblockdata = iblockdata.set(BlockBrewingStand.HAS_BOTTLE[j], (i & 1 << j) > 0);
         }
 
         return iblockdata;
@@ -105,7 +105,7 @@ public class BlockBrewingStand extends BlockContainer {
         int i = 0;
 
         for (int j = 0; j < 3; ++j) {
-            if (((Boolean) iblockdata.get(BlockBrewingStand.HAS_BOTTLE[j])).booleanValue()) {
+            if ((Boolean) iblockdata.get(BlockBrewingStand.HAS_BOTTLE[j])) {
                 i |= 1 << j;
             }
         }
@@ -114,6 +114,6 @@ public class BlockBrewingStand extends BlockContainer {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockBrewingStand.HAS_BOTTLE[0], BlockBrewingStand.HAS_BOTTLE[1], BlockBrewingStand.HAS_BOTTLE[2]});
+        return new BlockStateList(this, BlockBrewingStand.HAS_BOTTLE[0], BlockBrewingStand.HAS_BOTTLE[1], BlockBrewingStand.HAS_BOTTLE[2]);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockButtonAbstract.java b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
index 0cccb53cc..a4bbb3cd1 100644
--- a/src/main/java/net/minecraft/server/BlockButtonAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
@@ -16,7 +16,7 @@ public abstract class BlockButtonAbstract extends Block {
 
     protected BlockButtonAbstract(boolean flag) {
         super(Material.ORIENTABLE);
-        this.j(this.blockStateList.getBlockData().set(BlockButtonAbstract.FACING, EnumDirection.NORTH).set(BlockButtonAbstract.POWERED, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockButtonAbstract.FACING, EnumDirection.NORTH).set(BlockButtonAbstract.POWERED, Boolean.FALSE));
         this.a(true);
         this.a(CreativeModeTab.d);
         this.N = flag;
@@ -46,9 +46,7 @@ public abstract class BlockButtonAbstract extends Block {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (a(world, blockposition, enumdirection)) {
                 return true;
             }
@@ -60,15 +58,15 @@ public abstract class BlockButtonAbstract extends Block {
     protected static boolean a(World world, BlockPosition blockposition, EnumDirection enumdirection) {
         BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
-        return enumdirection == EnumDirection.DOWN ? World.a((IBlockAccess) world, blockposition1) : world.getType(blockposition1).getBlock().isOccluding();
+        return enumdirection == EnumDirection.DOWN ? World.a(world, blockposition1) : world.getType(blockposition1).getBlock().isOccluding();
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        return a(world, blockposition, enumdirection.opposite()) ? this.getBlockData().set(BlockButtonAbstract.FACING, enumdirection).set(BlockButtonAbstract.POWERED, Boolean.valueOf(false)) : this.getBlockData().set(BlockButtonAbstract.FACING, EnumDirection.DOWN).set(BlockButtonAbstract.POWERED, Boolean.valueOf(false));
+        return a(world, blockposition, enumdirection.opposite()) ? this.getBlockData().set(BlockButtonAbstract.FACING, enumdirection).set(BlockButtonAbstract.POWERED, Boolean.FALSE) : this.getBlockData().set(BlockButtonAbstract.FACING, EnumDirection.DOWN).set(BlockButtonAbstract.POWERED, Boolean.FALSE);
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        if (this.e(world, blockposition, iblockdata) && !a(world, blockposition, ((EnumDirection) iblockdata.get(BlockButtonAbstract.FACING)).opposite())) {
+        if (this.e(world, blockposition, iblockdata) && !a(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING).opposite())) {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
         }
@@ -90,8 +88,8 @@ public abstract class BlockButtonAbstract extends Block {
     }
 
     private void d(IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING);
-        boolean flag = ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue();
+        EnumDirection enumdirection = iblockdata.get(BlockButtonAbstract.FACING);
+        boolean flag = (Boolean) iblockdata.get(BlockButtonAbstract.POWERED);
         float f = 0.25F;
         float f1 = 0.375F;
         float f2 = (float) (flag ? 1 : 2) / 16.0F;
@@ -126,11 +124,11 @@ public abstract class BlockButtonAbstract extends Block {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)) {
             return true;
         } else {
             // CraftBukkit start
-            boolean powered = ((Boolean) iblockdata.get(POWERED));
+            boolean powered = iblockdata.get(POWERED);
             org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
             int old = (powered) ? 15 : 0;
             int current = (!powered) ? 15 : 0;
@@ -138,33 +136,33 @@ public abstract class BlockButtonAbstract extends Block {
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
             world.getServer().getPluginManager().callEvent(eventRedstone);
 
-            if ((eventRedstone.getNewCurrent() > 0) != (!powered)) {
+            if ((eventRedstone.getNewCurrent() > 0) == (powered)) {
                 return true;
             }
             // CraftBukkit end
-            world.setTypeAndData(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(true)), 3);
+            world.setTypeAndData(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.TRUE), 3);
             world.b(blockposition, blockposition);
             world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "random.click", 0.3F, 0.6F);
-            this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
-            world.a(blockposition, (Block) this, this.a(world));
+            this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
+            world.a(blockposition, this, this.a(world));
             return true;
         }
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
-            this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
+        if ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)) {
+            this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
         }
 
         super.remove(world, blockposition, iblockdata);
     }
 
     public int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue() ? 15 : 0;
+        return (Boolean) iblockdata.get(BlockButtonAbstract.POWERED) ? 15 : 0;
     }
 
     public int b(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return !((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue() ? 0 : (iblockdata.get(BlockButtonAbstract.FACING) == enumdirection ? 15 : 0);
+        return !(Boolean) iblockdata.get(BlockButtonAbstract.POWERED) ? 0 : (iblockdata.get(BlockButtonAbstract.FACING) == enumdirection ? 15 : 0);
     }
 
     public boolean isPowerSource() {
@@ -175,7 +173,7 @@ public abstract class BlockButtonAbstract extends Block {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
-            if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
+            if ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)) {
                 if (this.N) {
                     this.f(world, blockposition, iblockdata);
                 } else {
@@ -189,8 +187,8 @@ public abstract class BlockButtonAbstract extends Block {
                         return;
                     }
                     // CraftBukkit end
-                    world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(false)));
-                    this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
+                    world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.FALSE));
+                    this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
                     world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "random.click", 0.3F, 0.5F);
                     world.b(blockposition, blockposition);
                 }
@@ -210,7 +208,7 @@ public abstract class BlockButtonAbstract extends Block {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
         if (!world.isClientSide) {
             if (this.N) {
-                if (!((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
+                if (!(Boolean) iblockdata.get(BlockButtonAbstract.POWERED)) {
                     this.f(world, blockposition, iblockdata);
                 }
             }
@@ -221,7 +219,7 @@ public abstract class BlockButtonAbstract extends Block {
         this.d(iblockdata);
         List list = world.a(EntityArrow.class, new AxisAlignedBB((double) blockposition.getX() + this.minX, (double) blockposition.getY() + this.minY, (double) blockposition.getZ() + this.minZ, (double) blockposition.getX() + this.maxX, (double) blockposition.getY() + this.maxY, (double) blockposition.getZ() + this.maxZ));
         boolean flag = !list.isEmpty();
-        boolean flag1 = ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue();
+        boolean flag1 = (Boolean) iblockdata.get(BlockButtonAbstract.POWERED);
 
         // CraftBukkit start - Call interact event when arrows turn on wooden buttons
         if (flag1 != flag && flag) {
@@ -258,8 +256,8 @@ public abstract class BlockButtonAbstract extends Block {
                 return;
             }
             // CraftBukkit end
-            world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(true)));
-            this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
+            world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.TRUE));
+            this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
             world.b(blockposition, blockposition);
             world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "random.click", 0.3F, 0.6F);
         }
@@ -275,14 +273,14 @@ public abstract class BlockButtonAbstract extends Block {
                 return;
             }
             // CraftBukkit end
-            world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(false)));
-            this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
+            world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.FALSE));
+            this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
             world.b(blockposition, blockposition);
             world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "random.click", 0.3F, 0.5F);
         }
 
         if (flag) {
-            world.a(blockposition, (Block) this, this.a(world));
+            world.a(blockposition, this, this.a(world));
         }
 
     }
@@ -321,13 +319,13 @@ public abstract class BlockButtonAbstract extends Block {
             enumdirection = EnumDirection.UP;
         }
 
-        return this.getBlockData().set(BlockButtonAbstract.FACING, enumdirection).set(BlockButtonAbstract.POWERED, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockButtonAbstract.FACING, enumdirection).set(BlockButtonAbstract.POWERED, (i & 8) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         int i;
 
-        switch (BlockButtonAbstract.SyntheticClass_1.a[((EnumDirection) iblockdata.get(BlockButtonAbstract.FACING)).ordinal()]) {
+        switch (BlockButtonAbstract.SyntheticClass_1.a[iblockdata.get(BlockButtonAbstract.FACING).ordinal()]) {
         case 1:
             i = 1;
             break;
@@ -353,7 +351,7 @@ public abstract class BlockButtonAbstract extends Block {
             i = 0;
         }
 
-        if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)) {
             i |= 8;
         }
 
@@ -361,7 +359,7 @@ public abstract class BlockButtonAbstract extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockButtonAbstract.FACING, BlockButtonAbstract.POWERED});
+        return new BlockStateList(this, BlockButtonAbstract.FACING, BlockButtonAbstract.POWERED);
     }
 
     static class SyntheticClass_1 {
@@ -371,38 +369,32 @@ public abstract class BlockButtonAbstract extends Block {
         static {
             try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.UP.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockButtonAbstract.SyntheticClass_1.a[EnumDirection.DOWN.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockCactus.java b/src/main/java/net/minecraft/server/BlockCactus.java
index ddc213517..aa9fb34ae 100644
--- a/src/main/java/net/minecraft/server/BlockCactus.java
+++ b/src/main/java/net/minecraft/server/BlockCactus.java
@@ -11,7 +11,7 @@ public class BlockCactus extends Block {
 
     protected BlockCactus() {
         super(Material.CACTUS);
-        this.j(this.blockStateList.getBlockData().set(BlockCactus.AGE, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockCactus.AGE, 0));
         this.a(true);
         this.a(CreativeModeTab.c);
     }
@@ -23,21 +23,20 @@ public class BlockCactus extends Block {
             int i;
 
             for (i = 1; world.getType(blockposition.down(i)).getBlock() == this; ++i) {
-                ;
             }
 
             if (i < world.paperSpigotConfig.cactusMaxHeight) { // PaperSpigot - Configurable max growth height for cactus blocks) {
-                int j = ((Integer) iblockdata.get(BlockCactus.AGE)).intValue();
+                int j = (Integer) iblockdata.get(BlockCactus.AGE);
 
                 if (j >= (byte) range(3, (world.growthOdds / world.spigotConfig.cactusModifier * 15) + 0.5F, 15)) { // Spigot
                     // world.setTypeUpdate(blockposition1, this.getBlockData()); // CraftBukkit
-                    IBlockData iblockdata1 = iblockdata.set(BlockCactus.AGE, Integer.valueOf(0));
+                    IBlockData iblockdata1 = iblockdata.set(BlockCactus.AGE, 0);
 
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), this, 0); // CraftBukkit
                     world.setTypeAndData(blockposition, iblockdata1, 4);
                     this.doPhysics(world, blockposition1, iblockdata1, this);
                 } else {
-                    world.setTypeAndData(blockposition, iblockdata.set(BlockCactus.AGE, Integer.valueOf(j + 1)), 4);
+                    world.setTypeAndData(blockposition, iblockdata.set(BlockCactus.AGE, j + 1), 4);
                 }
 
             }
@@ -70,11 +69,8 @@ public class BlockCactus extends Block {
     }
 
     public boolean e(World world, BlockPosition blockposition) {
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             if (world.getType(blockposition.shift(enumdirection)).getBlock().getMaterial().isBuildable()) {
                 return false;
             }
@@ -92,14 +88,14 @@ public class BlockCactus extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockCactus.AGE, Integer.valueOf(i));
+        return this.getBlockData().set(BlockCactus.AGE, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockCactus.AGE)).intValue();
+        return (Integer) iblockdata.get(BlockCactus.AGE);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCactus.AGE});
+        return new BlockStateList(this, BlockCactus.AGE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockCake.java b/src/main/java/net/minecraft/server/BlockCake.java
index 11a7eaf17..b25b8453e 100644
--- a/src/main/java/net/minecraft/server/BlockCake.java
+++ b/src/main/java/net/minecraft/server/BlockCake.java
@@ -8,13 +8,13 @@ public class BlockCake extends Block {
 
     protected BlockCake() {
         super(Material.CAKE);
-        this.j(this.blockStateList.getBlockData().set(BlockCake.BITES, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockCake.BITES, 0));
         this.a(true);
     }
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         float f = 0.0625F;
-        float f1 = (float) (1 + ((Integer) iblockaccess.getType(blockposition).get(BlockCake.BITES)).intValue() * 2) / 16.0F;
+        float f1 = (float) (1 + (Integer) iblockaccess.getType(blockposition).get(BlockCake.BITES) * 2) / 16.0F;
         float f2 = 0.5F;
 
         this.a(f1, 0.0F, f, 1.0F - f, f2, 1.0F - f);
@@ -29,7 +29,7 @@ public class BlockCake extends Block {
 
     public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
         float f = 0.0625F;
-        float f1 = (float) (1 + ((Integer) iblockdata.get(BlockCake.BITES)).intValue() * 2) / 16.0F;
+        float f1 = (float) (1 + (Integer) iblockdata.get(BlockCake.BITES) * 2) / 16.0F;
         float f2 = 0.5F;
 
         return new AxisAlignedBB((double) ((float) blockposition.getX() + f1), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + f), (double) ((float) (blockposition.getX() + 1) - f), (double) ((float) blockposition.getY() + f2), (double) ((float) (blockposition.getZ() + 1) - f));
@@ -67,10 +67,10 @@ public class BlockCake extends Block {
 
             ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutUpdateHealth(((EntityPlayer) entityhuman).getBukkitEntity().getScaledHealth(), entityhuman.getFoodData().foodLevel, entityhuman.getFoodData().saturationLevel));
             // CraftBukkit end
-            int i = ((Integer) iblockdata.get(BlockCake.BITES)).intValue();
+            int i = (Integer) iblockdata.get(BlockCake.BITES);
 
             if (i < 6) {
-                world.setTypeAndData(blockposition, iblockdata.set(BlockCake.BITES, Integer.valueOf(i + 1)), 3);
+                world.setTypeAndData(blockposition, iblockdata.set(BlockCake.BITES, i + 1), 3);
             } else {
                 world.setAir(blockposition);
             }
@@ -102,19 +102,19 @@ public class BlockCake extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockCake.BITES, Integer.valueOf(i));
+        return this.getBlockData().set(BlockCake.BITES, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockCake.BITES)).intValue();
+        return (Integer) iblockdata.get(BlockCake.BITES);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCake.BITES});
+        return new BlockStateList(this, BlockCake.BITES);
     }
 
     public int l(World world, BlockPosition blockposition) {
-        return (7 - ((Integer) world.getType(blockposition).get(BlockCake.BITES)).intValue()) * 2;
+        return (7 - (Integer) world.getType(blockposition).get(BlockCake.BITES)) * 2;
     }
 
     public boolean isComplexRedstone() {
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index eed516e22..169ea92f9 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -5,7 +5,7 @@ import java.util.Iterator;
 
 public class BlockChest extends BlockContainer {
 
-    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", (Predicate) EnumDirection.EnumDirectionLimit.HORIZONTAL);
+    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", EnumDirection.EnumDirectionLimit.HORIZONTAL);
     public final int b;
 
     protected BlockChest(int i) {
@@ -45,10 +45,8 @@ public class BlockChest extends BlockContainer {
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         this.e(world, blockposition, iblockdata);
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
             IBlockData iblockdata1 = world.getType(blockposition1);
 
@@ -114,7 +112,7 @@ public class BlockChest extends BlockContainer {
             IBlockData iblockdata2 = world.getType(blockposition.south());
             IBlockData iblockdata3 = world.getType(blockposition.west());
             IBlockData iblockdata4 = world.getType(blockposition.east());
-            EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockChest.FACING);
+            EnumDirection enumdirection = iblockdata.get(BlockChest.FACING);
             Block block = iblockdata1.getBlock();
             Block block1 = iblockdata2.getBlock();
             Block block2 = iblockdata3.getBlock();
@@ -133,9 +131,9 @@ public class BlockChest extends BlockContainer {
                     EnumDirection enumdirection1;
 
                     if (block2 == this) {
-                        enumdirection1 = (EnumDirection) iblockdata3.get(BlockChest.FACING);
+                        enumdirection1 = iblockdata3.get(BlockChest.FACING);
                     } else {
-                        enumdirection1 = (EnumDirection) iblockdata4.get(BlockChest.FACING);
+                        enumdirection1 = iblockdata4.get(BlockChest.FACING);
                     }
 
                     if (enumdirection1 == EnumDirection.NORTH) {
@@ -162,9 +160,9 @@ public class BlockChest extends BlockContainer {
                 EnumDirection enumdirection2;
 
                 if (block == this) {
-                    enumdirection2 = (EnumDirection) iblockdata1.get(BlockChest.FACING);
+                    enumdirection2 = iblockdata1.get(BlockChest.FACING);
                 } else {
-                    enumdirection2 = (EnumDirection) iblockdata2.get(BlockChest.FACING);
+                    enumdirection2 = iblockdata2.get(BlockChest.FACING);
                 }
 
                 if (enumdirection2 == EnumDirection.WEST) {
@@ -191,10 +189,8 @@ public class BlockChest extends BlockContainer {
 
     public IBlockData f(World world, BlockPosition blockposition, IBlockData iblockdata) {
         EnumDirection enumdirection = null;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection1 = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection1 : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             IBlockData iblockdata1 = world.getType(blockposition.shift(enumdirection1));
 
             if (iblockdata1.getBlock() == this) {
@@ -214,7 +210,7 @@ public class BlockChest extends BlockContainer {
         if (enumdirection != null) {
             return iblockdata.set(BlockChest.FACING, enumdirection.opposite());
         } else {
-            EnumDirection enumdirection2 = (EnumDirection) iblockdata.get(BlockChest.FACING);
+            EnumDirection enumdirection2 = iblockdata.get(BlockChest.FACING);
 
             if (world.getType(blockposition.shift(enumdirection2)).getBlock().o()) {
                 enumdirection2 = enumdirection2.opposite();
@@ -340,15 +336,13 @@ public class BlockChest extends BlockContainer {
         if (!(tileentity instanceof TileEntityChest)) {
             return null;
         } else {
-            Object object = (TileEntityChest) tileentity;
+            Object object = tileentity;
 
             if (this.n(world, blockposition)) {
                 return null;
             } else {
-                Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-                while (iterator.hasNext()) {
-                    EnumDirection enumdirection = (EnumDirection) iterator.next();
+                for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                     BlockPosition blockposition1 = blockposition.shift(enumdirection);
                     Block block = world.getType(blockposition1).getBlock();
 
@@ -437,7 +431,7 @@ public class BlockChest extends BlockContainer {
     }
 
     public int l(World world, BlockPosition blockposition) {
-        return Container.b((IInventory) this.f(world, blockposition));
+        return Container.b(this.f(world, blockposition));
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -451,10 +445,10 @@ public class BlockChest extends BlockContainer {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((EnumDirection) iblockdata.get(BlockChest.FACING)).a();
+        return iblockdata.get(BlockChest.FACING).a();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockChest.FACING});
+        return new BlockStateList(this, BlockChest.FACING);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockCocoa.java b/src/main/java/net/minecraft/server/BlockCocoa.java
index 8eb1bebae..4855b5d55 100644
--- a/src/main/java/net/minecraft/server/BlockCocoa.java
+++ b/src/main/java/net/minecraft/server/BlockCocoa.java
@@ -10,7 +10,7 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
 
     public BlockCocoa() {
         super(Material.PLANT);
-        this.j(this.blockStateList.getBlockData().set(BlockCocoa.FACING, EnumDirection.NORTH).set(BlockCocoa.AGE, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockCocoa.FACING, EnumDirection.NORTH).set(BlockCocoa.AGE, 0));
         this.a(true);
     }
 
@@ -18,11 +18,11 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
         if (!this.e(world, blockposition, iblockdata)) {
             this.f(world, blockposition, iblockdata);
         } else if (world.random.nextInt(5) == 0) {
-            int i = ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue();
+            int i = (Integer) iblockdata.get(BlockCocoa.AGE);
 
             if (i < 2) {
                 // CraftBukkit start
-                IBlockData data = iblockdata.set(AGE, Integer.valueOf(i + 1));
+                IBlockData data = iblockdata.set(AGE, i + 1);
                 CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
                 // CraftBukkit end
             }
@@ -31,7 +31,7 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
     }
 
     public boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        blockposition = blockposition.shift((EnumDirection) iblockdata.get(BlockCocoa.FACING));
+        blockposition = blockposition.shift(iblockdata.get(BlockCocoa.FACING));
         IBlockData iblockdata1 = world.getType(blockposition);
 
         return iblockdata1.getBlock() == Blocks.LOG && iblockdata1.get(BlockWood.VARIANT) == BlockWood.EnumLogVariant.JUNGLE;
@@ -52,8 +52,8 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockCocoa.FACING);
-        int i = ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue();
+        EnumDirection enumdirection = iblockdata.get(BlockCocoa.FACING);
+        int i = (Integer) iblockdata.get(BlockCocoa.AGE);
         int j = 4 + i * 2;
         int k = 5 + i * 2;
         float f = (float) j / 2.0F;
@@ -88,7 +88,7 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
             enumdirection = EnumDirection.NORTH;
         }
 
-        return this.getBlockData().set(BlockCocoa.FACING, enumdirection.opposite()).set(BlockCocoa.AGE, Integer.valueOf(0));
+        return this.getBlockData().set(BlockCocoa.FACING, enumdirection.opposite()).set(BlockCocoa.AGE, 0);
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
@@ -104,7 +104,7 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        int j = ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue();
+        int j = (Integer) iblockdata.get(BlockCocoa.AGE);
         byte b0 = 1;
 
         if (j >= 2) {
@@ -122,7 +122,7 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
     }
 
     public boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
-        return ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue() < 2;
+        return (Integer) iblockdata.get(BlockCocoa.AGE) < 2;
     }
 
     public boolean a(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
@@ -131,25 +131,25 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
 
     public void b(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
         // CraftBukkit start
-        IBlockData data = iblockdata.set(AGE, Integer.valueOf(((Integer) iblockdata.get(AGE)).intValue() + 1));
+        IBlockData data = iblockdata.set(AGE, ((Integer) iblockdata.get(AGE)).intValue() + 1);
         CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
         // CraftBukkit end
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockCocoa.FACING, EnumDirection.fromType2(i)).set(BlockCocoa.AGE, Integer.valueOf((i & 15) >> 2));
+        return this.getBlockData().set(BlockCocoa.FACING, EnumDirection.fromType2(i)).set(BlockCocoa.AGE, (i & 15) >> 2);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockCocoa.FACING)).b();
+        int i = b0 | iblockdata.get(BlockCocoa.FACING).b();
 
-        i |= ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue() << 2;
+        i |= (Integer) iblockdata.get(BlockCocoa.AGE) << 2;
         return i;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCocoa.FACING, BlockCocoa.AGE});
+        return new BlockStateList(this, BlockCocoa.FACING, BlockCocoa.AGE);
     }
 
     static class SyntheticClass_1 {
@@ -159,26 +159,22 @@ public class BlockCocoa extends BlockDirectional implements IBlockFragilePlantEl
         static {
             try {
                 BlockCocoa.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockCocoa.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockCocoa.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockCocoa.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockCommand.java b/src/main/java/net/minecraft/server/BlockCommand.java
index 2630616fd..453f0b20a 100644
--- a/src/main/java/net/minecraft/server/BlockCommand.java
+++ b/src/main/java/net/minecraft/server/BlockCommand.java
@@ -10,7 +10,7 @@ public class BlockCommand extends BlockContainer {
 
     public BlockCommand() {
         super(Material.ORE, MaterialMapColor.q);
-        this.j(this.blockStateList.getBlockData().set(BlockCommand.TRIGGERED, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockCommand.TRIGGERED, Boolean.FALSE));
     }
 
     public TileEntity a(World world, int i) {
@@ -20,7 +20,7 @@ public class BlockCommand extends BlockContainer {
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         if (!world.isClientSide) {
             boolean flag = world.isBlockIndirectlyPowered(blockposition);
-            boolean flag1 = ((Boolean) iblockdata.get(BlockCommand.TRIGGERED)).booleanValue();
+            boolean flag1 = (Boolean) iblockdata.get(BlockCommand.TRIGGERED);
 
             // CraftBukkit start
             org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -32,10 +32,10 @@ public class BlockCommand extends BlockContainer {
             // CraftBukkit end
 
             if (eventRedstone.getNewCurrent() > 0 && !(eventRedstone.getOldCurrent() > 0)) { // CraftBukkit
-                world.setTypeAndData(blockposition, iblockdata.set(BlockCommand.TRIGGERED, Boolean.valueOf(true)), 4);
-                world.a(blockposition, (Block) this, this.a(world));
+                world.setTypeAndData(blockposition, iblockdata.set(BlockCommand.TRIGGERED, Boolean.TRUE), 4);
+                world.a(blockposition, this, this.a(world));
             } else if (!(eventRedstone.getNewCurrent() > 0) && eventRedstone.getOldCurrent() > 0) { // CraftBukkit
-                world.setTypeAndData(blockposition, iblockdata.set(BlockCommand.TRIGGERED, Boolean.valueOf(false)), 4);
+                world.setTypeAndData(blockposition, iblockdata.set(BlockCommand.TRIGGERED, Boolean.FALSE), 4);
             }
         }
 
@@ -97,13 +97,13 @@ public class BlockCommand extends BlockContainer {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockCommand.TRIGGERED, Boolean.valueOf((i & 1) > 0));
+        return this.getBlockData().set(BlockCommand.TRIGGERED, (i & 1) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         int i = 0;
 
-        if (((Boolean) iblockdata.get(BlockCommand.TRIGGERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockCommand.TRIGGERED)) {
             i |= 1;
         }
 
@@ -111,10 +111,10 @@ public class BlockCommand extends BlockContainer {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCommand.TRIGGERED});
+        return new BlockStateList(this, BlockCommand.TRIGGERED);
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        return this.getBlockData().set(BlockCommand.TRIGGERED, Boolean.valueOf(false));
+        return this.getBlockData().set(BlockCommand.TRIGGERED, Boolean.FALSE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
index b91b2200d..71ed11008 100644
--- a/src/main/java/net/minecraft/server/BlockCrops.java
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -9,7 +9,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 7);
 
     protected BlockCrops() {
-        this.j(this.blockStateList.getBlockData().set(BlockCrops.AGE, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockCrops.AGE, 0));
         this.a(true);
         float f = 0.5F;
 
@@ -27,13 +27,13 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         super.b(world, blockposition, iblockdata, random);
         if (world.getLightLevel(blockposition.up()) >= 9) {
-            int i = ((Integer) iblockdata.get(BlockCrops.AGE)).intValue();
+            int i = (Integer) iblockdata.get(BlockCrops.AGE);
 
             if (i < 7) {
-                float f = a((Block) this, world, blockposition);
+                float f = a(this, world, blockposition);
 
                 if (random.nextInt((int) (world.growthOdds / world.spigotConfig.wheatModifier * (25.0F / f)) + 1) == 0) { // Spigot                    // CraftBukkit start
-                    IBlockData data = iblockdata.set(AGE, Integer.valueOf(i + 1));
+                    IBlockData data = iblockdata.set(AGE, i + 1);
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
                     // CraftBukkit end
                 }
@@ -43,14 +43,14 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     }
 
     public void g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        int i = ((Integer) iblockdata.get(BlockCrops.AGE)).intValue() + MathHelper.nextInt(world.random, 2, 5);
+        int i = (Integer) iblockdata.get(BlockCrops.AGE) + MathHelper.nextInt(world.random, 2, 5);
 
         if (i > 7) {
             i = 7;
         }
 
         // CraftBukkit start
-        IBlockData data = iblockdata.set(AGE, Integer.valueOf(i));
+        IBlockData data = iblockdata.set(AGE, i);
         CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
         // CraftBukkit end
     }
@@ -66,7 +66,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
 
                 if (iblockdata.getBlock() == Blocks.FARMLAND) {
                     f1 = 1.0F;
-                    if (((Integer) iblockdata.get(BlockSoil.MOISTURE)).intValue() > 0) {
+                    if ((Integer) iblockdata.get(BlockSoil.MOISTURE) > 0) {
                         f1 = 3.0F;
                     }
                 }
@@ -114,7 +114,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
         super.dropNaturally(world, blockposition, iblockdata, f, 0);
         if (!world.isClientSide) {
-            int j = ((Integer) iblockdata.get(BlockCrops.AGE)).intValue();
+            int j = (Integer) iblockdata.get(BlockCrops.AGE);
 
             if (j >= 7) {
                 int k = 3 + i;
@@ -130,11 +130,11 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     }
 
     public Item getDropType(IBlockData iblockdata, Random random, int i) {
-        return ((Integer) iblockdata.get(BlockCrops.AGE)).intValue() == 7 ? this.n() : this.l();
+        return (Integer) iblockdata.get(BlockCrops.AGE) == 7 ? this.n() : this.l();
     }
 
     public boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
-        return ((Integer) iblockdata.get(BlockCrops.AGE)).intValue() < 7;
+        return (Integer) iblockdata.get(BlockCrops.AGE) < 7;
     }
 
     public boolean a(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
@@ -146,14 +146,14 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockCrops.AGE, Integer.valueOf(i));
+        return this.getBlockData().set(BlockCrops.AGE, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockCrops.AGE)).intValue();
+        return (Integer) iblockdata.get(BlockCrops.AGE);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCrops.AGE});
+        return new BlockStateList(this, BlockCrops.AGE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockDaylightDetector.java b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
index 45df7c9ad..0bb9faf58 100644
--- a/src/main/java/net/minecraft/server/BlockDaylightDetector.java
+++ b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
@@ -10,7 +10,7 @@ public class BlockDaylightDetector extends BlockContainer {
     public BlockDaylightDetector(boolean flag) {
         super(Material.WOOD);
         this.b = flag;
-        this.j(this.blockStateList.getBlockData().set(BlockDaylightDetector.POWER, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockDaylightDetector.POWER, 0));
         this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.375F, 1.0F);
         this.a(CreativeModeTab.d);
         this.c(0.2F);
@@ -23,7 +23,7 @@ public class BlockDaylightDetector extends BlockContainer {
     }
 
     public int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return ((Integer) iblockdata.get(BlockDaylightDetector.POWER)).intValue();
+        return (Integer) iblockdata.get(BlockDaylightDetector.POWER);
     }
 
     public void f(World world, BlockPosition blockposition) {
@@ -40,9 +40,9 @@ public class BlockDaylightDetector extends BlockContainer {
                 i = 15 - i;
             }
 
-            if (((Integer) iblockdata.get(BlockDaylightDetector.POWER)).intValue() != i) {
-                i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), ((Integer) iblockdata.get(POWER)), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
-                world.setTypeAndData(blockposition, iblockdata.set(BlockDaylightDetector.POWER, Integer.valueOf(i)), 3);
+            if ((Integer) iblockdata.get(BlockDaylightDetector.POWER) != i) {
+                i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), iblockdata.get(POWER), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
+                world.setTypeAndData(blockposition, iblockdata.set(BlockDaylightDetector.POWER, i), 3);
             }
 
         }
@@ -93,14 +93,14 @@ public class BlockDaylightDetector extends BlockContainer {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockDaylightDetector.POWER, Integer.valueOf(i));
+        return this.getBlockData().set(BlockDaylightDetector.POWER, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockDaylightDetector.POWER)).intValue();
+        return (Integer) iblockdata.get(BlockDaylightDetector.POWER);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockDaylightDetector.POWER});
+        return new BlockStateList(this, BlockDaylightDetector.POWER);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
index eaf9154c3..e1fc0584c 100644
--- a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
@@ -19,11 +19,11 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return World.a((IBlockAccess) world, blockposition.down()) ? super.canPlace(world, blockposition) : false;
+        return World.a(world, blockposition.down()) ? super.canPlace(world, blockposition) : false;
     }
 
     public boolean e(World world, BlockPosition blockposition) {
-        return World.a((IBlockAccess) world, blockposition.down());
+        return World.a(world, blockposition.down());
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
@@ -86,9 +86,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
 
@@ -99,7 +97,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
         if (!this.b(world, blockposition, iblockdata)) {
             boolean flag = this.e(world, blockposition, iblockdata);
 
-            if ((this.N && !flag || !this.N && flag) && !world.a(blockposition, (Block) this)) {
+            if ((this.N && !flag || !this.N && flag) && !world.a(blockposition, this)) {
                 byte b0 = -1;
 
                 if (this.i(world, blockposition, iblockdata)) {
@@ -123,7 +121,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
     }
 
     protected int f(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockDiodeAbstract.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockDiodeAbstract.FACING);
         BlockPosition blockposition1 = blockposition.shift(enumdirection);
         int i = world.getBlockFacePower(blockposition1, enumdirection);
 
@@ -132,12 +130,12 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
         } else {
             IBlockData iblockdata1 = world.getType(blockposition1);
 
-            return Math.max(i, iblockdata1.getBlock() == Blocks.REDSTONE_WIRE ? ((Integer) iblockdata1.get(BlockRedstoneWire.POWER)).intValue() : 0);
+            return Math.max(i, iblockdata1.getBlock() == Blocks.REDSTONE_WIRE ? (Integer) iblockdata1.get(BlockRedstoneWire.POWER) : 0);
         }
     }
 
     protected int c(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockDiodeAbstract.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockDiodeAbstract.FACING);
         EnumDirection enumdirection1 = enumdirection.e();
         EnumDirection enumdirection2 = enumdirection.f();
 
@@ -148,7 +146,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
         Block block = iblockdata.getBlock();
 
-        return this.c(block) ? (block == Blocks.REDSTONE_WIRE ? ((Integer) iblockdata.get(BlockRedstoneWire.POWER)).intValue() : iblockaccess.getBlockPower(blockposition, enumdirection)) : 0;
+        return this.c(block) ? (block == Blocks.REDSTONE_WIRE ? (Integer) iblockdata.get(BlockRedstoneWire.POWER) : iblockaccess.getBlockPower(blockposition, enumdirection)) : 0;
     }
 
     public boolean isPowerSource() {
@@ -161,7 +159,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
 
     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
         if (this.e(world, blockposition, iblockdata)) {
-            world.a(blockposition, (Block) this, 1);
+            world.a(blockposition, this, 1);
         }
 
     }
@@ -171,11 +169,11 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
     }
 
     protected void h(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockDiodeAbstract.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockDiodeAbstract.FACING);
         BlockPosition blockposition1 = blockposition.shift(enumdirection.opposite());
 
         world.d(blockposition1, this);
-        world.a(blockposition1, (Block) this, enumdirection);
+        world.a(blockposition1, this, enumdirection);
     }
 
     public void postBreak(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -194,9 +192,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
         }
@@ -225,7 +221,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
     }
 
     public boolean i(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = ((EnumDirection) iblockdata.get(BlockDiodeAbstract.FACING)).opposite();
+        EnumDirection enumdirection = iblockdata.get(BlockDiodeAbstract.FACING).opposite();
         BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
         return d(world.getType(blockposition1).getBlock()) ? world.getType(blockposition1).get(BlockDiodeAbstract.FACING) != enumdirection : false;
diff --git a/src/main/java/net/minecraft/server/BlockDispenser.java b/src/main/java/net/minecraft/server/BlockDispenser.java
index ffc3bee66..b0032aaa7 100644
--- a/src/main/java/net/minecraft/server/BlockDispenser.java
+++ b/src/main/java/net/minecraft/server/BlockDispenser.java
@@ -46,7 +46,7 @@ public class BlockDispenser extends BlockContainer {
                 }
             }
 
-            world.setTypeAndData(blockposition, iblockdata.set(BlockDispenser.FACING, enumdirection).set(BlockDispenser.TRIGGERED, Boolean.valueOf(false)), 2);
+            world.setTypeAndData(blockposition, iblockdata.set(BlockDispenser.FACING, enumdirection).set(BlockDispenser.TRIGGERED, Boolean.FALSE), 2);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockDoor.java b/src/main/java/net/minecraft/server/BlockDoor.java
index bbaa2b5a4..85a108d61 100644
--- a/src/main/java/net/minecraft/server/BlockDoor.java
+++ b/src/main/java/net/minecraft/server/BlockDoor.java
@@ -7,7 +7,7 @@ import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class BlockDoor extends Block {
 
-    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", (Predicate) EnumDirection.EnumDirectionLimit.HORIZONTAL);
+    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", EnumDirection.EnumDirectionLimit.HORIZONTAL);
     public static final BlockStateBoolean OPEN = BlockStateBoolean.of("open");
     public static final BlockStateEnum<BlockDoor.EnumDoorHinge> HINGE = BlockStateEnum.of("hinge", BlockDoor.EnumDoorHinge.class);
     public static final BlockStateBoolean POWERED = BlockStateBoolean.of("powered");
@@ -15,7 +15,7 @@ public class BlockDoor extends Block {
 
     protected BlockDoor(Material material) {
         super(material);
-        this.j(this.blockStateList.getBlockData().set(BlockDoor.FACING, EnumDirection.NORTH).set(BlockDoor.OPEN, Boolean.valueOf(false)).set(BlockDoor.HINGE, BlockDoor.EnumDoorHinge.LEFT).set(BlockDoor.POWERED, Boolean.valueOf(false)).set(BlockDoor.HALF, BlockDoor.EnumDoorHalf.LOWER));
+        this.j(this.blockStateList.getBlockData().set(BlockDoor.FACING, EnumDirection.NORTH).set(BlockDoor.OPEN, Boolean.FALSE).set(BlockDoor.HINGE, BlockDoor.EnumDoorHinge.LEFT).set(BlockDoor.POWERED, Boolean.FALSE).set(BlockDoor.HALF, BlockDoor.EnumDoorHalf.LOWER));
     }
 
     public String getName() {
@@ -102,7 +102,7 @@ public class BlockDoor extends Block {
                 iblockdata = iblockdata1.a(BlockDoor.OPEN);
                 world.setTypeAndData(blockposition1, iblockdata, 2);
                 world.b(blockposition1, blockposition);
-                world.a(entityhuman, ((Boolean) iblockdata.get(BlockDoor.OPEN)).booleanValue() ? 1003 : 1006, blockposition, 0);
+                world.a(entityhuman, (Boolean) iblockdata.get(BlockDoor.OPEN) ? 1003 : 1006, blockposition, 0);
                 return true;
             }
         }
@@ -115,10 +115,10 @@ public class BlockDoor extends Block {
             BlockPosition blockposition1 = iblockdata.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER ? blockposition : blockposition.down();
             IBlockData iblockdata1 = blockposition == blockposition1 ? iblockdata : world.getType(blockposition1);
 
-            if (iblockdata1.getBlock() == this && ((Boolean) iblockdata1.get(BlockDoor.OPEN)).booleanValue() != flag) {
-                world.setTypeAndData(blockposition1, iblockdata1.set(BlockDoor.OPEN, Boolean.valueOf(flag)), 2);
+            if (iblockdata1.getBlock() == this && (Boolean) iblockdata1.get(BlockDoor.OPEN) != flag) {
+                world.setTypeAndData(blockposition1, iblockdata1.set(BlockDoor.OPEN, flag), 2);
                 world.b(blockposition1, blockposition);
-                world.a((EntityHuman) null, flag ? 1003 : 1006, blockposition, 0);
+                world.a(null, flag ? 1003 : 1006, blockposition, 0);
             }
 
         }
@@ -144,7 +144,7 @@ public class BlockDoor extends Block {
                 flag = true;
             }
 
-            if (!World.a((IBlockAccess) world, blockposition.down())) {
+            if (!World.a(world, blockposition.down())) {
                 world.setAir(blockposition);
                 flag = true;
                 if (iblockdata2.getBlock() == this) {
@@ -166,18 +166,18 @@ public class BlockDoor extends Block {
                 int power = bukkitBlock.getBlockPower();
                 int powerTop = blockTop.getBlockPower();
                 if (powerTop > power) power = powerTop;
-                int oldPower = (Boolean)iblockdata2.get(POWERED) ? 15 : 0;
+                int oldPower = iblockdata2.get(POWERED) ? 15 : 0;
 
                 if (oldPower == 0 ^ power == 0) {
                     BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, oldPower, power);
                     world.getServer().getPluginManager().callEvent(eventRedstone);
 
                     boolean flag1 = eventRedstone.getNewCurrent() > 0;
-                    world.setTypeAndData(blockposition2, iblockdata2.set(BlockDoor.POWERED, Boolean.valueOf(flag1)), 2);
-                    if (flag1 != ((Boolean) iblockdata.get(BlockDoor.OPEN)).booleanValue()) {
-                        world.setTypeAndData(blockposition, iblockdata.set(BlockDoor.OPEN, Boolean.valueOf(flag1)), 2);
+                    world.setTypeAndData(blockposition2, iblockdata2.set(BlockDoor.POWERED, flag1), 2);
+                    if (flag1 != (Boolean) iblockdata.get(BlockDoor.OPEN)) {
+                        world.setTypeAndData(blockposition, iblockdata.set(BlockDoor.OPEN, flag1), 2);
                         world.b(blockposition, blockposition);
-                        world.a((EntityHuman) null, flag1 ? 1003 : 1006, blockposition, 0);
+                        world.a(null, flag1 ? 1003 : 1006, blockposition, 0);
                     }
                 }
                 // CraftBukkit end
@@ -196,7 +196,7 @@ public class BlockDoor extends Block {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return blockposition.getY() >= 255 ? false : World.a((IBlockAccess) world, blockposition.down()) && super.canPlace(world, blockposition) && super.canPlace(world, blockposition.up());
+        return blockposition.getY() >= 255 ? false : World.a(world, blockposition.down()) && super.canPlace(world, blockposition) && super.canPlace(world, blockposition.up());
     }
 
     public int k() {
@@ -251,7 +251,7 @@ public class BlockDoor extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return (i & 8) > 0 ? this.getBlockData().set(BlockDoor.HALF, BlockDoor.EnumDoorHalf.UPPER).set(BlockDoor.HINGE, (i & 1) > 0 ? BlockDoor.EnumDoorHinge.RIGHT : BlockDoor.EnumDoorHinge.LEFT).set(BlockDoor.POWERED, Boolean.valueOf((i & 2) > 0)) : this.getBlockData().set(BlockDoor.HALF, BlockDoor.EnumDoorHalf.LOWER).set(BlockDoor.FACING, EnumDirection.fromType2(i & 3).f()).set(BlockDoor.OPEN, Boolean.valueOf((i & 4) > 0));
+        return (i & 8) > 0 ? this.getBlockData().set(BlockDoor.HALF, BlockDoor.EnumDoorHalf.UPPER).set(BlockDoor.HINGE, (i & 1) > 0 ? BlockDoor.EnumDoorHinge.RIGHT : BlockDoor.EnumDoorHinge.LEFT).set(BlockDoor.POWERED, (i & 2) > 0) : this.getBlockData().set(BlockDoor.HALF, BlockDoor.EnumDoorHalf.LOWER).set(BlockDoor.FACING, EnumDirection.fromType2(i & 3).f()).set(BlockDoor.OPEN, (i & 4) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
@@ -264,12 +264,12 @@ public class BlockDoor extends Block {
                 i |= 1;
             }
 
-            if (((Boolean) iblockdata.get(BlockDoor.POWERED)).booleanValue()) {
+            if ((Boolean) iblockdata.get(BlockDoor.POWERED)) {
                 i |= 2;
             }
         } else {
-            i = b0 | ((EnumDirection) iblockdata.get(BlockDoor.FACING)).e().b();
-            if (((Boolean) iblockdata.get(BlockDoor.OPEN)).booleanValue()) {
+            i = b0 | iblockdata.get(BlockDoor.FACING).e().b();
+            if ((Boolean) iblockdata.get(BlockDoor.OPEN)) {
                 i |= 4;
             }
         }
@@ -306,14 +306,14 @@ public class BlockDoor extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockDoor.HALF, BlockDoor.FACING, BlockDoor.OPEN, BlockDoor.HINGE, BlockDoor.POWERED});
+        return new BlockStateList(this, BlockDoor.HALF, BlockDoor.FACING, BlockDoor.OPEN, BlockDoor.HINGE, BlockDoor.POWERED);
     }
 
-    public static enum EnumDoorHinge implements INamable {
+    public enum EnumDoorHinge implements INamable {
 
         LEFT, RIGHT;
 
-        private EnumDoorHinge() {}
+        EnumDoorHinge() {}
 
         public String toString() {
             return this.getName();
@@ -324,11 +324,11 @@ public class BlockDoor extends Block {
         }
     }
 
-    public static enum EnumDoorHalf implements INamable {
+    public enum EnumDoorHalf implements INamable {
 
         UPPER, LOWER;
 
-        private EnumDoorHalf() {}
+        EnumDoorHalf() {}
 
         public String toString() {
             return this.getName();
diff --git a/src/main/java/net/minecraft/server/BlockDragonEgg.java b/src/main/java/net/minecraft/server/BlockDragonEgg.java
index 76a627246..dbd104123 100644
--- a/src/main/java/net/minecraft/server/BlockDragonEgg.java
+++ b/src/main/java/net/minecraft/server/BlockDragonEgg.java
@@ -12,11 +12,11 @@ public class BlockDragonEgg extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        world.a(blockposition, (Block) this, this.a(world));
+        world.a(blockposition, this, this.a(world));
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        world.a(blockposition, (Block) this, this.a(world));
+        world.a(blockposition, this, this.a(world));
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -38,7 +38,6 @@ public class BlockDragonEgg extends Block {
                 BlockPosition blockposition1;
 
                 for (blockposition1 = blockposition; BlockFalling.canFall(world, blockposition1) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
-                    ;
                 }
 
                 if (blockposition1.getY() > 0) {
@@ -88,7 +87,7 @@ public class BlockDragonEgg extends Block {
                             double d2 = (double) blockposition1.getY() + (double) (blockposition.getY() - blockposition1.getY()) * d0 + world.random.nextDouble() * 1.0D - 0.5D;
                             double d3 = (double) blockposition1.getZ() + (double) (blockposition.getZ() - blockposition1.getZ()) * d0 + (world.random.nextDouble() - 0.5D) * 1.0D + 0.5D;
 
-                            world.addParticle(EnumParticle.PORTAL, d1, d2, d3, (double) f, (double) f1, (double) f2, new int[0]);
+                            world.addParticle(EnumParticle.PORTAL, d1, d2, d3, (double) f, (double) f1, (double) f2);
                         }
                     } else {
                         world.setTypeAndData(blockposition1, iblockdata, 2);
diff --git a/src/main/java/net/minecraft/server/BlockDropper.java b/src/main/java/net/minecraft/server/BlockDropper.java
index f3e1e7230..875250503 100644
--- a/src/main/java/net/minecraft/server/BlockDropper.java
+++ b/src/main/java/net/minecraft/server/BlockDropper.java
@@ -21,7 +21,7 @@ public class BlockDropper extends BlockDispenser {
 
     public void dispense(World world, BlockPosition blockposition) {
         SourceBlock sourceblock = new SourceBlock(world, blockposition);
-        TileEntityDispenser tileentitydispenser = (TileEntityDispenser) sourceblock.getTileEntity();
+        TileEntityDispenser tileentitydispenser = sourceblock.getTileEntity();
 
         if (tileentitydispenser != null) {
             int i = tileentitydispenser.m();
@@ -32,7 +32,7 @@ public class BlockDropper extends BlockDispenser {
                 ItemStack itemstack = tileentitydispenser.getItem(i);
 
                 if (itemstack != null) {
-                    EnumDirection enumdirection = (EnumDirection) world.getType(blockposition).get(BlockDropper.FACING);
+                    EnumDirection enumdirection = world.getType(blockposition).get(BlockDropper.FACING);
                     BlockPosition blockposition1 = blockposition.shift(enumdirection);
                     IInventory iinventory = TileEntityHopper.b(world, (double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
                     ItemStack itemstack1;
diff --git a/src/main/java/net/minecraft/server/BlockFalling.java b/src/main/java/net/minecraft/server/BlockFalling.java
index 1d952b82a..663da073b 100644
--- a/src/main/java/net/minecraft/server/BlockFalling.java
+++ b/src/main/java/net/minecraft/server/BlockFalling.java
@@ -16,11 +16,11 @@ public class BlockFalling extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        world.a(blockposition, (Block) this, this.a(world));
+        world.a(blockposition, this, this.a(world));
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        world.a(blockposition, (Block) this, this.a(world));
+        world.a(blockposition, this, this.a(world));
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -50,7 +50,6 @@ public class BlockFalling extends Block {
                 BlockPosition blockposition1;
 
                 for (blockposition1 = blockposition.down(); canFall(world, blockposition1) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
-                    ;
                 }
 
                 if (blockposition1.getY() > 0) {
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 76cd51296..4239872ff 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -37,7 +37,7 @@ public class BlockFire extends Block {
                 l = flag ? 1 : 2;
             }
 
-            return iblockdata.set(BlockFire.NORTH, Boolean.valueOf(this.e(iblockaccess, blockposition.north()))).set(BlockFire.EAST, Boolean.valueOf(this.e(iblockaccess, blockposition.east()))).set(BlockFire.SOUTH, Boolean.valueOf(this.e(iblockaccess, blockposition.south()))).set(BlockFire.WEST, Boolean.valueOf(this.e(iblockaccess, blockposition.west()))).set(BlockFire.UPPER, Integer.valueOf(l)).set(BlockFire.FLIP, Boolean.valueOf(flag1)).set(BlockFire.ALT, Boolean.valueOf(flag));
+            return iblockdata.set(BlockFire.NORTH, this.e(iblockaccess, blockposition.north())).set(BlockFire.EAST, this.e(iblockaccess, blockposition.east())).set(BlockFire.SOUTH, this.e(iblockaccess, blockposition.south())).set(BlockFire.WEST, this.e(iblockaccess, blockposition.west())).set(BlockFire.UPPER, l).set(BlockFire.FLIP, flag1).set(BlockFire.ALT, flag);
         } else {
             return this.getBlockData();
         }
@@ -45,7 +45,7 @@ public class BlockFire extends Block {
 
     protected BlockFire() {
         super(Material.FIRE);
-        this.j(this.blockStateList.getBlockData().set(BlockFire.AGE, Integer.valueOf(0)).set(BlockFire.FLIP, Boolean.valueOf(false)).set(BlockFire.ALT, Boolean.valueOf(false)).set(BlockFire.NORTH, Boolean.valueOf(false)).set(BlockFire.EAST, Boolean.valueOf(false)).set(BlockFire.SOUTH, Boolean.valueOf(false)).set(BlockFire.WEST, Boolean.valueOf(false)).set(BlockFire.UPPER, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockFire.AGE, 0).set(BlockFire.FLIP, Boolean.FALSE).set(BlockFire.ALT, Boolean.FALSE).set(BlockFire.NORTH, Boolean.FALSE).set(BlockFire.EAST, Boolean.FALSE).set(BlockFire.SOUTH, Boolean.FALSE).set(BlockFire.WEST, Boolean.FALSE).set(BlockFire.UPPER, 0));
         this.a(true);
     }
 
@@ -88,8 +88,8 @@ public class BlockFire extends Block {
     }
 
     public void a(Block block, int i, int j) {
-        this.flameChances.put(block, Integer.valueOf(i));
-        this.U.put(block, Integer.valueOf(j));
+        this.flameChances.put(block, i);
+        this.U.put(block, j);
     }
 
     public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -128,17 +128,17 @@ public class BlockFire extends Block {
             if (!flag && world.S() && this.e(world, blockposition)) {
                 fireExtinguished(world, blockposition); // CraftBukkit - extinguished by rain
             } else {
-                int i = ((Integer) iblockdata.get(BlockFire.AGE)).intValue();
+                int i = (Integer) iblockdata.get(BlockFire.AGE);
 
                 if (i < 15) {
-                    iblockdata = iblockdata.set(BlockFire.AGE, Integer.valueOf(i + random.nextInt(3) / 2));
+                    iblockdata = iblockdata.set(BlockFire.AGE, i + random.nextInt(3) / 2);
                     world.setTypeAndData(blockposition, iblockdata, 4);
                 }
 
-                world.a(blockposition, (Block) this, this.a(world) + random.nextInt(10));
+                world.a(blockposition, this, this.a(world) + random.nextInt(10));
                 if (!flag) {
                     if (!this.f(world, blockposition)) {
-                        if (!World.a((IBlockAccess) world, blockposition.down()) || i > 3) {
+                        if (!World.a(world, blockposition.down()) || i > 3) {
                             fireExtinguished(world, blockposition); // CraftBukkit
                         }
 
@@ -232,15 +232,15 @@ public class BlockFire extends Block {
     }
 
     private int c(Block block) {
-        Integer integer = (Integer) this.U.get(block);
+        Integer integer = this.U.get(block);
 
-        return integer == null ? 0 : integer.intValue();
+        return integer == null ? 0 : integer;
     }
 
     private int d(Block block) {
-        Integer integer = (Integer) this.flameChances.get(block);
+        Integer integer = this.flameChances.get(block);
 
-        return integer == null ? 0 : integer.intValue();
+        return integer == null ? 0 : integer;
     }
 
     private void a(World world, BlockPosition blockposition, int i, Random random, int j) {
@@ -267,13 +267,13 @@ public class BlockFire extends Block {
                     l = 15;
                 }
 
-                world.setTypeAndData(blockposition, this.getBlockData().set(BlockFire.AGE, Integer.valueOf(l)), 3);
+                world.setTypeAndData(blockposition, this.getBlockData().set(BlockFire.AGE, l), 3);
             } else {
                 fireExtinguished(world, blockposition); // CraftBukkit
             }
 
             if (iblockdata.getBlock() == Blocks.TNT) {
-                Blocks.TNT.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+                Blocks.TNT.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.TRUE));
             }
         }
 
@@ -283,9 +283,7 @@ public class BlockFire extends Block {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (this.e((IBlockAccess) world, blockposition.shift(enumdirection))) {
                 return true;
             }
@@ -302,9 +300,7 @@ public class BlockFire extends Block {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int j = aenumdirection.length;
 
-            for (int k = 0; k < j; ++k) {
-                EnumDirection enumdirection = aenumdirection[k];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 i = Math.max(this.d(world.getType(blockposition.shift(enumdirection)).getBlock()), i);
             }
 
@@ -321,11 +317,11 @@ public class BlockFire extends Block {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return World.a((IBlockAccess) world, blockposition.down()) || this.f(world, blockposition);
+        return World.a(world, blockposition.down()) || this.f(world, blockposition);
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        if (!World.a((IBlockAccess) world, blockposition.down()) && !this.f(world, blockposition)) {
+        if (!World.a(world, blockposition.down()) && !this.f(world, blockposition)) {
             fireExtinguished(world, blockposition); // CraftBukkit - fuel block gone
         }
 
@@ -333,10 +329,10 @@ public class BlockFire extends Block {
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (world.worldProvider.getDimension() > 0 || !Blocks.PORTAL.e(world, blockposition)) {
-            if (!World.a((IBlockAccess) world, blockposition.down()) && !this.f(world, blockposition)) {
+            if (!World.a(world, blockposition.down()) && !this.f(world, blockposition)) {
                 fireExtinguished(world, blockposition); // CraftBukkit - fuel block broke
             } else {
-                world.a(blockposition, (Block) this, this.a(world) + world.random.nextInt(10));
+                world.a(blockposition, this, this.a(world) + world.random.nextInt(10));
             }
         }
     }
@@ -346,15 +342,15 @@ public class BlockFire extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockFire.AGE, Integer.valueOf(i));
+        return this.getBlockData().set(BlockFire.AGE, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockFire.AGE)).intValue();
+        return (Integer) iblockdata.get(BlockFire.AGE);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockFire.AGE, BlockFire.NORTH, BlockFire.EAST, BlockFire.SOUTH, BlockFire.WEST, BlockFire.UPPER, BlockFire.FLIP, BlockFire.ALT});
+        return new BlockStateList(this, BlockFire.AGE, BlockFire.NORTH, BlockFire.EAST, BlockFire.SOUTH, BlockFire.WEST, BlockFire.UPPER, BlockFire.FLIP, BlockFire.ALT);
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/BlockFlowerPot.java b/src/main/java/net/minecraft/server/BlockFlowerPot.java
index ce461387b..9b4156cef 100644
--- a/src/main/java/net/minecraft/server/BlockFlowerPot.java
+++ b/src/main/java/net/minecraft/server/BlockFlowerPot.java
@@ -9,7 +9,7 @@ public class BlockFlowerPot extends BlockContainer {
 
     public BlockFlowerPot() {
         super(Material.ORIENTABLE);
-        this.j(this.blockStateList.getBlockData().set(BlockFlowerPot.CONTENTS, BlockFlowerPot.EnumFlowerPotContents.EMPTY).set(BlockFlowerPot.LEGACY_DATA, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockFlowerPot.CONTENTS, BlockFlowerPot.EnumFlowerPotContents.EMPTY).set(BlockFlowerPot.LEGACY_DATA, 0));
         this.j();
     }
 
@@ -57,7 +57,7 @@ public class BlockFlowerPot extends BlockContainer {
                     world.notify(blockposition);
                     entityhuman.b(StatisticList.T);
                     if (!entityhuman.abilities.canInstantlyBuild && --itemstack.count <= 0) {
-                        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                     }
 
                     return true;
@@ -79,11 +79,11 @@ public class BlockFlowerPot extends BlockContainer {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return super.canPlace(world, blockposition) && World.a((IBlockAccess) world, blockposition.down());
+        return super.canPlace(world, blockposition) && World.a(world, blockposition.down());
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        if (!World.a((IBlockAccess) world, blockposition.down())) {
+        if (!World.a(world, blockposition.down())) {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
         }
@@ -107,7 +107,7 @@ public class BlockFlowerPot extends BlockContainer {
             TileEntityFlowerPot tileentityflowerpot = this.f(world, blockposition);
 
             if (tileentityflowerpot != null) {
-                tileentityflowerpot.a((Item) null, 0);
+                tileentityflowerpot.a(null, 0);
             }
         }
 
@@ -192,11 +192,11 @@ public class BlockFlowerPot extends BlockContainer {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockFlowerPot.CONTENTS, BlockFlowerPot.LEGACY_DATA});
+        return new BlockStateList(this, BlockFlowerPot.CONTENTS, BlockFlowerPot.LEGACY_DATA);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockFlowerPot.LEGACY_DATA)).intValue();
+        return (Integer) iblockdata.get(BlockFlowerPot.LEGACY_DATA);
     }
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
@@ -319,106 +319,91 @@ public class BlockFlowerPot extends BlockContainer {
         static {
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.POPPY.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.BLUE_ORCHID.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.ALLIUM.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.HOUSTONIA.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.RED_TULIP.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.ORANGE_TULIP.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.WHITE_TULIP.ordinal()] = 7;
-            } catch (NoSuchFieldError nosuchfielderror6) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.PINK_TULIP.ordinal()] = 8;
-            } catch (NoSuchFieldError nosuchfielderror7) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.b[BlockFlowers.EnumFlowerVarient.OXEYE_DAISY.ordinal()] = 9;
-            } catch (NoSuchFieldError nosuchfielderror8) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             a = new int[BlockWood.EnumLogVariant.values().length];
 
             try {
                 BlockFlowerPot.SyntheticClass_1.a[BlockWood.EnumLogVariant.OAK.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror9) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.a[BlockWood.EnumLogVariant.SPRUCE.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror10) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.a[BlockWood.EnumLogVariant.BIRCH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror11) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.a[BlockWood.EnumLogVariant.JUNGLE.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror12) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.a[BlockWood.EnumLogVariant.ACACIA.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror13) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockFlowerPot.SyntheticClass_1.a[BlockWood.EnumLogVariant.DARK_OAK.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror14) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
     }
 
-    public static enum EnumFlowerPotContents implements INamable {
+    public enum EnumFlowerPotContents implements INamable {
 
         EMPTY("empty"), POPPY("rose"), BLUE_ORCHID("blue_orchid"), ALLIUM("allium"), HOUSTONIA("houstonia"), RED_TULIP("red_tulip"), ORANGE_TULIP("orange_tulip"), WHITE_TULIP("white_tulip"), PINK_TULIP("pink_tulip"), OXEYE_DAISY("oxeye_daisy"), DANDELION("dandelion"), OAK_SAPLING("oak_sapling"), SPRUCE_SAPLING("spruce_sapling"), BIRCH_SAPLING("birch_sapling"), JUNGLE_SAPLING("jungle_sapling"), ACACIA_SAPLING("acacia_sapling"), DARK_OAK_SAPLING("dark_oak_sapling"), MUSHROOM_RED("mushroom_red"), MUSHROOM_BROWN("mushroom_brown"), DEAD_BUSH("dead_bush"), FERN("fern"), CACTUS("cactus");
 
         private final String w;
 
-        private EnumFlowerPotContents(String s) {
+        EnumFlowerPotContents(String s) {
             this.w = s;
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockFlowing.java b/src/main/java/net/minecraft/server/BlockFlowing.java
index 23130ba96..004448d94 100644
--- a/src/main/java/net/minecraft/server/BlockFlowing.java
+++ b/src/main/java/net/minecraft/server/BlockFlowing.java
@@ -7,6 +7,7 @@ import java.util.Set;
 
 // CraftBukkit start
 import org.bukkit.block.BlockFace;
+import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.event.block.BlockFromToEvent;
 // CraftBukkit end
 
@@ -28,7 +29,7 @@ public class BlockFlowing extends BlockFluids {
         org.bukkit.Server server = world.getServer();
         org.bukkit.block.Block source = bworld == null ? null : bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
         // CraftBukkit end
-        int i = ((Integer) iblockdata.get(BlockFlowing.LEVEL)).intValue();
+        int i = (Integer) iblockdata.get(BlockFlowing.LEVEL);
         byte b0 = 1;
 
         if (this.material == Material.LAVA && !world.worldProvider.n()) {
@@ -69,7 +70,7 @@ public class BlockFlowing extends BlockFluids {
 
                 if (iblockdata1.getBlock().getMaterial().isBuildable()) {
                     i1 = 0;
-                } else if (iblockdata1.getBlock().getMaterial() == this.material && ((Integer) iblockdata1.get(BlockFlowing.LEVEL)).intValue() == 0) {
+                } else if (iblockdata1.getBlock().getMaterial() == this.material && (Integer) iblockdata1.get(BlockFlowing.LEVEL) == 0) {
                     i1 = 0;
                 }
             }
@@ -85,9 +86,9 @@ public class BlockFlowing extends BlockFluids {
                 if (i1 < 0 || canFastDrain(world, blockposition)) { // PaperSpigot - Fast draining
                     world.setAir(blockposition);
                 } else {
-                    iblockdata = iblockdata.set(BlockFlowing.LEVEL, Integer.valueOf(i1));
+                    iblockdata = iblockdata.set(BlockFlowing.LEVEL, i1);
                     world.setTypeAndData(blockposition, iblockdata, 2);
-                    world.a(blockposition, (Block) this, j);
+                    world.a(blockposition, this, j);
                     // PaperSpigot start - Optimize draining
                     world.d(blockposition.west(), this);
                     world.d(blockposition.east(), this);
@@ -137,13 +138,11 @@ public class BlockFlowing extends BlockFluids {
                 return;
             }
 
-            Iterator iterator1 = set.iterator();
-
-            while (iterator1.hasNext()) {
-                EnumDirection enumdirection1 = (EnumDirection) iterator1.next();
+            for (Object value : set) {
+                EnumDirection enumdirection1 = (EnumDirection) value;
 
                 // CraftBukkit start
-                BlockFromToEvent event = new BlockFromToEvent(source, org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumdirection1));
+                BlockFromToEvent event = new BlockFromToEvent(source, CraftBlock.notchToBlockFace(enumdirection1));
                 if (server != null) {
                     server.getPluginManager().callEvent(event);
                 }
@@ -167,23 +166,20 @@ public class BlockFlowing extends BlockFluids {
                 }
             }
 
-            world.setTypeAndData(blockposition, this.getBlockData().set(BlockFlowing.LEVEL, Integer.valueOf(i)), 3);
+            world.setTypeAndData(blockposition, this.getBlockData().set(BlockFlowing.LEVEL, i), 3);
         }
 
     }
 
     private int a(World world, BlockPosition blockposition, int i, EnumDirection enumdirection) {
         int j = 1000;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection1 = (EnumDirection) iterator.next();
 
+        for (EnumDirection enumdirection1 : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             if (enumdirection1 != enumdirection) {
                 BlockPosition blockposition1 = blockposition.shift(enumdirection1);
                 IBlockData iblockdata = world.getType(blockposition1);
 
-                if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getBlock().getMaterial() != this.material || ((Integer) iblockdata.get(BlockFlowing.LEVEL)).intValue() > 0)) {
+                if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getBlock().getMaterial() != this.material || (Integer) iblockdata.get(BlockFlowing.LEVEL) > 0)) {
                     if (!this.g(world, blockposition1.down(), iblockdata)) {
                         return i;
                     }
@@ -205,14 +201,12 @@ public class BlockFlowing extends BlockFluids {
     private Set<EnumDirection> f(World world, BlockPosition blockposition) {
         int i = 1000;
         EnumSet enumset = EnumSet.noneOf(EnumDirection.class);
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
             IBlockData iblockdata = world.getType(blockposition1);
 
-            if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getBlock().getMaterial() != this.material || ((Integer) iblockdata.get(BlockFlowing.LEVEL)).intValue() > 0)) {
+            if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getBlock().getMaterial() != this.material || (Integer) iblockdata.get(BlockFlowing.LEVEL) > 0)) {
                 int j;
 
                 if (this.g(world, blockposition1.down(), world.getType(blockposition1.down()))) {
@@ -267,7 +261,7 @@ public class BlockFlowing extends BlockFluids {
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (!this.e(world, blockposition, iblockdata)) {
-            world.a(blockposition, (Block) this, this.getFlowSpeed(world, blockposition)); // PaperSpigot
+            world.a(blockposition, this, this.getFlowSpeed(world, blockposition)); // PaperSpigot
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index db73f5d9c..38546f263 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -9,7 +9,7 @@ public abstract class BlockFluids extends Block {
 
     protected BlockFluids(Material material) {
         super(material);
-        this.j(this.blockStateList.getBlockData().set(BlockFluids.LEVEL, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockFluids.LEVEL, 0));
         this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
         this.a(true);
     }
@@ -27,7 +27,7 @@ public abstract class BlockFluids extends Block {
     }
 
     protected int e(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return iblockaccess.getType(blockposition).getBlock().getMaterial() == this.material ? ((Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL)).intValue() : -1;
+        return iblockaccess.getType(blockposition).getBlock().getMaterial() == this.material ? (Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL) : -1;
     }
 
     protected int f(IBlockAccess iblockaccess, BlockPosition blockposition) {
@@ -45,7 +45,7 @@ public abstract class BlockFluids extends Block {
     }
 
     public boolean a(IBlockData iblockdata, boolean flag) {
-        return flag && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0;
+        return flag && (Integer) iblockdata.get(BlockFluids.LEVEL) == 0;
     }
 
     public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
@@ -98,7 +98,7 @@ public abstract class BlockFluids extends Block {
             }
         }
 
-        if (((Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL)).intValue() >= 8) {
+        if ((Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL) >= 8) {
             iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
             while (iterator.hasNext()) {
@@ -136,9 +136,7 @@ public abstract class BlockFluids extends Block {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 if (enumdirection != EnumDirection.DOWN && world.getType(blockposition.shift(enumdirection)).getBlock().getMaterial() == Material.WATER) {
                     flag = true;
                     break;
@@ -146,15 +144,15 @@ public abstract class BlockFluids extends Block {
             }
 
             if (flag) {
-                Integer integer = (Integer) iblockdata.get(BlockFluids.LEVEL);
+                Integer integer = iblockdata.get(BlockFluids.LEVEL);
 
-                if (integer.intValue() == 0) {
+                if (integer == 0) {
                     world.setTypeUpdate(blockposition, Blocks.OBSIDIAN.getBlockData());
                     this.fizz(world, blockposition);
                     return true;
                 }
 
-                if (integer.intValue() > 0) { // PaperSpigot
+                if (integer > 0) { // PaperSpigot
                     world.setTypeUpdate(blockposition, Blocks.COBBLESTONE.getBlockData());
                     this.fizz(world, blockposition);
                     return true;
@@ -173,21 +171,21 @@ public abstract class BlockFluids extends Block {
         world.makeSound(d0 + 0.5D, d1 + 0.5D, d2 + 0.5D, "random.fizz", 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
         for (int i = 0; i < 8; ++i) {
-            world.addParticle(EnumParticle.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
+            world.addParticle(EnumParticle.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D);
         }
 
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockFluids.LEVEL, Integer.valueOf(i));
+        return this.getBlockData().set(BlockFluids.LEVEL, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue();
+        return (Integer) iblockdata.get(BlockFluids.LEVEL);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockFluids.LEVEL});
+        return new BlockStateList(this, BlockFluids.LEVEL);
     }
 
     public static BlockFlowing a(Material material) {
diff --git a/src/main/java/net/minecraft/server/BlockGrass.java b/src/main/java/net/minecraft/server/BlockGrass.java
index 557e35799..b23dc816b 100644
--- a/src/main/java/net/minecraft/server/BlockGrass.java
+++ b/src/main/java/net/minecraft/server/BlockGrass.java
@@ -16,7 +16,7 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
 
     protected BlockGrass() {
         super(Material.GRASS);
-        this.j(this.blockStateList.getBlockData().set(BlockGrass.SNOWY, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockGrass.SNOWY, Boolean.FALSE));
         this.a(true);
         this.a(CreativeModeTab.b);
     }
@@ -24,7 +24,7 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
         Block block = iblockaccess.getType(blockposition.up()).getBlock();
 
-        return iblockdata.set(BlockGrass.SNOWY, Boolean.valueOf(block == Blocks.SNOW || block == Blocks.SNOW_LAYER));
+        return iblockdata.set(BlockGrass.SNOWY, block == Blocks.SNOW || block == Blocks.SNOW_LAYER);
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -131,6 +131,6 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockGrass.SNOWY});
+        return new BlockStateList(this, BlockGrass.SNOWY);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockHopper.java b/src/main/java/net/minecraft/server/BlockHopper.java
index 9f9b45db5..65a8841e3 100644
--- a/src/main/java/net/minecraft/server/BlockHopper.java
+++ b/src/main/java/net/minecraft/server/BlockHopper.java
@@ -18,7 +18,7 @@ public class BlockHopper extends BlockContainer {
 
     public BlockHopper() {
         super(Material.ORE, MaterialMapColor.m);
-        this.j(this.blockStateList.getBlockData().set(BlockHopper.FACING, EnumDirection.DOWN).set(BlockHopper.ENABLED, Boolean.valueOf(true)));
+        this.j(this.blockStateList.getBlockData().set(BlockHopper.FACING, EnumDirection.DOWN).set(BlockHopper.ENABLED, Boolean.TRUE));
         this.a(CreativeModeTab.d);
         this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
     }
@@ -50,7 +50,7 @@ public class BlockHopper extends BlockContainer {
             enumdirection1 = EnumDirection.DOWN;
         }
 
-        return this.getBlockData().set(BlockHopper.FACING, enumdirection1).set(BlockHopper.ENABLED, Boolean.valueOf(true));
+        return this.getBlockData().set(BlockHopper.FACING, enumdirection1).set(BlockHopper.ENABLED, Boolean.TRUE);
     }
 
     public TileEntity a(World world, int i) {
@@ -95,8 +95,8 @@ public class BlockHopper extends BlockContainer {
     private void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
         boolean flag = !world.isBlockIndirectlyPowered(blockposition);
 
-        if (flag != ((Boolean) iblockdata.get(BlockHopper.ENABLED)).booleanValue()) {
-            world.setTypeAndData(blockposition, iblockdata.set(BlockHopper.ENABLED, Boolean.valueOf(flag)), 4);
+        if (flag != (Boolean) iblockdata.get(BlockHopper.ENABLED)) {
+            world.setTypeAndData(blockposition, iblockdata.set(BlockHopper.ENABLED, flag), 4);
         }
 
     }
@@ -141,14 +141,14 @@ public class BlockHopper extends BlockContainer {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockHopper.FACING, b(i)).set(BlockHopper.ENABLED, Boolean.valueOf(f(i)));
+        return this.getBlockData().set(BlockHopper.FACING, b(i)).set(BlockHopper.ENABLED, f(i));
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockHopper.FACING)).a();
+        int i = b0 | iblockdata.get(BlockHopper.FACING).a();
 
-        if (!((Boolean) iblockdata.get(BlockHopper.ENABLED)).booleanValue()) {
+        if (!(Boolean) iblockdata.get(BlockHopper.ENABLED)) {
             i |= 8;
         }
 
@@ -156,6 +156,6 @@ public class BlockHopper extends BlockContainer {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockHopper.FACING, BlockHopper.ENABLED});
+        return new BlockStateList(this, BlockHopper.FACING, BlockHopper.ENABLED);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockJukeBox.java b/src/main/java/net/minecraft/server/BlockJukeBox.java
index b1bfb7ebc..c46f03148 100644
--- a/src/main/java/net/minecraft/server/BlockJukeBox.java
+++ b/src/main/java/net/minecraft/server/BlockJukeBox.java
@@ -6,14 +6,14 @@ public class BlockJukeBox extends BlockContainer {
 
     protected BlockJukeBox() {
         super(Material.WOOD, MaterialMapColor.l);
-        this.j(this.blockStateList.getBlockData().set(BlockJukeBox.HAS_RECORD, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockJukeBox.HAS_RECORD, Boolean.FALSE));
         this.a(CreativeModeTab.c);
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)) {
             this.dropRecord(world, blockposition, iblockdata);
-            iblockdata = iblockdata.set(BlockJukeBox.HAS_RECORD, Boolean.valueOf(false));
+            iblockdata = iblockdata.set(BlockJukeBox.HAS_RECORD, Boolean.FALSE);
             world.setTypeAndData(blockposition, iblockdata, 2);
             return true;
         } else {
@@ -27,7 +27,7 @@ public class BlockJukeBox extends BlockContainer {
 
             if (tileentity instanceof BlockJukeBox.TileEntityRecordPlayer) {
                 ((BlockJukeBox.TileEntityRecordPlayer) tileentity).setRecord(new ItemStack(itemstack.getItem(), 1, itemstack.getData()));
-                world.setTypeAndData(blockposition, iblockdata.set(BlockJukeBox.HAS_RECORD, Boolean.valueOf(true)), 2);
+                world.setTypeAndData(blockposition, iblockdata.set(BlockJukeBox.HAS_RECORD, Boolean.TRUE), 2);
             }
         }
     }
@@ -43,7 +43,7 @@ public class BlockJukeBox extends BlockContainer {
                 if (itemstack != null) {
                     world.triggerEffect(1005, blockposition, 0);
                     world.a(blockposition, (String) null);
-                    blockjukebox_tileentityrecordplayer.setRecord((ItemStack) null);
+                    blockjukebox_tileentityrecordplayer.setRecord(null);
                     float f = 0.7F;
                     double d0 = (double) (world.random.nextFloat() * f) + (double) (1.0F - f) * 0.5D;
                     double d1 = (double) (world.random.nextFloat() * f) + (double) (1.0F - f) * 0.2D + 0.6D;
@@ -96,15 +96,15 @@ public class BlockJukeBox extends BlockContainer {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockJukeBox.HAS_RECORD, Boolean.valueOf(i > 0));
+        return this.getBlockData().set(BlockJukeBox.HAS_RECORD, i > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue() ? 1 : 0;
+        return (Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD) ? 1 : 0;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockJukeBox.HAS_RECORD});
+        return new BlockStateList(this, BlockJukeBox.HAS_RECORD);
     }
 
     public static class TileEntityRecordPlayer extends TileEntity {
diff --git a/src/main/java/net/minecraft/server/BlockLeaves.java b/src/main/java/net/minecraft/server/BlockLeaves.java
index 7bf9018ba..3eea05828 100644
--- a/src/main/java/net/minecraft/server/BlockLeaves.java
+++ b/src/main/java/net/minecraft/server/BlockLeaves.java
@@ -33,8 +33,8 @@ public abstract class BlockLeaves extends BlockTransparent {
                         BlockPosition blockposition1 = blockposition.a(i1, j1, k1);
                         IBlockData iblockdata1 = world.getType(blockposition1);
 
-                        if (iblockdata1.getBlock().getMaterial() == Material.LEAVES && !((Boolean) iblockdata1.get(BlockLeaves.CHECK_DECAY)).booleanValue()) {
-                            world.setTypeAndData(blockposition1, iblockdata1.set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(true)), 4);
+                        if (iblockdata1.getBlock().getMaterial() == Material.LEAVES && !(Boolean) iblockdata1.get(BlockLeaves.CHECK_DECAY)) {
+                            world.setTypeAndData(blockposition1, iblockdata1.set(BlockLeaves.CHECK_DECAY, Boolean.TRUE), 4);
                         }
                     }
                 }
@@ -45,7 +45,7 @@ public abstract class BlockLeaves extends BlockTransparent {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
-            if (((Boolean) iblockdata.get(BlockLeaves.CHECK_DECAY)).booleanValue() && ((Boolean) iblockdata.get(BlockLeaves.DECAYABLE)).booleanValue()) {
+            if ((Boolean) iblockdata.get(BlockLeaves.CHECK_DECAY) && (Boolean) iblockdata.get(BlockLeaves.DECAYABLE)) {
                 byte b0 = 4;
                 int i = b0 + 1;
                 int j = blockposition.getX();
@@ -122,7 +122,7 @@ public abstract class BlockLeaves extends BlockTransparent {
                 int k2 = this.N[j1 * i1 + j1 * b1 + j1];
 
                 if (k2 >= 0) {
-                    world.setTypeAndData(blockposition, iblockdata.set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false)), 4);
+                    world.setTypeAndData(blockposition, iblockdata.set(BlockLeaves.CHECK_DECAY, Boolean.FALSE), 4);
                 } else {
                     this.e(world, blockposition);
                 }
diff --git a/src/main/java/net/minecraft/server/BlockLever.java b/src/main/java/net/minecraft/server/BlockLever.java
index c9015eb97..195c29441 100644
--- a/src/main/java/net/minecraft/server/BlockLever.java
+++ b/src/main/java/net/minecraft/server/BlockLever.java
@@ -11,7 +11,7 @@ public class BlockLever extends Block {
 
     protected BlockLever() {
         super(Material.ORIENTABLE);
-        this.j(this.blockStateList.getBlockData().set(BlockLever.FACING, BlockLever.EnumLeverPosition.NORTH).set(BlockLever.POWERED, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockLever.FACING, BlockLever.EnumLeverPosition.NORTH).set(BlockLever.POWERED, Boolean.FALSE));
         this.a(CreativeModeTab.d);
     }
 
@@ -35,9 +35,7 @@ public class BlockLever extends Block {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (a(world, blockposition, enumdirection)) {
                 return true;
             }
@@ -51,7 +49,7 @@ public class BlockLever extends Block {
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        IBlockData iblockdata = this.getBlockData().set(BlockLever.POWERED, Boolean.valueOf(false));
+        IBlockData iblockdata = this.getBlockData().set(BlockLever.POWERED, Boolean.FALSE);
 
         if (a(world, blockposition, enumdirection.opposite())) {
             return iblockdata.set(BlockLever.FACING, BlockLever.EnumLeverPosition.a(enumdirection, entityliving.getDirection()));
@@ -62,7 +60,7 @@ public class BlockLever extends Block {
 
             do {
                 if (!iterator.hasNext()) {
-                    if (World.a((IBlockAccess) world, blockposition.down())) {
+                    if (World.a(world, blockposition.down())) {
                         return iblockdata.set(BlockLever.FACING, BlockLever.EnumLeverPosition.a(EnumDirection.UP, entityliving.getDirection()));
                     }
 
@@ -102,7 +100,7 @@ public class BlockLever extends Block {
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        if (this.e(world, blockposition, iblockdata) && !a(world, blockposition, ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c().opposite())) {
+        if (this.e(world, blockposition, iblockdata) && !a(world, blockposition, iblockdata.get(BlockLever.FACING).c().opposite())) {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
         }
@@ -122,7 +120,7 @@ public class BlockLever extends Block {
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         float f = 0.1875F;
 
-        switch (BlockLever.SyntheticClass_1.b[((BlockLever.EnumLeverPosition) iblockaccess.getType(blockposition).get(BlockLever.FACING)).ordinal()]) {
+        switch (BlockLever.SyntheticClass_1.b[iblockaccess.getType(blockposition).get(BlockLever.FACING).ordinal()]) {
         case 1:
             this.a(0.0F, 0.2F, 0.5F - f, f * 2.0F, 0.8F, 0.5F + f);
             break;
@@ -166,16 +164,16 @@ public class BlockLever extends Block {
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
             world.getServer().getPluginManager().callEvent(eventRedstone);
 
-            if ((eventRedstone.getNewCurrent() > 0) != (!powered)) {
+            if ((eventRedstone.getNewCurrent() > 0) == (powered)) {
                 return true;
             }
             // CraftBukkit end
             
             iblockdata = iblockdata.a(BlockLever.POWERED);
             world.setTypeAndData(blockposition, iblockdata, 3);
-            world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "random.click", 0.3F, ((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 0.6F : 0.5F);
+            world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "random.click", 0.3F, (Boolean) iblockdata.get(BlockLever.POWERED) ? 0.6F : 0.5F);
             world.applyPhysics(blockposition, this);
-            EnumDirection enumdirection1 = ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c();
+            EnumDirection enumdirection1 = iblockdata.get(BlockLever.FACING).c();
 
             world.applyPhysics(blockposition.shift(enumdirection1.opposite()), this);
             return true;
@@ -183,9 +181,9 @@ public class BlockLever extends Block {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockLever.POWERED)) {
             world.applyPhysics(blockposition, this);
-            EnumDirection enumdirection = ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c();
+            EnumDirection enumdirection = iblockdata.get(BlockLever.FACING).c();
 
             world.applyPhysics(blockposition.shift(enumdirection.opposite()), this);
         }
@@ -194,11 +192,11 @@ public class BlockLever extends Block {
     }
 
     public int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 15 : 0;
+        return (Boolean) iblockdata.get(BlockLever.POWERED) ? 15 : 0;
     }
 
     public int b(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return !((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 0 : (((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c() == enumdirection ? 15 : 0);
+        return !(Boolean) iblockdata.get(BlockLever.POWERED) ? 0 : (iblockdata.get(BlockLever.FACING).c() == enumdirection ? 15 : 0);
     }
 
     public boolean isPowerSource() {
@@ -206,14 +204,14 @@ public class BlockLever extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockLever.FACING, BlockLever.EnumLeverPosition.a(i & 7)).set(BlockLever.POWERED, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockLever.FACING, BlockLever.EnumLeverPosition.a(i & 7)).set(BlockLever.POWERED, (i & 8) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).a();
+        int i = b0 | iblockdata.get(BlockLever.FACING).a();
 
-        if (((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockLever.POWERED)) {
             i |= 8;
         }
 
@@ -221,7 +219,7 @@ public class BlockLever extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockLever.FACING, BlockLever.POWERED});
+        return new BlockStateList(this, BlockLever.FACING, BlockLever.POWERED);
     }
 
     static class SyntheticClass_1 {
@@ -233,108 +231,92 @@ public class BlockLever extends Block {
         static {
             try {
                 BlockLever.SyntheticClass_1.c[EnumDirection.EnumAxis.X.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.c[EnumDirection.EnumAxis.Z.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             b = new int[BlockLever.EnumLeverPosition.values().length];
 
             try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.SOUTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.NORTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.UP_Z.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror6) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.UP_X.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror7) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.DOWN_X.ordinal()] = 7;
-            } catch (NoSuchFieldError nosuchfielderror8) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.b[BlockLever.EnumLeverPosition.DOWN_Z.ordinal()] = 8;
-            } catch (NoSuchFieldError nosuchfielderror9) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             a = new int[EnumDirection.values().length];
 
             try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.DOWN.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror10) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.UP.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror11) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror12) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror13) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror14) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockLever.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror15) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
     }
 
-    public static enum EnumLeverPosition implements INamable {
+    public enum EnumLeverPosition implements INamable {
 
         DOWN_X(0, "down_x", EnumDirection.DOWN), EAST(1, "east", EnumDirection.EAST), WEST(2, "west", EnumDirection.WEST), SOUTH(3, "south", EnumDirection.SOUTH), NORTH(4, "north", EnumDirection.NORTH), UP_Z(5, "up_z", EnumDirection.UP), UP_X(6, "up_x", EnumDirection.UP), DOWN_Z(7, "down_z", EnumDirection.DOWN);
 
@@ -343,7 +325,7 @@ public class BlockLever extends Block {
         private final String k;
         private final EnumDirection l;
 
-        private EnumLeverPosition(int i, String s, EnumDirection enumdirection) {
+        EnumLeverPosition(int i, String s, EnumDirection enumdirection) {
             this.j = i;
             this.k = s;
             this.l = enumdirection;
@@ -420,10 +402,8 @@ public class BlockLever extends Block {
             BlockLever.EnumLeverPosition[] ablocklever_enumleverposition = values();
             int i = ablocklever_enumleverposition.length;
 
-            for (int j = 0; j < i; ++j) {
-                BlockLever.EnumLeverPosition blocklever_enumleverposition = ablocklever_enumleverposition[j];
-
-                BlockLever.EnumLeverPosition.i[blocklever_enumleverposition.a()] = blocklever_enumleverposition;
+            for (EnumLeverPosition blocklever_enumleverposition : ablocklever_enumleverposition) {
+                EnumLeverPosition.i[blocklever_enumleverposition.a()] = blocklever_enumleverposition;
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockMinecartDetector.java b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
index f3ce4a9c0..96b77c384 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartDetector.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
@@ -21,7 +21,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
 
     public BlockMinecartDetector() {
         super(true);
-        this.j(this.blockStateList.getBlockData().set(BlockMinecartDetector.POWERED, Boolean.valueOf(false)).set(BlockMinecartDetector.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH));
+        this.j(this.blockStateList.getBlockData().set(BlockMinecartDetector.POWERED, Boolean.FALSE).set(BlockMinecartDetector.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH));
         this.a(true);
     }
 
@@ -35,7 +35,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
         if (!world.isClientSide) {
-            if (!((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
+            if (!(Boolean) iblockdata.get(BlockMinecartDetector.POWERED)) {
                 this.e(world, blockposition, iblockdata);
             }
         }
@@ -44,23 +44,23 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide && ((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
+        if (!world.isClientSide && (Boolean) iblockdata.get(BlockMinecartDetector.POWERED)) {
             this.e(world, blockposition, iblockdata);
         }
     }
 
     public int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue() ? 15 : 0;
+        return (Boolean) iblockdata.get(BlockMinecartDetector.POWERED) ? 15 : 0;
     }
 
     public int b(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return !((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue() ? 0 : (enumdirection == EnumDirection.UP ? 15 : 0);
+        return !(Boolean) iblockdata.get(BlockMinecartDetector.POWERED) ? 0 : (enumdirection == EnumDirection.UP ? 15 : 0);
     }
 
     private void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        boolean flag = ((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue();
+        boolean flag = (Boolean) iblockdata.get(BlockMinecartDetector.POWERED);
         boolean flag1 = false;
-        List list = this.a(world, blockposition, EntityMinecartAbstract.class, new Predicate[0]);
+        List list = this.a(world, blockposition, EntityMinecartAbstract.class);
 
         if (!list.isEmpty()) {
             flag1 = true;
@@ -78,21 +78,21 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
         // CraftBukkit end
 
         if (flag1 && !flag) {
-            world.setTypeAndData(blockposition, iblockdata.set(BlockMinecartDetector.POWERED, Boolean.valueOf(true)), 3);
+            world.setTypeAndData(blockposition, iblockdata.set(BlockMinecartDetector.POWERED, Boolean.TRUE), 3);
             world.applyPhysics(blockposition, this);
             world.applyPhysics(blockposition.down(), this);
             world.b(blockposition, blockposition);
         }
 
         if (!flag1 && flag) {
-            world.setTypeAndData(blockposition, iblockdata.set(BlockMinecartDetector.POWERED, Boolean.valueOf(false)), 3);
+            world.setTypeAndData(blockposition, iblockdata.set(BlockMinecartDetector.POWERED, Boolean.FALSE), 3);
             world.applyPhysics(blockposition, this);
             world.applyPhysics(blockposition.down(), this);
             world.b(blockposition, blockposition);
         }
 
         if (flag1) {
-            world.a(blockposition, (Block) this, this.a(world));
+            world.a(blockposition, this, this.a(world));
         }
 
         world.updateAdjacentComparators(blockposition, this);
@@ -112,14 +112,14 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     }
 
     public int l(World world, BlockPosition blockposition) {
-        if (((Boolean) world.getType(blockposition).get(BlockMinecartDetector.POWERED)).booleanValue()) {
-            List list = this.a(world, blockposition, EntityMinecartCommandBlock.class, new Predicate[0]);
+        if ((Boolean) world.getType(blockposition).get(BlockMinecartDetector.POWERED)) {
+            List list = this.a(world, blockposition, EntityMinecartCommandBlock.class);
 
             if (!list.isEmpty()) {
                 return ((EntityMinecartCommandBlock) list.get(0)).getCommandBlock().j();
             }
 
-            List list1 = this.a(world, blockposition, EntityMinecartAbstract.class, new Predicate[] { IEntitySelector.c});
+            List list1 = this.a(world, blockposition, EntityMinecartAbstract.class, IEntitySelector.c);
 
             if (!list1.isEmpty()) {
                 return Container.b((IInventory) list1.get(0));
@@ -142,14 +142,14 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockMinecartDetector.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.a(i & 7)).set(BlockMinecartDetector.POWERED, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockMinecartDetector.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.a(i & 7)).set(BlockMinecartDetector.POWERED, (i & 8) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockMinecartDetector.SHAPE)).a();
+        int i = b0 | iblockdata.get(BlockMinecartDetector.SHAPE).a();
 
-        if (((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)) {
             i |= 8;
         }
 
@@ -157,6 +157,6 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockMinecartDetector.SHAPE, BlockMinecartDetector.POWERED});
+        return new BlockStateList(this, BlockMinecartDetector.SHAPE, BlockMinecartDetector.POWERED);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java b/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
index ec42421c0..0acb5e6da 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartTrackAbstract.java
@@ -40,7 +40,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
-        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() == this ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(this.n()) : null;
+        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() == this ? iblockdata.get(this.n()) : null;
 
         if (blockminecarttrackabstract_enumtrackposition != null && blockminecarttrackabstract_enumtrackposition.c()) {
             this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.625F, 1.0F);
@@ -55,7 +55,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return World.a((IBlockAccess) world, blockposition.down());
+        return World.a(world, blockposition.down());
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -70,20 +70,20 @@ public abstract class BlockMinecartTrackAbstract extends Block {
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         if (!world.isClientSide) {
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(this.n());
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(this.n());
             boolean flag = false;
 
-            if (!World.a((IBlockAccess) world, blockposition.down())) {
+            if (!World.a(world, blockposition.down())) {
                 flag = true;
             }
 
-            if (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST && !World.a((IBlockAccess) world, blockposition.east())) {
+            if (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST && !World.a(world, blockposition.east())) {
                 flag = true;
-            } else if (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST && !World.a((IBlockAccess) world, blockposition.west())) {
+            } else if (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST && !World.a(world, blockposition.west())) {
                 flag = true;
-            } else if (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH && !World.a((IBlockAccess) world, blockposition.north())) {
+            } else if (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH && !World.a(world, blockposition.north())) {
                 flag = true;
-            } else if (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH && !World.a((IBlockAccess) world, blockposition.south())) {
+            } else if (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH && !World.a(world, blockposition.south())) {
                 flag = true;
             }
 
@@ -109,7 +109,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
         super.remove(world, blockposition, iblockdata);
-        if (((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(this.n())).c()) {
+        if (iblockdata.get(this.n()).c()) {
             world.applyPhysics(blockposition.up(), this);
         }
 
@@ -129,68 +129,58 @@ public abstract class BlockMinecartTrackAbstract extends Block {
         static {
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.SOUTH_EAST.ordinal()] = 7;
-            } catch (NoSuchFieldError nosuchfielderror6) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.SOUTH_WEST.ordinal()] = 8;
-            } catch (NoSuchFieldError nosuchfielderror7) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_WEST.ordinal()] = 9;
-            } catch (NoSuchFieldError nosuchfielderror8) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMinecartTrackAbstract.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_EAST.ordinal()] = 10;
-            } catch (NoSuchFieldError nosuchfielderror9) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
     }
 
-    public static enum EnumTrackPosition implements INamable {
+    public enum EnumTrackPosition implements INamable {
 
         NORTH_SOUTH(0, "north_south"), EAST_WEST(1, "east_west"), ASCENDING_EAST(2, "ascending_east"), ASCENDING_WEST(3, "ascending_west"), ASCENDING_NORTH(4, "ascending_north"), ASCENDING_SOUTH(5, "ascending_south"), SOUTH_EAST(6, "south_east"), SOUTH_WEST(7, "south_west"), NORTH_WEST(8, "north_west"), NORTH_EAST(9, "north_east");
 
@@ -198,7 +188,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
         private final int l;
         private final String m;
 
-        private EnumTrackPosition(int i, String s) {
+        EnumTrackPosition(int i, String s) {
             this.l = i;
             this.m = s;
         }
@@ -231,10 +221,8 @@ public abstract class BlockMinecartTrackAbstract extends Block {
             BlockMinecartTrackAbstract.EnumTrackPosition[] ablockminecarttrackabstract_enumtrackposition = values();
             int i = ablockminecarttrackabstract_enumtrackposition.length;
 
-            for (int j = 0; j < i; ++j) {
-                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = ablockminecarttrackabstract_enumtrackposition[j];
-
-                BlockMinecartTrackAbstract.EnumTrackPosition.k[blockminecarttrackabstract_enumtrackposition.a()] = blockminecarttrackabstract_enumtrackposition;
+            for (EnumTrackPosition blockminecarttrackabstract_enumtrackposition : ablockminecarttrackabstract_enumtrackposition) {
+                EnumTrackPosition.k[blockminecarttrackabstract_enumtrackposition.a()] = blockminecarttrackabstract_enumtrackposition;
             }
 
         }
@@ -254,7 +242,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
             this.c = blockposition;
             this.e = iblockdata;
             this.d = (BlockMinecartTrackAbstract) iblockdata.getBlock();
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockMinecartTrackAbstract.this.n());
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(BlockMinecartTrackAbstract.this.n());
 
             this.f = this.d.a;
             this.a(blockminecarttrackabstract_enumtrackposition);
@@ -317,7 +305,7 @@ public abstract class BlockMinecartTrackAbstract extends Block {
 
         private void c() {
             for (int i = 0; i < this.g.size(); ++i) {
-                BlockMinecartTrackAbstract.MinecartTrackLogic blockminecarttrackabstract_minecarttracklogic = this.b((BlockPosition) this.g.get(i));
+                BlockMinecartTrackAbstract.MinecartTrackLogic blockminecarttrackabstract_minecarttracklogic = this.b(this.g.get(i));
 
                 if (blockminecarttrackabstract_minecarttracklogic != null && blockminecarttrackabstract_minecarttracklogic.a(this)) {
                     this.g.set(i, blockminecarttrackabstract_minecarttracklogic.c);
@@ -356,8 +344,8 @@ public abstract class BlockMinecartTrackAbstract extends Block {
         }
 
         private boolean c(BlockPosition blockposition) {
-            for (int i = 0; i < this.g.size(); ++i) {
-                BlockPosition blockposition1 = (BlockPosition) this.g.get(i);
+            for (BlockPosition blockPosition : this.g) {
+                BlockPosition blockposition1 = (BlockPosition) blockPosition;
 
                 if (blockposition1.getX() == blockposition.getX() && blockposition1.getZ() == blockposition.getZ()) {
                     return true;
@@ -369,11 +357,8 @@ public abstract class BlockMinecartTrackAbstract extends Block {
 
         protected int a() {
             int i = 0;
-            Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-            while (iterator.hasNext()) {
-                EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+            for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                 if (this.a(this.c.shift(enumdirection))) {
                     ++i;
                 }
@@ -575,8 +560,8 @@ public abstract class BlockMinecartTrackAbstract extends Block {
             if (flag1 || this.b.getType(this.c) != this.e) {
                 this.b.setTypeAndData(this.c, this.e, 3);
 
-                for (int i = 0; i < this.g.size(); ++i) {
-                    BlockMinecartTrackAbstract.MinecartTrackLogic blockminecarttrackabstract_minecarttracklogic = this.b((BlockPosition) this.g.get(i));
+                for (BlockPosition blockPosition : this.g) {
+                    MinecartTrackLogic blockminecarttrackabstract_minecarttracklogic = this.b((BlockPosition) blockPosition);
 
                     if (blockminecarttrackabstract_minecarttracklogic != null) {
                         blockminecarttrackabstract_minecarttracklogic.c();
diff --git a/src/main/java/net/minecraft/server/BlockMobSpawner.java b/src/main/java/net/minecraft/server/BlockMobSpawner.java
index 4bf4df87a..1789c9738 100644
--- a/src/main/java/net/minecraft/server/BlockMobSpawner.java
+++ b/src/main/java/net/minecraft/server/BlockMobSpawner.java
@@ -31,9 +31,8 @@ public class BlockMobSpawner extends BlockContainer {
 
     @Override
     public int getExpDrop(World world, IBlockData iblockdata, int enchantmentLevel) {
-        int j = 15 + world.random.nextInt(15) + world.random.nextInt(15);
 
-        return j;
+        return 15 + world.random.nextInt(15) + world.random.nextInt(15);
         // CraftBukkit end
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockMonsterEggs.java b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
index 0b58e4ffa..0b1335e66 100644
--- a/src/main/java/net/minecraft/server/BlockMonsterEggs.java
+++ b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
@@ -26,7 +26,7 @@ public class BlockMonsterEggs extends Block {
     }
 
     protected ItemStack i(IBlockData iblockdata) {
-        switch (BlockMonsterEggs.SyntheticClass_1.a[((BlockMonsterEggs.EnumMonsterEggVarient) iblockdata.get(BlockMonsterEggs.VARIANT)).ordinal()]) {
+        switch (BlockMonsterEggs.SyntheticClass_1.a[iblockdata.get(BlockMonsterEggs.VARIANT).ordinal()]) {
         case 1:
             return new ItemStack(Blocks.COBBLESTONE);
 
@@ -69,11 +69,11 @@ public class BlockMonsterEggs extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((BlockMonsterEggs.EnumMonsterEggVarient) iblockdata.get(BlockMonsterEggs.VARIANT)).a();
+        return iblockdata.get(BlockMonsterEggs.VARIANT).a();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockMonsterEggs.VARIANT});
+        return new BlockStateList(this, BlockMonsterEggs.VARIANT);
     }
 
     static class SyntheticClass_1 {
@@ -83,38 +83,33 @@ public class BlockMonsterEggs extends Block {
         static {
             try {
                 BlockMonsterEggs.SyntheticClass_1.a[BlockMonsterEggs.EnumMonsterEggVarient.COBBLESTONE.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMonsterEggs.SyntheticClass_1.a[BlockMonsterEggs.EnumMonsterEggVarient.STONEBRICK.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMonsterEggs.SyntheticClass_1.a[BlockMonsterEggs.EnumMonsterEggVarient.MOSSY_STONEBRICK.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMonsterEggs.SyntheticClass_1.a[BlockMonsterEggs.EnumMonsterEggVarient.CRACKED_STONEBRICK.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockMonsterEggs.SyntheticClass_1.a[BlockMonsterEggs.EnumMonsterEggVarient.CHISELED_STONEBRICK.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
     }
 
-    public static enum EnumMonsterEggVarient implements INamable {
+    public enum EnumMonsterEggVarient implements INamable {
 
         STONE(0, "stone") {;
             public IBlockData d() {
@@ -147,11 +142,11 @@ public class BlockMonsterEggs extends Block {
         private final String i;
         private final String j;
 
-        private EnumMonsterEggVarient(int i, String s) {
+        EnumMonsterEggVarient(int i, String s) {
             this(i, s, s);
         }
 
-        private EnumMonsterEggVarient(int i, String s, String s1) {
+        EnumMonsterEggVarient(int i, String s, String s1) {
             this.h = i;
             this.i = s;
             this.j = s1;
@@ -187,9 +182,7 @@ public class BlockMonsterEggs extends Block {
             BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = values();
             int i = ablockmonstereggs_enummonstereggvarient.length;
 
-            for (int j = 0; j < i; ++j) {
-                BlockMonsterEggs.EnumMonsterEggVarient blockmonstereggs_enummonstereggvarient = ablockmonstereggs_enummonstereggvarient[j];
-
+            for (EnumMonsterEggVarient blockmonstereggs_enummonstereggvarient : ablockmonstereggs_enummonstereggvarient) {
                 if (iblockdata == blockmonstereggs_enummonstereggvarient.d()) {
                     return blockmonstereggs_enummonstereggvarient;
                 }
@@ -210,10 +203,8 @@ public class BlockMonsterEggs extends Block {
             BlockMonsterEggs.EnumMonsterEggVarient[] ablockmonstereggs_enummonstereggvarient = values();
             int i = ablockmonstereggs_enummonstereggvarient.length;
 
-            for (int j = 0; j < i; ++j) {
-                BlockMonsterEggs.EnumMonsterEggVarient blockmonstereggs_enummonstereggvarient = ablockmonstereggs_enummonstereggvarient[j];
-
-                BlockMonsterEggs.EnumMonsterEggVarient.g[blockmonstereggs_enummonstereggvarient.a()] = blockmonstereggs_enummonstereggvarient;
+            for (EnumMonsterEggVarient blockmonstereggs_enummonstereggvarient : ablockmonstereggs_enummonstereggvarient) {
+                EnumMonsterEggVarient.g[blockmonstereggs_enummonstereggvarient.a()] = blockmonstereggs_enummonstereggvarient;
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockMushroom.java b/src/main/java/net/minecraft/server/BlockMushroom.java
index 7cf7a0888..5e8d280a1 100644
--- a/src/main/java/net/minecraft/server/BlockMushroom.java
+++ b/src/main/java/net/minecraft/server/BlockMushroom.java
@@ -23,10 +23,9 @@ public class BlockMushroom extends BlockPlant implements IBlockFragilePlantEleme
         if (random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfig.mushroomModifier * 25)) == 0) { // Spigot            int i = 5;
             int i = 5;
             boolean flag = true;
-            Iterator iterator = BlockPosition.b(blockposition.a(-4, -1, -4), blockposition.a(4, 1, 4)).iterator();
 
-            while (iterator.hasNext()) {
-                BlockPosition blockposition1 = (BlockPosition) iterator.next();
+            for (BlockPosition.MutableBlockPosition mutableBlockPosition : BlockPosition.b(blockposition.a(-4, -1, -4), blockposition.a(4, 1, 4))) {
+                BlockPosition blockposition1 = (BlockPosition) mutableBlockPosition;
 
                 if (world.getType(blockposition1).getBlock() == this) {
                     --i;
diff --git a/src/main/java/net/minecraft/server/BlockMycel.java b/src/main/java/net/minecraft/server/BlockMycel.java
index d2bd4dd9b..dcdc535ff 100644
--- a/src/main/java/net/minecraft/server/BlockMycel.java
+++ b/src/main/java/net/minecraft/server/BlockMycel.java
@@ -15,7 +15,7 @@ public class BlockMycel extends Block {
 
     protected BlockMycel() {
         super(Material.GRASS, MaterialMapColor.z);
-        this.j(this.blockStateList.getBlockData().set(BlockMycel.SNOWY, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockMycel.SNOWY, Boolean.FALSE));
         this.a(true);
         this.a(CreativeModeTab.b);
     }
@@ -23,7 +23,7 @@ public class BlockMycel extends Block {
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
         Block block = iblockaccess.getType(blockposition.up()).getBlock();
 
-        return iblockdata.set(BlockMycel.SNOWY, Boolean.valueOf(block == Blocks.SNOW || block == Blocks.SNOW_LAYER));
+        return iblockdata.set(BlockMycel.SNOWY, block == Blocks.SNOW || block == Blocks.SNOW_LAYER);
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -80,6 +80,6 @@ public class BlockMycel extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockMycel.SNOWY});
+        return new BlockStateList(this, BlockMycel.SNOWY);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockNetherWart.java b/src/main/java/net/minecraft/server/BlockNetherWart.java
index 374f06caa..ca6c691a2 100644
--- a/src/main/java/net/minecraft/server/BlockNetherWart.java
+++ b/src/main/java/net/minecraft/server/BlockNetherWart.java
@@ -8,7 +8,7 @@ public class BlockNetherWart extends BlockPlant {
 
     protected BlockNetherWart() {
         super(Material.PLANT, MaterialMapColor.D);
-        this.j(this.blockStateList.getBlockData().set(BlockNetherWart.AGE, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockNetherWart.AGE, 0));
         this.a(true);
         float f = 0.5F;
 
@@ -25,10 +25,10 @@ public class BlockNetherWart extends BlockPlant {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        int i = ((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue();
+        int i = (Integer) iblockdata.get(BlockNetherWart.AGE);
 
         if (i < 3 && random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfig.wartModifier * 10)) == 0) { // Spigot
-            iblockdata = iblockdata.set(BlockNetherWart.AGE, Integer.valueOf(i + 1));
+            iblockdata = iblockdata.set(BlockNetherWart.AGE, i + 1);
             // world.setTypeAndData(blockposition, iblockdata, 2); // CraftBukkit
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(iblockdata)); // CraftBukkit
         }
@@ -40,7 +40,7 @@ public class BlockNetherWart extends BlockPlant {
         if (!world.isClientSide) {
             int j = 1;
 
-            if (((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue() >= 3) {
+            if ((Integer) iblockdata.get(BlockNetherWart.AGE) >= 3) {
                 j = 2 + world.random.nextInt(3);
                 if (i > 0) {
                     j += world.random.nextInt(i + 1);
@@ -63,14 +63,14 @@ public class BlockNetherWart extends BlockPlant {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockNetherWart.AGE, Integer.valueOf(i));
+        return this.getBlockData().set(BlockNetherWart.AGE, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue();
+        return (Integer) iblockdata.get(BlockNetherWart.AGE);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockNetherWart.AGE});
+        return new BlockStateList(this, BlockNetherWart.AGE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockOre.java b/src/main/java/net/minecraft/server/BlockOre.java
index 4d97cdf18..071323d4c 100644
--- a/src/main/java/net/minecraft/server/BlockOre.java
+++ b/src/main/java/net/minecraft/server/BlockOre.java
@@ -22,7 +22,7 @@ public class BlockOre extends Block {
     }
 
     public int getDropCount(int i, Random random) {
-        if (i > 0 && Item.getItemOf(this) != this.getDropType((IBlockData) this.P().a().iterator().next(), random, i)) {
+        if (i > 0 && Item.getItemOf(this) != this.getDropType(this.P().a().iterator().next(), random, i)) {
             int j = random.nextInt(i + 2) - 1;
 
             if (j < 0) {
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index b582f4bcd..e32fba983 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -4,9 +4,6 @@ import java.util.List;
 
 // CraftBukkit start
 import java.util.AbstractList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.ListIterator;
 
 import com.google.common.collect.ImmutableList;
 import org.bukkit.craftbukkit.block.CraftBlock;
@@ -22,7 +19,7 @@ public class BlockPiston extends Block {
 
     public BlockPiston(boolean flag) {
         super(Material.PISTON);
-        this.j(this.blockStateList.getBlockData().set(BlockPiston.FACING, EnumDirection.NORTH).set(BlockPiston.EXTENDED, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockPiston.FACING, EnumDirection.NORTH).set(BlockPiston.EXTENDED, Boolean.FALSE));
         this.sticky = flag;
         this.a(BlockPiston.i);
         this.c(0.5F);
@@ -56,18 +53,18 @@ public class BlockPiston extends Block {
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        return this.getBlockData().set(BlockPiston.FACING, a(world, blockposition, entityliving)).set(BlockPiston.EXTENDED, Boolean.valueOf(false));
+        return this.getBlockData().set(BlockPiston.FACING, a(world, blockposition, entityliving)).set(BlockPiston.EXTENDED, Boolean.FALSE);
     }
 
     private void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockPiston.FACING);
         boolean flag = this.a(world, blockposition, enumdirection);
 
-        if (flag && !((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+        if (flag && !(Boolean) iblockdata.get(BlockPiston.EXTENDED)) {
             if ((new PistonExtendsChecker(world, blockposition, enumdirection, true)).a()) {
                 world.playBlockAction(blockposition, this, 0, enumdirection.a());
             }
-        } else if (!flag && ((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+        } else if (!flag && (Boolean) iblockdata.get(BlockPiston.EXTENDED)) {
             // CraftBukkit start
             if (!this.sticky) {
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -79,7 +76,7 @@ public class BlockPiston extends Block {
                 }
             }
             // CraftBukkit end
-            world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.EXTENDED, Boolean.valueOf(false)), 2);
+            world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.EXTENDED, Boolean.FALSE), 2);
             world.playBlockAction(blockposition, this, 1, enumdirection.a());
         }
 
@@ -120,13 +117,13 @@ public class BlockPiston extends Block {
     }
 
     public boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, int i, int j) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockPiston.FACING);
 
         if (!world.isClientSide) {
             boolean flag = this.a(world, blockposition, enumdirection);
 
             if (flag && i == 1) {
-                world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.EXTENDED, Boolean.valueOf(true)), 2);
+                world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.EXTENDED, Boolean.TRUE), 2);
                 return false;
             }
 
@@ -140,7 +137,7 @@ public class BlockPiston extends Block {
                 return false;
             }
 
-            world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.EXTENDED, Boolean.valueOf(true)), 2);
+            world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.EXTENDED, Boolean.TRUE), 2);
             world.makeSound((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, "tile.piston.out", 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
         } else if (i == 1) {
             TileEntity tileentity = world.getTileEntity(blockposition.shift(enumdirection));
@@ -185,9 +182,9 @@ public class BlockPiston extends Block {
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
 
-        if (iblockdata.getBlock() == this && ((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+        if (iblockdata.getBlock() == this && (Boolean) iblockdata.get(BlockPiston.EXTENDED)) {
             float f = 0.25F;
-            EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
+            EnumDirection enumdirection = iblockdata.get(BlockPiston.FACING);
 
             if (enumdirection != null) {
                 switch (BlockPiston.SyntheticClass_1.a[enumdirection.ordinal()]) {
@@ -278,13 +275,10 @@ public class BlockPiston extends Block {
                     }
 
                     if (block.k() == 1) {
-                        if (!flag) {
-                            return false;
-                        }
+                        return flag;
 
-                        return true;
                     }
-                } else if (((Boolean) world.getType(blockposition).get(BlockPiston.EXTENDED)).booleanValue()) {
+                } else if ((Boolean) world.getType(blockposition).get(BlockPiston.EXTENDED)) {
                     return false;
                 }
 
@@ -327,7 +321,7 @@ public class BlockPiston extends Block {
                     if (index >= size() || index < 0) {
                         throw new ArrayIndexOutOfBoundsException(index);
                     }
-                    BlockPosition pos = (BlockPosition) (index < moved.size() ? moved.get(index) : broken.get(index - moved.size()));
+                    BlockPosition pos = index < moved.size() ? moved.get(index) : broken.get(index - moved.size());
                     return bblock.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
                 }
             };
@@ -417,14 +411,14 @@ public class BlockPiston extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockPiston.FACING, b(i)).set(BlockPiston.EXTENDED, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockPiston.FACING, b(i)).set(BlockPiston.EXTENDED, (i & 8) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockPiston.FACING)).a();
+        int i = b0 | iblockdata.get(BlockPiston.FACING).a();
 
-        if (((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockPiston.EXTENDED)) {
             i |= 8;
         }
 
@@ -432,7 +426,7 @@ public class BlockPiston extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPiston.FACING, BlockPiston.EXTENDED});
+        return new BlockStateList(this, BlockPiston.FACING, BlockPiston.EXTENDED);
     }
 
     static class SyntheticClass_1 {
@@ -442,38 +436,32 @@ public class BlockPiston extends Block {
         static {
             try {
                 BlockPiston.SyntheticClass_1.a[EnumDirection.DOWN.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPiston.SyntheticClass_1.a[EnumDirection.UP.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPiston.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPiston.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPiston.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPiston.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockPlant.java b/src/main/java/net/minecraft/server/BlockPlant.java
index c11102421..8b848460b 100644
--- a/src/main/java/net/minecraft/server/BlockPlant.java
+++ b/src/main/java/net/minecraft/server/BlockPlant.java
@@ -2,7 +2,6 @@ package net.minecraft.server;
 
 import java.util.Random;
 // CraftBukkit start
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.event.block.BlockPhysicsEvent;
 // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 170f77632..7b811cf6c 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -8,7 +8,7 @@ import org.bukkit.event.world.PortalCreateEvent; // CraftBukkit
 
 public class BlockPortal extends BlockHalfTransparent {
 
-    public static final BlockStateEnum<EnumDirection.EnumAxis> AXIS = BlockStateEnum.of("axis", EnumDirection.EnumAxis.class, new EnumDirection.EnumAxis[] { EnumDirection.EnumAxis.X, EnumDirection.EnumAxis.Z});
+    public static final BlockStateEnum<EnumDirection.EnumAxis> AXIS = BlockStateEnum.of("axis", EnumDirection.EnumAxis.class, EnumDirection.EnumAxis.X, EnumDirection.EnumAxis.Z);
 
     public BlockPortal() {
         super(Material.PORTAL, false);
@@ -23,8 +23,7 @@ public class BlockPortal extends BlockHalfTransparent {
 
             BlockPosition blockposition1;
 
-            for (blockposition1 = blockposition; !World.a((IBlockAccess) world, blockposition1) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
-                ;
+            for (blockposition1 = blockposition; !World.a(world, blockposition1) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
             }
 
             if (i > 0 && !world.getType(blockposition1.up()).getBlock().isOccluding()) {
@@ -44,7 +43,7 @@ public class BlockPortal extends BlockHalfTransparent {
     }
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        EnumDirection.EnumAxis enumdirection_enumaxis = (EnumDirection.EnumAxis) iblockaccess.getType(blockposition).get(BlockPortal.AXIS);
+        EnumDirection.EnumAxis enumdirection_enumaxis = iblockaccess.getType(blockposition).get(BlockPortal.AXIS);
         float f = 0.125F;
         float f1 = 0.125F;
 
@@ -88,7 +87,7 @@ public class BlockPortal extends BlockHalfTransparent {
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        EnumDirection.EnumAxis enumdirection_enumaxis = (EnumDirection.EnumAxis) iblockdata.get(BlockPortal.AXIS);
+        EnumDirection.EnumAxis enumdirection_enumaxis = iblockdata.get(BlockPortal.AXIS);
         BlockPortal.Shape blockportal_shape;
 
         if (enumdirection_enumaxis == EnumDirection.EnumAxis.X) {
@@ -125,11 +124,11 @@ public class BlockPortal extends BlockHalfTransparent {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return a((EnumDirection.EnumAxis) iblockdata.get(BlockPortal.AXIS));
+        return a(iblockdata.get(BlockPortal.AXIS));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPortal.AXIS});
+        return new BlockStateList(this, BlockPortal.AXIS);
     }
 
     public ShapeDetector.ShapeDetectorCollection f(World world, BlockPosition blockposition) {
@@ -195,7 +194,7 @@ public class BlockPortal extends BlockHalfTransparent {
         private BlockPosition position;
         private int height;
         private int width;
-        java.util.Collection<org.bukkit.block.Block> blocks = new java.util.HashSet<org.bukkit.block.Block>(); // CraftBukkit - add field
+        java.util.Collection<org.bukkit.block.Block> blocks = new java.util.HashSet<>(); // CraftBukkit - add field
 
         public Shape(World world, BlockPosition blockposition, EnumDirection.EnumAxis enumdirection_enumaxis) {
             this.a = world;
@@ -209,7 +208,6 @@ public class BlockPortal extends BlockHalfTransparent {
             }
 
             for (BlockPosition blockposition1 = blockposition; blockposition.getY() > blockposition1.getY() - 21 && blockposition.getY() > 0 && this.a(world.getType(blockposition.down()).getBlock()); blockposition = blockposition.down()) {
-                ;
             }
 
             int i = this.a(blockposition, this.d) - 1;
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 977c44fbc..735c9851a 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -112,7 +112,7 @@ public class BlockPosition extends BaseBlockPosition {
     }
 
     public long asLong() {
-        return ((long) this.getX() & BlockPosition.h) << BlockPosition.g | ((long) this.getY() & BlockPosition.i) << BlockPosition.f | ((long) this.getZ() & BlockPosition.j) << 0;
+        return ((long) this.getX() & BlockPosition.h) << BlockPosition.g | ((long) this.getY() & BlockPosition.i) << BlockPosition.f | ((long) this.getZ() & BlockPosition.j);
     }
 
     public static BlockPosition fromLong(long i) {
@@ -229,7 +229,7 @@ public class BlockPosition extends BaseBlockPosition {
         */
 
         public void setX(int x) {
-            ((BaseBlockPosition) this).a = x;
+            this.a = x;
         }
 
         public void setY(int y) {
diff --git a/src/main/java/net/minecraft/server/BlockPoweredRail.java b/src/main/java/net/minecraft/server/BlockPoweredRail.java
index 43a400fec..a41ffed20 100644
--- a/src/main/java/net/minecraft/server/BlockPoweredRail.java
+++ b/src/main/java/net/minecraft/server/BlockPoweredRail.java
@@ -19,7 +19,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
 
     protected BlockPoweredRail() {
         super(true);
-        this.j(this.blockStateList.getBlockData().set(BlockPoweredRail.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH).set(BlockPoweredRail.POWERED, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockPoweredRail.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH).set(BlockPoweredRail.POWERED, Boolean.FALSE));
     }
 
     protected boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag, int i) {
@@ -30,7 +30,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
             int k = blockposition.getY();
             int l = blockposition.getZ();
             boolean flag1 = true;
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE);
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(BlockPoweredRail.SHAPE);
 
             switch (BlockPoweredRail.SyntheticClass_1.a[blockminecarttrackabstract_enumtrackposition.ordinal()]) {
             case 1:
@@ -107,27 +107,27 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
         if (iblockdata.getBlock() != this) {
             return false;
         } else {
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition1 = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE);
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition1 = iblockdata.get(BlockPoweredRail.SHAPE);
 
-            return blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST && (blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH) ? false : (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH && (blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST) ? false : (((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue() ? (world.isBlockIndirectlyPowered(blockposition) ? true : this.a(world, blockposition, iblockdata, flag, i + 1)) : false));
+            return blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST && (blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH) ? false : (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH && (blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST) ? false : ((Boolean) iblockdata.get(BlockPoweredRail.POWERED) ? (world.isBlockIndirectlyPowered(blockposition) ? true : this.a(world, blockposition, iblockdata, flag, i + 1)) : false));
         }
     }
 
     protected void b(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        boolean flag = ((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue();
+        boolean flag = (Boolean) iblockdata.get(BlockPoweredRail.POWERED);
         boolean flag1 = world.isBlockIndirectlyPowered(blockposition) || this.a(world, blockposition, iblockdata, true, 0) || this.a(world, blockposition, iblockdata, false, 0);
 
         if (flag1 != flag) {
             // CraftBukkit start
-            int power = (Boolean)iblockdata.get(POWERED) ? 15 : 0;
+            int power = iblockdata.get(POWERED) ? 15 : 0;
             int newPower = CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), power, 15 - power).getNewCurrent();
             if (newPower == power) {
                 return;
             }
             // CraftBukkit end
-            world.setTypeAndData(blockposition, iblockdata.set(BlockPoweredRail.POWERED, Boolean.valueOf(flag1)), 3);
+            world.setTypeAndData(blockposition, iblockdata.set(BlockPoweredRail.POWERED, flag1), 3);
             world.applyPhysics(blockposition.down(), this);
-            if (((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE)).c()) {
+            if (iblockdata.get(BlockPoweredRail.SHAPE).c()) {
                 world.applyPhysics(blockposition.up(), this);
             }
         }
@@ -139,14 +139,14 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockPoweredRail.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.a(i & 7)).set(BlockPoweredRail.POWERED, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockPoweredRail.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.a(i & 7)).set(BlockPoweredRail.POWERED, (i & 8) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE)).a();
+        int i = b0 | iblockdata.get(BlockPoweredRail.SHAPE).a();
 
-        if (((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockPoweredRail.POWERED)) {
             i |= 8;
         }
 
@@ -154,7 +154,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPoweredRail.SHAPE, BlockPoweredRail.POWERED});
+        return new BlockStateList(this, BlockPoweredRail.SHAPE, BlockPoweredRail.POWERED);
     }
 
     static class SyntheticClass_1 {
@@ -164,38 +164,32 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
         static {
             try {
                 BlockPoweredRail.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPoweredRail.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPoweredRail.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPoweredRail.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPoweredRail.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPoweredRail.SyntheticClass_1.a[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
index 6da1fcc5f..7e866112e 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
@@ -69,7 +69,7 @@ public abstract class BlockPressurePlateAbstract extends Block {
     }
 
     private boolean m(World world, BlockPosition blockposition) {
-        return World.a((IBlockAccess) world, blockposition) || world.getType(blockposition).getBlock() instanceof BlockFence;
+        return World.a(world, blockposition) || world.getType(blockposition).getBlock() instanceof BlockFence;
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
@@ -128,7 +128,7 @@ public abstract class BlockPressurePlateAbstract extends Block {
         }
 
         if (flag1) {
-            world.a(blockposition, (Block) this, this.a(world));
+            world.a(blockposition, this, this.a(world));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java b/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
index ada3875a5..291e21b02 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
@@ -3,7 +3,11 @@ package net.minecraft.server;
 import java.util.Iterator;
 import java.util.List;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.block.Action;
 import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
+import org.bukkit.plugin.PluginManager;
 
 public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
 
@@ -12,16 +16,16 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
 
     protected BlockPressurePlateBinary(Material material, BlockPressurePlateBinary.EnumMobType blockpressureplatebinary_enummobtype) {
         super(material);
-        this.j(this.blockStateList.getBlockData().set(BlockPressurePlateBinary.POWERED, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockPressurePlateBinary.POWERED, Boolean.FALSE));
         this.b = blockpressureplatebinary_enummobtype;
     }
 
     protected int e(IBlockData iblockdata) {
-        return ((Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED)).booleanValue() ? 15 : 0;
+        return (Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED) ? 15 : 0;
     }
 
     protected IBlockData a(IBlockData iblockdata, int i) {
-        return iblockdata.set(BlockPressurePlateBinary.POWERED, Boolean.valueOf(i > 0));
+        return iblockdata.set(BlockPressurePlateBinary.POWERED, i > 0);
     }
 
     protected int f(World world, BlockPosition blockposition) {
@@ -30,7 +34,7 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
 
         switch (BlockPressurePlateBinary.SyntheticClass_1.a[this.b.ordinal()]) {
         case 1:
-            list = world.getEntities((Entity) null, axisalignedbb);
+            list = world.getEntities(null, axisalignedbb);
             break;
 
         case 2:
@@ -42,19 +46,18 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
         }
 
         if (!list.isEmpty()) {
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
+            for (Object value : list) {
+                Entity entity = (Entity) value;
 
                 // CraftBukkit start - Call interact event when turning on a pressure plate
                 if (this.e(world.getType(blockposition)) == 0) {
                     org.bukkit.World bworld = world.getWorld();
-                    org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
-                    org.bukkit.event.Cancellable cancellable;
+                    PluginManager manager = world.getServer().getPluginManager();
+                    Cancellable cancellable;
 
                     if (entity instanceof EntityHuman) {
-                        cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null);
+                        cancellable = CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, Action.PHYSICAL, blockposition, null, null);
                     } else {
                         cancellable = new EntityInteractEvent(entity.getBukkitEntity(), bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
                         manager.callEvent((EntityInteractEvent) cancellable);
@@ -77,15 +80,15 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockPressurePlateBinary.POWERED, Boolean.valueOf(i == 1));
+        return this.getBlockData().set(BlockPressurePlateBinary.POWERED, i == 1);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED)).booleanValue() ? 1 : 0;
+        return (Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED) ? 1 : 0;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPressurePlateBinary.POWERED});
+        return new BlockStateList(this, BlockPressurePlateBinary.POWERED);
     }
 
     static class SyntheticClass_1 {
@@ -95,23 +98,21 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
         static {
             try {
                 BlockPressurePlateBinary.SyntheticClass_1.a[BlockPressurePlateBinary.EnumMobType.EVERYTHING.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockPressurePlateBinary.SyntheticClass_1.a[BlockPressurePlateBinary.EnumMobType.MOBS.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
     }
 
-    public static enum EnumMobType {
+    public enum EnumMobType {
 
         EVERYTHING, MOBS;
 
-        private EnumMobType() {}
+        EnumMobType() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
index 5e96f9bd2..0c31df5ff 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.block.Action;
 import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
 
 public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
@@ -13,7 +16,7 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
 
     protected BlockPressurePlateWeighted(Material material, int i, MaterialMapColor materialmapcolor) {
         super(material, materialmapcolor);
-        this.j(this.blockStateList.getBlockData().set(BlockPressurePlateWeighted.POWER, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockPressurePlateWeighted.POWER, 0));
         this.weight = i;
     }
 
@@ -21,15 +24,12 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
         // CraftBukkit start
         //int i = Math.min(world.a(Entity.class, this.a(blockposition)).size(), this.b);
         int i = 0;
-        java.util.Iterator iterator = world.a(Entity.class, this.getBoundingBox(blockposition)).iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
-
-            org.bukkit.event.Cancellable cancellable;
+        for (Entity entity : world.a(Entity.class, this.getBoundingBox(blockposition))) {
+            Cancellable cancellable;
 
             if (entity instanceof EntityHuman) {
-                cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null);
+                cancellable = CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, Action.PHYSICAL, blockposition, null, null);
             } else {
                 cancellable = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
                 world.getServer().getPluginManager().callEvent((EntityInteractEvent) cancellable);
@@ -54,11 +54,11 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
     }
 
     protected int e(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockPressurePlateWeighted.POWER)).intValue();
+        return (Integer) iblockdata.get(BlockPressurePlateWeighted.POWER);
     }
 
     protected IBlockData a(IBlockData iblockdata, int i) {
-        return iblockdata.set(BlockPressurePlateWeighted.POWER, Integer.valueOf(i));
+        return iblockdata.set(BlockPressurePlateWeighted.POWER, i);
     }
 
     public int a(World world) {
@@ -66,14 +66,14 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockPressurePlateWeighted.POWER, Integer.valueOf(i));
+        return this.getBlockData().set(BlockPressurePlateWeighted.POWER, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockPressurePlateWeighted.POWER)).intValue();
+        return (Integer) iblockdata.get(BlockPressurePlateWeighted.POWER);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPressurePlateWeighted.POWER});
+        return new BlockStateList(this, BlockPressurePlateWeighted.POWER);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockPumpkin.java b/src/main/java/net/minecraft/server/BlockPumpkin.java
index 12958201a..ce628996a 100644
--- a/src/main/java/net/minecraft/server/BlockPumpkin.java
+++ b/src/main/java/net/minecraft/server/BlockPumpkin.java
@@ -4,7 +4,6 @@ import com.google.common.base.Predicate;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.util.BlockStateListPopulator;
-import org.bukkit.event.block.BlockRedstoneEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 // CraftBukkit end
 
@@ -66,7 +65,7 @@ public class BlockPumpkin extends BlockDirectional {
                 blockList.updateList();
 
             for (j = 0; j < 120; ++j) {
-                world.addParticle(EnumParticle.SNOW_SHOVEL, (double) blockposition1.getX() + world.random.nextDouble(), (double) blockposition1.getY() + world.random.nextDouble() * 2.5D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
+                world.addParticle(EnumParticle.SNOW_SHOVEL, (double) blockposition1.getX() + world.random.nextDouble(), (double) blockposition1.getY() + world.random.nextDouble() * 2.5D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D);
             }
 
             for (j = 0; j < this.getDetectorSnowGolem().b(); ++j) {
@@ -98,7 +97,7 @@ public class BlockPumpkin extends BlockDirectional {
                 blockList.updateList();
 
             for (j = 0; j < 120; ++j) {
-                world.addParticle(EnumParticle.SNOWBALL, (double) blockposition2.getX() + world.random.nextDouble(), (double) blockposition2.getY() + world.random.nextDouble() * 3.9D, (double) blockposition2.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
+                world.addParticle(EnumParticle.SNOWBALL, (double) blockposition2.getX() + world.random.nextDouble(), (double) blockposition2.getY() + world.random.nextDouble() * 3.9D, (double) blockposition2.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D);
             }
 
             for (j = 0; j < this.getDetectorIronGolem().c(); ++j) {
@@ -114,7 +113,7 @@ public class BlockPumpkin extends BlockDirectional {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return world.getType(blockposition).getBlock().material.isReplaceable() && World.a((IBlockAccess) world, blockposition.down());
+        return world.getType(blockposition).getBlock().material.isReplaceable() && World.a(world, blockposition.down());
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
@@ -126,11 +125,11 @@ public class BlockPumpkin extends BlockDirectional {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((EnumDirection) iblockdata.get(BlockPumpkin.FACING)).b();
+        return iblockdata.get(BlockPumpkin.FACING).b();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPumpkin.FACING});
+        return new BlockStateList(this, BlockPumpkin.FACING);
     }
 
     protected ShapeDetector getDetectorSnowGolemPart() {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneLamp.java b/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
index 4542b49c2..e132c4ca8 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
@@ -36,7 +36,7 @@ public class BlockRedstoneLamp extends Block {
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         if (!world.isClientSide) {
             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
-                world.a(blockposition, (Block) this, 4);
+                world.a(blockposition, this, 4);
             } else if (!this.a && world.isBlockIndirectlyPowered(blockposition)) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 0, 15).getNewCurrent() != 15) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneOre.java b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
index 119354ade..c81f80d1b 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneOre.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
@@ -106,9 +106,8 @@ public class BlockRedstoneOre extends Block {
     @Override
     public int getExpDrop(World world, IBlockData data, int i) {
         if (this.getDropType(data, world.random, i) != Item.getItemOf(this)) {
-            int j = 1 + world.random.nextInt(5);
 
-            return j;
+            return 1 + world.random.nextInt(5);
         }
         return 0;
         // CraftBukkit end
@@ -148,7 +147,7 @@ public class BlockRedstoneOre extends Block {
             }
 
             if (d1 < (double) blockposition.getX() || d1 > (double) (blockposition.getX() + 1) || d2 < 0.0D || d2 > (double) (blockposition.getY() + 1) || d3 < (double) blockposition.getZ() || d3 > (double) (blockposition.getZ() + 1)) {
-                world.addParticle(EnumParticle.REDSTONE, d1, d2, d3, 0.0D, 0.0D, 0.0D, new int[0]);
+                world.addParticle(EnumParticle.REDSTONE, d1, d2, d3, 0.0D, 0.0D, 0.0D);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index 78c6d195a..25c3543e8 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -1,7 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
@@ -18,7 +18,7 @@ public class BlockRedstoneTorch extends BlockTorch {
             BlockRedstoneTorch.b.put(world, Lists.<BlockRedstoneTorch.RedstoneUpdateInfo>newArrayList()); // CraftBukkit - fix decompile error
         }
 
-        List list = (List) BlockRedstoneTorch.b.get(world);
+        List list = BlockRedstoneTorch.b.get(world);
 
         if (flag) {
             list.add(new BlockRedstoneTorch.RedstoneUpdateInfo(blockposition, world.getTime()));
@@ -26,8 +26,8 @@ public class BlockRedstoneTorch extends BlockTorch {
 
         int i = 0;
 
-        for (int j = 0; j < list.size(); ++j) {
-            BlockRedstoneTorch.RedstoneUpdateInfo blockredstonetorch_redstoneupdateinfo = (BlockRedstoneTorch.RedstoneUpdateInfo) list.get(j);
+        for (Object value : list) {
+            RedstoneUpdateInfo blockredstonetorch_redstoneupdateinfo = (RedstoneUpdateInfo) value;
 
             if (blockredstonetorch_redstoneupdateinfo.a.equals(blockposition)) {
                 ++i;
@@ -66,9 +66,7 @@ public class BlockRedstoneTorch extends BlockTorch {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
         }
@@ -91,9 +89,7 @@ public class BlockRedstoneTorch extends BlockTorch {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
         }
@@ -105,7 +101,7 @@ public class BlockRedstoneTorch extends BlockTorch {
     }
 
     private boolean g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = ((EnumDirection) iblockdata.get(BlockRedstoneTorch.FACING)).opposite();
+        EnumDirection enumdirection = iblockdata.get(BlockRedstoneTorch.FACING).opposite();
 
         return world.isBlockFacePowered(blockposition.shift(enumdirection), enumdirection);
     }
@@ -114,7 +110,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         boolean flag = this.g(world, blockposition, iblockdata);
-        List list = (List) BlockRedstoneTorch.b.get(world);
+        List list = BlockRedstoneTorch.b.get(world);
 
         while (list != null && !list.isEmpty() && world.getTime() - ((BlockRedstoneTorch.RedstoneUpdateInfo) list.get(0)).b > 60L) {
             list.remove(0);
@@ -148,7 +144,7 @@ public class BlockRedstoneTorch extends BlockTorch {
                         double d1 = (double) blockposition.getY() + random.nextDouble() * 0.6D + 0.2D;
                         double d2 = (double) blockposition.getZ() + random.nextDouble() * 0.6D + 0.2D;
 
-                        world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+                        world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D);
                     }
 
                     world.a(blockposition, world.getType(blockposition).getBlock(), 160);
@@ -172,7 +168,7 @@ public class BlockRedstoneTorch extends BlockTorch {
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         if (!this.e(world, blockposition, iblockdata)) {
             if (this.isOn == this.g(world, blockposition, iblockdata)) {
-                world.a(blockposition, (Block) this, this.a(world));
+                world.a(blockposition, this, this.a(world));
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index df8ea04f3..d7b06e764 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -18,7 +18,7 @@ public class BlockRedstoneWire extends Block {
 
     public BlockRedstoneWire() {
         super(Material.ORIENTABLE);
-        this.j(this.blockStateList.getBlockData().set(BlockRedstoneWire.NORTH, BlockRedstoneWire.EnumRedstoneWireConnection.NONE).set(BlockRedstoneWire.EAST, BlockRedstoneWire.EnumRedstoneWireConnection.NONE).set(BlockRedstoneWire.SOUTH, BlockRedstoneWire.EnumRedstoneWireConnection.NONE).set(BlockRedstoneWire.WEST, BlockRedstoneWire.EnumRedstoneWireConnection.NONE).set(BlockRedstoneWire.POWER, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockRedstoneWire.NORTH, BlockRedstoneWire.EnumRedstoneWireConnection.NONE).set(BlockRedstoneWire.EAST, BlockRedstoneWire.EnumRedstoneWireConnection.NONE).set(BlockRedstoneWire.SOUTH, BlockRedstoneWire.EnumRedstoneWireConnection.NONE).set(BlockRedstoneWire.WEST, BlockRedstoneWire.EnumRedstoneWireConnection.NONE).set(BlockRedstoneWire.POWER, 0));
         this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.0625F, 1.0F);
     }
 
@@ -147,9 +147,7 @@ public class BlockRedstoneWire extends Block {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i1 = aenumdirection.length;
 
-            for (int j1 = 0; j1 < i1; ++j1) {
-                EnumDirection enumdirection1 = aenumdirection[j1];
-
+            for (EnumDirection enumdirection1 : aenumdirection) {
                 this.R.add(blockposition.shift(enumdirection1));
             }
         }
@@ -174,9 +172,7 @@ public class BlockRedstoneWire extends Block {
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumDirection enumdirection = aenumdirection[j];
-
+            for (EnumDirection enumdirection : aenumdirection) {
                 world.applyPhysics(blockposition.shift(enumdirection), this);
             }
 
@@ -288,7 +284,7 @@ public class BlockRedstoneWire extends Block {
         if (!this.Q) {
             return 0;
         } else {
-            int i = iblockdata.get(BlockRedstoneWire.POWER).intValue();
+            int i = iblockdata.get(BlockRedstoneWire.POWER);
 
             if (i == 0) {
                 return 0;
@@ -296,11 +292,8 @@ public class BlockRedstoneWire extends Block {
                 return i;
             } else {
                 EnumSet enumset = EnumSet.noneOf(EnumDirection.class);
-                Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-                while (iterator.hasNext()) {
-                    EnumDirection enumdirection1 = (EnumDirection) iterator.next();
 
+                for (EnumDirection enumdirection1 : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                     if (this.d(iblockaccess, blockposition, enumdirection1)) {
                         enumset.add(enumdirection1);
                     }
@@ -354,11 +347,11 @@ public class BlockRedstoneWire extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockRedstoneWire.POWER, Integer.valueOf(i));
+        return this.getBlockData().set(BlockRedstoneWire.POWER, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return iblockdata.get(BlockRedstoneWire.POWER).intValue();
+        return iblockdata.get(BlockRedstoneWire.POWER);
     }
 
     protected BlockStateList getStateList() {
diff --git a/src/main/java/net/minecraft/server/BlockReed.java b/src/main/java/net/minecraft/server/BlockReed.java
index 337f2c40e..8105add3e 100644
--- a/src/main/java/net/minecraft/server/BlockReed.java
+++ b/src/main/java/net/minecraft/server/BlockReed.java
@@ -9,7 +9,7 @@ public class BlockReed extends Block {
 
     protected BlockReed() {
         super(Material.PLANT);
-        this.j(this.blockStateList.getBlockData().set(BlockReed.AGE, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockReed.AGE, 0));
         float f = 0.375F;
 
         this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 1.0F, 0.5F + f);
@@ -22,21 +22,20 @@ public class BlockReed extends Block {
                 int i;
 
                 for (i = 1; world.getType(blockposition.down(i)).getBlock() == this; ++i) {
-                    ;
                 }
 
                 if (i < world.paperSpigotConfig.reedMaxHeight) { // PaperSpigot - Configurable max growth height for reed blocks) {
-                    int j = ((Integer) iblockdata.get(BlockReed.AGE)).intValue();
+                    int j = (Integer) iblockdata.get(BlockReed.AGE);
 
                     if (j >= (byte) range(3, (world.growthOdds / world.spigotConfig.caneModifier * 15) + 0.5F, 15)) { // Spigot
                         // CraftBukkit start
                         // world.setTypeUpdate(blockposition.up(), this.getBlockData()); // CraftBukkit
                         BlockPosition upPos = blockposition.up();
                         org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, upPos.getX(), upPos.getY(), upPos.getZ(), this, 0);
-                        world.setTypeAndData(blockposition, iblockdata.set(BlockReed.AGE, Integer.valueOf(0)), 4);
+                        world.setTypeAndData(blockposition, iblockdata.set(BlockReed.AGE, 0), 4);
                         // CraftBukkit end
                     } else {
-                        world.setTypeAndData(blockposition, iblockdata.set(BlockReed.AGE, Integer.valueOf(j + 1)), 4);
+                        world.setTypeAndData(blockposition, iblockdata.set(BlockReed.AGE, j + 1), 4);
                     }
                 }
             }
@@ -103,14 +102,14 @@ public class BlockReed extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockReed.AGE, Integer.valueOf(i));
+        return this.getBlockData().set(BlockReed.AGE, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockReed.AGE)).intValue();
+        return (Integer) iblockdata.get(BlockReed.AGE);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockReed.AGE});
+        return new BlockStateList(this, BlockReed.AGE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockSapling.java b/src/main/java/net/minecraft/server/BlockSapling.java
index 45fbf5c34..ae53e1e44 100644
--- a/src/main/java/net/minecraft/server/BlockSapling.java
+++ b/src/main/java/net/minecraft/server/BlockSapling.java
@@ -18,7 +18,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     public static TreeType treeType; // CraftBukkit
 
     protected BlockSapling() {
-        this.j(this.blockStateList.getBlockData().set(BlockSapling.TYPE, BlockWood.EnumLogVariant.OAK).set(BlockSapling.STAGE, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockSapling.TYPE, BlockWood.EnumLogVariant.OAK).set(BlockSapling.STAGE, 0));
         float f = 0.4F;
 
         this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f * 2.0F, 0.5F + f);
@@ -63,7 +63,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public void grow(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (((Integer) iblockdata.get(BlockSapling.STAGE)).intValue() == 0) {
+        if ((Integer) iblockdata.get(BlockSapling.STAGE) == 0) {
             world.setTypeAndData(blockposition, iblockdata.a(BlockSapling.STAGE), 4);
         } else {
             this.e(world, blockposition, iblockdata, random);
@@ -88,7 +88,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
         boolean flag = false;
         IBlockData iblockdata1;
 
-        switch (BlockSapling.SyntheticClass_1.a[((BlockWood.EnumLogVariant) iblockdata.get(BlockSapling.TYPE)).ordinal()]) {
+        switch (BlockSapling.SyntheticClass_1.a[iblockdata.get(BlockSapling.TYPE).ordinal()]) {
         case 1:
             label66:
             for (i = 0; i >= -1; --i) {
@@ -117,7 +117,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
 
         case 3:
             iblockdata1 = Blocks.LOG.getBlockData().set(BlockLog1.VARIANT, BlockWood.EnumLogVariant.JUNGLE);
-            IBlockData iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.JUNGLE).set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false));
+            IBlockData iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.JUNGLE).set(BlockLeaves.CHECK_DECAY, Boolean.FALSE);
 
             label78:
             for (i = 0; i >= -1; --i) {
@@ -198,7 +198,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public int getDropData(IBlockData iblockdata) {
-        return ((BlockWood.EnumLogVariant) iblockdata.get(BlockSapling.TYPE)).a();
+        return iblockdata.get(BlockSapling.TYPE).a();
     }
 
     public boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
@@ -214,19 +214,19 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockSapling.TYPE, BlockWood.EnumLogVariant.a(i & 7)).set(BlockSapling.STAGE, Integer.valueOf((i & 8) >> 3));
+        return this.getBlockData().set(BlockSapling.TYPE, BlockWood.EnumLogVariant.a(i & 7)).set(BlockSapling.STAGE, (i & 8) >> 3);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((BlockWood.EnumLogVariant) iblockdata.get(BlockSapling.TYPE)).a();
+        int i = b0 | iblockdata.get(BlockSapling.TYPE).a();
 
-        i |= ((Integer) iblockdata.get(BlockSapling.STAGE)).intValue() << 3;
+        i |= (Integer) iblockdata.get(BlockSapling.STAGE) << 3;
         return i;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockSapling.TYPE, BlockSapling.STAGE});
+        return new BlockStateList(this, BlockSapling.TYPE, BlockSapling.STAGE);
     }
 
     static class SyntheticClass_1 {
@@ -236,38 +236,32 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
         static {
             try {
                 BlockSapling.SyntheticClass_1.a[BlockWood.EnumLogVariant.SPRUCE.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSapling.SyntheticClass_1.a[BlockWood.EnumLogVariant.BIRCH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSapling.SyntheticClass_1.a[BlockWood.EnumLogVariant.JUNGLE.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSapling.SyntheticClass_1.a[BlockWood.EnumLogVariant.ACACIA.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSapling.SyntheticClass_1.a[BlockWood.EnumLogVariant.DARK_OAK.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSapling.SyntheticClass_1.a[BlockWood.EnumLogVariant.OAK.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockSkull.java b/src/main/java/net/minecraft/server/BlockSkull.java
index 95a104903..e958ab478 100644
--- a/src/main/java/net/minecraft/server/BlockSkull.java
+++ b/src/main/java/net/minecraft/server/BlockSkull.java
@@ -27,7 +27,7 @@ public class BlockSkull extends BlockContainer {
 
     protected BlockSkull() {
         super(Material.ORIENTABLE);
-        this.j(this.blockStateList.getBlockData().set(BlockSkull.FACING, EnumDirection.NORTH).set(BlockSkull.NODROP, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockSkull.FACING, EnumDirection.NORTH).set(BlockSkull.NODROP, Boolean.FALSE));
         this.a(0.25F, 0.0F, 0.25F, 0.75F, 0.5F, 0.75F);
     }
 
@@ -44,7 +44,7 @@ public class BlockSkull extends BlockContainer {
     }
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        switch (BlockSkull.SyntheticClass_1.a[((EnumDirection) iblockaccess.getType(blockposition).get(BlockSkull.FACING)).ordinal()]) {
+        switch (BlockSkull.SyntheticClass_1.a[iblockaccess.getType(blockposition).get(BlockSkull.FACING).ordinal()]) {
         case 1:
         default:
             this.a(0.25F, 0.0F, 0.25F, 0.75F, 0.5F, 0.75F);
@@ -74,7 +74,7 @@ public class BlockSkull extends BlockContainer {
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        return this.getBlockData().set(BlockSkull.FACING, entityliving.getDirection()).set(BlockSkull.NODROP, Boolean.valueOf(false));
+        return this.getBlockData().set(BlockSkull.FACING, entityliving.getDirection()).set(BlockSkull.NODROP, Boolean.FALSE);
     }
 
     public TileEntity a(World world, int i) {
@@ -109,7 +109,7 @@ public class BlockSkull extends BlockContainer {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman) {
         if (entityhuman.abilities.canInstantlyBuild) {
-            iblockdata = iblockdata.set(BlockSkull.NODROP, Boolean.valueOf(true));
+            iblockdata = iblockdata.set(BlockSkull.NODROP, Boolean.TRUE);
             world.setTypeAndData(blockposition, iblockdata, 4);
         }
 
@@ -169,7 +169,7 @@ public class BlockSkull extends BlockContainer {
                     // CraftBukkit start
                     // world.setTypeAndData(shapedetectorblock.getPosition(), shapedetectorblock.a().set(BlockSkull.NODROP, Boolean.valueOf(true)), 2);
                     BlockPosition pos = shapedetectorblock.getPosition();
-                    IBlockData data = shapedetectorblock.a().set(BlockSkull.NODROP, Boolean.valueOf(true));
+                    IBlockData data = shapedetectorblock.a().set(BlockSkull.NODROP, Boolean.TRUE);
                     blockList.setTypeAndData(pos.getX(), pos.getY(), pos.getZ(), data.getBlock(), data.getBlock().toLegacyData(data), 2);
                     // CraftBukkit end
                 }
@@ -202,13 +202,13 @@ public class BlockSkull extends BlockContainer {
                 while (iterator.hasNext()) {
                     EntityHuman entityhuman = (EntityHuman) iterator.next();
 
-                    entityhuman.b((Statistic) AchievementList.I);
+                    entityhuman.b(AchievementList.I);
                 }
 
                 int k;
 
                 for (k = 0; k < 120; ++k) {
-                    world.addParticle(EnumParticle.SNOWBALL, (double) blockposition1.getX() + world.random.nextDouble(), (double) (blockposition1.getY() - 2) + world.random.nextDouble() * 3.9D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
+                    world.addParticle(EnumParticle.SNOWBALL, (double) blockposition1.getX() + world.random.nextDouble(), (double) (blockposition1.getY() - 2) + world.random.nextDouble() * 3.9D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D);
                 }
 
                 for (k = 0; k < shapedetector.c(); ++k) {
@@ -225,14 +225,14 @@ public class BlockSkull extends BlockContainer {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockSkull.FACING, EnumDirection.fromType1(i & 7)).set(BlockSkull.NODROP, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockSkull.FACING, EnumDirection.fromType1(i & 7)).set(BlockSkull.NODROP, (i & 8) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockSkull.FACING)).a();
+        int i = b0 | iblockdata.get(BlockSkull.FACING).a();
 
-        if (((Boolean) iblockdata.get(BlockSkull.NODROP)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockSkull.NODROP)) {
             i |= 8;
         }
 
@@ -240,7 +240,7 @@ public class BlockSkull extends BlockContainer {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockSkull.FACING, BlockSkull.NODROP});
+        return new BlockStateList(this, BlockSkull.FACING, BlockSkull.NODROP);
     }
 
     protected ShapeDetector l() {
@@ -266,32 +266,27 @@ public class BlockSkull extends BlockContainer {
         static {
             try {
                 BlockSkull.SyntheticClass_1.a[EnumDirection.UP.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSkull.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSkull.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSkull.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockSkull.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockSnow.java b/src/main/java/net/minecraft/server/BlockSnow.java
index 03b1a8bc8..d7f8c9e44 100644
--- a/src/main/java/net/minecraft/server/BlockSnow.java
+++ b/src/main/java/net/minecraft/server/BlockSnow.java
@@ -8,7 +8,7 @@ public class BlockSnow extends Block {
 
     protected BlockSnow() {
         super(Material.PACKED_ICE);
-        this.j(this.blockStateList.getBlockData().set(BlockSnow.LAYERS, Integer.valueOf(1)));
+        this.j(this.blockStateList.getBlockData().set(BlockSnow.LAYERS, 1));
         this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
         this.a(true);
         this.a(CreativeModeTab.c);
@@ -16,11 +16,11 @@ public class BlockSnow extends Block {
     }
 
     public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return ((Integer) iblockaccess.getType(blockposition).get(BlockSnow.LAYERS)).intValue() < 5;
+        return (Integer) iblockaccess.getType(blockposition).get(BlockSnow.LAYERS) < 5;
     }
 
     public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        int i = ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() - 1;
+        int i = (Integer) iblockdata.get(BlockSnow.LAYERS) - 1;
         float f = 0.125F;
 
         return new AxisAlignedBB((double) blockposition.getX() + this.minX, (double) blockposition.getY() + this.minY, (double) blockposition.getZ() + this.minZ, (double) blockposition.getX() + this.maxX, (double) ((float) blockposition.getY() + (float) i * f), (double) blockposition.getZ() + this.maxZ);
@@ -41,7 +41,7 @@ public class BlockSnow extends Block {
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
 
-        this.b(((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue());
+        this.b((Integer) iblockdata.get(BlockSnow.LAYERS));
     }
 
     protected void b(int i) {
@@ -52,7 +52,7 @@ public class BlockSnow extends Block {
         IBlockData iblockdata = world.getType(blockposition.down());
         Block block = iblockdata.getBlock();
 
-        return block != Blocks.ICE && block != Blocks.PACKED_ICE ? (block.getMaterial() == Material.LEAVES ? true : (block == this && ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() >= 7 ? true : block.c() && block.material.isSolid())) : false;
+        return block != Blocks.ICE && block != Blocks.PACKED_ICE ? (block.getMaterial() == Material.LEAVES ? true : (block == this && (Integer) iblockdata.get(BlockSnow.LAYERS) >= 7 ? true : block.c() && block.material.isSolid())) : false;
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
@@ -70,7 +70,7 @@ public class BlockSnow extends Block {
     }
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, TileEntity tileentity) {
-        a(world, blockposition, new ItemStack(Items.SNOWBALL, ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() + 1, 0));
+        a(world, blockposition, new ItemStack(Items.SNOWBALL, (Integer) iblockdata.get(BlockSnow.LAYERS) + 1, 0));
         world.setAir(blockposition);
         entityhuman.b(StatisticList.MINE_BLOCK_COUNT[Block.getId(this)]);
     }
@@ -97,18 +97,18 @@ public class BlockSnow extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockSnow.LAYERS, Integer.valueOf((i & 7) + 1));
+        return this.getBlockData().set(BlockSnow.LAYERS, (i & 7) + 1);
     }
 
     public boolean a(World world, BlockPosition blockposition) {
-        return ((Integer) world.getType(blockposition).get(BlockSnow.LAYERS)).intValue() == 1;
+        return (Integer) world.getType(blockposition).get(BlockSnow.LAYERS) == 1;
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() - 1;
+        return (Integer) iblockdata.get(BlockSnow.LAYERS) - 1;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockSnow.LAYERS});
+        return new BlockStateList(this, BlockSnow.LAYERS);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockSoil.java b/src/main/java/net/minecraft/server/BlockSoil.java
index 362a346fc..1ff4df0ff 100644
--- a/src/main/java/net/minecraft/server/BlockSoil.java
+++ b/src/main/java/net/minecraft/server/BlockSoil.java
@@ -14,7 +14,7 @@ public class BlockSoil extends Block {
 
     protected BlockSoil() {
         super(Material.EARTH);
-        this.j(this.blockStateList.getBlockData().set(BlockSoil.MOISTURE, Integer.valueOf(0)));
+        this.j(this.blockStateList.getBlockData().set(BlockSoil.MOISTURE, 0));
         this.a(true);
         this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.9375F, 1.0F);
         this.e(255);
@@ -33,11 +33,11 @@ public class BlockSoil extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        int i = ((Integer) iblockdata.get(BlockSoil.MOISTURE)).intValue();
+        int i = (Integer) iblockdata.get(BlockSoil.MOISTURE);
 
         if (!this.f(world, blockposition) && !world.isRainingAt(blockposition.up())) {
             if (i > 0) {
-                world.setTypeAndData(blockposition, iblockdata.set(BlockSoil.MOISTURE, Integer.valueOf(i - 1)), 2);
+                world.setTypeAndData(blockposition, iblockdata.set(BlockSoil.MOISTURE, i - 1), 2);
             } else if (!this.e(world, blockposition)) {
                 // CraftBukkit start
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -48,7 +48,7 @@ public class BlockSoil extends Block {
                 world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData());
             }
         } else if (i < 7) {
-            world.setTypeAndData(blockposition, iblockdata.set(BlockSoil.MOISTURE, Integer.valueOf(7)), 2);
+            world.setTypeAndData(blockposition, iblockdata.set(BlockSoil.MOISTURE, 7), 2);
         }
 
     }
@@ -121,14 +121,14 @@ public class BlockSoil extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockSoil.MOISTURE, Integer.valueOf(i & 7));
+        return this.getBlockData().set(BlockSoil.MOISTURE, i & 7);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockSoil.MOISTURE)).intValue();
+        return (Integer) iblockdata.get(BlockSoil.MOISTURE);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockSoil.MOISTURE});
+        return new BlockStateList(this, BlockSoil.MOISTURE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockState.java b/src/main/java/net/minecraft/server/BlockState.java
index 17a16170c..049019dc4 100644
--- a/src/main/java/net/minecraft/server/BlockState.java
+++ b/src/main/java/net/minecraft/server/BlockState.java
@@ -3,7 +3,6 @@ package net.minecraft.server;
 import com.google.common.base.Objects;
 
 // TacoSpigot start
-import com.google.common.base.Preconditions;
 
 import net.techcable.tacospigot.BlockStateRegistry;
 // TacoSpigot end
diff --git a/src/main/java/net/minecraft/server/BlockStateBoolean.java b/src/main/java/net/minecraft/server/BlockStateBoolean.java
index d6d9a2282..4c9413de4 100644
--- a/src/main/java/net/minecraft/server/BlockStateBoolean.java
+++ b/src/main/java/net/minecraft/server/BlockStateBoolean.java
@@ -5,7 +5,7 @@ import java.util.Collection;
 
 public class BlockStateBoolean extends BlockState<Boolean> {
 
-    private final ImmutableSet<Boolean> a = ImmutableSet.of(Boolean.valueOf(true), Boolean.valueOf(false));
+    private final ImmutableSet<Boolean> a = ImmutableSet.of(Boolean.TRUE, Boolean.FALSE);
 
     protected BlockStateBoolean(String s) {
         super(s, Boolean.class);
diff --git a/src/main/java/net/minecraft/server/BlockStateEnum.java b/src/main/java/net/minecraft/server/BlockStateEnum.java
index ca38c5959..2dd3e144d 100644
--- a/src/main/java/net/minecraft/server/BlockStateEnum.java
+++ b/src/main/java/net/minecraft/server/BlockStateEnum.java
@@ -18,11 +18,9 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
     protected BlockStateEnum(String s, Class<T> oclass, Collection<T> collection) {
         super(s, oclass);
         this.a = ImmutableSet.copyOf(collection);
-        Iterator<T> iterator = collection.iterator(); // TacoSpigot - generic iterator
 
-        while (iterator.hasNext()) {
-            T oenum = iterator.next(); // TacoSpigot - generics
-            String s1 = ((INamable) oenum).getName();
+        for (T oenum : collection) {
+            String s1 = oenum.getName();
 
             if (this.b.containsKey(s1)) {
                 throw new IllegalArgumentException("Multiple values have the same name \'" + s1 + "\'");
@@ -37,7 +35,7 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
         return this.a;
     }
     public String a(T t0) {
-        return ((INamable) t0).getName();
+        return t0.getName();
     }
 
     // TacoSpigot start
diff --git a/src/main/java/net/minecraft/server/BlockStateInteger.java b/src/main/java/net/minecraft/server/BlockStateInteger.java
index 13b7d3724..f3660f166 100644
--- a/src/main/java/net/minecraft/server/BlockStateInteger.java
+++ b/src/main/java/net/minecraft/server/BlockStateInteger.java
@@ -50,7 +50,7 @@ public class BlockStateInteger extends BlockState<Integer> {
             HashSet hashset = Sets.newHashSet();
 
             for (int k = i; k <= j; ++k) {
-                hashset.add(Integer.valueOf(k));
+                hashset.add(k);
             }
 
             this.a = ImmutableSet.copyOf(hashset);
diff --git a/src/main/java/net/minecraft/server/BlockStateList.java b/src/main/java/net/minecraft/server/BlockStateList.java
index fda96405b..01ca45d13 100644
--- a/src/main/java/net/minecraft/server/BlockStateList.java
+++ b/src/main/java/net/minecraft/server/BlockStateList.java
@@ -20,11 +20,11 @@ import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.stream.Collectors;
 
 // TacoSpigot start
 import com.google.common.collect.Table;
 
-import net.techcable.tacospigot.BlockStateRegistry;
 import net.techcable.tacospigot.ImmutableArrayMap;
 import net.techcable.tacospigot.ImmutableArrayTable;
 import net.techcable.tacospigot.TacoSpigotConfig;
@@ -78,7 +78,7 @@ public class BlockStateList {
         while (iterator.hasNext()) {
             BlockStateList.BlockData blockstatelist_blockdata1 = (BlockStateList.BlockData) iterator.next();
 
-            blockstatelist_blockdata1.a((Map) linkedhashmap);
+            blockstatelist_blockdata1.a(linkedhashmap);
         }
 
         this.e = ImmutableList.copyOf(arraylist);
@@ -92,14 +92,14 @@ public class BlockStateList {
         ArrayList arraylist = Lists.newArrayList();
 
         for (int i = 0; i < this.d.size(); ++i) {
-            arraylist.add(((IBlockState) this.d.get(i)).c());
+            arraylist.add(this.d.get(i).c());
         }
 
         return arraylist;
     }
 
     public IBlockData getBlockData() {
-        return (IBlockData) this.e.get(0);
+        return this.e.get(0);
     }
 
     public Block getBlock() {
@@ -111,7 +111,7 @@ public class BlockStateList {
     }
 
     public String toString() {
-        return Objects.toStringHelper(this).add("block", Block.REGISTRY.c(this.c)).add("properties", Iterables.transform(this.d, BlockStateList.b)).toString();
+        return Objects.toStringHelper(this).add("block", Block.REGISTRY.c(this.c)).add("properties", this.d.stream().map(BlockStateList.b::apply).collect(Collectors.toList())).toString();
     }
 
     static class BlockData extends BlockDataAbstract {
@@ -143,7 +143,7 @@ public class BlockStateList {
             // TacoSpigot start - runtime check -> assertion
             assert this.b.containsKey(iblockstate) : "Cannot get property " + iblockstate + " as it does not exist in " + this.a.P();
             Object value = this.b.get(iblockstate);
-            assert value == bAsImmutableMap.get(iblockstate) : "Array map gave data " + String.valueOf(value) + " and regular map gave data " + String.valueOf(bAsImmutableMap.get(iblockstate));
+            assert value == bAsImmutableMap.get(iblockstate) : "Array map gave data " + value + " and regular map gave data " + bAsImmutableMap.get(iblockstate);
             assert value != null : "Null value for state " + iblockstate + " and data " + this;
             assert iblockstate.b().isInstance(value) : "Value " + value + " for state " + iblockstate + " and data " + this + " not instanceof " + iblockstate.b().getTypeName();
             return (T) value;
@@ -156,7 +156,7 @@ public class BlockStateList {
             assert v0 != null : "Null value for block state " + iblockstate;
             assert this.b.containsKey(iblockstate) : "Cannot set property " + iblockstate + " as it does not exist in " + this.a.P();
             assert  iblockstate.c().contains(v0) : "Cannot set property " + iblockstate + " to " + v0 + " on block " + Block.REGISTRY.c(this.a) + ", it is not an allowed value";
-            IBlockData data = (IBlockData) (this.b.get(iblockstate) == v0 ? this : (IBlockData) this.c.get(iblockstate, v0));
+            IBlockData data = this.b.get(iblockstate) == v0 ? this : this.c.get(iblockstate, v0);
             assert data != null : "No block data with property " + iblockstate + " and value " + v0 + " for block data " + this;
             return data;
             // TacoSpigot end
@@ -183,14 +183,10 @@ public class BlockStateList {
                 throw new IllegalStateException();
             } else {
                 HashBasedTable hashbasedtable = HashBasedTable.create();
-                Iterator iterator = this.b.keySet().iterator();
 
-                while (iterator.hasNext()) {
-                    IBlockState iblockstate = (IBlockState) iterator.next();
-                    Iterator iterator1 = iblockstate.c().iterator();
-
-                    while (iterator1.hasNext()) {
-                        Comparable comparable = (Comparable) iterator1.next();
+                for (IBlockState iblockstate : this.b.keySet()) {
+                    for (Object o : iblockstate.c()) {
+                        Comparable comparable = (Comparable) o;
 
                         if (comparable != this.get(iblockstate)) { // TacoSpigot - use this.get(iblockstate) instead of this.b.get(iblockstate)
                             assert map.get(this.b(iblockstate, comparable)) != null : "Map doesn't contain block data with state " + iblockstate + " and comparable " + comparable + b(iblockstate, comparable); // TacoSpigot - assert present
@@ -203,7 +199,7 @@ public class BlockStateList {
                 if (TacoSpigotConfig.useArraysForBlockStates) {
                     this.c = new ImmutableArrayTable<IBlockState, Comparable, IBlockData> (
                             IBlockState.INDEXER,
-                            (IBlockState state, Comparable value) -> state.getValueId(value),
+                            IBlockState::getValueId,
                             hashbasedtable
                     );
                 } else {
diff --git a/src/main/java/net/minecraft/server/BlockStationary.java b/src/main/java/net/minecraft/server/BlockStationary.java
index 4860aa41b..5226996ef 100644
--- a/src/main/java/net/minecraft/server/BlockStationary.java
+++ b/src/main/java/net/minecraft/server/BlockStationary.java
@@ -26,7 +26,7 @@ public class BlockStationary extends BlockFluids {
         BlockFlowing blockflowing = a(this.material);
 
         world.setTypeAndData(blockposition, blockflowing.getBlockData().set(BlockStationary.LEVEL, iblockdata.get(BlockStationary.LEVEL)), 2);
-        world.a(blockposition, (Block) blockflowing, this.a(world));
+        world.a(blockposition, blockflowing, this.a(world));
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -83,9 +83,7 @@ public class BlockStationary extends BlockFluids {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumDirection enumdirection = aenumdirection[j];
-
+        for (EnumDirection enumdirection : aenumdirection) {
             if (this.m(world, blockposition.shift(enumdirection))) {
                 return true;
             }
diff --git a/src/main/java/net/minecraft/server/BlockStem.java b/src/main/java/net/minecraft/server/BlockStem.java
index 2618c40f2..8c5d9c2b6 100644
--- a/src/main/java/net/minecraft/server/BlockStem.java
+++ b/src/main/java/net/minecraft/server/BlockStem.java
@@ -21,7 +21,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     private final Block blockFruit;
 
     protected BlockStem(Block block) {
-        this.j(this.blockStateList.getBlockData().set(BlockStem.AGE, Integer.valueOf(0)).set(BlockStem.FACING, EnumDirection.UP));
+        this.j(this.blockStateList.getBlockData().set(BlockStem.AGE, 0).set(BlockStem.FACING, EnumDirection.UP));
         this.blockFruit = block;
         this.a(true);
         float f = 0.125F;
@@ -32,11 +32,8 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
         iblockdata = iblockdata.set(BlockStem.FACING, EnumDirection.UP);
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             if (iblockaccess.getType(blockposition.shift(enumdirection)).getBlock() == this.blockFruit) {
                 iblockdata = iblockdata.set(BlockStem.FACING, enumdirection);
                 break;
@@ -53,21 +50,18 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         super.b(world, blockposition, iblockdata, random);
         if (world.getLightLevel(blockposition.up()) >= 9) {
-            float f = BlockCrops.a((Block) this, world, blockposition);
+            float f = BlockCrops.a(this, world, blockposition);
 
             if (random.nextInt((int) (world.growthOdds / (this == Blocks.PUMPKIN_STEM? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) * (25.0F / f)) + 1) == 0) { // Spigot
-                int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
+                int i = (Integer) iblockdata.get(BlockStem.AGE);
 
                 if (i < 7) {
-                    iblockdata = iblockdata.set(BlockStem.AGE, Integer.valueOf(i + 1));
+                    iblockdata = iblockdata.set(BlockStem.AGE, i + 1);
                     // world.setTypeAndData(blockposition, iblockdata, 2); // CraftBukkit
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(iblockdata)); // CraftBukkit
                 } else {
-                    Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-                    while (iterator.hasNext()) {
-                        EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+                    for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                         if (world.getType(blockposition.shift(enumdirection)).getBlock() == this.blockFruit) {
                             return;
                         }
@@ -87,7 +81,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     }
 
     public void g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue() + MathHelper.nextInt(world.random, 2, 5);
+        int i = (Integer) iblockdata.get(BlockStem.AGE) + MathHelper.nextInt(world.random, 2, 5);
 
         // world.setTypeAndData(blockposition, iblockdata.set(BlockStem.AGE, Integer.valueOf(Math.min(7, i))), 2);
         CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, Math.min(7, i)); // CraftBukkit
@@ -100,7 +94,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     }
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        this.maxY = (double) ((float) (((Integer) iblockaccess.getType(blockposition).get(BlockStem.AGE)).intValue() * 2 + 2) / 16.0F);
+        this.maxY = (double) ((float) ((Integer) iblockaccess.getType(blockposition).get(BlockStem.AGE) * 2 + 2) / 16.0F);
         float f = 0.125F;
 
         this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, (float) this.maxY, 0.5F + f);
@@ -112,7 +106,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
             Item item = this.l();
 
             if (item != null) {
-                int j = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
+                int j = (Integer) iblockdata.get(BlockStem.AGE);
 
                 for (int k = 0; k < 3; ++k) {
                     if (world.random.nextInt(15) <= j) {
@@ -133,7 +127,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     }
 
     public boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
-        return ((Integer) iblockdata.get(BlockStem.AGE)).intValue() != 7;
+        return (Integer) iblockdata.get(BlockStem.AGE) != 7;
     }
 
     public boolean a(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
@@ -145,14 +139,14 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockStem.AGE, Integer.valueOf(i));
+        return this.getBlockData().set(BlockStem.AGE, i);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
+        return (Integer) iblockdata.get(BlockStem.AGE);
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockStem.AGE, BlockStem.FACING});
+        return new BlockStateList(this, BlockStem.AGE, BlockStem.FACING);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
index 3d1e583f3..231348d84 100644
--- a/src/main/java/net/minecraft/server/BlockTNT.java
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -6,14 +6,14 @@ public class BlockTNT extends Block {
 
     public BlockTNT() {
         super(Material.TNT);
-        this.j(this.blockStateList.getBlockData().set(BlockTNT.EXPLODE, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockTNT.EXPLODE, Boolean.FALSE));
         this.a(CreativeModeTab.d);
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         super.onPlace(world, blockposition, iblockdata);
         if (world.isBlockIndirectlyPowered(blockposition)) {
-            this.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+            this.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.TRUE));
             world.setAir(blockposition);
         }
 
@@ -21,7 +21,7 @@ public class BlockTNT extends Block {
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         if (world.isBlockIndirectlyPowered(blockposition)) {
-            this.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+            this.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.TRUE));
             world.setAir(blockposition);
         }
 
@@ -47,7 +47,7 @@ public class BlockTNT extends Block {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving) {
         if (!world.isClientSide) {
-            if (((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue()) {
+            if ((Boolean) iblockdata.get(BlockTNT.EXPLODE)) {
                 org.bukkit.Location loc = new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()); // PaperSpigot
                 // PaperSpigot start - Fix cannons
                 double y = blockposition.getY();
@@ -67,7 +67,7 @@ public class BlockTNT extends Block {
             Item item = entityhuman.bZ().getItem();
 
             if (item == Items.FLINT_AND_STEEL || item == Items.FIRE_CHARGE) {
-                this.a(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)), (EntityLiving) entityhuman);
+                this.a(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.TRUE), (EntityLiving) entityhuman);
                 world.setAir(blockposition);
                 if (item == Items.FLINT_AND_STEEL) {
                     entityhuman.bZ().damage(1, entityhuman);
@@ -92,7 +92,7 @@ public class BlockTNT extends Block {
                     return;
                 }
                 // CraftBukkit end
-                this.a(world, blockposition, world.getType(blockposition).set(BlockTNT.EXPLODE, Boolean.valueOf(true)), entityarrow.shooter instanceof EntityLiving ? (EntityLiving) entityarrow.shooter : null);
+                this.a(world, blockposition, world.getType(blockposition).set(BlockTNT.EXPLODE, Boolean.TRUE), entityarrow.shooter instanceof EntityLiving ? (EntityLiving) entityarrow.shooter : null);
                 world.setAir(blockposition);
             }
         }
@@ -104,14 +104,14 @@ public class BlockTNT extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockTNT.EXPLODE, Boolean.valueOf((i & 1) > 0));
+        return this.getBlockData().set(BlockTNT.EXPLODE, (i & 1) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue() ? 1 : 0;
+        return (Boolean) iblockdata.get(BlockTNT.EXPLODE) ? 1 : 0;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTNT.EXPLODE});
+        return new BlockStateList(this, BlockTNT.EXPLODE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockTrapdoor.java b/src/main/java/net/minecraft/server/BlockTrapdoor.java
index 1a2cdd1bc..8b4b26cac 100644
--- a/src/main/java/net/minecraft/server/BlockTrapdoor.java
+++ b/src/main/java/net/minecraft/server/BlockTrapdoor.java
@@ -6,13 +6,13 @@ import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class BlockTrapdoor extends Block {
 
-    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", (Predicate) EnumDirection.EnumDirectionLimit.HORIZONTAL);
+    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", EnumDirection.EnumDirectionLimit.HORIZONTAL);
     public static final BlockStateBoolean OPEN = BlockStateBoolean.of("open");
     public static final BlockStateEnum<BlockTrapdoor.EnumTrapdoorHalf> HALF = BlockStateEnum.of("half", BlockTrapdoor.EnumTrapdoorHalf.class);
 
     protected BlockTrapdoor(Material material) {
         super(material);
-        this.j(this.blockStateList.getBlockData().set(BlockTrapdoor.FACING, EnumDirection.NORTH).set(BlockTrapdoor.OPEN, Boolean.valueOf(false)).set(BlockTrapdoor.HALF, BlockTrapdoor.EnumTrapdoorHalf.BOTTOM));
+        this.j(this.blockStateList.getBlockData().set(BlockTrapdoor.FACING, EnumDirection.NORTH).set(BlockTrapdoor.OPEN, Boolean.FALSE).set(BlockTrapdoor.HALF, BlockTrapdoor.EnumTrapdoorHalf.BOTTOM));
         float f = 0.5F;
         float f1 = 1.0F;
 
@@ -29,7 +29,7 @@ public class BlockTrapdoor extends Block {
     }
 
     public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return !((Boolean) iblockaccess.getType(blockposition).get(BlockTrapdoor.OPEN)).booleanValue();
+        return !(Boolean) iblockaccess.getType(blockposition).get(BlockTrapdoor.OPEN);
     }
 
     public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -50,8 +50,8 @@ public class BlockTrapdoor extends Block {
     public void d(IBlockData iblockdata) {
         if (iblockdata.getBlock() == this) {
             boolean flag = iblockdata.get(BlockTrapdoor.HALF) == BlockTrapdoor.EnumTrapdoorHalf.TOP;
-            Boolean obool = (Boolean) iblockdata.get(BlockTrapdoor.OPEN);
-            EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockTrapdoor.FACING);
+            Boolean obool = iblockdata.get(BlockTrapdoor.OPEN);
+            EnumDirection enumdirection = iblockdata.get(BlockTrapdoor.FACING);
             float f = 0.1875F;
 
             if (flag) {
@@ -60,7 +60,7 @@ public class BlockTrapdoor extends Block {
                 this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.1875F, 1.0F);
             }
 
-            if (obool.booleanValue()) {
+            if (obool) {
                 if (enumdirection == EnumDirection.NORTH) {
                     this.a(0.0F, 0.0F, 0.8125F, 1.0F, 1.0F, 1.0F);
                 }
@@ -87,14 +87,14 @@ public class BlockTrapdoor extends Block {
         } else {
             iblockdata = iblockdata.a(BlockTrapdoor.OPEN);
             world.setTypeAndData(blockposition, iblockdata, 2);
-            world.a(entityhuman, ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue() ? 1003 : 1006, blockposition, 0);
+            world.a(entityhuman, (Boolean) iblockdata.get(BlockTrapdoor.OPEN) ? 1003 : 1006, blockposition, 0);
             return true;
         }
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         if (!world.isClientSide) {
-            BlockPosition blockposition1 = blockposition.shift(((EnumDirection) iblockdata.get(BlockTrapdoor.FACING)).opposite());
+            BlockPosition blockposition1 = blockposition.shift(iblockdata.get(BlockTrapdoor.FACING).opposite());
 
             if (!c(world.getType(blockposition1).getBlock())) {
                 world.setAir(blockposition);
@@ -108,7 +108,7 @@ public class BlockTrapdoor extends Block {
                     org.bukkit.block.Block bblock = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
 
                     int power = bblock.getBlockPower();
-                    int oldPower = (Boolean) iblockdata.get(OPEN) ? 15 : 0;
+                    int oldPower = iblockdata.get(OPEN) ? 15 : 0;
 
                     if (oldPower == 0 ^ power == 0 || block.isPowerSource()) {
                         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
@@ -116,11 +116,11 @@ public class BlockTrapdoor extends Block {
                         flag = eventRedstone.getNewCurrent() > 0;
                     }
                     // CraftBukkit end
-                    boolean flag1 = ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue();
+                    boolean flag1 = (Boolean) iblockdata.get(BlockTrapdoor.OPEN);
 
                     if (flag1 != flag) {
-                        world.setTypeAndData(blockposition, iblockdata.set(BlockTrapdoor.OPEN, Boolean.valueOf(flag)), 2);
-                        world.a((EntityHuman) null, flag ? 1003 : 1006, blockposition, 0);
+                        world.setTypeAndData(blockposition, iblockdata.set(BlockTrapdoor.OPEN, flag), 2);
+                        world.a(null, flag ? 1003 : 1006, blockposition, 0);
                     }
                 }
 
@@ -137,7 +137,7 @@ public class BlockTrapdoor extends Block {
         IBlockData iblockdata = this.getBlockData();
 
         if (enumdirection.k().c()) {
-            iblockdata = iblockdata.set(BlockTrapdoor.FACING, enumdirection).set(BlockTrapdoor.OPEN, Boolean.valueOf(false));
+            iblockdata = iblockdata.set(BlockTrapdoor.FACING, enumdirection).set(BlockTrapdoor.OPEN, Boolean.FALSE);
             iblockdata = iblockdata.set(BlockTrapdoor.HALF, f1 > 0.5F ? BlockTrapdoor.EnumTrapdoorHalf.TOP : BlockTrapdoor.EnumTrapdoorHalf.BOTTOM);
         }
 
@@ -187,14 +187,14 @@ public class BlockTrapdoor extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockTrapdoor.FACING, b(i)).set(BlockTrapdoor.OPEN, Boolean.valueOf((i & 4) != 0)).set(BlockTrapdoor.HALF, (i & 8) == 0 ? BlockTrapdoor.EnumTrapdoorHalf.BOTTOM : BlockTrapdoor.EnumTrapdoorHalf.TOP);
+        return this.getBlockData().set(BlockTrapdoor.FACING, b(i)).set(BlockTrapdoor.OPEN, (i & 4) != 0).set(BlockTrapdoor.HALF, (i & 8) == 0 ? BlockTrapdoor.EnumTrapdoorHalf.BOTTOM : BlockTrapdoor.EnumTrapdoorHalf.TOP);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | a((EnumDirection) iblockdata.get(BlockTrapdoor.FACING));
+        int i = b0 | a(iblockdata.get(BlockTrapdoor.FACING));
 
-        if (((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)) {
             i |= 4;
         }
 
@@ -206,7 +206,7 @@ public class BlockTrapdoor extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTrapdoor.FACING, BlockTrapdoor.OPEN, BlockTrapdoor.HALF});
+        return new BlockStateList(this, BlockTrapdoor.FACING, BlockTrapdoor.OPEN, BlockTrapdoor.HALF);
     }
 
     static class SyntheticClass_1 {
@@ -216,38 +216,34 @@ public class BlockTrapdoor extends Block {
         static {
             try {
                 BlockTrapdoor.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockTrapdoor.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockTrapdoor.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockTrapdoor.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
     }
 
-    public static enum EnumTrapdoorHalf implements INamable {
+    public enum EnumTrapdoorHalf implements INamable {
 
         TOP("top"), BOTTOM("bottom");
 
         private final String c;
 
-        private EnumTrapdoorHalf(String s) {
+        EnumTrapdoorHalf(String s) {
             this.c = s;
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockTripwire.java b/src/main/java/net/minecraft/server/BlockTripwire.java
index bc61e17a9..7b7af8416 100644
--- a/src/main/java/net/minecraft/server/BlockTripwire.java
+++ b/src/main/java/net/minecraft/server/BlockTripwire.java
@@ -19,13 +19,13 @@ public class BlockTripwire extends Block {
 
     public BlockTripwire() {
         super(Material.ORIENTABLE);
-        this.j(this.blockStateList.getBlockData().set(BlockTripwire.POWERED, Boolean.valueOf(false)).set(BlockTripwire.SUSPENDED, Boolean.valueOf(false)).set(BlockTripwire.ATTACHED, Boolean.valueOf(false)).set(BlockTripwire.DISARMED, Boolean.valueOf(false)).set(BlockTripwire.NORTH, Boolean.valueOf(false)).set(BlockTripwire.EAST, Boolean.valueOf(false)).set(BlockTripwire.SOUTH, Boolean.valueOf(false)).set(BlockTripwire.WEST, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockTripwire.POWERED, Boolean.FALSE).set(BlockTripwire.SUSPENDED, Boolean.FALSE).set(BlockTripwire.ATTACHED, Boolean.FALSE).set(BlockTripwire.DISARMED, Boolean.FALSE).set(BlockTripwire.NORTH, Boolean.FALSE).set(BlockTripwire.EAST, Boolean.FALSE).set(BlockTripwire.SOUTH, Boolean.FALSE).set(BlockTripwire.WEST, Boolean.FALSE));
         this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.15625F, 1.0F);
         this.a(true);
     }
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return iblockdata.set(BlockTripwire.NORTH, Boolean.valueOf(c(iblockaccess, blockposition, iblockdata, EnumDirection.NORTH))).set(BlockTripwire.EAST, Boolean.valueOf(c(iblockaccess, blockposition, iblockdata, EnumDirection.EAST))).set(BlockTripwire.SOUTH, Boolean.valueOf(c(iblockaccess, blockposition, iblockdata, EnumDirection.SOUTH))).set(BlockTripwire.WEST, Boolean.valueOf(c(iblockaccess, blockposition, iblockdata, EnumDirection.WEST)));
+        return iblockdata.set(BlockTripwire.NORTH, c(iblockaccess, blockposition, iblockdata, EnumDirection.NORTH)).set(BlockTripwire.EAST, c(iblockaccess, blockposition, iblockdata, EnumDirection.EAST)).set(BlockTripwire.SOUTH, c(iblockaccess, blockposition, iblockdata, EnumDirection.SOUTH)).set(BlockTripwire.WEST, c(iblockaccess, blockposition, iblockdata, EnumDirection.WEST));
     }
 
     public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -45,8 +45,8 @@ public class BlockTripwire extends Block {
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        boolean flag = ((Boolean) iblockdata.get(BlockTripwire.SUSPENDED)).booleanValue();
-        boolean flag1 = !World.a((IBlockAccess) world, blockposition.down());
+        boolean flag = (Boolean) iblockdata.get(BlockTripwire.SUSPENDED);
+        boolean flag1 = !World.a(world, blockposition.down());
 
         if (flag != flag1) {
             this.b(world, blockposition, iblockdata, 0);
@@ -57,8 +57,8 @@ public class BlockTripwire extends Block {
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
-        boolean flag = ((Boolean) iblockdata.get(BlockTripwire.ATTACHED)).booleanValue();
-        boolean flag1 = ((Boolean) iblockdata.get(BlockTripwire.SUSPENDED)).booleanValue();
+        boolean flag = (Boolean) iblockdata.get(BlockTripwire.ATTACHED);
+        boolean flag1 = (Boolean) iblockdata.get(BlockTripwire.SUSPENDED);
 
         if (!flag1) {
             this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.09375F, 1.0F);
@@ -71,19 +71,19 @@ public class BlockTripwire extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        iblockdata = iblockdata.set(BlockTripwire.SUSPENDED, Boolean.valueOf(!World.a((IBlockAccess) world, blockposition.down())));
+        iblockdata = iblockdata.set(BlockTripwire.SUSPENDED, !World.a((IBlockAccess) world, blockposition.down()));
         world.setTypeAndData(blockposition, iblockdata, 3);
         this.e(world, blockposition, iblockdata);
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        this.e(world, blockposition, iblockdata.set(BlockTripwire.POWERED, Boolean.valueOf(true)));
+        this.e(world, blockposition, iblockdata.set(BlockTripwire.POWERED, Boolean.TRUE));
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman) {
         if (!world.isClientSide) {
             if (entityhuman.bZ() != null && entityhuman.bZ().getItem() == Items.SHEARS) {
-                world.setTypeAndData(blockposition, iblockdata.set(BlockTripwire.DISARMED, Boolean.valueOf(true)), 4);
+                world.setTypeAndData(blockposition, iblockdata.set(BlockTripwire.DISARMED, Boolean.TRUE), 4);
             }
 
         }
@@ -122,7 +122,7 @@ public class BlockTripwire extends Block {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
         if (!world.isClientSide) {
-            if (!((Boolean) iblockdata.get(BlockTripwire.POWERED)).booleanValue()) {
+            if (!(Boolean) iblockdata.get(BlockTripwire.POWERED)) {
                 this.e(world, blockposition);
             }
         }
@@ -132,7 +132,7 @@ public class BlockTripwire extends Block {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
-            if (((Boolean) world.getType(blockposition).get(BlockTripwire.POWERED)).booleanValue()) {
+            if ((Boolean) world.getType(blockposition).get(BlockTripwire.POWERED)) {
                 this.e(world, blockposition);
             }
         }
@@ -140,15 +140,14 @@ public class BlockTripwire extends Block {
 
     private void e(World world, BlockPosition blockposition) {
         IBlockData iblockdata = world.getType(blockposition);
-        boolean flag = ((Boolean) iblockdata.get(BlockTripwire.POWERED)).booleanValue();
+        boolean flag = (Boolean) iblockdata.get(BlockTripwire.POWERED);
         boolean flag1 = false;
-        List list = world.getEntities((Entity) null, new AxisAlignedBB((double) blockposition.getX() + this.minX, (double) blockposition.getY() + this.minY, (double) blockposition.getZ() + this.minZ, (double) blockposition.getX() + this.maxX, (double) blockposition.getY() + this.maxY, (double) blockposition.getZ() + this.maxZ));
+        List list = world.getEntities(null, new AxisAlignedBB((double) blockposition.getX() + this.minX, (double) blockposition.getY() + this.minY, (double) blockposition.getZ() + this.minZ, (double) blockposition.getX() + this.maxX, (double) blockposition.getY() + this.maxY, (double) blockposition.getZ() + this.maxZ));
 
         if (!list.isEmpty()) {
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
+            for (Object value : list) {
+                Entity entity = (Entity) value;
 
                 if (!entity.aI()) {
                     flag1 = true;
@@ -158,7 +157,7 @@ public class BlockTripwire extends Block {
         }
 
         // CraftBukkit start - Call interact even when triggering connected tripwire
-        if (flag != flag1 && flag1 && (Boolean)iblockdata.get(ATTACHED)) {
+        if (flag != flag1 && flag1 && iblockdata.get(ATTACHED)) {
             org.bukkit.World bworld = world.getWorld();
             org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
             org.bukkit.block.Block block = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -192,13 +191,13 @@ public class BlockTripwire extends Block {
         // CraftBukkit end
 
         if (flag1 != flag) {
-            iblockdata = iblockdata.set(BlockTripwire.POWERED, Boolean.valueOf(flag1));
+            iblockdata = iblockdata.set(BlockTripwire.POWERED, flag1);
             world.setTypeAndData(blockposition, iblockdata, 3);
             this.e(world, blockposition, iblockdata);
         }
 
         if (flag1) {
-            world.a(blockposition, (Block) this, this.a(world));
+            world.a(blockposition, this, this.a(world));
         }
 
     }
@@ -213,8 +212,8 @@ public class BlockTripwire extends Block {
 
             return iblockdata1.get(BlockTripwireHook.FACING) == enumdirection1;
         } else if (block == Blocks.TRIPWIRE) {
-            boolean flag = ((Boolean) iblockdata.get(BlockTripwire.SUSPENDED)).booleanValue();
-            boolean flag1 = ((Boolean) iblockdata1.get(BlockTripwire.SUSPENDED)).booleanValue();
+            boolean flag = (Boolean) iblockdata.get(BlockTripwire.SUSPENDED);
+            boolean flag1 = (Boolean) iblockdata1.get(BlockTripwire.SUSPENDED);
 
             return flag == flag1;
         } else {
@@ -223,25 +222,25 @@ public class BlockTripwire extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockTripwire.POWERED, Boolean.valueOf((i & 1) > 0)).set(BlockTripwire.SUSPENDED, Boolean.valueOf((i & 2) > 0)).set(BlockTripwire.ATTACHED, Boolean.valueOf((i & 4) > 0)).set(BlockTripwire.DISARMED, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockTripwire.POWERED, (i & 1) > 0).set(BlockTripwire.SUSPENDED, (i & 2) > 0).set(BlockTripwire.ATTACHED, (i & 4) > 0).set(BlockTripwire.DISARMED, (i & 8) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         int i = 0;
 
-        if (((Boolean) iblockdata.get(BlockTripwire.POWERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockTripwire.POWERED)) {
             i |= 1;
         }
 
-        if (((Boolean) iblockdata.get(BlockTripwire.SUSPENDED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockTripwire.SUSPENDED)) {
             i |= 2;
         }
 
-        if (((Boolean) iblockdata.get(BlockTripwire.ATTACHED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockTripwire.ATTACHED)) {
             i |= 4;
         }
 
-        if (((Boolean) iblockdata.get(BlockTripwire.DISARMED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockTripwire.DISARMED)) {
             i |= 8;
         }
 
@@ -249,6 +248,6 @@ public class BlockTripwire extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTripwire.POWERED, BlockTripwire.SUSPENDED, BlockTripwire.ATTACHED, BlockTripwire.DISARMED, BlockTripwire.NORTH, BlockTripwire.EAST, BlockTripwire.WEST, BlockTripwire.SOUTH});
+        return new BlockStateList(this, BlockTripwire.POWERED, BlockTripwire.SUSPENDED, BlockTripwire.ATTACHED, BlockTripwire.DISARMED, BlockTripwire.NORTH, BlockTripwire.EAST, BlockTripwire.WEST, BlockTripwire.SOUTH);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockTripwireHook.java b/src/main/java/net/minecraft/server/BlockTripwireHook.java
index 0ad4a20f3..5a134f66e 100644
--- a/src/main/java/net/minecraft/server/BlockTripwireHook.java
+++ b/src/main/java/net/minecraft/server/BlockTripwireHook.java
@@ -9,20 +9,20 @@ import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class BlockTripwireHook extends Block {
 
-    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", (Predicate) EnumDirection.EnumDirectionLimit.HORIZONTAL);
+    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", EnumDirection.EnumDirectionLimit.HORIZONTAL);
     public static final BlockStateBoolean POWERED = BlockStateBoolean.of("powered");
     public static final BlockStateBoolean ATTACHED = BlockStateBoolean.of("attached");
     public static final BlockStateBoolean SUSPENDED = BlockStateBoolean.of("suspended");
 
     public BlockTripwireHook() {
         super(Material.ORIENTABLE);
-        this.j(this.blockStateList.getBlockData().set(BlockTripwireHook.FACING, EnumDirection.NORTH).set(BlockTripwireHook.POWERED, Boolean.valueOf(false)).set(BlockTripwireHook.ATTACHED, Boolean.valueOf(false)).set(BlockTripwireHook.SUSPENDED, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockTripwireHook.FACING, EnumDirection.NORTH).set(BlockTripwireHook.POWERED, Boolean.FALSE).set(BlockTripwireHook.ATTACHED, Boolean.FALSE).set(BlockTripwireHook.SUSPENDED, Boolean.FALSE));
         this.a(CreativeModeTab.d);
         this.a(true);
     }
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return iblockdata.set(BlockTripwireHook.SUSPENDED, Boolean.valueOf(!World.a(iblockaccess, blockposition.down())));
+        return iblockdata.set(BlockTripwireHook.SUSPENDED, !World.a(iblockaccess, blockposition.down()));
     }
 
     public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -58,7 +58,7 @@ public class BlockTripwireHook extends Block {
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        IBlockData iblockdata = this.getBlockData().set(BlockTripwireHook.POWERED, Boolean.valueOf(false)).set(BlockTripwireHook.ATTACHED, Boolean.valueOf(false)).set(BlockTripwireHook.SUSPENDED, Boolean.valueOf(false));
+        IBlockData iblockdata = this.getBlockData().set(BlockTripwireHook.POWERED, Boolean.FALSE).set(BlockTripwireHook.ATTACHED, Boolean.FALSE).set(BlockTripwireHook.SUSPENDED, Boolean.FALSE);
 
         if (enumdirection.k().c()) {
             iblockdata = iblockdata.set(BlockTripwireHook.FACING, enumdirection);
@@ -68,13 +68,13 @@ public class BlockTripwireHook extends Block {
     }
 
     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
-        this.a(world, blockposition, iblockdata, false, false, -1, (IBlockData) null);
+        this.a(world, blockposition, iblockdata, false, false, -1, null);
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         if (block != this) {
             if (this.e(world, blockposition, iblockdata)) {
-                EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockTripwireHook.FACING);
+                EnumDirection enumdirection = iblockdata.get(BlockTripwireHook.FACING);
 
                 if (!world.getType(blockposition.shift(enumdirection.opposite())).getBlock().isOccluding()) {
                     this.b(world, blockposition, iblockdata, 0);
@@ -86,10 +86,10 @@ public class BlockTripwireHook extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag, boolean flag1, int i, IBlockData iblockdata1) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockTripwireHook.FACING);
-        boolean flag2 = ((Boolean) iblockdata.get(BlockTripwireHook.ATTACHED)).booleanValue();
-        boolean flag3 = ((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue();
-        boolean flag4 = !World.a((IBlockAccess) world, blockposition.down());
+        EnumDirection enumdirection = iblockdata.get(BlockTripwireHook.FACING);
+        boolean flag2 = (Boolean) iblockdata.get(BlockTripwireHook.ATTACHED);
+        boolean flag3 = (Boolean) iblockdata.get(BlockTripwireHook.POWERED);
+        boolean flag4 = !World.a(world, blockposition.down());
         boolean flag5 = !flag;
         boolean flag6 = false;
         int j = 0;
@@ -113,18 +113,18 @@ public class BlockTripwireHook extends Block {
                 flag5 = false;
             } else {
                 if (k == i) {
-                    iblockdata2 = (IBlockData) Objects.firstNonNull(iblockdata1, iblockdata2);
+                    iblockdata2 = Objects.firstNonNull(iblockdata1, iblockdata2);
                 }
 
-                boolean flag7 = !((Boolean) iblockdata2.get(BlockTripwire.DISARMED)).booleanValue();
-                boolean flag8 = ((Boolean) iblockdata2.get(BlockTripwire.POWERED)).booleanValue();
-                boolean flag9 = ((Boolean) iblockdata2.get(BlockTripwire.SUSPENDED)).booleanValue();
+                boolean flag7 = !(Boolean) iblockdata2.get(BlockTripwire.DISARMED);
+                boolean flag8 = (Boolean) iblockdata2.get(BlockTripwire.POWERED);
+                boolean flag9 = (Boolean) iblockdata2.get(BlockTripwire.SUSPENDED);
 
                 flag5 &= flag9 == flag4;
                 flag6 |= flag7 && flag8;
                 aiblockdata[k] = iblockdata2;
                 if (k == i) {
-                    world.a(blockposition, (Block) this, this.a(world));
+                    world.a(blockposition, this, this.a(world));
                     flag5 &= flag7;
                 }
             }
@@ -132,7 +132,7 @@ public class BlockTripwireHook extends Block {
 
         flag5 &= j > 1;
         flag6 &= flag5;
-        IBlockData iblockdata3 = this.getBlockData().set(BlockTripwireHook.ATTACHED, Boolean.valueOf(flag5)).set(BlockTripwireHook.POWERED, Boolean.valueOf(flag6));
+        IBlockData iblockdata3 = this.getBlockData().set(BlockTripwireHook.ATTACHED, flag5).set(BlockTripwireHook.POWERED, flag6);
 
         if (j > 0) {
             blockposition1 = blockposition.shift(enumdirection, j);
@@ -168,7 +168,7 @@ public class BlockTripwireHook extends Block {
                 IBlockData iblockdata4 = aiblockdata[l];
 
                 if (iblockdata4 != null && world.getType(blockposition2).getBlock() != Blocks.AIR) {
-                    world.setTypeAndData(blockposition2, iblockdata4.set(BlockTripwireHook.ATTACHED, Boolean.valueOf(flag5)), 3);
+                    world.setTypeAndData(blockposition2, iblockdata4.set(BlockTripwireHook.ATTACHED, flag5), 3);
                 }
             }
         }
@@ -178,7 +178,7 @@ public class BlockTripwireHook extends Block {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        this.a(world, blockposition, iblockdata, false, true, -1, (IBlockData) null);
+        this.a(world, blockposition, iblockdata, false, true, -1, null);
     }
 
     private void a(World world, BlockPosition blockposition, boolean flag, boolean flag1, boolean flag2, boolean flag3) {
@@ -212,7 +212,7 @@ public class BlockTripwireHook extends Block {
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         float f = 0.1875F;
 
-        switch (BlockTripwireHook.SyntheticClass_1.a[((EnumDirection) iblockaccess.getType(blockposition).get(BlockTripwireHook.FACING)).ordinal()]) {
+        switch (BlockTripwireHook.SyntheticClass_1.a[iblockaccess.getType(blockposition).get(BlockTripwireHook.FACING).ordinal()]) {
         case 1:
             this.a(0.0F, 0.2F, 0.5F - f, f * 2.0F, 0.8F, 0.5F + f);
             break;
@@ -232,27 +232,27 @@ public class BlockTripwireHook extends Block {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        boolean flag = ((Boolean) iblockdata.get(BlockTripwireHook.ATTACHED)).booleanValue();
-        boolean flag1 = ((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue();
+        boolean flag = (Boolean) iblockdata.get(BlockTripwireHook.ATTACHED);
+        boolean flag1 = (Boolean) iblockdata.get(BlockTripwireHook.POWERED);
 
         if (flag || flag1) {
-            this.a(world, blockposition, iblockdata, true, false, -1, (IBlockData) null);
+            this.a(world, blockposition, iblockdata, true, false, -1, null);
         }
 
         if (flag1) {
             world.applyPhysics(blockposition, this);
-            world.applyPhysics(blockposition.shift(((EnumDirection) iblockdata.get(BlockTripwireHook.FACING)).opposite()), this);
+            world.applyPhysics(blockposition.shift(iblockdata.get(BlockTripwireHook.FACING).opposite()), this);
         }
 
         super.remove(world, blockposition, iblockdata);
     }
 
     public int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue() ? 15 : 0;
+        return (Boolean) iblockdata.get(BlockTripwireHook.POWERED) ? 15 : 0;
     }
 
     public int b(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return !((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue() ? 0 : (iblockdata.get(BlockTripwireHook.FACING) == enumdirection ? 15 : 0);
+        return !(Boolean) iblockdata.get(BlockTripwireHook.POWERED) ? 0 : (iblockdata.get(BlockTripwireHook.FACING) == enumdirection ? 15 : 0);
     }
 
     public boolean isPowerSource() {
@@ -260,18 +260,18 @@ public class BlockTripwireHook extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockTripwireHook.FACING, EnumDirection.fromType2(i & 3)).set(BlockTripwireHook.POWERED, Boolean.valueOf((i & 8) > 0)).set(BlockTripwireHook.ATTACHED, Boolean.valueOf((i & 4) > 0));
+        return this.getBlockData().set(BlockTripwireHook.FACING, EnumDirection.fromType2(i & 3)).set(BlockTripwireHook.POWERED, (i & 8) > 0).set(BlockTripwireHook.ATTACHED, (i & 4) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockTripwireHook.FACING)).b();
+        int i = b0 | iblockdata.get(BlockTripwireHook.FACING).b();
 
-        if (((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockTripwireHook.POWERED)) {
             i |= 8;
         }
 
-        if (((Boolean) iblockdata.get(BlockTripwireHook.ATTACHED)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockTripwireHook.ATTACHED)) {
             i |= 4;
         }
 
@@ -279,7 +279,7 @@ public class BlockTripwireHook extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTripwireHook.FACING, BlockTripwireHook.POWERED, BlockTripwireHook.ATTACHED, BlockTripwireHook.SUSPENDED});
+        return new BlockStateList(this, BlockTripwireHook.FACING, BlockTripwireHook.POWERED, BlockTripwireHook.ATTACHED, BlockTripwireHook.SUSPENDED);
     }
 
     static class SyntheticClass_1 {
@@ -289,26 +289,22 @@ public class BlockTripwireHook extends Block {
         static {
             try {
                 BlockTripwireHook.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockTripwireHook.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockTripwireHook.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockTripwireHook.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockVine.java b/src/main/java/net/minecraft/server/BlockVine.java
index 25d19c4c2..7f53b8f39 100644
--- a/src/main/java/net/minecraft/server/BlockVine.java
+++ b/src/main/java/net/minecraft/server/BlockVine.java
@@ -16,13 +16,13 @@ public class BlockVine extends Block {
 
     public BlockVine() {
         super(Material.REPLACEABLE_PLANT);
-        this.j(this.blockStateList.getBlockData().set(BlockVine.UP, Boolean.valueOf(false)).set(BlockVine.NORTH, Boolean.valueOf(false)).set(BlockVine.EAST, Boolean.valueOf(false)).set(BlockVine.SOUTH, Boolean.valueOf(false)).set(BlockVine.WEST, Boolean.valueOf(false)));
+        this.j(this.blockStateList.getBlockData().set(BlockVine.UP, Boolean.FALSE).set(BlockVine.NORTH, Boolean.FALSE).set(BlockVine.EAST, Boolean.FALSE).set(BlockVine.SOUTH, Boolean.FALSE).set(BlockVine.WEST, Boolean.FALSE));
         this.a(true);
         this.a(CreativeModeTab.c);
     }
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return iblockdata.set(BlockVine.UP, Boolean.valueOf(iblockaccess.getType(blockposition.up()).getBlock().u()));
+        return iblockdata.set(BlockVine.UP, iblockaccess.getType(blockposition.up()).getBlock().u());
     }
 
     public void j() {
@@ -51,7 +51,7 @@ public class BlockVine extends Block {
         float f6 = 0.0F;
         boolean flag = false;
 
-        if (((Boolean) iblockaccess.getType(blockposition).get(BlockVine.WEST)).booleanValue()) {
+        if ((Boolean) iblockaccess.getType(blockposition).get(BlockVine.WEST)) {
             f4 = Math.max(f4, 0.0625F);
             f1 = 0.0F;
             f2 = 0.0F;
@@ -61,7 +61,7 @@ public class BlockVine extends Block {
             flag = true;
         }
 
-        if (((Boolean) iblockaccess.getType(blockposition).get(BlockVine.EAST)).booleanValue()) {
+        if ((Boolean) iblockaccess.getType(blockposition).get(BlockVine.EAST)) {
             f1 = Math.min(f1, 0.9375F);
             f4 = 1.0F;
             f2 = 0.0F;
@@ -71,7 +71,7 @@ public class BlockVine extends Block {
             flag = true;
         }
 
-        if (((Boolean) iblockaccess.getType(blockposition).get(BlockVine.NORTH)).booleanValue()) {
+        if ((Boolean) iblockaccess.getType(blockposition).get(BlockVine.NORTH)) {
             f6 = Math.max(f6, 0.0625F);
             f3 = 0.0F;
             f1 = 0.0F;
@@ -81,7 +81,7 @@ public class BlockVine extends Block {
             flag = true;
         }
 
-        if (((Boolean) iblockaccess.getType(blockposition).get(BlockVine.SOUTH)).booleanValue()) {
+        if ((Boolean) iblockaccess.getType(blockposition).get(BlockVine.SOUTH)) {
             f3 = Math.min(f3, 0.9375F);
             f6 = 1.0F;
             f1 = 0.0F;
@@ -129,17 +129,15 @@ public class BlockVine extends Block {
 
     private boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
         IBlockData iblockdata1 = iblockdata;
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockStateBoolean blockstateboolean = getDirection(enumdirection);
 
-            if (((Boolean) iblockdata.get(blockstateboolean)).booleanValue() && !this.c(world.getType(blockposition.shift(enumdirection)).getBlock())) {
+            if ((Boolean) iblockdata.get(blockstateboolean) && !this.c(world.getType(blockposition.shift(enumdirection)).getBlock())) {
                 IBlockData iblockdata2 = world.getType(blockposition.up());
 
-                if (iblockdata2.getBlock() != this || !((Boolean) iblockdata2.get(blockstateboolean)).booleanValue()) {
-                    iblockdata = iblockdata.set(blockstateboolean, Boolean.valueOf(false));
+                if (iblockdata2.getBlock() != this || !(Boolean) iblockdata2.get(blockstateboolean)) {
+                    iblockdata = iblockdata.set(blockstateboolean, Boolean.FALSE);
                 }
             }
         }
@@ -192,21 +190,19 @@ public class BlockVine extends Block {
                 if (enumdirection == EnumDirection.UP && blockposition.getY() < 255 && world.isEmpty(blockposition1)) {
                     if (!flag) {
                         IBlockData iblockdata1 = iblockdata;
-                        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-                        while (iterator.hasNext()) {
-                            enumdirection1 = (EnumDirection) iterator.next();
+                        for (EnumDirection enumDirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+                            enumdirection1 = enumDirection;
                             if (random.nextBoolean() || !this.c(world.getType(blockposition1.shift(enumdirection1)).getBlock())) {
-                                iblockdata1 = iblockdata1.set(getDirection(enumdirection1), Boolean.valueOf(false));
+                                iblockdata1 = iblockdata1.set(getDirection(enumdirection1), Boolean.FALSE);
                             }
                         }
 
-                        if (((Boolean) iblockdata1.get(BlockVine.NORTH)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.EAST)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.SOUTH)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.WEST)).booleanValue()) {
+                        if ((Boolean) iblockdata1.get(BlockVine.NORTH) || (Boolean) iblockdata1.get(BlockVine.EAST) || (Boolean) iblockdata1.get(BlockVine.SOUTH) || (Boolean) iblockdata1.get(BlockVine.WEST)) {
                             // CraftBukkit start - Call BlockSpreadEvent
                             // world.setTypeAndData(blockposition1, iblockdata1, 2);
-                            BlockPosition target = blockposition1;
                             org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-                            org.bukkit.block.Block block = world.getWorld().getBlockAt(target.getX(), target.getY(), target.getZ());
+                            org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
                             CraftEventFactory.handleBlockSpreadEvent(block, source, this, toLegacyData(iblockdata1));
                             // CraftBukkit end
                         }
@@ -215,7 +211,7 @@ public class BlockVine extends Block {
                 } else {
                     BlockPosition blockposition2;
 
-                    if (enumdirection.k().c() && !((Boolean) iblockdata.get(getDirection(enumdirection))).booleanValue()) {
+                    if (enumdirection.k().c() && !(Boolean) iblockdata.get(getDirection(enumdirection))) {
                         if (!flag) {
                             blockposition2 = blockposition.shift(enumdirection);
                             Block block = world.getType(blockposition2).getBlock();
@@ -223,8 +219,8 @@ public class BlockVine extends Block {
                             if (block.material == Material.AIR) {
                                 enumdirection1 = enumdirection.e();
                                 EnumDirection enumdirection2 = enumdirection.f();
-                                boolean flag1 = ((Boolean) iblockdata.get(getDirection(enumdirection1))).booleanValue();
-                                boolean flag2 = ((Boolean) iblockdata.get(getDirection(enumdirection2))).booleanValue();
+                                boolean flag1 = (Boolean) iblockdata.get(getDirection(enumdirection1));
+                                boolean flag2 = (Boolean) iblockdata.get(getDirection(enumdirection2));
                                 BlockPosition blockposition3 = blockposition2.shift(enumdirection1);
                                 BlockPosition blockposition4 = blockposition2.shift(enumdirection2);
 
@@ -234,25 +230,25 @@ public class BlockVine extends Block {
 
                                 if (flag1 && this.c(world.getType(blockposition3).getBlock())) {
                                     // world.setTypeAndData(blockposition2, this.getBlockData().set(a(enumdirection1), Boolean.valueOf(true)), 2);
-                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection1), Boolean.valueOf(true))));
+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection1), Boolean.TRUE)));
                                 } else if (flag2 && this.c(world.getType(blockposition4).getBlock())) {
                                     // world.setTypeAndData(blockposition2, this.getBlockData().set(a(enumdirection2), Boolean.valueOf(true)), 2);
-                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection2), Boolean.valueOf(true))));
+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection2), Boolean.TRUE)));
                                 } else if (flag1 && world.isEmpty(blockposition3) && this.c(world.getType(blockposition.shift(enumdirection1)).getBlock())) {
                                     // world.setTypeAndData(blockposition3, this.getBlockData().set(a(enumdirection.opposite()), Boolean.valueOf(true)), 2);
                                     bukkitBlock = world.getWorld().getBlockAt(blockposition3.getX(), blockposition3.getY(), blockposition3.getZ());
-                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.valueOf(true))));
+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.TRUE)));
                                 } else if (flag2 && world.isEmpty(blockposition4) && this.c(world.getType(blockposition.shift(enumdirection2)).getBlock())) {
                                     // world.setTypeAndData(blockposition4, this.getBlockData().set(a(enumdirection.opposite()), Boolean.valueOf(true)), 2);
                                     bukkitBlock = world.getWorld().getBlockAt(blockposition4.getX(), blockposition4.getY(), blockposition4.getZ());
-                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.valueOf(true))));
+                                    CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData().set(getDirection(enumdirection.opposite()), Boolean.TRUE)));
                                 } else if (this.c(world.getType(blockposition2.up()).getBlock())) {
                                     // world.setTypeAndData(blockposition2, this.getBlockData(), 2);
                                     CraftEventFactory.handleBlockSpreadEvent(bukkitBlock, source, this, toLegacyData(this.getBlockData()));
                                 }
                                 // CraftBukkit end
                             } else if (block.material.k() && block.d()) {
-                                world.setTypeAndData(blockposition, iblockdata.set(getDirection(enumdirection), Boolean.valueOf(true)), 2);
+                                world.setTypeAndData(blockposition, iblockdata.set(getDirection(enumdirection), Boolean.TRUE), 2);
                             }
 
                         }
@@ -272,11 +268,11 @@ public class BlockVine extends Block {
                                 while (iterator1.hasNext()) {
                                     enumdirection3 = (EnumDirection) iterator1.next();
                                     if (random.nextBoolean()) {
-                                        iblockdata3 = iblockdata3.set(getDirection(enumdirection3), Boolean.valueOf(false));
+                                        iblockdata3 = iblockdata3.set(getDirection(enumdirection3), Boolean.FALSE);
                                     }
                                 }
 
-                                if (((Boolean) iblockdata3.get(BlockVine.NORTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.EAST)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.SOUTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.WEST)).booleanValue()) {
+                                if ((Boolean) iblockdata3.get(BlockVine.NORTH) || (Boolean) iblockdata3.get(BlockVine.EAST) || (Boolean) iblockdata3.get(BlockVine.SOUTH) || (Boolean) iblockdata3.get(BlockVine.WEST)) {
                                     // CraftBukkit start - Call BlockSpreadEvent
                                     // world.setTypeAndData(blockposition2, iblockdata3, 2);
                                     org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -292,12 +288,12 @@ public class BlockVine extends Block {
                                     enumdirection3 = (EnumDirection) iterator1.next();
                                     BlockStateBoolean blockstateboolean = getDirection(enumdirection3);
 
-                                    if (random.nextBoolean() && ((Boolean) iblockdata.get(blockstateboolean)).booleanValue()) {
-                                        iblockdata3 = iblockdata3.set(blockstateboolean, Boolean.valueOf(true));
+                                    if (random.nextBoolean() && (Boolean) iblockdata.get(blockstateboolean)) {
+                                        iblockdata3 = iblockdata3.set(blockstateboolean, Boolean.TRUE);
                                     }
                                 }
 
-                                if (((Boolean) iblockdata3.get(BlockVine.NORTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.EAST)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.SOUTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.WEST)).booleanValue()) {
+                                if ((Boolean) iblockdata3.get(BlockVine.NORTH) || (Boolean) iblockdata3.get(BlockVine.EAST) || (Boolean) iblockdata3.get(BlockVine.SOUTH) || (Boolean) iblockdata3.get(BlockVine.WEST)) {
                                     world.setTypeAndData(blockposition2, iblockdata3, 2);
                                 }
                             }
@@ -310,9 +306,9 @@ public class BlockVine extends Block {
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        IBlockData iblockdata = this.getBlockData().set(BlockVine.UP, Boolean.valueOf(false)).set(BlockVine.NORTH, Boolean.valueOf(false)).set(BlockVine.EAST, Boolean.valueOf(false)).set(BlockVine.SOUTH, Boolean.valueOf(false)).set(BlockVine.WEST, Boolean.valueOf(false));
+        IBlockData iblockdata = this.getBlockData().set(BlockVine.UP, Boolean.FALSE).set(BlockVine.NORTH, Boolean.FALSE).set(BlockVine.EAST, Boolean.FALSE).set(BlockVine.SOUTH, Boolean.FALSE).set(BlockVine.WEST, Boolean.FALSE);
 
-        return enumdirection.k().c() ? iblockdata.set(getDirection(enumdirection.opposite()), Boolean.valueOf(true)) : iblockdata;
+        return enumdirection.k().c() ? iblockdata.set(getDirection(enumdirection.opposite()), Boolean.TRUE) : iblockdata;
     }
 
     public Item getDropType(IBlockData iblockdata, Random random, int i) {
@@ -334,25 +330,25 @@ public class BlockVine extends Block {
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockVine.SOUTH, Boolean.valueOf((i & 1) > 0)).set(BlockVine.WEST, Boolean.valueOf((i & 2) > 0)).set(BlockVine.NORTH, Boolean.valueOf((i & 4) > 0)).set(BlockVine.EAST, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockVine.SOUTH, (i & 1) > 0).set(BlockVine.WEST, (i & 2) > 0).set(BlockVine.NORTH, (i & 4) > 0).set(BlockVine.EAST, (i & 8) > 0);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         int i = 0;
 
-        if (((Boolean) iblockdata.get(BlockVine.SOUTH)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockVine.SOUTH)) {
             i |= 1;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.WEST)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockVine.WEST)) {
             i |= 2;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.NORTH)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockVine.NORTH)) {
             i |= 4;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.EAST)).booleanValue()) {
+        if ((Boolean) iblockdata.get(BlockVine.EAST)) {
             i |= 8;
         }
 
@@ -360,7 +356,7 @@ public class BlockVine extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockVine.UP, BlockVine.NORTH, BlockVine.EAST, BlockVine.SOUTH, BlockVine.WEST});
+        return new BlockStateList(this, BlockVine.UP, BlockVine.NORTH, BlockVine.EAST, BlockVine.SOUTH, BlockVine.WEST);
     }
 
     public static BlockStateBoolean getDirection(EnumDirection enumdirection) {
@@ -390,10 +386,8 @@ public class BlockVine extends Block {
         BlockStateBoolean[] ablockstateboolean = BlockVine.Q;
         int j = ablockstateboolean.length;
 
-        for (int k = 0; k < j; ++k) {
-            BlockStateBoolean blockstateboolean = ablockstateboolean[k];
-
-            if (((Boolean) iblockdata.get(blockstateboolean)).booleanValue()) {
+        for (BlockStateBoolean blockstateboolean : ablockstateboolean) {
+            if ((Boolean) iblockdata.get(blockstateboolean)) {
                 ++i;
             }
         }
@@ -408,32 +402,27 @@ public class BlockVine extends Block {
         static {
             try {
                 BlockVine.SyntheticClass_1.a[EnumDirection.UP.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockVine.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockVine.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockVine.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 BlockVine.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/ChatBaseComponent.java b/src/main/java/net/minecraft/server/ChatBaseComponent.java
index dc496c21b..88b4999c2 100644
--- a/src/main/java/net/minecraft/server/ChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/ChatBaseComponent.java
@@ -29,11 +29,8 @@ public abstract class ChatBaseComponent implements IChatBaseComponent {
 
     public IChatBaseComponent setChatModifier(ChatModifier chatmodifier) {
         this.b = chatmodifier;
-        Iterator iterator = this.a.iterator();
-
-        while (iterator.hasNext()) {
-            IChatBaseComponent ichatbasecomponent = (IChatBaseComponent) iterator.next();
 
+        for (IChatBaseComponent ichatbasecomponent : this.a) {
             ichatbasecomponent.getChatModifier().setChatModifier(this.getChatModifier());
         }
 
@@ -43,11 +40,8 @@ public abstract class ChatBaseComponent implements IChatBaseComponent {
     public ChatModifier getChatModifier() {
         if (this.b == null) {
             this.b = new ChatModifier();
-            Iterator iterator = this.a.iterator();
-
-            while (iterator.hasNext()) {
-                IChatBaseComponent ichatbasecomponent = (IChatBaseComponent) iterator.next();
 
+            for (IChatBaseComponent ichatbasecomponent : this.a) {
                 ichatbasecomponent.getChatModifier().setChatModifier(this.b);
             }
         }
@@ -56,16 +50,13 @@ public abstract class ChatBaseComponent implements IChatBaseComponent {
     }
 
     public Iterator<IChatBaseComponent> iterator() {
-        return Iterators.concat(Iterators.forArray(new ChatBaseComponent[] { this}), a((Iterable) this.a));
+        return Iterators.concat(Iterators.forArray(this), a((Iterable) this.a));
     }
 
     public final String c() {
         StringBuilder stringbuilder = new StringBuilder();
-        Iterator iterator = this.iterator();
-
-        while (iterator.hasNext()) {
-            IChatBaseComponent ichatbasecomponent = (IChatBaseComponent) iterator.next();
 
+        for (IChatBaseComponent ichatbasecomponent : this) {
             stringbuilder.append(ichatbasecomponent.getText());
         }
 
diff --git a/src/main/java/net/minecraft/server/ChatModifier.java b/src/main/java/net/minecraft/server/ChatModifier.java
index 21f7e6ba2..1a7105e86 100644
--- a/src/main/java/net/minecraft/server/ChatModifier.java
+++ b/src/main/java/net/minecraft/server/ChatModifier.java
@@ -115,23 +115,23 @@ public class ChatModifier {
     }
 
     public boolean isBold() {
-        return this.c == null ? this.o().isBold() : this.c.booleanValue();
+        return this.c == null ? this.o().isBold() : this.c;
     }
 
     public boolean isItalic() {
-        return this.d == null ? this.o().isItalic() : this.d.booleanValue();
+        return this.d == null ? this.o().isItalic() : this.d;
     }
 
     public boolean isStrikethrough() {
-        return this.f == null ? this.o().isStrikethrough() : this.f.booleanValue();
+        return this.f == null ? this.o().isStrikethrough() : this.f;
     }
 
     public boolean isUnderlined() {
-        return this.e == null ? this.o().isUnderlined() : this.e.booleanValue();
+        return this.e == null ? this.o().isUnderlined() : this.e;
     }
 
     public boolean isRandom() {
-        return this.g == null ? this.o().isRandom() : this.g.booleanValue();
+        return this.g == null ? this.o().isRandom() : this.g;
     }
 
     public boolean g() {
@@ -288,11 +288,11 @@ public class ChatModifier {
     public ChatModifier n() {
         ChatModifier chatmodifier = new ChatModifier();
 
-        chatmodifier.setBold(Boolean.valueOf(this.isBold()));
-        chatmodifier.setItalic(Boolean.valueOf(this.isItalic()));
-        chatmodifier.setStrikethrough(Boolean.valueOf(this.isStrikethrough()));
-        chatmodifier.setUnderline(Boolean.valueOf(this.isUnderlined()));
-        chatmodifier.setRandom(Boolean.valueOf(this.isRandom()));
+        chatmodifier.setBold(this.isBold());
+        chatmodifier.setItalic(this.isItalic());
+        chatmodifier.setStrikethrough(this.isStrikethrough());
+        chatmodifier.setUnderline(this.isUnderlined());
+        chatmodifier.setRandom(this.isRandom());
         chatmodifier.setColor(this.getColor());
         chatmodifier.setChatClickable(this.h());
         chatmodifier.setChatHoverable(this.i());
@@ -313,27 +313,27 @@ public class ChatModifier {
                     return null;
                 } else {
                     if (jsonobject.has("bold")) {
-                        chatmodifier.c = Boolean.valueOf(jsonobject.get("bold").getAsBoolean());
+                        chatmodifier.c = jsonobject.get("bold").getAsBoolean();
                     }
 
                     if (jsonobject.has("italic")) {
-                        chatmodifier.d = Boolean.valueOf(jsonobject.get("italic").getAsBoolean());
+                        chatmodifier.d = jsonobject.get("italic").getAsBoolean();
                     }
 
                     if (jsonobject.has("underlined")) {
-                        chatmodifier.e = Boolean.valueOf(jsonobject.get("underlined").getAsBoolean());
+                        chatmodifier.e = jsonobject.get("underlined").getAsBoolean();
                     }
 
                     if (jsonobject.has("strikethrough")) {
-                        chatmodifier.f = Boolean.valueOf(jsonobject.get("strikethrough").getAsBoolean());
+                        chatmodifier.f = jsonobject.get("strikethrough").getAsBoolean();
                     }
 
                     if (jsonobject.has("obfuscated")) {
-                        chatmodifier.g = Boolean.valueOf(jsonobject.get("obfuscated").getAsBoolean());
+                        chatmodifier.g = jsonobject.get("obfuscated").getAsBoolean();
                     }
 
                     if (jsonobject.has("color")) {
-                        chatmodifier.b = (EnumChatFormat) jsondeserializationcontext.deserialize(jsonobject.get("color"), EnumChatFormat.class);
+                        chatmodifier.b = jsondeserializationcontext.deserialize(jsonobject.get("color"), EnumChatFormat.class);
                     }
 
                     if (jsonobject.has("insertion")) {
@@ -362,7 +362,7 @@ public class ChatModifier {
                         if (jsonobject1 != null) {
                             jsonprimitive = jsonobject1.getAsJsonPrimitive("action");
                             ChatHoverable.EnumHoverAction chathoverable_enumhoveraction = jsonprimitive == null ? null : ChatHoverable.EnumHoverAction.a(jsonprimitive.getAsString());
-                            IChatBaseComponent ichatbasecomponent = (IChatBaseComponent) jsondeserializationcontext.deserialize(jsonobject1.get("value"), IChatBaseComponent.class);
+                            IChatBaseComponent ichatbasecomponent = jsondeserializationcontext.deserialize(jsonobject1.get("value"), IChatBaseComponent.class);
 
                             if (chathoverable_enumhoveraction != null && ichatbasecomponent != null && chathoverable_enumhoveraction.a()) {
                                 chatmodifier.i = new ChatHoverable(chathoverable_enumhoveraction, ichatbasecomponent);
@@ -432,7 +432,7 @@ public class ChatModifier {
         }
 
         public JsonElement serialize(ChatModifier object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - fix decompile error
-            return this.a((ChatModifier) object, type, jsonserializationcontext);
+            return this.a(object, type, jsonserializationcontext);
         }
 
         public ChatModifier deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - fix decompile error
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 590fab670..1e8b4f13a 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -18,6 +18,8 @@ import org.apache.logging.log4j.Logger;
 
 import com.google.common.collect.Lists; // CraftBukkit
 import org.bukkit.Bukkit; // CraftBukkit
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
 
 public class Chunk {
 
@@ -49,7 +51,7 @@ public class Chunk {
     private long u;
     private int v;
     private ConcurrentLinkedQueue<BlockPosition> w;
-    protected gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot
+    protected gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<>(); // Spigot
     // PaperSpigot start - Asynchronous light updates
     public AtomicInteger pendingLightUpdates = new AtomicInteger();
     public long lightUpdateTime;
@@ -413,11 +415,8 @@ public class Chunk {
             }
 
             if (!this.world.worldProvider.o()) {
-                Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-                while (iterator.hasNext()) {
-                    EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+                for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                     this.a(j1 + enumdirection.getAdjacentX(), k1 + enumdirection.getAdjacentZ(), i2, j2);
                 }
 
@@ -463,7 +462,7 @@ public class Chunk {
             CrashReportSystemDetails crashreportsystemdetails = reportedexception.a().a("Block being got");
 
             crashreportsystemdetails.a("Location", new Callable() {
-                public String a() throws Exception {
+                public String a() {
                     return CrashReportSystemDetails.a(new BlockPosition(Chunk.this.locX * 16 + i, j, Chunk.this.locZ * 16 + k));
                 }
 
@@ -482,7 +481,7 @@ public class Chunk {
             CrashReportSystemDetails crashreportsystemdetails = reportedexception.a().a("Block being got");
 
             crashreportsystemdetails.a("Location", new Callable() {
-                public String a() throws Exception {
+                public String a() {
                     return CrashReportSystemDetails.a(blockposition);
                 }
 
@@ -538,7 +537,7 @@ public class Chunk {
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Block being got");
 
                 crashreportsystemdetails.a("Location", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         return CrashReportSystemDetails.a(blockposition);
                     }
 
@@ -825,7 +824,7 @@ public class Chunk {
             tileentity = world.capturedTileEntities.get(blockposition);
         }
         if (tileentity == null) {
-            tileentity = (TileEntity) this.tileEntities.get(blockposition);
+            tileentity = this.tileEntities.get(blockposition);
         }
         // CraftBukkit end
 
@@ -857,7 +856,7 @@ public class Chunk {
         tileentity.a(blockposition);
         if (this.getType(blockposition) instanceof IContainer) {
             if (this.tileEntities.containsKey(blockposition)) {
-                ((TileEntity) this.tileEntities.get(blockposition)).y();
+                this.tileEntities.get(blockposition).y();
             }
 
             tileentity.D();
@@ -879,7 +878,7 @@ public class Chunk {
 
     public void e(BlockPosition blockposition) {
         if (this.h) {
-            TileEntity tileentity = (TileEntity) this.tileEntities.remove(blockposition);
+            TileEntity tileentity = this.tileEntities.remove(blockposition);
 
             if (tileentity != null) {
                 tileentity.y();
@@ -892,8 +891,8 @@ public class Chunk {
         this.h = true;
         this.world.a(this.tileEntities.values());
 
-        for (int i = 0; i < this.entitySlices.length; ++i) {
-            Iterator iterator = this.entitySlices[i].iterator();
+        for (List<Entity> entitySlice : this.entitySlices) {
+            Iterator iterator = entitySlice.iterator();
 
             while (iterator.hasNext()) {
                 Entity entity = (Entity) iterator.next();
@@ -901,25 +900,20 @@ public class Chunk {
                 entity.ah();
             }
 
-            this.world.b((Collection) this.entitySlices[i]);
+            this.world.b((Collection) entitySlice);
         }
 
     }
 
     public void removeEntities() {
         this.h = false;
-        Iterator iterator = this.tileEntities.values().iterator();
 
-        while (iterator.hasNext()) {
-            TileEntity tileentity = (TileEntity) iterator.next();
+        for (TileEntity tileentity : this.tileEntities.values()) {
             // Spigot Start
-            if ( tileentity instanceof IInventory )
-            {
-                for ( org.bukkit.entity.HumanEntity h : Lists.<org.bukkit.entity.HumanEntity>newArrayList((List<org.bukkit.entity.HumanEntity>) ( (IInventory) tileentity ).getViewers() ) )
-                {
-                    if ( h instanceof org.bukkit.craftbukkit.entity.CraftHumanEntity )
-                    {
-                       ( (org.bukkit.craftbukkit.entity.CraftHumanEntity) h).getHandle().closeInventory();
+            if (tileentity instanceof IInventory) {
+                for (HumanEntity h : Lists.<HumanEntity>newArrayList(((IInventory) tileentity).getViewers())) {
+                    if (h instanceof CraftHumanEntity) {
+                        ((CraftHumanEntity) h).getHandle().closeInventory();
                     }
                 }
             }
@@ -928,20 +922,17 @@ public class Chunk {
             this.world.b(tileentity);
         }
 
-        for (int i = 0; i < this.entitySlices.length; ++i) {
+        for (List<Entity> entitySlice : this.entitySlices) {
             // CraftBukkit start
-            List<Entity> newList = Lists.newArrayList(this.entitySlices[i]);
-            java.util.Iterator<Entity> iter = newList.iterator();
+            List<Entity> newList = Lists.newArrayList(entitySlice);
+            Iterator<Entity> iter = newList.iterator();
             while (iter.hasNext()) {
                 Entity entity = iter.next();
                 // Spigot Start
-                if ( entity instanceof IInventory )
-                {
-                    for ( org.bukkit.entity.HumanEntity h : Lists.<org.bukkit.entity.HumanEntity>newArrayList( (List<org.bukkit.entity.HumanEntity>) ( (IInventory) entity ).getViewers() ) )
-                    {
-                        if ( h instanceof org.bukkit.craftbukkit.entity.CraftHumanEntity )
-                        {
-                           ( (org.bukkit.craftbukkit.entity.CraftHumanEntity) h).getHandle().closeInventory();
+                if (entity instanceof IInventory) {
+                    for (HumanEntity h : Lists.<HumanEntity>newArrayList(((IInventory) entity).getViewers())) {
+                        if (h instanceof CraftHumanEntity) {
+                            ((CraftHumanEntity) h).getHandle().closeInventory();
                         }
                     }
                 }
@@ -954,7 +945,7 @@ public class Chunk {
                 }
             }
 
-            this.world.c((Collection) newList);
+            this.world.c(newList);
             // CraftBukkit end
         }
 
@@ -994,8 +985,8 @@ public class Chunk {
                         Entity[] aentity = entity1.aB();
 
                         if (aentity != null) {
-                            for (int l = 0; l < aentity.length; ++l) {
-                                entity1 = aentity[l];
+                            for (Entity value : aentity) {
+                                entity1 = value;
                                 if (entity1 != entity && entity1.getBoundingBox().b(axisalignedbb) && (predicate == null || predicate.apply(entity1))) {
                                     list.add(entity1);
                                 }
@@ -1027,11 +1018,8 @@ public class Chunk {
         // PaperSpigot end
         for (int k = i; k <= j; ++k) {
             if (counts != null && counts[k] <= 0) continue; // PaperSpigot - Don't check a chunk if it doesn't have the type we are looking for
-            Iterator iterator = this.entitySlices[k].iterator(); // Spigot
-
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
 
+            for (Entity entity : this.entitySlices[k]) {
                 if (oclass.isInstance(entity) && entity.getBoundingBox().b(axisalignedbb) && (predicate == null || predicate.apply((T) entity))) { // CraftBukkit - fix decompile error // Spigot
                     list.add((T) entity); // Fix decompile error
                 }
@@ -1151,7 +1139,7 @@ public class Chunk {
         }
 
         while (!this.w.isEmpty()) {
-            BlockPosition blockposition = (BlockPosition) this.w.poll();
+            BlockPosition blockposition = this.w.poll();
 
             if (this.a(blockposition, Chunk.EnumTileEntityState.CHECK) == null && this.getType(blockposition).isTileEntity()) {
                 TileEntity tileentity = this.i(blockposition);
@@ -1172,12 +1160,7 @@ public class Chunk {
             return;
         }
 
-        world.lightingExecutor.submit(new Runnable() {
-            @Override
-            public void run() {
-                Chunk.this.h(isClientSide);
-            }
-        });
+        world.lightingExecutor.submit(() -> Chunk.this.h(isClientSide));
     }
 
     public boolean isReady() {
@@ -1220,9 +1203,7 @@ public class Chunk {
         if (this.sections.length != achunksection.length) {
             Chunk.c.warn("Could not set level chunk sections, array length is " + achunksection.length + " instead of " + this.sections.length);
         } else {
-            for (int i = 0; i < this.sections.length; ++i) {
-                this.sections[i] = achunksection[i];
-            }
+            System.arraycopy(achunksection, 0, this.sections, 0, this.sections.length);
 
         }
     }
@@ -1251,9 +1232,7 @@ public class Chunk {
         if (this.e.length != abyte.length) {
             Chunk.c.warn("Could not set level chunk biomes, array length is " + abyte.length + " instead of " + this.e.length);
         } else {
-            for (int i = 0; i < this.e.length; ++i) {
-                this.e[i] = abyte[i];
-            }
+            System.arraycopy(abyte, 0, this.e, 0, this.e.length);
 
         }
     }
@@ -1284,8 +1263,7 @@ public class Chunk {
                     EnumDirection[] aenumdirection = EnumDirection.values();
                     int j1 = aenumdirection.length;
 
-                    for (int k1 = 0; k1 < j1; ++k1) {
-                        EnumDirection enumdirection = aenumdirection[k1];
+                    for (EnumDirection enumdirection : aenumdirection) {
                         BlockPosition blockposition2 = blockposition1.shift(enumdirection);
 
                         if (this.world.getType(blockposition2).getBlock().r() > 0) {
@@ -1318,10 +1296,8 @@ public class Chunk {
                 }
 
                 if (this.lit) {
-                    Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-                    while (iterator.hasNext()) {
-                        EnumDirection enumdirection = (EnumDirection) iterator.next();
+                    for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                         int k = enumdirection.c() == EnumDirection.EnumAxisDirection.POSITIVE ? 16 : 1;
 
                         this.world.getChunkAtWorldCoords(blockposition.shift(enumdirection, k)).a(enumdirection.opposite());
@@ -1379,7 +1355,7 @@ public class Chunk {
 
         for (l = k + 16 - 1; l > this.world.F() || l > 0 && !flag1; --l) {
             blockposition_mutableblockposition.c(blockposition_mutableblockposition.getX(), l, blockposition_mutableblockposition.getZ());
-            int i1 = this.b((BlockPosition) blockposition_mutableblockposition);
+            int i1 = this.b(blockposition_mutableblockposition);
 
             if (i1 == 255 && blockposition_mutableblockposition.getY() < this.world.F()) {
                 flag1 = true;
@@ -1418,9 +1394,7 @@ public class Chunk {
         if (this.heightMap.length != aint.length) {
             Chunk.c.warn("Could not set level chunk heightmap, array length is " + aint.length + " instead of " + this.heightMap.length);
         } else {
-            for (int i = 0; i < this.heightMap.length; ++i) {
-                this.heightMap[i] = aint[i];
-            }
+            System.arraycopy(aint, 0, this.heightMap, 0, this.heightMap.length);
 
         }
     }
@@ -1473,10 +1447,10 @@ public class Chunk {
         this.u = i;
     }
 
-    public static enum EnumTileEntityState {
+    public enum EnumTileEntityState {
 
         IMMEDIATE, QUEUED, CHECK;
 
-        private EnumTileEntityState() {}
+        EnumTileEntityState() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderFlat.java b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
index b939f47ac..a34a0bd53 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderFlat.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
@@ -64,11 +64,8 @@ public class ChunkProviderFlat implements IChunkProvider {
         int j = 0;
         int k = 0;
         boolean flag1 = true;
-        Iterator iterator = this.d.c().iterator();
-
-        while (iterator.hasNext()) {
-            WorldGenFlatLayerInfo worldgenflatlayerinfo = (WorldGenFlatLayerInfo) iterator.next();
 
+        for (WorldGenFlatLayerInfo worldgenflatlayerinfo : this.d.c()) {
             for (int l = worldgenflatlayerinfo.d(); l < worldgenflatlayerinfo.d() + worldgenflatlayerinfo.b(); ++l) {
                 IBlockData iblockdata = worldgenflatlayerinfo.c();
 
@@ -107,16 +104,14 @@ public class ChunkProviderFlat implements IChunkProvider {
             }
         }
 
-        Iterator iterator = this.e.iterator();
-
-        while (iterator.hasNext()) {
-            WorldGenBase worldgenbase = (WorldGenBase) iterator.next();
+        for (StructureGenerator structureGenerator : this.e) {
+            WorldGenBase worldgenbase = (WorldGenBase) structureGenerator;
 
             worldgenbase.a(this, this.a, i, j, chunksnapshot);
         }
 
         Chunk chunk = new Chunk(this.a, chunksnapshot, i, j);
-        BiomeBase[] abiomebase = this.a.getWorldChunkManager().getBiomeBlock((BiomeBase[]) null, i * 16, j * 16, 16, 16);
+        BiomeBase[] abiomebase = this.a.getWorldChunkManager().getBiomeBlock(null, i * 16, j * 16, 16, 16);
         byte[] abyte = chunk.getBiomeIndex();
 
         for (k = 0; k < abyte.length; ++k) {
@@ -144,10 +139,8 @@ public class ChunkProviderFlat implements IChunkProvider {
 
         this.b.setSeed((long) i * i1 + (long) j * j1 ^ this.a.getSeed());
         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
-        Iterator iterator = this.e.iterator();
 
-        while (iterator.hasNext()) {
-            StructureGenerator structuregenerator = (StructureGenerator) iterator.next();
+        for (StructureGenerator structuregenerator : this.e) {
             boolean flag1 = structuregenerator.a(this.a, this.b, chunkcoordintpair);
 
             if (structuregenerator instanceof WorldGenVillage) {
@@ -209,11 +202,8 @@ public class ChunkProviderFlat implements IChunkProvider {
 
     public BlockPosition findNearestMapFeature(World world, String s, BlockPosition blockposition) {
         if ("Stronghold".equals(s)) {
-            Iterator iterator = this.e.iterator();
-
-            while (iterator.hasNext()) {
-                StructureGenerator structuregenerator = (StructureGenerator) iterator.next();
 
+            for (StructureGenerator structuregenerator : this.e) {
                 if (structuregenerator instanceof WorldGenStronghold) {
                     return structuregenerator.getNearestGeneratedFeature(world, blockposition);
                 }
@@ -228,12 +218,9 @@ public class ChunkProviderFlat implements IChunkProvider {
     }
 
     public void recreateStructures(Chunk chunk, int i, int j) {
-        Iterator iterator = this.e.iterator();
-
-        while (iterator.hasNext()) {
-            StructureGenerator structuregenerator = (StructureGenerator) iterator.next();
 
-            structuregenerator.a(this, this.a, i, j, (ChunkSnapshot) null);
+        for (StructureGenerator structuregenerator : this.e) {
+            structuregenerator.a(this, this.a, i, j, null);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index ad464d32d..ad91fd53d 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -445,23 +445,23 @@ public class ChunkProviderGenerate implements IChunkProvider {
 
     public void recreateStructures(Chunk chunk, int i, int j) {
         if (this.r.w && this.n && this.m.paperSpigotConfig.generateMineshaft) { // PaperSpigot
-            this.x.a(this, this.m, i, j, (ChunkSnapshot) null);
+            this.x.a(this, this.m, i, j, null);
         }
 
         if (this.r.v && this.n && this.m.paperSpigotConfig.generateVillage) { // PaperSpigot
-            this.w.a(this, this.m, i, j, (ChunkSnapshot) null);
+            this.w.a(this, this.m, i, j, null);
         }
 
         if (this.r.u && this.n && this.m.paperSpigotConfig.generateStronghold) { // PaperSpigot
-            this.v.a(this, this.m, i, j, (ChunkSnapshot) null);
+            this.v.a(this, this.m, i, j, null);
         }
 
         if (this.r.x && this.n && this.m.paperSpigotConfig.generateTemple) { // PaperSpigot
-            this.y.a(this, this.m, i, j, (ChunkSnapshot) null);
+            this.y.a(this, this.m, i, j, null);
         }
 
         if (this.r.y && this.n && this.m.paperSpigotConfig.generateMonument) { // PaperSpigot
-            this.A.a(this, this.m, i, j, (ChunkSnapshot) null);
+            this.A.a(this, this.m, i, j, null);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 0156892a8..65d5ff8f5 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -207,7 +207,7 @@ public class ChunkProviderHell implements IChunkProvider {
         }
 
         Chunk chunk = new Chunk(this.h, chunksnapshot, i, j);
-        BiomeBase[] abiomebase = this.h.getWorldChunkManager().getBiomeBlock((BiomeBase[]) null, i * 16, j * 16, 16, 16);
+        BiomeBase[] abiomebase = this.h.getWorldChunkManager().getBiomeBlock(null, i * 16, j * 16, 16, 16);
         byte[] abyte = chunk.getBiomeIndex();
 
         for (int k = 0; k < abyte.length; ++k) {
@@ -387,7 +387,7 @@ public class ChunkProviderHell implements IChunkProvider {
     }
 
     public void recreateStructures(Chunk chunk, int i, int j) {
-        if (this.h.paperSpigotConfig.generateFortress) this.B.a(this, this.h, i, j, (ChunkSnapshot) null); // PaperSpigot
+        if (this.h.paperSpigotConfig.generateFortress) this.B.a(this, this.h, i, j, null); // PaperSpigot
     }
 
     public Chunk getChunkAt(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 9753401b4..259a1dbcb 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -1,25 +1,18 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
 import java.util.Random;
-import java.util.logging.Level;
 
 import org.bukkit.Server;
 import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 import org.bukkit.craftbukkit.util.LongHash;
-import org.bukkit.craftbukkit.util.LongHashSet;
-import org.bukkit.craftbukkit.util.LongObjectHashMap;
 import org.bukkit.event.world.ChunkUnloadEvent;
 // CraftBukkit end
 // TacoSpigot start
@@ -38,7 +31,7 @@ public class ChunkProviderServer implements IChunkProvider {
     public IChunkProvider chunkProvider;
     private IChunkLoader chunkLoader;
     public boolean forceChunkLoad = false; // CraftBukkit - true -> false
-    public Long2ObjectMap<Chunk> chunks = new Long2ObjectOpenHashMap<Chunk>(4096, 0.5f); // TacoSpigot - use trove Long2ObjectOpenHashMap instead of craftbukkit implementation (using inital capacity and load factor chosen by Amaranth in an old impl)
+    public Long2ObjectMap<Chunk> chunks = new Long2ObjectOpenHashMap<>(4096, 0.5f); // TacoSpigot - use trove Long2ObjectOpenHashMap instead of craftbukkit implementation (using inital capacity and load factor chosen by Amaranth in an old impl)
     public WorldServer world;
 
     public ChunkProviderServer(WorldServer worldserver, IChunkLoader ichunkloader, IChunkProvider ichunkprovider) {
@@ -102,11 +95,8 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public void b() {
-        Iterator iterator = this.chunks.values().iterator();
-
-        while (iterator.hasNext()) {
-            Chunk chunk = (Chunk) iterator.next();
 
+        for (Chunk chunk : this.chunks.values()) {
             this.queueUnload(chunk.locX, chunk.locZ);
         }
 
@@ -151,7 +141,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
     public Chunk originalGetChunkAt(int i, int j) {
         this.unloadQueue.remove(LongHash.toLong(i, j)); // TacoSpigot - directly invoke LongHash
-        Chunk chunk = (Chunk) this.chunks.get(LongHash.toLong(i, j));
+        Chunk chunk = this.chunks.get(LongHash.toLong(i, j));
         boolean newChunk = false;
         // CraftBukkit end
 
@@ -168,9 +158,9 @@ public class ChunkProviderServer implements IChunkProvider {
                         CrashReport crashreport = CrashReport.a(throwable, "Exception generating new chunk");
                         CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Chunk to be generated");
 
-                        crashreportsystemdetails.a("Location", (Object) String.format("%d,%d", new Object[] { Integer.valueOf(i), Integer.valueOf(j)}));
-                        crashreportsystemdetails.a("Position hash", (Object) Long.valueOf(LongHash.toLong(i, j))); // CraftBukkit - Use LongHash
-                        crashreportsystemdetails.a("Generator", (Object) this.chunkProvider.getName());
+                        crashreportsystemdetails.a("Location", String.format("%d,%d", new Object[] {i, j}));
+                        crashreportsystemdetails.a("Position hash", LongHash.toLong(i, j)); // CraftBukkit - Use LongHash
+                        crashreportsystemdetails.a("Generator", this.chunkProvider.getName());
                         throw new ReportedException(crashreport);
                     }
                 }
@@ -216,7 +206,7 @@ public class ChunkProviderServer implements IChunkProvider {
 
     public Chunk getOrCreateChunk(int i, int j) {
         // CraftBukkit start
-        Chunk chunk = (Chunk) this.chunks.get(LongHash.toLong(i, j));
+        Chunk chunk = this.chunks.get(LongHash.toLong(i, j));
 
         chunk = chunk == null ? (!this.world.ad() && !this.forceChunkLoad ? this.emptyChunk : this.getChunkAt(i, j)) : chunk;
 
@@ -334,9 +324,7 @@ public class ChunkProviderServer implements IChunkProvider {
         int i = 0;
 
         // CraftBukkit start
-        Iterator iterator = this.chunks.values().iterator();
-        while (iterator.hasNext()) {
-            Chunk chunk = (Chunk) iterator.next();
+        for (Chunk chunk : this.chunks.values()) {
             // CraftBukkit end
 
             if (flag) {
@@ -347,7 +335,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 this.saveChunk(chunk);
                 chunk.f(false);
                 ++i;
-                if (i == 24 && !flag && false) { // Spigot
+                if (false) { // Spigot
                     return false;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 6b244904d..548cc31c9 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -59,7 +59,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
     public Object[] loadChunk(World world, int i, int j) throws IOException {
         // CraftBukkit end
         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
-        NBTTagCompound nbttagcompound = (NBTTagCompound) this.b.get(chunkcoordintpair);
+        NBTTagCompound nbttagcompound = this.b.get(chunkcoordintpair);
 
         if (nbttagcompound == null) {
             DataInputStream datainputstream = RegionFileCache.c(this.d, i, j);
@@ -96,7 +96,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                     NBTTagList tileEntities = nbttagcompound.getCompound("Level").getList("TileEntities", 10);
                     if (tileEntities != null) {
                         for (int te = 0; te < tileEntities.size(); te++) {
-                            NBTTagCompound tileEntity = (NBTTagCompound) tileEntities.get(te);
+                            NBTTagCompound tileEntity = tileEntities.get(te);
                             int x = tileEntity.getInt("x") - chunk.locX * 16;
                             int z = tileEntity.getInt("z") - chunk.locZ * 16;
                             tileEntity.setInt("x", i * 16 + x);
@@ -117,7 +117,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         }
     }
 
-    public void a(World world, Chunk chunk) throws IOException, ExceptionWorldConflict {
+    public void a(World world, Chunk chunk) throws ExceptionWorldConflict {
         world.checkSession();
 
         try {
@@ -144,18 +144,18 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
     public boolean c() {
         if (this.b.isEmpty()) {
             if (this.e) {
-                ChunkRegionLoader.a.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", new Object[] { this.d.getName()});
+                ChunkRegionLoader.a.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", this.d.getName());
             }
 
             return false;
         } else {
-            ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) this.b.keySet().iterator().next();
+            ChunkCoordIntPair chunkcoordintpair = this.b.keySet().iterator().next();
 
             boolean flag;
 
             try {
                 this.c.add(chunkcoordintpair);
-                NBTTagCompound nbttagcompound = (NBTTagCompound) this.b.remove(chunkcoordintpair);
+                NBTTagCompound nbttagcompound = this.b.remove(chunkcoordintpair);
 
                 if (nbttagcompound != null) {
                     try {
@@ -181,7 +181,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         dataoutputstream.close();
     }
 
-    public void b(World world, Chunk chunk) throws IOException {}
+    public void b(World world, Chunk chunk) {}
 
     public void a() {}
 
@@ -212,13 +212,12 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         ChunkSection[] achunksection = chunk.getSections();
         NBTTagList nbttaglist = new NBTTagList();
         boolean flag = !world.worldProvider.o();
-        ChunkSection[] achunksection1 = achunksection;
         int i = achunksection.length;
 
         NBTTagCompound nbttagcompound1;
 
         for (int j = 0; j < i; ++j) {
-            ChunkSection chunksection = achunksection1[j];
+            ChunkSection chunksection = achunksection[j];
 
             if (chunksection != null) {
                 nbttagcompound1 = new NBTTagCompound();
@@ -302,12 +301,11 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         if (list != null) {
             long k1 = world.getTime();
             NBTTagList nbttaglist3 = new NBTTagList();
-            Iterator iterator1 = list.iterator();
 
-            while (iterator1.hasNext()) {
-                NextTickListEntry nextticklistentry = (NextTickListEntry) iterator1.next();
+            for (Object o : list) {
+                NextTickListEntry nextticklistentry = (NextTickListEntry) o;
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
-                MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(nextticklistentry.a());
+                MinecraftKey minecraftkey = Block.REGISTRY.c(nextticklistentry.a());
 
                 nbttagcompound2.setString("i", minecraftkey == null ? "" : minecraftkey.toString());
                 nbttagcompound2.setInt("x", nextticklistentry.a.getX());
@@ -350,24 +348,22 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 int i1 = l & 15;
                 int j1 = l >> 8 & 15;
                 int k1 = l >> 4 & 15;
-                int l1 = nibblearray1 != null ? nibblearray1.a(i1, j1, k1) : 0;
 
                 // CraftBukkit start - fix broken blocks
                 // achar[l] = (char) (l1 << 12 | (abyte[l] & 255) << 4 | nibblearray.a(i1, j1, k1));
 
-                int ex =  l1;
                 int id = (abyte[l] & 255);
                 int data = nibblearray.a(i1, j1, k1);
-                int packed = ex << 12 | id << 4 | data;
+                int packed = (nibblearray1 != null ? nibblearray1.a(i1, j1, k1) : 0) << 12 | id << 4 | data;
                 if (Block.d.a(packed) == null) {
-                    Block block = Block.getById(ex << 8 | id);
+                    Block block = Block.getById((nibblearray1 != null ? nibblearray1.a(i1, j1, k1) : 0) << 8 | id);
                     if (block != null) {
                         try {
                             data = block.toLegacyData(block.fromLegacyData(data));
                         } catch (Exception ignored) {
                             data = block.toLegacyData(block.getBlockData());
                         }
-                        packed = ex << 12 | id << 4 | data;
+                        packed = (nibblearray1 != null ? nibblearray1.a(i1, j1, k1) : 0) << 12 | id << 4 | data;
                     }
                 }
                 achar[l] = (char) packed;
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 907c57b8c..97ac75a02 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -33,7 +33,7 @@ public class ChunkSection {
     // CraftBukkit end
 
     public IBlockData getType(int i, int j, int k) {
-        IBlockData iblockdata = (IBlockData) Block.d.a(this.blockIds[j << 8 | k << 4 | i]);
+        IBlockData iblockdata = Block.d.a(this.blockIds[j << 8 | k << 4 | i]);
 
         return iblockdata != null ? iblockdata : Blocks.AIR.getBlockData();
     }
diff --git a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
index 782025707..02b1ccab4 100644
--- a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import java.text.SimpleDateFormat;
+import java.util.Arrays;
 import java.util.Date;
 import java.util.concurrent.Callable;
 
@@ -96,7 +97,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Command to be executed");
 
                 crashreportsystemdetails.a("Command", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         return CommandBlockListenerAbstract.this.getCommand();
                     }
 
@@ -105,7 +106,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
                     }
                 });
                 crashreportsystemdetails.a("Name", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         return CommandBlockListenerAbstract.this.getName();
                     }
 
@@ -129,7 +130,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
             command = command.substring(1);
         }
         String[] args = command.split(" ");
-        ArrayList<String[]> commands = new ArrayList<String[]>();
+        ArrayList<String[]> commands = new ArrayList<>();
 
         String cmd = args[0];
         if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
@@ -157,9 +158,9 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
             if (command.startsWith("/")) {
                 command = command.substring(1);
             }
-            String as[] = command.split(" ");
+            String[] as = command.split(" ");
             as = VanillaCommandWrapper.dropFirstArgument(as);
-            if (!((VanillaCommandWrapper) commandBlockCommand).testPermission(bSender)) {
+            if (!commandBlockCommand.testPermission(bSender)) {
                 return 0;
             }
             return ((VanillaCommandWrapper) commandBlockCommand).dispatchVanillaCommand(bSender, sender, as);
@@ -187,11 +188,11 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
             server.worldServer[pos] = world;
         }
         try {
-            ArrayList<String[]> newCommands = new ArrayList<String[]>();
+            ArrayList<String[]> newCommands = new ArrayList<>();
             for (int i = 0; i < args.length; i++) {
                 if (PlayerSelector.isPattern(args[i])) {
-                    for (int j = 0; j < commands.size(); j++) {
-                        newCommands.addAll(buildCommands(sender, commands.get(j), i));
+                    for (String[] strings : commands) {
+                        newCommands.addAll(buildCommands(sender, strings, i));
                     }
                     ArrayList<String[]> temp = commands;
                     commands = newCommands;
@@ -206,9 +207,9 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
         int completed = 0;
 
         // Now dispatch all of the commands we ended up with
-        for (int i = 0; i < commands.size(); i++) {
+        for (String[] strings : commands) {
             try {
-                if (commandMap.dispatch(bSender, joiner.join(java.util.Arrays.asList(commands.get(i))))) {
+                if (commandMap.dispatch(bSender, joiner.join(Arrays.asList(strings)))) {
                     completed++;
                 }
             } catch (Throwable exception) {
@@ -218,7 +219,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
                     CommandBlockListenerAbstract listener = (CommandBlockListenerAbstract) sender;
                     MinecraftServer.getServer().server.getLogger().log(Level.WARNING, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().getX(), listener.getChunkCoordinates().getY(), listener.getChunkCoordinates().getZ()), exception);
                 } else {
-                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, String.format("Unknown CommandBlock failed to handle command"), exception);
+                    MinecraftServer.getServer().server.getLogger().log(Level.WARNING, "Unknown CommandBlock failed to handle command", exception);
                 }
             }
         }
@@ -227,8 +228,8 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
     }
 
     private static ArrayList<String[]> buildCommands(ICommandListener sender, String[] args, int pos) {
-        ArrayList<String[]> commands = new ArrayList<String[]>();
-        java.util.List<EntityPlayer> players = (java.util.List<EntityPlayer>)PlayerSelector.getPlayers(sender, args[pos], EntityPlayer.class);
+        ArrayList<String[]> commands = new ArrayList<>();
+        java.util.List<EntityPlayer> players = PlayerSelector.getPlayers(sender, args[pos], EntityPlayer.class);
 
         if (players != null) {
             for (EntityPlayer player : players) {
diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index fc522873a..bf3f0d3e4 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -5,70 +5,70 @@ import java.util.Iterator;
 public class CommandDispatcher extends CommandHandler implements ICommandDispatcher {
 
     public CommandDispatcher() {
-        this.a((ICommand) (new CommandTime()));
-        this.a((ICommand) (new CommandGamemode()));
-        this.a((ICommand) (new CommandDifficulty()));
-        this.a((ICommand) (new CommandGamemodeDefault()));
-        this.a((ICommand) (new CommandKill()));
-        this.a((ICommand) (new CommandToggleDownfall()));
-        this.a((ICommand) (new CommandWeather()));
-        this.a((ICommand) (new CommandXp()));
-        this.a((ICommand) (new CommandTp()));
-        this.a((ICommand) (new CommandGive()));
-        this.a((ICommand) (new CommandReplaceItem()));
-        this.a((ICommand) (new CommandStats()));
-        this.a((ICommand) (new CommandEffect()));
-        this.a((ICommand) (new CommandEnchant()));
-        this.a((ICommand) (new CommandParticle()));
-        this.a((ICommand) (new CommandMe()));
-        this.a((ICommand) (new CommandSeed()));
-        this.a((ICommand) (new CommandHelp()));
-        this.a((ICommand) (new CommandDebug()));
-        this.a((ICommand) (new CommandTell()));
-        this.a((ICommand) (new CommandSay()));
-        this.a((ICommand) (new CommandSpawnpoint()));
-        this.a((ICommand) (new CommandSetWorldSpawn()));
-        this.a((ICommand) (new CommandGamerule()));
-        this.a((ICommand) (new CommandClear()));
-        this.a((ICommand) (new CommandTestFor()));
-        this.a((ICommand) (new CommandSpreadPlayers()));
-        this.a((ICommand) (new CommandPlaySound()));
-        this.a((ICommand) (new CommandScoreboard()));
-        this.a((ICommand) (new CommandExecute()));
-        this.a((ICommand) (new CommandTrigger()));
-        this.a((ICommand) (new CommandAchievement()));
-        this.a((ICommand) (new CommandSummon()));
-        this.a((ICommand) (new CommandSetBlock()));
-        this.a((ICommand) (new CommandFill()));
-        this.a((ICommand) (new CommandClone()));
-        this.a((ICommand) (new CommandTestForBlocks()));
-        this.a((ICommand) (new CommandBlockData()));
-        this.a((ICommand) (new CommandTestForBlock()));
-        this.a((ICommand) (new CommandTellRaw()));
-        this.a((ICommand) (new CommandWorldBorder()));
-        this.a((ICommand) (new CommandTitle()));
-        this.a((ICommand) (new CommandEntityData()));
+        this.a(new CommandTime());
+        this.a(new CommandGamemode());
+        this.a(new CommandDifficulty());
+        this.a(new CommandGamemodeDefault());
+        this.a(new CommandKill());
+        this.a(new CommandToggleDownfall());
+        this.a(new CommandWeather());
+        this.a(new CommandXp());
+        this.a(new CommandTp());
+        this.a(new CommandGive());
+        this.a(new CommandReplaceItem());
+        this.a(new CommandStats());
+        this.a(new CommandEffect());
+        this.a(new CommandEnchant());
+        this.a(new CommandParticle());
+        this.a(new CommandMe());
+        this.a(new CommandSeed());
+        this.a(new CommandHelp());
+        this.a(new CommandDebug());
+        this.a(new CommandTell());
+        this.a(new CommandSay());
+        this.a(new CommandSpawnpoint());
+        this.a(new CommandSetWorldSpawn());
+        this.a(new CommandGamerule());
+        this.a(new CommandClear());
+        this.a(new CommandTestFor());
+        this.a(new CommandSpreadPlayers());
+        this.a(new CommandPlaySound());
+        this.a(new CommandScoreboard());
+        this.a(new CommandExecute());
+        this.a(new CommandTrigger());
+        this.a(new CommandAchievement());
+        this.a(new CommandSummon());
+        this.a(new CommandSetBlock());
+        this.a(new CommandFill());
+        this.a(new CommandClone());
+        this.a(new CommandTestForBlocks());
+        this.a(new CommandBlockData());
+        this.a(new CommandTestForBlock());
+        this.a(new CommandTellRaw());
+        this.a(new CommandWorldBorder());
+        this.a(new CommandTitle());
+        this.a(new CommandEntityData());
         if (MinecraftServer.getServer().ae()) {
-            this.a((ICommand) (new CommandOp()));
-            this.a((ICommand) (new CommandDeop()));
-            this.a((ICommand) (new CommandStop()));
-            this.a((ICommand) (new CommandSaveAll()));
-            this.a((ICommand) (new CommandSaveOff()));
-            this.a((ICommand) (new CommandSaveOn()));
-            this.a((ICommand) (new CommandBanIp()));
-            this.a((ICommand) (new CommandPardonIP()));
-            this.a((ICommand) (new CommandBan()));
-            this.a((ICommand) (new CommandBanList()));
-            this.a((ICommand) (new CommandPardon()));
-            this.a((ICommand) (new CommandKick()));
-            this.a((ICommand) (new CommandList()));
-            this.a((ICommand) (new CommandWhitelist()));
-            this.a((ICommand) (new CommandIdleTimeout()));
+            this.a(new CommandOp());
+            this.a(new CommandDeop());
+            this.a(new CommandStop());
+            this.a(new CommandSaveAll());
+            this.a(new CommandSaveOff());
+            this.a(new CommandSaveOn());
+            this.a(new CommandBanIp());
+            this.a(new CommandPardonIP());
+            this.a(new CommandBan());
+            this.a(new CommandBanList());
+            this.a(new CommandPardon());
+            this.a(new CommandKick());
+            this.a(new CommandList());
+            this.a(new CommandWhitelist());
+            this.a(new CommandIdleTimeout());
         } else {
-            this.a((ICommand) (new CommandPublish()));
+            this.a(new CommandPublish());
         }
 
-        CommandAbstract.a((ICommandDispatcher) this);
+        CommandAbstract.a(this);
     }
 
     public void a(ICommandListener icommandlistener, ICommand icommand, int i, String s, Object... aobject) {
@@ -79,15 +79,14 @@ public class CommandDispatcher extends CommandHandler implements ICommandDispatc
             flag = false;
         }
 
-        ChatMessage chatmessage = new ChatMessage("chat.type.admin", new Object[] { icommandlistener.getName(), new ChatMessage(s, aobject)});
+        ChatMessage chatmessage = new ChatMessage("chat.type.admin", icommandlistener.getName(), new ChatMessage(s, aobject));
 
         chatmessage.getChatModifier().setColor(EnumChatFormat.GRAY);
-        chatmessage.getChatModifier().setItalic(Boolean.valueOf(true));
+        chatmessage.getChatModifier().setItalic(Boolean.TRUE);
         if (flag) {
-            Iterator iterator = minecraftserver.getPlayerList().v().iterator();
 
-            while (iterator.hasNext()) {
-                EntityHuman entityhuman = (EntityHuman) iterator.next();
+            for (EntityPlayer entityPlayer : minecraftserver.getPlayerList().v()) {
+                EntityHuman entityhuman = (EntityHuman) entityPlayer;
 
                 if (entityhuman != icommandlistener && minecraftserver.getPlayerList().isOp(entityhuman.getProfile()) && icommand.canUse(icommandlistener)) {
                     boolean flag1 = icommandlistener instanceof MinecraftServer && MinecraftServer.getServer().r();
diff --git a/src/main/java/net/minecraft/server/CommandExecute.java b/src/main/java/net/minecraft/server/CommandExecute.java
index 1dc8e365e..86005e32d 100644
--- a/src/main/java/net/minecraft/server/CommandExecute.java
+++ b/src/main/java/net/minecraft/server/CommandExecute.java
@@ -25,7 +25,7 @@ public class CommandExecute extends CommandAbstract {
 
     public void execute(final ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 5) {
-            throw new ExceptionUsage("commands.execute.usage", new Object[0]);
+            throw new ExceptionUsage("commands.execute.usage");
         } else {
             final Entity entity = a(icommandlistener, astring[0], Entity.class);
             final double d0 = b(entity.locX, astring[1], false);
@@ -45,7 +45,7 @@ public class CommandExecute extends CommandAbstract {
                 IBlockData iblockdata = world.getType(blockposition1);
 
                 if (iblockdata.getBlock() != block || i >= 0 && iblockdata.getBlock().toLegacyData(iblockdata) != i) {
-                    throw new CommandException("commands.execute.failed", new Object[] { "detect", entity.getName()});
+                    throw new CommandException("commands.execute.failed", "detect", entity.getName());
                 }
 
                 b0 = 10;
@@ -109,13 +109,13 @@ public class CommandExecute extends CommandAbstract {
                 }else if (icommandlistener.f() != null) {
                     sender = icommandlistener.f().getBukkitEntity();
                 } else {
-                    throw new CommandException("Unhandled executor " + icommandlistener.getClass().getSimpleName(), new Object[0]);
+                    throw new CommandException("Unhandled executor " + icommandlistener.getClass().getSimpleName());
                 }
                 int j = CommandBlockListenerAbstract.executeCommand(icommandlistener1, new ProxiedNativeCommandSender(icommandlistener1, sender, entity.getBukkitEntity()), s); 
                 // CraftBukkit end
 
                 if (j < 1) {
-                    throw new CommandException("commands.execute.allInvocationsFailed", new Object[] { s});
+                    throw new CommandException("commands.execute.allInvocationsFailed", s);
                 }
             } catch (Throwable throwable) {
                 // CraftBukkit start
@@ -123,13 +123,13 @@ public class CommandExecute extends CommandAbstract {
                     throw (CommandException) throwable;
                 }
                 // CraftBukkit end
-                throw new CommandException("commands.execute.failed", new Object[] { s, entity.getName()});
+                throw new CommandException("commands.execute.failed", s, entity.getName());
             }
         }
     }
 
     public List<String> tabComplete(ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
-        return astring.length == 1 ? a(astring, MinecraftServer.getServer().getPlayers()) : (astring.length > 1 && astring.length <= 4 ? a(astring, 1, blockposition) : (astring.length > 5 && astring.length <= 8 && "detect".equals(astring[4]) ? a(astring, 5, blockposition) : (astring.length == 9 && "detect".equals(astring[4]) ? a(astring, (Collection) Block.REGISTRY.keySet()) : null)));
+        return astring.length == 1 ? a(astring, MinecraftServer.getServer().getPlayers()) : (astring.length > 1 && astring.length <= 4 ? a(astring, 1, blockposition) : (astring.length > 5 && astring.length <= 8 && "detect".equals(astring[4]) ? a(astring, 5, blockposition) : (astring.length == 9 && "detect".equals(astring[4]) ? a(astring, Block.REGISTRY.keySet()) : null)));
     }
 
     public boolean isListStart(String[] astring, int i) {
@@ -139,7 +139,7 @@ public class CommandExecute extends CommandAbstract {
     // CraftBukkit start - fix decompiler error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandGamemode.java b/src/main/java/net/minecraft/server/CommandGamemode.java
index abd23e7ed..5564f94a0 100644
--- a/src/main/java/net/minecraft/server/CommandGamemode.java
+++ b/src/main/java/net/minecraft/server/CommandGamemode.java
@@ -20,7 +20,7 @@ public class CommandGamemode extends CommandAbstract {
 
     public void execute(ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length <= 0) {
-            throw new ExceptionUsage("commands.gamemode.usage", new Object[0]);
+            throw new ExceptionUsage("commands.gamemode.usage");
         } else {
             WorldSettings.EnumGamemode worldsettings_enumgamemode = this.h(icommandlistener, astring[0]);
             EntityPlayer entityplayer = astring.length >= 2 ? a(icommandlistener, astring[1]) : b(icommandlistener);
@@ -35,15 +35,15 @@ public class CommandGamemode extends CommandAbstract {
 
             entityplayer.fallDistance = 0.0F;
             if (icommandlistener.getWorld().getGameRules().getBoolean("sendCommandFeedback")) {
-                entityplayer.sendMessage(new ChatMessage("gameMode.changed", new Object[0]));
+                entityplayer.sendMessage(new ChatMessage("gameMode.changed"));
             }
 
-            ChatMessage chatmessage = new ChatMessage("gameMode." + worldsettings_enumgamemode.b(), new Object[0]);
+            ChatMessage chatmessage = new ChatMessage("gameMode." + worldsettings_enumgamemode.b());
 
             if (entityplayer != icommandlistener) {
-                a(icommandlistener, this, 1, "commands.gamemode.success.other", new Object[] { entityplayer.getName(), chatmessage});
+                a(icommandlistener, this, 1, "commands.gamemode.success.other", entityplayer.getName(), chatmessage);
             } else {
-                a(icommandlistener, this, 1, "commands.gamemode.success.self", new Object[] { chatmessage});
+                a(icommandlistener, this, 1, "commands.gamemode.success.self", chatmessage);
             }
 
         }
@@ -54,7 +54,7 @@ public class CommandGamemode extends CommandAbstract {
     }
 
     public List<String> tabComplete(ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
-        return astring.length == 1 ? a(astring, new String[] { "survival", "creative", "adventure", "spectator"}) : (astring.length == 2 ? a(astring, this.d()) : null);
+        return astring.length == 1 ? a(astring, "survival", "creative", "adventure", "spectator") : (astring.length == 2 ? a(astring, this.d()) : null);
     }
 
     protected String[] d() {
@@ -68,7 +68,7 @@ public class CommandGamemode extends CommandAbstract {
     // CraftBukkit start - fix decompiler error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandGamerule.java b/src/main/java/net/minecraft/server/CommandGamerule.java
index cabbe5b33..08909a4b8 100644
--- a/src/main/java/net/minecraft/server/CommandGamerule.java
+++ b/src/main/java/net/minecraft/server/CommandGamerule.java
@@ -26,12 +26,12 @@ public class CommandGamerule extends CommandAbstract {
 
         switch (astring.length) {
         case 0:
-            icommandlistener.sendMessage(new ChatComponentText(a((Object[]) gamerules.getGameRules())));
+            icommandlistener.sendMessage(new ChatComponentText(a(gamerules.getGameRules())));
             break;
 
         case 1:
             if (!gamerules.contains(s)) {
-                throw new CommandException("commands.gamerule.norule", new Object[] { s});
+                throw new CommandException("commands.gamerule.norule", s);
             }
 
             String s2 = gamerules.get(s);
@@ -42,12 +42,12 @@ public class CommandGamerule extends CommandAbstract {
 
         default:
             if (gamerules.a(s, GameRules.EnumGameRuleType.BOOLEAN_VALUE) && !"true".equals(s1) && !"false".equals(s1)) {
-                throw new CommandException("commands.generic.boolean.invalid", new Object[] { s1});
+                throw new CommandException("commands.generic.boolean.invalid", s1);
             }
 
             gamerules.set(s, s1);
             a(gamerules, s);
-            a(icommandlistener, this, "commands.gamerule.success", new Object[0]);
+            a(icommandlistener, this, "commands.gamerule.success");
         }
 
     }
@@ -55,11 +55,8 @@ public class CommandGamerule extends CommandAbstract {
     public static void a(GameRules gamerules, String s) {
         if ("reducedDebugInfo".equals(s)) {
             int i = gamerules.getBoolean(s) ? 22 : 23;
-            Iterator iterator = MinecraftServer.getServer().getPlayerList().v().iterator();
-
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+            for (EntityPlayer entityplayer : MinecraftServer.getServer().getPlayerList().v()) {
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) i));
             }
         }
@@ -74,7 +71,7 @@ public class CommandGamerule extends CommandAbstract {
                 GameRules gamerules = this.d();
 
                 if (gamerules.a(astring[0], GameRules.EnumGameRuleType.BOOLEAN_VALUE)) {
-                    return a(astring, new String[] { "true", "false"});
+                    return a(astring, "true", "false");
                 }
             }
 
@@ -89,7 +86,7 @@ public class CommandGamerule extends CommandAbstract {
     // CraftBukkit start - fix decompile error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
index 3acb07461..c8327c757 100644
--- a/src/main/java/net/minecraft/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -37,148 +37,148 @@ public class CommandScoreboard extends CommandAbstract {
     public void execute(ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (!this.b(icommandlistener, astring)) {
             if (astring.length < 1) {
-                throw new ExceptionUsage("commands.scoreboard.usage", new Object[0]);
+                throw new ExceptionUsage("commands.scoreboard.usage");
             } else {
                 if (astring[0].equalsIgnoreCase("objectives")) {
                     if (astring.length == 1) {
-                        throw new ExceptionUsage("commands.scoreboard.objectives.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.objectives.usage");
                     }
 
                     if (astring[1].equalsIgnoreCase("list")) {
                         this.d(icommandlistener);
                     } else if (astring[1].equalsIgnoreCase("add")) {
                         if (astring.length < 4) {
-                            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage");
                         }
 
                         this.b(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("remove")) {
                         if (astring.length != 3) {
-                            throw new ExceptionUsage("commands.scoreboard.objectives.remove.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.objectives.remove.usage");
                         }
 
                         this.h(icommandlistener, astring[2]);
                     } else {
                         if (!astring[1].equalsIgnoreCase("setdisplay")) {
-                            throw new ExceptionUsage("commands.scoreboard.objectives.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.objectives.usage");
                         }
 
                         if (astring.length != 3 && astring.length != 4) {
-                            throw new ExceptionUsage("commands.scoreboard.objectives.setdisplay.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.objectives.setdisplay.usage");
                         }
 
                         this.j(icommandlistener, astring, 2);
                     }
                 } else if (astring[0].equalsIgnoreCase("players")) {
                     if (astring.length == 1) {
-                        throw new ExceptionUsage("commands.scoreboard.players.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.players.usage");
                     }
 
                     if (astring[1].equalsIgnoreCase("list")) {
                         if (astring.length > 3) {
-                            throw new ExceptionUsage("commands.scoreboard.players.list.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.list.usage");
                         }
 
                         this.k(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("add")) {
                         if (astring.length < 5) {
-                            throw new ExceptionUsage("commands.scoreboard.players.add.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.add.usage");
                         }
 
                         this.l(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("remove")) {
                         if (astring.length < 5) {
-                            throw new ExceptionUsage("commands.scoreboard.players.remove.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.remove.usage");
                         }
 
                         this.l(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("set")) {
                         if (astring.length < 5) {
-                            throw new ExceptionUsage("commands.scoreboard.players.set.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.set.usage");
                         }
 
                         this.l(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("reset")) {
                         if (astring.length != 3 && astring.length != 4) {
-                            throw new ExceptionUsage("commands.scoreboard.players.reset.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.reset.usage");
                         }
 
                         this.m(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("enable")) {
                         if (astring.length != 4) {
-                            throw new ExceptionUsage("commands.scoreboard.players.enable.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.enable.usage");
                         }
 
                         this.n(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("test")) {
                         if (astring.length != 5 && astring.length != 6) {
-                            throw new ExceptionUsage("commands.scoreboard.players.test.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.test.usage");
                         }
 
                         this.o(icommandlistener, astring, 2);
                     } else {
                         if (!astring[1].equalsIgnoreCase("operation")) {
-                            throw new ExceptionUsage("commands.scoreboard.players.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.usage");
                         }
 
                         if (astring.length != 7) {
-                            throw new ExceptionUsage("commands.scoreboard.players.operation.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.operation.usage");
                         }
 
                         this.p(icommandlistener, astring, 2);
                     }
                 } else {
                     if (!astring[0].equalsIgnoreCase("teams")) {
-                        throw new ExceptionUsage("commands.scoreboard.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.usage");
                     }
 
                     if (astring.length == 1) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.teams.usage");
                     }
 
                     if (astring[1].equalsIgnoreCase("list")) {
                         if (astring.length > 3) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.list.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.list.usage");
                         }
 
                         this.f(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("add")) {
                         if (astring.length < 3) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.add.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.add.usage");
                         }
 
                         this.c(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("remove")) {
                         if (astring.length != 3) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.remove.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.remove.usage");
                         }
 
                         this.e(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("empty")) {
                         if (astring.length != 3) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.empty.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.empty.usage");
                         }
 
                         this.i(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("join")) {
                         if (astring.length < 4 && (astring.length != 3 || !(icommandlistener instanceof EntityHuman))) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.join.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.join.usage");
                         }
 
                         this.g(icommandlistener, astring, 2);
                     } else if (astring[1].equalsIgnoreCase("leave")) {
                         if (astring.length < 3 && !(icommandlistener instanceof EntityHuman)) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.leave.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.leave.usage");
                         }
 
                         this.h(icommandlistener, astring, 2);
                     } else {
                         if (!astring[1].equalsIgnoreCase("option")) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.usage");
                         }
 
                         if (astring.length != 4 && astring.length != 5) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.usage");
                         }
 
                         this.d(icommandlistener, astring, 2);
@@ -195,7 +195,7 @@ public class CommandScoreboard extends CommandAbstract {
         for (int j = 0; j < astring.length; ++j) {
             if (this.isListStart(astring, j) && "*".equals(astring[j])) {
                 if (i >= 0) {
-                    throw new CommandException("commands.scoreboard.noMultiWildcard", new Object[0]);
+                    throw new CommandException("commands.scoreboard.noMultiWildcard");
                 }
 
                 i = j;
@@ -208,10 +208,9 @@ public class CommandScoreboard extends CommandAbstract {
             ArrayList arraylist = Lists.newArrayList(this.d().getPlayers());
             String s = astring[i];
             ArrayList arraylist1 = Lists.newArrayList();
-            Iterator iterator = arraylist.iterator();
 
-            while (iterator.hasNext()) {
-                String s1 = (String) iterator.next();
+            for (Object o : arraylist) {
+                String s1 = (String) o;
 
                 astring[i] = s1;
 
@@ -229,7 +228,7 @@ public class CommandScoreboard extends CommandAbstract {
             astring[i] = s;
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, arraylist1.size());
             if (arraylist1.size() == 0) {
-                throw new ExceptionUsage("commands.scoreboard.allMatchesFailed", new Object[0]);
+                throw new ExceptionUsage("commands.scoreboard.allMatchesFailed");
             } else {
                 return true;
             }
@@ -245,9 +244,9 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardObjective scoreboardobjective = scoreboard.getObjective(s);
 
         if (scoreboardobjective == null) {
-            throw new CommandException("commands.scoreboard.objectiveNotFound", new Object[] { s});
+            throw new CommandException("commands.scoreboard.objectiveNotFound", s);
         } else if (flag && scoreboardobjective.getCriteria().isReadOnly()) {
-            throw new CommandException("commands.scoreboard.objectiveReadOnly", new Object[] { s});
+            throw new CommandException("commands.scoreboard.objectiveReadOnly", s);
         } else {
             return scoreboardobjective;
         }
@@ -258,7 +257,7 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardTeam scoreboardteam = scoreboard.getTeam(s);
 
         if (scoreboardteam == null) {
-            throw new CommandException("commands.scoreboard.teamNotFound", new Object[] { s});
+            throw new CommandException("commands.scoreboard.teamNotFound", s);
         } else {
             return scoreboardteam;
         }
@@ -268,22 +267,22 @@ public class CommandScoreboard extends CommandAbstract {
         String s = astring[i++];
         String s1 = astring[i++];
         Scoreboard scoreboard = this.d();
-        IScoreboardCriteria iscoreboardcriteria = (IScoreboardCriteria) IScoreboardCriteria.criteria.get(s1);
+        IScoreboardCriteria iscoreboardcriteria = IScoreboardCriteria.criteria.get(s1);
 
         if (iscoreboardcriteria == null) {
-            throw new ExceptionUsage("commands.scoreboard.objectives.add.wrongType", new Object[] { s1});
+            throw new ExceptionUsage("commands.scoreboard.objectives.add.wrongType", s1);
         } else if (scoreboard.getObjective(s) != null) {
-            throw new CommandException("commands.scoreboard.objectives.add.alreadyExists", new Object[] { s});
+            throw new CommandException("commands.scoreboard.objectives.add.alreadyExists", s);
         } else if (s.length() > 16) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.tooLong", new Object[] { s, Integer.valueOf(16)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.tooLong", s, 16);
         } else if (s.length() == 0) {
-            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage", new Object[0]);
+            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage");
         } else {
             if (astring.length > i) {
                 String s2 = a(icommandlistener, astring, i).c();
 
                 if (s2.length() > 32) {
-                    throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.displayTooLong", new Object[] { s2, Integer.valueOf(32)});
+                    throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.displayTooLong", s2, 32);
                 }
 
                 if (s2.length() > 0) {
@@ -295,7 +294,7 @@ public class CommandScoreboard extends CommandAbstract {
                 scoreboard.registerObjective(s, iscoreboardcriteria);
             }
 
-            a(icommandlistener, this, "commands.scoreboard.objectives.add.success", new Object[] { s});
+            a(icommandlistener, this, "commands.scoreboard.objectives.add.success", s);
         }
     }
 
@@ -304,17 +303,17 @@ public class CommandScoreboard extends CommandAbstract {
         Scoreboard scoreboard = this.d();
 
         if (scoreboard.getTeam(s) != null) {
-            throw new CommandException("commands.scoreboard.teams.add.alreadyExists", new Object[] { s});
+            throw new CommandException("commands.scoreboard.teams.add.alreadyExists", s);
         } else if (s.length() > 16) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.tooLong", new Object[] { s, Integer.valueOf(16)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.tooLong", s, 16);
         } else if (s.length() == 0) {
-            throw new ExceptionUsage("commands.scoreboard.teams.add.usage", new Object[0]);
+            throw new ExceptionUsage("commands.scoreboard.teams.add.usage");
         } else {
             if (astring.length > i) {
                 String s1 = a(icommandlistener, astring, i).c();
 
                 if (s1.length() > 32) {
-                    throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.displayTooLong", new Object[] { s1, Integer.valueOf(32)});
+                    throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.displayTooLong", s1, 32);
                 }
 
                 if (s1.length() > 0) {
@@ -326,7 +325,7 @@ public class CommandScoreboard extends CommandAbstract {
                 scoreboard.createTeam(s);
             }
 
-            a(icommandlistener, this, "commands.scoreboard.teams.add.success", new Object[] { s});
+            a(icommandlistener, this, "commands.scoreboard.teams.add.success", s);
         }
     }
 
@@ -337,18 +336,18 @@ public class CommandScoreboard extends CommandAbstract {
             String s = astring[i++].toLowerCase();
 
             if (!s.equalsIgnoreCase("color") && !s.equalsIgnoreCase("friendlyfire") && !s.equalsIgnoreCase("seeFriendlyInvisibles") && !s.equalsIgnoreCase("nametagVisibility") && !s.equalsIgnoreCase("deathMessageVisibility")) {
-                throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+                throw new ExceptionUsage("commands.scoreboard.teams.option.usage");
             } else if (astring.length == 4) {
                 if (s.equalsIgnoreCase("color")) {
-                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a(EnumChatFormat.a(true, false))});
+                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(EnumChatFormat.a(true, false)));
                 } else if (!s.equalsIgnoreCase("friendlyfire") && !s.equalsIgnoreCase("seeFriendlyInvisibles")) {
                     if (!s.equalsIgnoreCase("nametagVisibility") && !s.equalsIgnoreCase("deathMessageVisibility")) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.usage");
                     } else {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a()));
                     }
                 } else {
-                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a((Collection) Arrays.asList(new String[] { "true", "false"})));
                 }
             } else {
                 String s1 = astring[i];
@@ -357,7 +356,7 @@ public class CommandScoreboard extends CommandAbstract {
                     EnumChatFormat enumchatformat = EnumChatFormat.b(s1);
 
                     if (enumchatformat == null || enumchatformat.isFormat()) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a(EnumChatFormat.a(true, false))});
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(EnumChatFormat.a(true, false)));
                     }
 
                     scoreboardteam.a(enumchatformat);
@@ -365,13 +364,13 @@ public class CommandScoreboard extends CommandAbstract {
                     scoreboardteam.setSuffix(EnumChatFormat.RESET.toString());
                 } else if (s.equalsIgnoreCase("friendlyfire")) {
                     if (!s1.equalsIgnoreCase("true") && !s1.equalsIgnoreCase("false")) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a((Collection) Arrays.asList(new String[] { "true", "false"})));
                     }
 
                     scoreboardteam.setAllowFriendlyFire(s1.equalsIgnoreCase("true"));
                 } else if (s.equalsIgnoreCase("seeFriendlyInvisibles")) {
                     if (!s1.equalsIgnoreCase("true") && !s1.equalsIgnoreCase("false")) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a((Collection) Arrays.asList(new String[] { "true", "false"})));
                     }
 
                     scoreboardteam.setCanSeeFriendlyInvisibles(s1.equalsIgnoreCase("true"));
@@ -381,21 +380,21 @@ public class CommandScoreboard extends CommandAbstract {
                     if (s.equalsIgnoreCase("nametagVisibility")) {
                         scoreboardteambase_enumnametagvisibility = ScoreboardTeamBase.EnumNameTagVisibility.a(s1);
                         if (scoreboardteambase_enumnametagvisibility == null) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a()));
                         }
 
                         scoreboardteam.setNameTagVisibility(scoreboardteambase_enumnametagvisibility);
                     } else if (s.equalsIgnoreCase("deathMessageVisibility")) {
                         scoreboardteambase_enumnametagvisibility = ScoreboardTeamBase.EnumNameTagVisibility.a(s1);
                         if (scoreboardteambase_enumnametagvisibility == null) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a()));
                         }
 
                         scoreboardteam.b(scoreboardteambase_enumnametagvisibility);
                     }
                 }
 
-                a(icommandlistener, this, "commands.scoreboard.teams.option.success", new Object[] { s, scoreboardteam.getName(), s1});
+                a(icommandlistener, this, "commands.scoreboard.teams.option.success", s, scoreboardteam.getName(), s1);
             }
         }
     }
@@ -406,7 +405,7 @@ public class CommandScoreboard extends CommandAbstract {
 
         if (scoreboardteam != null) {
             scoreboard.removeTeam(scoreboardteam);
-            a(icommandlistener, this, "commands.scoreboard.teams.remove.success", new Object[] { scoreboardteam.getName()});
+            a(icommandlistener, this, "commands.scoreboard.teams.remove.success", scoreboardteam.getName());
         }
     }
 
@@ -424,10 +423,10 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection.size());
             if (collection.size() <= 0) {
-                throw new CommandException("commands.scoreboard.teams.list.player.empty", new Object[] { scoreboardteam.getName()});
+                throw new CommandException("commands.scoreboard.teams.list.player.empty", scoreboardteam.getName());
             }
 
-            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.teams.list.player.count", new Object[] { Integer.valueOf(collection.size()), scoreboardteam.getName()});
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.teams.list.player.count", collection.size(), scoreboardteam.getName());
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage);
@@ -437,19 +436,18 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection1.size());
             if (collection1.size() <= 0) {
-                throw new CommandException("commands.scoreboard.teams.list.empty", new Object[0]);
+                throw new CommandException("commands.scoreboard.teams.list.empty");
             }
 
-            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.teams.list.count", new Object[] { Integer.valueOf(collection1.size())});
+            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.teams.list.count", collection1.size());
 
             chatmessage1.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage1);
-            Iterator iterator = collection1.iterator();
 
-            while (iterator.hasNext()) {
-                ScoreboardTeam scoreboardteam1 = (ScoreboardTeam) iterator.next();
+            for (Object o : collection1) {
+                ScoreboardTeam scoreboardteam1 = (ScoreboardTeam) o;
 
-                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.teams.list.entry", new Object[] { scoreboardteam1.getName(), scoreboardteam1.getDisplayName(), Integer.valueOf(scoreboardteam1.getPlayerNameSet().size())}));
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.teams.list.entry", scoreboardteam1.getName(), scoreboardteam1.getDisplayName(), scoreboardteam1.getPlayerNameSet().size()));
             }
         }
 
@@ -474,11 +472,11 @@ public class CommandScoreboard extends CommandAbstract {
                 s1 = astring[i++];
                 if (s1.startsWith("@")) {
                     List list = c(icommandlistener, s1);
-                    Iterator iterator = list.iterator();
 
-                    while (iterator.hasNext()) {
-                        Entity entity = (Entity) iterator.next();
-                        if (!entity.world.tacoSpigotConfig.nonPlayerEntitiesOnScoreboards && !(entity instanceof EntityHuman)) continue; // TacoSpigot
+                    for (Object o : list) {
+                        Entity entity = (Entity) o;
+                        if (!entity.world.tacoSpigotConfig.nonPlayerEntitiesOnScoreboards && !(entity instanceof EntityHuman))
+                            continue; // TacoSpigot
                         String s2 = e(icommandlistener, entity.getUniqueID().toString());
 
                         if (scoreboard.addPlayerToTeam(s2, s)) {
@@ -501,11 +499,11 @@ public class CommandScoreboard extends CommandAbstract {
 
         if (!hashset.isEmpty()) {
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, hashset.size());
-            a(icommandlistener, this, "commands.scoreboard.teams.join.success", new Object[] { Integer.valueOf(hashset.size()), s, a(hashset.toArray(new String[hashset.size()]))});
+            a(icommandlistener, this, "commands.scoreboard.teams.join.success", hashset.size(), s, a(hashset.toArray(new String[0])));
         }
 
         if (!hashset1.isEmpty()) {
-            throw new CommandException("commands.scoreboard.teams.join.failure", new Object[] { Integer.valueOf(hashset1.size()), s, a(hashset1.toArray(new String[hashset1.size()]))});
+            throw new CommandException("commands.scoreboard.teams.join.failure", hashset1.size(), s, a(hashset1.toArray(new String[0])));
         }
     }
 
@@ -527,10 +525,9 @@ public class CommandScoreboard extends CommandAbstract {
                 s = astring[i++];
                 if (s.startsWith("@")) {
                     List list = c(icommandlistener, s);
-                    Iterator iterator = list.iterator();
 
-                    while (iterator.hasNext()) {
-                        Entity entity = (Entity) iterator.next();
+                    for (Object o : list) {
+                        Entity entity = (Entity) o;
                         String s1 = e(icommandlistener, entity.getUniqueID().toString());
 
                         if (scoreboard.removePlayerFromTeam(s1)) {
@@ -553,11 +550,11 @@ public class CommandScoreboard extends CommandAbstract {
 
         if (!hashset.isEmpty()) {
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, hashset.size());
-            a(icommandlistener, this, "commands.scoreboard.teams.leave.success", new Object[] { Integer.valueOf(hashset.size()), a(hashset.toArray(new String[hashset.size()]))});
+            a(icommandlistener, this, "commands.scoreboard.teams.leave.success", hashset.size(), a(hashset.toArray(new String[0])));
         }
 
         if (!hashset1.isEmpty()) {
-            throw new CommandException("commands.scoreboard.teams.leave.failure", new Object[] { Integer.valueOf(hashset1.size()), a(hashset1.toArray(new String[hashset1.size()]))});
+            throw new CommandException("commands.scoreboard.teams.leave.failure", hashset1.size(), a(hashset1.toArray(new String[0])));
         }
     }
 
@@ -570,17 +567,16 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, arraylist.size());
             if (arraylist.isEmpty()) {
-                throw new CommandException("commands.scoreboard.teams.empty.alreadyEmpty", new Object[] { scoreboardteam.getName()});
+                throw new CommandException("commands.scoreboard.teams.empty.alreadyEmpty", scoreboardteam.getName());
             } else {
-                Iterator iterator = arraylist.iterator();
 
-                while (iterator.hasNext()) {
-                    String s = (String) iterator.next();
+                for (Object o : arraylist) {
+                    String s = (String) o;
 
                     scoreboard.removePlayerFromTeam(s, scoreboardteam);
                 }
 
-                a(icommandlistener, this, "commands.scoreboard.teams.empty.success", new Object[] { Integer.valueOf(arraylist.size()), scoreboardteam.getName()});
+                a(icommandlistener, this, "commands.scoreboard.teams.empty.success", arraylist.size(), scoreboardteam.getName());
             }
         }
     }
@@ -590,7 +586,7 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardObjective scoreboardobjective = this.a(s, false);
 
         scoreboard.unregisterObjective(scoreboardobjective);
-        a(icommandlistener, this, "commands.scoreboard.objectives.remove.success", new Object[] { s});
+        a(icommandlistener, this, "commands.scoreboard.objectives.remove.success", s);
     }
 
     protected void d(ICommandListener icommandlistener) throws CommandException {
@@ -598,18 +594,17 @@ public class CommandScoreboard extends CommandAbstract {
         Collection collection = scoreboard.getObjectives();
 
         if (collection.size() <= 0) {
-            throw new CommandException("commands.scoreboard.objectives.list.empty", new Object[0]);
+            throw new CommandException("commands.scoreboard.objectives.list.empty");
         } else {
-            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.objectives.list.count", new Object[] { Integer.valueOf(collection.size())});
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.objectives.list.count", collection.size());
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage);
-            Iterator iterator = collection.iterator();
 
-            while (iterator.hasNext()) {
-                ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+            for (Object o : collection) {
+                ScoreboardObjective scoreboardobjective = (ScoreboardObjective) o;
 
-                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.objectives.list.entry", new Object[] { scoreboardobjective.getName(), scoreboardobjective.getDisplayName(), scoreboardobjective.getCriteria().getName()}));
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.objectives.list.entry", scoreboardobjective.getName(), scoreboardobjective.getDisplayName(), scoreboardobjective.getCriteria().getName()));
             }
 
         }
@@ -626,13 +621,13 @@ public class CommandScoreboard extends CommandAbstract {
         }
 
         if (j < 0) {
-            throw new CommandException("commands.scoreboard.objectives.setdisplay.invalidSlot", new Object[] { s});
+            throw new CommandException("commands.scoreboard.objectives.setdisplay.invalidSlot", s);
         } else {
             scoreboard.setDisplaySlot(j, scoreboardobjective);
             if (scoreboardobjective != null) {
-                a(icommandlistener, this, "commands.scoreboard.objectives.setdisplay.successSet", new Object[] { Scoreboard.getSlotName(j), scoreboardobjective.getName()});
+                a(icommandlistener, this, "commands.scoreboard.objectives.setdisplay.successSet", Scoreboard.getSlotName(j), scoreboardobjective.getName());
             } else {
-                a(icommandlistener, this, "commands.scoreboard.objectives.setdisplay.successCleared", new Object[] { Scoreboard.getSlotName(j)});
+                a(icommandlistener, this, "commands.scoreboard.objectives.setdisplay.successCleared", Scoreboard.getSlotName(j));
             }
 
         }
@@ -647,29 +642,28 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, map.size());
             if (map.size() <= 0) {
-                throw new CommandException("commands.scoreboard.players.list.player.empty", new Object[] { s});
+                throw new CommandException("commands.scoreboard.players.list.player.empty", s);
             }
 
-            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.players.list.player.count", new Object[] { Integer.valueOf(map.size()), s});
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.players.list.player.count", map.size(), s);
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage);
-            Iterator iterator = map.values().iterator();
 
-            while (iterator.hasNext()) {
-                ScoreboardScore scoreboardscore = (ScoreboardScore) iterator.next();
+            for (Object o : map.values()) {
+                ScoreboardScore scoreboardscore = (ScoreboardScore) o;
 
-                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.players.list.player.entry", new Object[] { Integer.valueOf(scoreboardscore.getScore()), scoreboardscore.getObjective().getDisplayName(), scoreboardscore.getObjective().getName()}));
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.players.list.player.entry", scoreboardscore.getScore(), scoreboardscore.getObjective().getDisplayName(), scoreboardscore.getObjective().getName()));
             }
         } else {
             Collection collection = scoreboard.getPlayers();
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection.size());
             if (collection.size() <= 0) {
-                throw new CommandException("commands.scoreboard.players.list.empty", new Object[0]);
+                throw new CommandException("commands.scoreboard.players.list.empty");
             }
 
-            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.players.list.count", new Object[] { Integer.valueOf(collection.size())});
+            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.players.list.count", collection.size());
 
             chatmessage1.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage1);
@@ -684,7 +678,7 @@ public class CommandScoreboard extends CommandAbstract {
         String s1 = e(icommandlistener, astring[i++]);
 
         if (s1.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s1, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s1, 40);
         } else {
             ScoreboardObjective scoreboardobjective = this.a(astring[i++], true);
             int k = s.equalsIgnoreCase("set") ? a(astring[i++]) : a(astring[i++], 0);
@@ -698,10 +692,10 @@ public class CommandScoreboard extends CommandAbstract {
 
                     entity.e(nbttagcompound1);
                     if (!GameProfileSerializer.a(nbttagcompound, nbttagcompound1, true)) {
-                        throw new CommandException("commands.scoreboard.players.set.tagMismatch", new Object[] { s1});
+                        throw new CommandException("commands.scoreboard.players.set.tagMismatch", s1);
                     }
                 } catch (MojangsonParseException mojangsonparseexception) {
-                    throw new CommandException("commands.scoreboard.players.set.tagError", new Object[] { mojangsonparseexception.getMessage()});
+                    throw new CommandException("commands.scoreboard.players.set.tagError", mojangsonparseexception.getMessage());
                 }
             }
 
@@ -716,7 +710,7 @@ public class CommandScoreboard extends CommandAbstract {
                 scoreboardscore.removeScore(k);
             }
 
-            a(icommandlistener, this, "commands.scoreboard.players.set.success", new Object[] { scoreboardobjective.getName(), s1, Integer.valueOf(scoreboardscore.getScore())});
+            a(icommandlistener, this, "commands.scoreboard.players.set.success", scoreboardobjective.getName(), s1, scoreboardscore.getScore());
         }
     }
 
@@ -728,10 +722,10 @@ public class CommandScoreboard extends CommandAbstract {
             ScoreboardObjective scoreboardobjective = this.a(astring[i++], false);
 
             scoreboard.resetPlayerScores(s, scoreboardobjective);
-            a(icommandlistener, this, "commands.scoreboard.players.resetscore.success", new Object[] { scoreboardobjective.getName(), s});
+            a(icommandlistener, this, "commands.scoreboard.players.resetscore.success", scoreboardobjective.getName(), s);
         } else {
-            scoreboard.resetPlayerScores(s, (ScoreboardObjective) null);
-            a(icommandlistener, this, "commands.scoreboard.players.reset.success", new Object[] { s});
+            scoreboard.resetPlayerScores(s, null);
+            a(icommandlistener, this, "commands.scoreboard.players.reset.success", s);
         }
 
     }
@@ -741,17 +735,17 @@ public class CommandScoreboard extends CommandAbstract {
         String s = d(icommandlistener, astring[i++]);
 
         if (s.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s, 40);
         } else {
             ScoreboardObjective scoreboardobjective = this.a(astring[i], false);
 
             if (scoreboardobjective.getCriteria() != IScoreboardCriteria.c) {
-                throw new CommandException("commands.scoreboard.players.enable.noTrigger", new Object[] { scoreboardobjective.getName()});
+                throw new CommandException("commands.scoreboard.players.enable.noTrigger", scoreboardobjective.getName());
             } else {
                 ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
 
                 scoreboardscore.a(false);
-                a(icommandlistener, this, "commands.scoreboard.players.enable.success", new Object[] { scoreboardobjective.getName(), s});
+                a(icommandlistener, this, "commands.scoreboard.players.enable.success", scoreboardobjective.getName(), s);
             }
         }
     }
@@ -761,12 +755,12 @@ public class CommandScoreboard extends CommandAbstract {
         String s = e(icommandlistener, astring[i++]);
 
         if (s.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s, 40);
         } else {
             ScoreboardObjective scoreboardobjective = this.a(astring[i++], false);
 
             if (!scoreboard.b(s, scoreboardobjective)) {
-                throw new CommandException("commands.scoreboard.players.test.notFound", new Object[] { scoreboardobjective.getName(), s});
+                throw new CommandException("commands.scoreboard.players.test.notFound", scoreboardobjective.getName(), s);
             } else {
                 int j = astring[i].equals("*") ? Integer.MIN_VALUE : a(astring[i]);
 
@@ -775,9 +769,9 @@ public class CommandScoreboard extends CommandAbstract {
                 ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
 
                 if (scoreboardscore.getScore() >= j && scoreboardscore.getScore() <= k) {
-                    a(icommandlistener, this, "commands.scoreboard.players.test.success", new Object[] { Integer.valueOf(scoreboardscore.getScore()), Integer.valueOf(j), Integer.valueOf(k)});
+                    a(icommandlistener, this, "commands.scoreboard.players.test.success", scoreboardscore.getScore(), j, k);
                 } else {
-                    throw new CommandException("commands.scoreboard.players.test.failed", new Object[] { Integer.valueOf(scoreboardscore.getScore()), Integer.valueOf(j), Integer.valueOf(k)});
+                    throw new CommandException("commands.scoreboard.players.test.failed", scoreboardscore.getScore(), j, k);
                 }
             }
         }
@@ -792,71 +786,81 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardObjective scoreboardobjective1 = this.a(astring[i], false);
 
         if (s.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s, 40);
         } else if (s2.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s2, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s2, 40);
         } else {
             ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
 
             if (!scoreboard.b(s2, scoreboardobjective1)) {
-                throw new CommandException("commands.scoreboard.players.operation.notFound", new Object[] { scoreboardobjective1.getName(), s2});
+                throw new CommandException("commands.scoreboard.players.operation.notFound", scoreboardobjective1.getName(), s2);
             } else {
                 ScoreboardScore scoreboardscore1 = scoreboard.getPlayerScoreForObjective(s2, scoreboardobjective1);
 
-                if (s1.equals("+=")) {
-                    scoreboardscore.setScore(scoreboardscore.getScore() + scoreboardscore1.getScore());
-                } else if (s1.equals("-=")) {
-                    scoreboardscore.setScore(scoreboardscore.getScore() - scoreboardscore1.getScore());
-                } else if (s1.equals("*=")) {
-                    scoreboardscore.setScore(scoreboardscore.getScore() * scoreboardscore1.getScore());
-                } else if (s1.equals("/=")) {
-                    if (scoreboardscore1.getScore() != 0) {
-                        scoreboardscore.setScore(scoreboardscore.getScore() / scoreboardscore1.getScore());
-                    }
-                } else if (s1.equals("%=")) {
-                    if (scoreboardscore1.getScore() != 0) {
-                        scoreboardscore.setScore(scoreboardscore.getScore() % scoreboardscore1.getScore());
-                    }
-                } else if (s1.equals("=")) {
-                    scoreboardscore.setScore(scoreboardscore1.getScore());
-                } else if (s1.equals("<")) {
-                    scoreboardscore.setScore(Math.min(scoreboardscore.getScore(), scoreboardscore1.getScore()));
-                } else if (s1.equals(">")) {
-                    scoreboardscore.setScore(Math.max(scoreboardscore.getScore(), scoreboardscore1.getScore()));
-                } else {
-                    if (!s1.equals("><")) {
-                        throw new CommandException("commands.scoreboard.players.operation.invalidOperation", new Object[] { s1});
-                    }
+                switch (s1) {
+                    case "+=":
+                        scoreboardscore.setScore(scoreboardscore.getScore() + scoreboardscore1.getScore());
+                        break;
+                    case "-=":
+                        scoreboardscore.setScore(scoreboardscore.getScore() - scoreboardscore1.getScore());
+                        break;
+                    case "*=":
+                        scoreboardscore.setScore(scoreboardscore.getScore() * scoreboardscore1.getScore());
+                        break;
+                    case "/=":
+                        if (scoreboardscore1.getScore() != 0) {
+                            scoreboardscore.setScore(scoreboardscore.getScore() / scoreboardscore1.getScore());
+                        }
+                        break;
+                    case "%=":
+                        if (scoreboardscore1.getScore() != 0) {
+                            scoreboardscore.setScore(scoreboardscore.getScore() % scoreboardscore1.getScore());
+                        }
+                        break;
+                    case "=":
+                        scoreboardscore.setScore(scoreboardscore1.getScore());
+                        break;
+                    case "<":
+                        scoreboardscore.setScore(Math.min(scoreboardscore.getScore(), scoreboardscore1.getScore()));
+                        break;
+                    case ">":
+                        scoreboardscore.setScore(Math.max(scoreboardscore.getScore(), scoreboardscore1.getScore()));
+                        break;
+                    default:
+                        if (!s1.equals("><")) {
+                            throw new CommandException("commands.scoreboard.players.operation.invalidOperation", new Object[]{s1});
+                        }
 
-                    int j = scoreboardscore.getScore();
+                        int j = scoreboardscore.getScore();
 
-                    scoreboardscore.setScore(scoreboardscore1.getScore());
-                    scoreboardscore1.setScore(j);
+                        scoreboardscore.setScore(scoreboardscore1.getScore());
+                        scoreboardscore1.setScore(j);
+                        break;
                 }
 
-                a(icommandlistener, this, "commands.scoreboard.players.operation.success", new Object[0]);
+                a(icommandlistener, this, "commands.scoreboard.players.operation.success");
             }
         }
     }
 
     public List<String> tabComplete(ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
         if (astring.length == 1) {
-            return a(astring, new String[] { "objectives", "players", "teams"});
+            return a(astring, "objectives", "players", "teams");
         } else {
             if (astring[0].equalsIgnoreCase("objectives")) {
                 if (astring.length == 2) {
-                    return a(astring, new String[] { "list", "add", "remove", "setdisplay"});
+                    return a(astring, "list", "add", "remove", "setdisplay");
                 }
 
                 if (astring[1].equalsIgnoreCase("add")) {
                     if (astring.length == 4) {
                         Set set = IScoreboardCriteria.criteria.keySet();
 
-                        return a(astring, (Collection) set);
+                        return a(astring, set);
                     }
                 } else if (astring[1].equalsIgnoreCase("remove")) {
                     if (astring.length == 3) {
-                        return a(astring, (Collection) this.a(false));
+                        return a(astring, this.a(false));
                     }
                 } else if (astring[1].equalsIgnoreCase("setdisplay")) {
                     if (astring.length == 3) {
@@ -864,12 +868,12 @@ public class CommandScoreboard extends CommandAbstract {
                     }
 
                     if (astring.length == 4) {
-                        return a(astring, (Collection) this.a(false));
+                        return a(astring, this.a(false));
                     }
                 }
             } else if (astring[0].equalsIgnoreCase("players")) {
                 if (astring.length == 2) {
-                    return a(astring, new String[] { "set", "add", "remove", "reset", "list", "enable", "test", "operation"});
+                    return a(astring, "set", "add", "remove", "reset", "list", "enable", "test", "operation");
                 }
 
                 if (!astring[1].equalsIgnoreCase("set") && !astring[1].equalsIgnoreCase("add") && !astring[1].equalsIgnoreCase("remove") && !astring[1].equalsIgnoreCase("reset")) {
@@ -879,7 +883,7 @@ public class CommandScoreboard extends CommandAbstract {
                         }
 
                         if (astring.length == 4) {
-                            return a(astring, (Collection) this.e());
+                            return a(astring, this.e());
                         }
                     } else if (!astring[1].equalsIgnoreCase("list") && !astring[1].equalsIgnoreCase("test")) {
                         if (astring[1].equalsIgnoreCase("operation")) {
@@ -888,11 +892,11 @@ public class CommandScoreboard extends CommandAbstract {
                             }
 
                             if (astring.length == 4) {
-                                return a(astring, (Collection) this.a(true));
+                                return a(astring, this.a(true));
                             }
 
                             if (astring.length == 5) {
-                                return a(astring, new String[] { "+=", "-=", "*=", "/=", "%=", "=", "<", ">", "><"});
+                                return a(astring, "+=", "-=", "*=", "/=", "%=", "=", "<", ">", "><");
                             }
 
                             if (astring.length == 6) {
@@ -900,7 +904,7 @@ public class CommandScoreboard extends CommandAbstract {
                             }
 
                             if (astring.length == 7) {
-                                return a(astring, (Collection) this.a(false));
+                                return a(astring, this.a(false));
                             }
                         }
                     } else {
@@ -909,7 +913,7 @@ public class CommandScoreboard extends CommandAbstract {
                         }
 
                         if (astring.length == 4 && astring[1].equalsIgnoreCase("test")) {
-                            return a(astring, (Collection) this.a(false));
+                            return a(astring, this.a(false));
                         }
                     }
                 } else {
@@ -918,12 +922,12 @@ public class CommandScoreboard extends CommandAbstract {
                     }
 
                     if (astring.length == 4) {
-                        return a(astring, (Collection) this.a(true));
+                        return a(astring, this.a(true));
                     }
                 }
             } else if (astring[0].equalsIgnoreCase("teams")) {
                 if (astring.length == 2) {
-                    return a(astring, new String[] { "add", "remove", "join", "leave", "empty", "list", "option"});
+                    return a(astring, "add", "remove", "join", "leave", "empty", "list", "option");
                 }
 
                 if (astring[1].equalsIgnoreCase("join")) {
@@ -946,7 +950,7 @@ public class CommandScoreboard extends CommandAbstract {
                             }
 
                             if (astring.length == 4) {
-                                return a(astring, new String[] { "color", "friendlyfire", "seeFriendlyInvisibles", "nametagVisibility", "deathMessageVisibility"});
+                                return a(astring, "color", "friendlyfire", "seeFriendlyInvisibles", "nametagVisibility", "deathMessageVisibility");
                             }
 
                             if (astring.length == 5) {
@@ -959,7 +963,7 @@ public class CommandScoreboard extends CommandAbstract {
                                 }
 
                                 if (astring[3].equalsIgnoreCase("friendlyfire") || astring[3].equalsIgnoreCase("seeFriendlyInvisibles")) {
-                                    return a(astring, new String[] { "true", "false"});
+                                    return a(astring, "true", "false");
                                 }
                             }
                         }
@@ -976,10 +980,9 @@ public class CommandScoreboard extends CommandAbstract {
     protected List<String> a(boolean flag) {
         Collection collection = this.d().getObjectives();
         ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = collection.iterator();
 
-        while (iterator.hasNext()) {
-            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+        for (Object o : collection) {
+            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) o;
 
             if (!flag || !scoreboardobjective.getCriteria().isReadOnly()) {
                 arraylist.add(scoreboardobjective.getName());
@@ -992,10 +995,9 @@ public class CommandScoreboard extends CommandAbstract {
     protected List<String> e() {
         Collection collection = this.d().getObjectives();
         ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = collection.iterator();
 
-        while (iterator.hasNext()) {
-            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+        for (Object o : collection) {
+            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) o;
 
             if (scoreboardobjective.getCriteria() == IScoreboardCriteria.c) {
                 arraylist.add(scoreboardobjective.getName());
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index 53c5d92ed..1f3c5c192 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -28,7 +28,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
 
     public void execute(ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 6) {
-            throw new ExceptionUsage("commands.spreadplayers.usage", new Object[0]);
+            throw new ExceptionUsage("commands.spreadplayers.usage");
         } else {
             byte b0 = 0;
             BlockPosition blockposition = icommandlistener.getChunkCoordinates();
@@ -67,7 +67,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             if (arraylist.isEmpty()) {
                 throw new ExceptionEntityNotFound();
             } else {
-                icommandlistener.sendMessage(new ChatMessage("commands.spreadplayers.spreading." + (flag ? "teams" : "players"), new Object[] { Integer.valueOf(arraylist.size()), Double.valueOf(d4), Double.valueOf(d1), Double.valueOf(d2), Double.valueOf(d3)}));
+                icommandlistener.sendMessage(new ChatMessage("commands.spreadplayers.spreading." + (flag ? "teams" : "players"), arraylist.size(), d4, d1, d2, d3));
                 this.a(icommandlistener, arraylist, new CommandSpreadPlayers.Location2D(d1, d2), d3, d4, ((Entity) arraylist.get(0)).world, flag);
             }
         }
@@ -83,24 +83,21 @@ public class CommandSpreadPlayers extends CommandAbstract {
         int i = this.a(commandspreadplayers_location2d, d0, world, random, d2, d3, d4, d5, acommandspreadplayers_location2d, flag);
         double d6 = this.a(list, world, acommandspreadplayers_location2d, flag);
 
-        a(icommandlistener, this, "commands.spreadplayers.success." + (flag ? "teams" : "players"), new Object[] { Integer.valueOf(acommandspreadplayers_location2d.length), Double.valueOf(commandspreadplayers_location2d.a), Double.valueOf(commandspreadplayers_location2d.b)});
+        a(icommandlistener, this, "commands.spreadplayers.success." + (flag ? "teams" : "players"), acommandspreadplayers_location2d.length, commandspreadplayers_location2d.a, commandspreadplayers_location2d.b);
         if (acommandspreadplayers_location2d.length > 1) {
-            icommandlistener.sendMessage(new ChatMessage("commands.spreadplayers.info." + (flag ? "teams" : "players"), new Object[] { String.format("%.2f", new Object[] { Double.valueOf(d6)}), Integer.valueOf(i)}));
+            icommandlistener.sendMessage(new ChatMessage("commands.spreadplayers.info." + (flag ? "teams" : "players"), String.format("%.2f", d6), i));
         }
 
     }
 
     private int b(List<Entity> list) {
         HashSet hashset = Sets.newHashSet();
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : list) {
             if (entity instanceof EntityHuman) {
                 hashset.add(((EntityHuman) entity).getScoreboardTeam());
             } else {
-                hashset.add((Object) null);
+                hashset.add(null);
             }
         }
 
@@ -161,11 +158,10 @@ public class CommandSpreadPlayers extends CommandAbstract {
             }
 
             if (!flag1) {
-                CommandSpreadPlayers.Location2D[] acommandspreadplayers_location2d1 = acommandspreadplayers_location2d;
                 int i1 = acommandspreadplayers_location2d.length;
 
                 for (j = 0; j < i1; ++j) {
-                    commandspreadplayers_location2d1 = acommandspreadplayers_location2d1[j];
+                    commandspreadplayers_location2d1 = acommandspreadplayers_location2d[j];
                     if (!commandspreadplayers_location2d1.b(world)) {
                         commandspreadplayers_location2d1.a(random, d1, d2, d3, d4);
                         flag1 = true;
@@ -175,7 +171,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
         }
 
         if (i >= 10000) {
-            throw new CommandException("commands.spreadplayers.failure." + (flag ? "teams" : "players"), new Object[] { Integer.valueOf(acommandspreadplayers_location2d.length), Double.valueOf(commandspreadplayers_location2d.a), Double.valueOf(commandspreadplayers_location2d.b), String.format("%.2f", new Object[] { Double.valueOf(d5)})});
+            throw new CommandException("commands.spreadplayers.failure." + (flag ? "teams" : "players"), acommandspreadplayers_location2d.length, commandspreadplayers_location2d.a, commandspreadplayers_location2d.b, String.format("%.2f", d5));
         } else {
             return i;
         }
@@ -186,9 +182,9 @@ public class CommandSpreadPlayers extends CommandAbstract {
         int i = 0;
         HashMap hashmap = Maps.newHashMap();
 
-        for (int j = 0; j < list.size(); ++j) {
-            Entity entity = (Entity) list.get(j);
-            CommandSpreadPlayers.Location2D commandspreadplayers_location2d;
+        for (Entity value : list) {
+            Entity entity = (Entity) value;
+            Location2D commandspreadplayers_location2d;
 
             if (flag) {
                 ScoreboardTeamBase scoreboardteambase = entity instanceof EntityHuman ? ((EntityHuman) entity).getScoreboardTeam() : null;
@@ -197,7 +193,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
                     hashmap.put(scoreboardteambase, acommandspreadplayers_location2d[i++]);
                 }
 
-                commandspreadplayers_location2d = (CommandSpreadPlayers.Location2D) hashmap.get(scoreboardteambase);
+                commandspreadplayers_location2d = (Location2D) hashmap.get(scoreboardteambase);
             } else {
                 commandspreadplayers_location2d = acommandspreadplayers_location2d[i++];
             }
@@ -205,9 +201,9 @@ public class CommandSpreadPlayers extends CommandAbstract {
             entity.enderTeleportTo((double) ((float) MathHelper.floor(commandspreadplayers_location2d.a) + 0.5F), (double) commandspreadplayers_location2d.a(world), (double) MathHelper.floor(commandspreadplayers_location2d.b) + 0.5D);
             double d1 = Double.MAX_VALUE;
 
-            for (int k = 0; k < acommandspreadplayers_location2d.length; ++k) {
-                if (commandspreadplayers_location2d != acommandspreadplayers_location2d[k]) {
-                    double d2 = commandspreadplayers_location2d.a(acommandspreadplayers_location2d[k]);
+            for (Location2D location2D : acommandspreadplayers_location2d) {
+                if (commandspreadplayers_location2d != location2D) {
+                    double d2 = commandspreadplayers_location2d.a(location2D);
 
                     d1 = Math.min(d2, d1);
                 }
diff --git a/src/main/java/net/minecraft/server/CommandTp.java b/src/main/java/net/minecraft/server/CommandTp.java
index 008b8c844..9dc3f980a 100644
--- a/src/main/java/net/minecraft/server/CommandTp.java
+++ b/src/main/java/net/minecraft/server/CommandTp.java
@@ -21,7 +21,7 @@ public class CommandTp extends CommandAbstract {
 
     public void execute(ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 1) {
-            throw new ExceptionUsage("commands.tp.usage", new Object[0]);
+            throw new ExceptionUsage("commands.tp.usage");
         } else {
             byte b0 = 0;
             Object object;
@@ -35,7 +35,7 @@ public class CommandTp extends CommandAbstract {
 
             if (astring.length != 1 && astring.length != 2) {
                 if (astring.length < b0 + 3) {
-                    throw new ExceptionUsage("commands.tp.usage", new Object[0]);
+                    throw new ExceptionUsage("commands.tp.usage");
                 } else if (((Entity) object).world != null) {
                     int i = b0 + 1;
                     CommandAbstract.CommandNumber commandabstract_commandnumber = a(((Entity) object).locX, astring[b0], true);
@@ -84,7 +84,7 @@ public class CommandTp extends CommandAbstract {
                             f = MathHelper.g(f + 180.0F);
                         }
 
-                        ((Entity) object).mount((Entity) null);
+                        ((Entity) object).mount(null);
                         ((EntityPlayer) object).playerConnection.a(commandabstract_commandnumber.b(), commandabstract_commandnumber1.b(), commandabstract_commandnumber2.b(), f, f1, enumset);
                         ((Entity) object).f(f);
                     } else {
@@ -100,7 +100,7 @@ public class CommandTp extends CommandAbstract {
                         ((Entity) object).f(f2);
                     }
 
-                    a(icommandlistener, this, "commands.tp.success.coordinates", new Object[] { ((Entity) object).getName(), Double.valueOf(commandabstract_commandnumber.a()), Double.valueOf(commandabstract_commandnumber1.a()), Double.valueOf(commandabstract_commandnumber2.a())});
+                    a(icommandlistener, this, "commands.tp.success.coordinates", ((Entity) object).getName(), commandabstract_commandnumber.a(), commandabstract_commandnumber1.a(), commandabstract_commandnumber2.a());
                 }
             } else {
                 Entity entity = b(icommandlistener, astring[astring.length - 1]);
@@ -108,7 +108,7 @@ public class CommandTp extends CommandAbstract {
                 // CraftBukkit Start
                 // Use Bukkit teleport method in all cases. It has cross dimensional handling, events
                 if (((Entity) object).getBukkitEntity().teleport(entity.getBukkitEntity(), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.COMMAND)) {
-                    a(icommandlistener, this, "commands.tp.success", new Object[]{((Entity) object).getName(), entity.getName()});
+                    a(icommandlistener, this, "commands.tp.success", ((Entity) object).getName(), entity.getName());
                     // CraftBukkit End
                 }
             }
@@ -126,7 +126,7 @@ public class CommandTp extends CommandAbstract {
     // CraftBukkit start - fix decompile error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index 7fc495792..e144deca2 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -64,8 +64,8 @@ public abstract class Container {
     public List<ItemStack> a() {
         ArrayList arraylist = Lists.newArrayList();
 
-        for (int i = 0; i < this.c.size(); ++i) {
-            arraylist.add(((Slot) this.c.get(i)).getItem());
+        for (Slot slot : this.c) {
+            arraylist.add(((Slot) slot).getItem());
         }
 
         return arraylist;
@@ -73,15 +73,15 @@ public abstract class Container {
 
     public void b() {
         for (int i = 0; i < this.c.size(); ++i) {
-            ItemStack itemstack = ((Slot) this.c.get(i)).getItem();
-            ItemStack itemstack1 = (ItemStack) this.b.get(i);
+            ItemStack itemstack = this.c.get(i).getItem();
+            ItemStack itemstack1 = this.b.get(i);
 
             if (!ItemStack.fastMatches(itemstack1, itemstack) || (tickCount % 20 == 0 && !ItemStack.matches(itemstack1, itemstack))) { // Spigot
                 itemstack1 = itemstack == null ? null : itemstack.cloneItemStack();
                 this.b.set(i, itemstack1);
 
-                for (int j = 0; j < this.listeners.size(); ++j) {
-                    ((ICrafting) this.listeners.get(j)).a(this, i, itemstack1);
+                for (ICrafting listener : this.listeners) {
+                    ((ICrafting) listener).a(this, i, itemstack1);
                 }
             }
         }
@@ -94,8 +94,8 @@ public abstract class Container {
     }
 
     public Slot getSlot(IInventory iinventory, int i) {
-        for (int j = 0; j < this.c.size(); ++j) {
-            Slot slot = (Slot) this.c.get(j);
+        for (Slot value : this.c) {
+            Slot slot = (Slot) value;
 
             if (slot.a(iinventory, i)) {
                 return slot;
@@ -106,11 +106,11 @@ public abstract class Container {
     }
 
     public Slot getSlot(int i) {
-        return (Slot) this.c.get(i);
+        return this.c.get(i);
     }
 
     public ItemStack b(EntityHuman entityhuman, int i) {
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         return slot != null ? slot.getItem() : null;
     }
@@ -149,7 +149,7 @@ public abstract class Container {
                     l = playerinventory.getCarried().count;
                     Iterator iterator = this.h.iterator();
 
-                    Map<Integer, ItemStack> draggedSlots = new HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
+                    Map<Integer, ItemStack> draggedSlots = new HashMap<>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
                     while (iterator.hasNext()) {
                         Slot slot1 = (Slot) iterator.next();
 
@@ -176,7 +176,7 @@ public abstract class Container {
                     InventoryView view = getBukkitView();
                     org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack1);
                     newcursor.setAmount(l);
-                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<>();
                     for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
                         eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
                     }
@@ -227,7 +227,7 @@ public abstract class Container {
                     if (playerinventory.getCarried() != null) {
                         if (j == 0) {
                             entityhuman.drop(playerinventory.getCarried(), true);
-                            playerinventory.setCarried((ItemStack) null);
+                            playerinventory.setCarried(null);
                         }
 
                         if (j == 1) {
@@ -239,7 +239,7 @@ public abstract class Container {
 
                             if (itemstack4.count == 0) {
                                 // CraftBukkit end
-                                playerinventory.setCarried((ItemStack) null);
+                                playerinventory.setCarried(null);
                             }
                         }
                     }
@@ -248,7 +248,7 @@ public abstract class Container {
                         return null;
                     }
 
-                    slot2 = (Slot) this.c.get(i);
+                    slot2 = this.c.get(i);
                     if (slot2 != null && slot2.isAllowed(entityhuman)) {
                         itemstack1 = this.b(entityhuman, i);
                         if (itemstack1 != null) {
@@ -265,7 +265,7 @@ public abstract class Container {
                         return null;
                     }
 
-                    slot2 = (Slot) this.c.get(i);
+                    slot2 = this.c.get(i);
                     if (slot2 != null) {
                         itemstack1 = slot2.getItem();
                         ItemStack itemstack4 = playerinventory.getCarried();
@@ -286,7 +286,7 @@ public abstract class Container {
                                 }
 
                                 if (itemstack4.count == 0) {
-                                    playerinventory.setCarried((ItemStack) null);
+                                    playerinventory.setCarried(null);
                                 // CraftBukkit start - Update client cursor if we didn't empty it
                                 } else if (entityhuman instanceof EntityPlayer) {
                                     ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, entityhuman.inventory.getCarried()));
@@ -299,7 +299,7 @@ public abstract class Container {
                                 itemstack3 = slot2.a(k1);
                                 playerinventory.setCarried(itemstack3);
                                 if (itemstack1.count == 0) {
-                                    slot2.set((ItemStack) null);
+                                    slot2.set(null);
                                 }
 
                                 slot2.a(entityhuman, playerinventory.getCarried());
@@ -316,7 +316,7 @@ public abstract class Container {
 
                                     itemstack4.cloneAndSubtract(k1);
                                     if (itemstack4.count == 0) {
-                                        playerinventory.setCarried((ItemStack) null);
+                                        playerinventory.setCarried(null);
                                     // CraftBukkit start - Update client cursor if we didn't empty it
                                     } else if (entityhuman instanceof EntityPlayer) {
                                         ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, entityhuman.inventory.getCarried()));
@@ -336,7 +336,7 @@ public abstract class Container {
                                     itemstack4.count += k1;
                                     itemstack1 = slot2.a(k1);
                                     if (itemstack1.count == 0) {
-                                        slot2.set((ItemStack) null);
+                                        slot2.set(null);
                                     }
 
                                     slot2.a(entityhuman, playerinventory.getCarried());
@@ -361,7 +361,7 @@ public abstract class Container {
                     }
                 }
             } else if (k == 2 && j >= 0 && j < 9) {
-                slot2 = (Slot) this.c.get(i);
+                slot2 = this.c.get(i);
                 if (slot2.isAllowed(entityhuman)) {
                     itemstack1 = playerinventory.getItem(j);
                     boolean flag = itemstack1 == null || slot2.inventory == playerinventory && slot2.isAllowed(itemstack1);
@@ -379,7 +379,7 @@ public abstract class Container {
                             if (k1 > -1) {
                                 playerinventory.pickup(itemstack1);
                                 slot2.a(itemstack3.count);
-                                slot2.set((ItemStack) null);
+                                slot2.set(null);
                                 slot2.a(entityhuman, itemstack3);
                             }
                         } else {
@@ -388,26 +388,26 @@ public abstract class Container {
                             slot2.a(entityhuman, itemstack3);
                         }
                     } else if (!slot2.hasItem() && itemstack1 != null && slot2.isAllowed(itemstack1)) {
-                        playerinventory.setItem(j, (ItemStack) null);
+                        playerinventory.setItem(j, null);
                         slot2.set(itemstack1);
                     }
                 }
             } else if (k == 3 && entityhuman.abilities.canInstantlyBuild && playerinventory.getCarried() == null && i >= 0) {
-                slot2 = (Slot) this.c.get(i);
+                slot2 = this.c.get(i);
                 if (slot2 != null && slot2.hasItem()) {
                     itemstack1 = slot2.getItem().cloneItemStack();
                     itemstack1.count = itemstack1.getMaxStackSize();
                     playerinventory.setCarried(itemstack1);
                 }
             } else if (k == 4 && playerinventory.getCarried() == null && i >= 0) {
-                slot2 = (Slot) this.c.get(i);
+                slot2 = this.c.get(i);
                 if (slot2 != null && slot2.hasItem() && slot2.isAllowed(entityhuman)) {
                     itemstack1 = slot2.a(j == 0 ? 1 : slot2.getItem().count);
                     slot2.a(entityhuman, itemstack1);
                     entityhuman.drop(itemstack1, true);
                 }
             } else if (k == 6 && i >= 0) {
-                slot2 = (Slot) this.c.get(i);
+                slot2 = this.c.get(i);
                 itemstack1 = playerinventory.getCarried();
                 if (itemstack1 != null && (slot2 == null || !slot2.hasItem() || !slot2.isAllowed(entityhuman))) {
                     l = j == 0 ? 0 : this.c.size() - 1;
@@ -415,7 +415,7 @@ public abstract class Container {
 
                     for (int l1 = 0; l1 < 2; ++l1) {
                         for (int i2 = l; i2 >= 0 && i2 < this.c.size() && itemstack1.count < itemstack1.getMaxStackSize(); i2 += k1) {
-                            Slot slot3 = (Slot) this.c.get(i2);
+                            Slot slot3 = this.c.get(i2);
 
                             if (slot3.hasItem() && a(slot3, itemstack1, true) && slot3.isAllowed(entityhuman) && this.a(itemstack1, slot3) && (l1 != 0 || slot3.getItem().count != slot3.getItem().getMaxStackSize())) {
                                 int j2 = Math.min(itemstack1.getMaxStackSize() - itemstack1.count, slot3.getItem().count);
@@ -423,7 +423,7 @@ public abstract class Container {
 
                                 itemstack1.count += j2;
                                 if (itemstack5.count <= 0) {
-                                    slot3.set((ItemStack) null);
+                                    slot3.set(null);
                                 }
 
                                 slot3.a(entityhuman, itemstack5);
@@ -452,7 +452,7 @@ public abstract class Container {
 
         if (playerinventory.getCarried() != null) {
             entityhuman.drop(playerinventory.getCarried(), false);
-            playerinventory.setCarried((ItemStack) null);
+            playerinventory.setCarried(null);
         }
 
     }
@@ -493,7 +493,7 @@ public abstract class Container {
 
         if (itemstack.isStackable()) {
             while (itemstack.count > 0 && (!flag && k < j || flag && k >= i)) {
-                slot = (Slot) this.c.get(k);
+                slot = this.c.get(k);
                 itemstack1 = slot.getItem();
                 if (itemstack1 != null && itemstack1.getItem() == itemstack.getItem() && (!itemstack.usesData() || itemstack.getData() == itemstack1.getData()) && ItemStack.equals(itemstack, itemstack1)) {
                     int l = itemstack1.count + itemstack.count;
@@ -530,7 +530,7 @@ public abstract class Container {
             }
 
             while (!flag && k < j || flag && k >= i) {
-                slot = (Slot) this.c.get(k);
+                slot = this.c.get(k);
                 itemstack1 = slot.getItem();
                 if (itemstack1 == null) {
                     slot.set(itemstack.cloneItemStack());
diff --git a/src/main/java/net/minecraft/server/ContainerAnvil.java b/src/main/java/net/minecraft/server/ContainerAnvil.java
index 2816de678..7cbe406ce 100644
--- a/src/main/java/net/minecraft/server/ContainerAnvil.java
+++ b/src/main/java/net/minecraft/server/ContainerAnvil.java
@@ -15,7 +15,7 @@ public class ContainerAnvil extends Container {
     private IInventory h = new InventorySubcontainer("Repair", true, 2) {
         public void update() {
             super.update();
-            ContainerAnvil.this.a((IInventory) this);
+            ContainerAnvil.this.a(this);
         }
     };
     private World i;
@@ -50,7 +50,7 @@ public class ContainerAnvil extends Container {
                     entityhuman.levelDown(-ContainerAnvil.this.a);
                 }
 
-                ContainerAnvil.this.h.setItem(0, (ItemStack) null);
+                ContainerAnvil.this.h.setItem(0, null);
                 if (ContainerAnvil.this.k > 0) {
                     ItemStack itemstack1 = ContainerAnvil.this.h.getItem(1);
 
@@ -58,24 +58,24 @@ public class ContainerAnvil extends Container {
                         itemstack1.count -= ContainerAnvil.this.k;
                         ContainerAnvil.this.h.setItem(1, itemstack1);
                     } else {
-                        ContainerAnvil.this.h.setItem(1, (ItemStack) null);
+                        ContainerAnvil.this.h.setItem(1, null);
                     }
                 } else {
-                    ContainerAnvil.this.h.setItem(1, (ItemStack) null);
+                    ContainerAnvil.this.h.setItem(1, null);
                 }
 
                 ContainerAnvil.this.a = 0;
                 IBlockData iblockdata = world.getType(blockposition);
 
                 if (!entityhuman.abilities.canInstantlyBuild && !world.isClientSide && iblockdata.getBlock() == Blocks.ANVIL && entityhuman.bc().nextFloat() < 0.12F) {
-                    int i = ((Integer) iblockdata.get(BlockAnvil.DAMAGE)).intValue();
+                    int i = (Integer) iblockdata.get(BlockAnvil.DAMAGE);
 
                     ++i;
                     if (i > 2) {
                         world.setAir(blockposition);
                         world.triggerEffect(1020, blockposition, 0);
                     } else {
-                        world.setTypeAndData(blockposition, iblockdata.set(BlockAnvil.DAMAGE, Integer.valueOf(i)), 2);
+                        world.setTypeAndData(blockposition, iblockdata.set(BlockAnvil.DAMAGE, i), 2);
                         world.triggerEffect(1021, blockposition, 0);
                     }
                 } else if (!world.isClientSide) {
@@ -123,7 +123,7 @@ public class ContainerAnvil extends Container {
         byte b1 = 0;
 
         if (itemstack == null) {
-            this.g.setItem(0, (ItemStack) null);
+            this.g.setItem(0, null);
             this.a = 0;
         } else {
             ItemStack itemstack1 = itemstack.cloneItemStack();
@@ -143,7 +143,7 @@ public class ContainerAnvil extends Container {
                 if (itemstack1.e() && itemstack1.getItem().a(itemstack, itemstack2)) {
                     k = Math.min(itemstack1.h(), itemstack1.j() / 4);
                     if (k <= 0) {
-                        this.g.setItem(0, (ItemStack) null);
+                        this.g.setItem(0, null);
                         this.a = 0;
                         return;
                     }
@@ -158,7 +158,7 @@ public class ContainerAnvil extends Container {
                     this.k = l;
                 } else {
                     if (!flag7 && (itemstack1.getItem() != itemstack2.getItem() || !itemstack1.e())) {
-                        this.g.setItem(0, (ItemStack) null);
+                        this.g.setItem(0, null);
                         this.a = 0;
                         return;
                     }
@@ -183,15 +183,14 @@ public class ContainerAnvil extends Container {
                     }
 
                     Map map1 = EnchantmentManager.a(itemstack2);
-                    Iterator iterator = map1.keySet().iterator();
 
-                    while (iterator.hasNext()) {
-                        i1 = ((Integer) iterator.next()).intValue();
+                    for (Object value : map1.keySet()) {
+                        i1 = (Integer) value;
                         Enchantment enchantment = Enchantment.getById(i1);
 
                         if (enchantment != null) {
-                            j1 = map.containsKey(Integer.valueOf(i1)) ? ((Integer) map.get(Integer.valueOf(i1))).intValue() : 0;
-                            int l1 = ((Integer) map1.get(Integer.valueOf(i1))).intValue();
+                            j1 = map.containsKey(i1) ? (Integer) map.get(i1) : 0;
+                            int l1 = (Integer) map1.get(i1);
                             int i2;
 
                             if (j1 == l1) {
@@ -208,10 +207,8 @@ public class ContainerAnvil extends Container {
                                 flag8 = true;
                             }
 
-                            Iterator iterator1 = map.keySet().iterator();
-
-                            while (iterator1.hasNext()) {
-                                int j2 = ((Integer) iterator1.next()).intValue();
+                            for (Object o : map.keySet()) {
+                                int j2 = (Integer) o;
 
                                 if (j2 != i1 && !enchantment.a(Enchantment.getById(j2))) {
                                     flag8 = false;
@@ -224,32 +221,32 @@ public class ContainerAnvil extends Container {
                                     l1 = enchantment.getMaxLevel();
                                 }
 
-                                map.put(Integer.valueOf(i1), Integer.valueOf(l1));
+                                map.put(i1, l1);
                                 int k2 = 0;
 
                                 switch (enchantment.getRandomWeight()) {
-                                case 1:
-                                    k2 = 8;
-                                    break;
-
-                                case 2:
-                                    k2 = 4;
-
-                                case 3:
-                                case 4:
-                                case 6:
-                                case 7:
-                                case 8:
-                                case 9:
-                                default:
-                                    break;
-
-                                case 5:
-                                    k2 = 2;
-                                    break;
-
-                                case 10:
-                                    k2 = 1;
+                                    case 1:
+                                        k2 = 8;
+                                        break;
+
+                                    case 2:
+                                        k2 = 4;
+
+                                    case 3:
+                                    case 4:
+                                    case 6:
+                                    case 7:
+                                    case 8:
+                                    case 9:
+                                    default:
+                                        break;
+
+                                    case 5:
+                                        k2 = 2;
+                                        break;
+
+                                    case 10:
+                                        k2 = 1;
                                 }
 
                                 if (flag7) {
@@ -330,7 +327,7 @@ public class ContainerAnvil extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -351,7 +348,7 @@ public class ContainerAnvil extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerBeacon.java b/src/main/java/net/minecraft/server/ContainerBeacon.java
index 9c755fa72..3c16c5dba 100644
--- a/src/main/java/net/minecraft/server/ContainerBeacon.java
+++ b/src/main/java/net/minecraft/server/ContainerBeacon.java
@@ -14,7 +14,7 @@ public class ContainerBeacon extends Container {
     public ContainerBeacon(IInventory iinventory, IInventory iinventory1) {
         player = (PlayerInventory) iinventory; // CraftBukkit - TODO: check this
         this.beacon = iinventory1;
-        this.a((Slot) (this.f = new ContainerBeacon.SlotBeacon(iinventory1, 0, 136, 110)));
+        this.a(this.f = new SlotBeacon(iinventory1, 0, 136, 110));
         byte b0 = 36;
         short short0 = 137;
 
@@ -60,7 +60,7 @@ public class ContainerBeacon extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -89,7 +89,7 @@ public class ContainerBeacon extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerBrewingStand.java b/src/main/java/net/minecraft/server/ContainerBrewingStand.java
index ba558b84c..2a8daa646 100644
--- a/src/main/java/net/minecraft/server/ContainerBrewingStand.java
+++ b/src/main/java/net/minecraft/server/ContainerBrewingStand.java
@@ -19,10 +19,10 @@ public class ContainerBrewingStand extends Container {
     public ContainerBrewingStand(PlayerInventory playerinventory, IInventory iinventory) {
         player = playerinventory; // CraftBukkit
         this.brewingStand = iinventory;
-        this.a((Slot) (new ContainerBrewingStand.SlotPotionBottle(playerinventory.player, iinventory, 0, 56, 46)));
-        this.a((Slot) (new ContainerBrewingStand.SlotPotionBottle(playerinventory.player, iinventory, 1, 79, 53)));
-        this.a((Slot) (new ContainerBrewingStand.SlotPotionBottle(playerinventory.player, iinventory, 2, 102, 46)));
-        this.f = this.a((Slot) (new ContainerBrewingStand.SlotBrewing(iinventory, 3, 79, 17)));
+        this.a(new SlotPotionBottle(playerinventory.player, iinventory, 0, 56, 46));
+        this.a(new SlotPotionBottle(playerinventory.player, iinventory, 1, 79, 53));
+        this.a(new SlotPotionBottle(playerinventory.player, iinventory, 2, 102, 46));
+        this.f = this.a(new SlotBrewing(iinventory, 3, 79, 17));
 
         int i;
 
@@ -46,8 +46,8 @@ public class ContainerBrewingStand extends Container {
     public void b() {
         super.b();
 
-        for (int i = 0; i < this.listeners.size(); ++i) {
-            ICrafting icrafting = (ICrafting) this.listeners.get(i);
+        for (ICrafting listener : this.listeners) {
+            ICrafting icrafting = (ICrafting) listener;
 
             if (this.g != this.brewingStand.getProperty(0)) {
                 icrafting.setContainerData(this, 0, this.brewingStand.getProperty(0));
@@ -64,7 +64,7 @@ public class ContainerBrewingStand extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -99,7 +99,7 @@ public class ContainerBrewingStand extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
@@ -148,7 +148,7 @@ public class ContainerBrewingStand extends Container {
 
         public void a(EntityHuman entityhuman, ItemStack itemstack) {
             if (itemstack.getItem() == Items.POTION && itemstack.getData() > 0) {
-                this.a.b((Statistic) AchievementList.B);
+                this.a.b(AchievementList.B);
             }
 
             super.a(entityhuman, itemstack);
diff --git a/src/main/java/net/minecraft/server/ContainerChest.java b/src/main/java/net/minecraft/server/ContainerChest.java
index 5a3321737..3b850d455 100644
--- a/src/main/java/net/minecraft/server/ContainerChest.java
+++ b/src/main/java/net/minecraft/server/ContainerChest.java
@@ -72,7 +72,7 @@ public class ContainerChest extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -87,7 +87,7 @@ public class ContainerChest extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerEnchantTable.java b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
index 5c473bef9..92f24a245 100644
--- a/src/main/java/net/minecraft/server/ContainerEnchantTable.java
+++ b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
@@ -24,7 +24,7 @@ public class ContainerEnchantTable extends Container {
 
         public void update() {
             super.update();
-            ContainerEnchantTable.this.a((IInventory) this);
+            ContainerEnchantTable.this.a(this);
         }
     };
     private World world;
@@ -88,8 +88,8 @@ public class ContainerEnchantTable extends Container {
     public void b() {
         super.b();
 
-        for (int i = 0; i < this.listeners.size(); ++i) {
-            ICrafting icrafting = (ICrafting) this.listeners.get(i);
+        for (ICrafting listener : this.listeners) {
+            ICrafting icrafting = (ICrafting) listener;
 
             icrafting.setContainerData(this, 0, this.costs[0]);
             icrafting.setContainerData(this, 1, this.costs[1]);
@@ -212,7 +212,7 @@ public class ContainerEnchantTable extends Container {
 
                 if (list != null) {
                     // CraftBukkit start
-                    Map<org.bukkit.enchantments.Enchantment, Integer> enchants = new java.util.HashMap<org.bukkit.enchantments.Enchantment, Integer>();
+                    Map<org.bukkit.enchantments.Enchantment, Integer> enchants = new java.util.HashMap<>();
                     for (Object obj : list) {
                         WeightedRandomEnchant instance = (WeightedRandomEnchant) obj;
                         enchants.put(org.bukkit.enchantments.Enchantment.getById(instance.enchantment.id), instance.level);
@@ -255,7 +255,7 @@ public class ContainerEnchantTable extends Container {
                     if (!entityhuman.abilities.canInstantlyBuild) {
                         itemstack1.count -= j;
                         if (itemstack1.count <= 0) {
-                            this.enchantSlots.setItem(1, (ItemStack) null);
+                            this.enchantSlots.setItem(1, null);
                         }
                     }
 
@@ -309,7 +309,7 @@ public class ContainerEnchantTable extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -328,25 +328,25 @@ public class ContainerEnchantTable extends Container {
                     return null;
                 }
             } else {
-                if (((Slot) this.c.get(0)).hasItem() || !((Slot) this.c.get(0)).isAllowed(itemstack1)) {
+                if (this.c.get(0).hasItem() || !this.c.get(0).isAllowed(itemstack1)) {
                     return null;
                 }
 
                 if (itemstack1.hasTag() && itemstack1.count == 1) {
-                    ((Slot) this.c.get(0)).set(itemstack1.cloneItemStack());
+                    this.c.get(0).set(itemstack1.cloneItemStack());
                     itemstack1.count = 0;
                 } else if (itemstack1.count >= 1) {
                     // Spigot start
                     ItemStack clone = itemstack1.cloneItemStack();
                     clone.count = 1;
-                    ((Slot) this.c.get(0)).set(clone);
+                    this.c.get(0).set(clone);
                     // Spigot end
                     --itemstack1.count;
                 }
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerFurnace.java b/src/main/java/net/minecraft/server/ContainerFurnace.java
index 04cccbb68..8f94bccf2 100644
--- a/src/main/java/net/minecraft/server/ContainerFurnace.java
+++ b/src/main/java/net/minecraft/server/ContainerFurnace.java
@@ -32,8 +32,8 @@ public class ContainerFurnace extends Container {
     public ContainerFurnace(PlayerInventory playerinventory, IInventory iinventory) {
         this.furnace = iinventory;
         this.a(new Slot(iinventory, 0, 56, 17));
-        this.a((Slot) (new SlotFurnaceFuel(iinventory, 1, 56, 53)));
-        this.a((Slot) (new SlotFurnaceResult(playerinventory.player, iinventory, 2, 116, 35)));
+        this.a(new SlotFurnaceFuel(iinventory, 1, 56, 53));
+        this.a(new SlotFurnaceResult(playerinventory.player, iinventory, 2, 116, 35));
         this.player = playerinventory; // CraftBukkit - save player
 
         int i;
@@ -58,8 +58,8 @@ public class ContainerFurnace extends Container {
     public void b() {
         super.b();
 
-        for (int i = 0; i < this.listeners.size(); ++i) {
-            ICrafting icrafting = (ICrafting) this.listeners.get(i);
+        for (ICrafting listener : this.listeners) {
+            ICrafting icrafting = (ICrafting) listener;
 
             if (this.f != this.furnace.getProperty(2)) {
                 icrafting.setContainerData(this, 2, this.furnace.getProperty(2));
@@ -91,7 +91,7 @@ public class ContainerFurnace extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -124,7 +124,7 @@ public class ContainerFurnace extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerHopper.java b/src/main/java/net/minecraft/server/ContainerHopper.java
index 6fc71879c..6561fa096 100644
--- a/src/main/java/net/minecraft/server/ContainerHopper.java
+++ b/src/main/java/net/minecraft/server/ContainerHopper.java
@@ -56,7 +56,7 @@ public class ContainerHopper extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -71,7 +71,7 @@ public class ContainerHopper extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerHorse.java b/src/main/java/net/minecraft/server/ContainerHorse.java
index 155591a8d..752fb03be 100644
--- a/src/main/java/net/minecraft/server/ContainerHorse.java
+++ b/src/main/java/net/minecraft/server/ContainerHorse.java
@@ -74,7 +74,7 @@ public class ContainerHorse extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -97,7 +97,7 @@ public class ContainerHorse extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerMerchant.java b/src/main/java/net/minecraft/server/ContainerMerchant.java
index f8aa2ae8a..55b970e16 100644
--- a/src/main/java/net/minecraft/server/ContainerMerchant.java
+++ b/src/main/java/net/minecraft/server/ContainerMerchant.java
@@ -15,7 +15,7 @@ public class ContainerMerchant extends Container {
     @Override
     public CraftInventoryView getBukkitView() {
         if (bukkitEntity == null) {
-            bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), new org.bukkit.craftbukkit.inventory.CraftInventoryMerchant((InventoryMerchant) f), this);
+            bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), new org.bukkit.craftbukkit.inventory.CraftInventoryMerchant(f), this);
         }
         return bukkitEntity;
     }
@@ -27,7 +27,7 @@ public class ContainerMerchant extends Container {
         this.f = new InventoryMerchant(playerinventory.player, imerchant);
         this.a(new Slot(this.f, 0, 36, 53));
         this.a(new Slot(this.f, 1, 62, 53));
-        this.a((Slot) (new SlotMerchantResult(playerinventory.player, imerchant, this.f, 2, 120, 53)));
+        this.a(new SlotMerchantResult(playerinventory.player, imerchant, this.f, 2, 120, 53));
         this.player = playerinventory; // CraftBukkit - save player
 
         int i;
@@ -71,7 +71,7 @@ public class ContainerMerchant extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -96,7 +96,7 @@ public class ContainerMerchant extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerPlayer.java b/src/main/java/net/minecraft/server/ContainerPlayer.java
index a86f896b4..bb9f9e4d2 100644
--- a/src/main/java/net/minecraft/server/ContainerPlayer.java
+++ b/src/main/java/net/minecraft/server/ContainerPlayer.java
@@ -23,7 +23,7 @@ public class ContainerPlayer extends Container {
         this.craftInventory = new InventoryCrafting(this, 2, 2, playerinventory.player); // CraftBukkit - pass player
         this.craftInventory.resultInventory = this.resultInventory; // CraftBukkit - let InventoryCrafting know about its result slot
         this.player = playerinventory; // CraftBukkit - save player
-        this.a((Slot) (new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 144, 36)));
+        this.a(new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 144, 36));
 
         // CraftBukkit - fixed multiple decompiler errors below, good luck
         int j;
@@ -86,7 +86,7 @@ public class ContainerPlayer extends Container {
             }
         }
 
-        this.resultInventory.setItem(0, (ItemStack) null);
+        this.resultInventory.setItem(0, null);
     }
 
     public boolean a(EntityHuman entityhuman) {
@@ -95,7 +95,7 @@ public class ContainerPlayer extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -115,7 +115,7 @@ public class ContainerPlayer extends Container {
                 if (!this.a(itemstack1, 9, 45, false)) {
                     return null;
                 }
-            } else if (itemstack.getItem() instanceof ItemArmor && !((Slot) this.c.get(5 + ((ItemArmor) itemstack.getItem()).b)).hasItem()) {
+            } else if (itemstack.getItem() instanceof ItemArmor && !this.c.get(5 + ((ItemArmor) itemstack.getItem()).b).hasItem()) {
                 int j = 5 + ((ItemArmor) itemstack.getItem()).b;
 
                 if (!this.a(itemstack1, j, j + 1, false)) {
@@ -134,7 +134,7 @@ public class ContainerPlayer extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/ContainerWorkbench.java b/src/main/java/net/minecraft/server/ContainerWorkbench.java
index 48d524e54..663aef05c 100644
--- a/src/main/java/net/minecraft/server/ContainerWorkbench.java
+++ b/src/main/java/net/minecraft/server/ContainerWorkbench.java
@@ -25,7 +25,7 @@ public class ContainerWorkbench extends Container {
         // CraftBukkit end
         this.g = world;
         this.h = blockposition;
-        this.a((Slot) (new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 124, 35)));
+        this.a(new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 124, 35));
 
         int i;
         int j;
@@ -46,7 +46,7 @@ public class ContainerWorkbench extends Container {
             this.a(new Slot(playerinventory, i, 8 + i * 18, 142));
         }
 
-        this.a((IInventory) this.craftInventory);
+        this.a(this.craftInventory);
     }
 
     public void a(IInventory iinventory) {
@@ -88,7 +88,7 @@ public class ContainerWorkbench extends Container {
 
     public ItemStack b(EntityHuman entityhuman, int i) {
         ItemStack itemstack = null;
-        Slot slot = (Slot) this.c.get(i);
+        Slot slot = this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -113,7 +113,7 @@ public class ContainerWorkbench extends Container {
             }
 
             if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+                slot.set(null);
             } else {
                 slot.f();
             }
diff --git a/src/main/java/net/minecraft/server/CraftingManager.java b/src/main/java/net/minecraft/server/CraftingManager.java
index 544ff0a6c..fe2aeb09b 100644
--- a/src/main/java/net/minecraft/server/CraftingManager.java
+++ b/src/main/java/net/minecraft/server/CraftingManager.java
@@ -39,171 +39,169 @@ public class CraftingManager {
         this.recipes.add(new RecipeFireworks());
         this.recipes.add(new RecipeRepair());
         (new RecipesBanner()).a(this);
-        this.registerShapedRecipe(new ItemStack(Items.PAPER, 3), new Object[] { "###", Character.valueOf('#'), Items.REEDS});
-        this.registerShapelessRecipe(new ItemStack(Items.BOOK, 1), new Object[] { Items.PAPER, Items.PAPER, Items.PAPER, Items.LEATHER});
-        this.registerShapelessRecipe(new ItemStack(Items.WRITABLE_BOOK, 1), new Object[] { Items.BOOK, new ItemStack(Items.DYE, 1, EnumColor.BLACK.getInvColorIndex()), Items.FEATHER});
-        this.registerShapedRecipe(new ItemStack(Blocks.FENCE, 3), new Object[] { "W#W", "W#W", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.BIRCH_FENCE, 3), new Object[] { "W#W", "W#W", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.SPRUCE_FENCE, 3), new Object[] { "W#W", "W#W", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.JUNGLE_FENCE, 3), new Object[] { "W#W", "W#W", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.ACACIA_FENCE, 3), new Object[] { "W#W", "W#W", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Blocks.DARK_OAK_FENCE, 3), new Object[] { "W#W", "W#W", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Blocks.COBBLESTONE_WALL, 6, BlockCobbleWall.EnumCobbleVariant.NORMAL.a()), new Object[] { "###", "###", Character.valueOf('#'), Blocks.COBBLESTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.COBBLESTONE_WALL, 6, BlockCobbleWall.EnumCobbleVariant.MOSSY.a()), new Object[] { "###", "###", Character.valueOf('#'), Blocks.MOSSY_COBBLESTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.NETHER_BRICK_FENCE, 6), new Object[] { "###", "###", Character.valueOf('#'), Blocks.NETHER_BRICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.FENCE_GATE, 1), new Object[] { "#W#", "#W#", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.BIRCH_FENCE_GATE, 1), new Object[] { "#W#", "#W#", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.SPRUCE_FENCE_GATE, 1), new Object[] { "#W#", "#W#", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.JUNGLE_FENCE_GATE, 1), new Object[] { "#W#", "#W#", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.ACACIA_FENCE_GATE, 1), new Object[] { "#W#", "#W#", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Blocks.DARK_OAK_FENCE_GATE, 1), new Object[] { "#W#", "#W#", Character.valueOf('#'), Items.STICK, Character.valueOf('W'), new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Blocks.JUKEBOX, 1), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Blocks.PLANKS, Character.valueOf('X'), Items.DIAMOND});
-        this.registerShapedRecipe(new ItemStack(Items.LEAD, 2), new Object[] { "~~ ", "~O ", "  ~", Character.valueOf('~'), Items.STRING, Character.valueOf('O'), Items.SLIME});
-        this.registerShapedRecipe(new ItemStack(Blocks.NOTEBLOCK, 1), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Blocks.PLANKS, Character.valueOf('X'), Items.REDSTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.BOOKSHELF, 1), new Object[] { "###", "XXX", "###", Character.valueOf('#'), Blocks.PLANKS, Character.valueOf('X'), Items.BOOK});
-        this.registerShapedRecipe(new ItemStack(Blocks.SNOW, 1), new Object[] { "##", "##", Character.valueOf('#'), Items.SNOWBALL});
-        this.registerShapedRecipe(new ItemStack(Blocks.SNOW_LAYER, 6), new Object[] { "###", Character.valueOf('#'), Blocks.SNOW});
-        this.registerShapedRecipe(new ItemStack(Blocks.CLAY, 1), new Object[] { "##", "##", Character.valueOf('#'), Items.CLAY_BALL});
-        this.registerShapedRecipe(new ItemStack(Blocks.BRICK_BLOCK, 1), new Object[] { "##", "##", Character.valueOf('#'), Items.BRICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.GLOWSTONE, 1), new Object[] { "##", "##", Character.valueOf('#'), Items.GLOWSTONE_DUST});
-        this.registerShapedRecipe(new ItemStack(Blocks.QUARTZ_BLOCK, 1), new Object[] { "##", "##", Character.valueOf('#'), Items.QUARTZ});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOOL, 1), new Object[] { "##", "##", Character.valueOf('#'), Items.STRING});
-        this.registerShapedRecipe(new ItemStack(Blocks.TNT, 1), new Object[] { "X#X", "#X#", "X#X", Character.valueOf('X'), Items.GUNPOWDER, Character.valueOf('#'), Blocks.SAND});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.COBBLESTONE.a()), new Object[] { "###", Character.valueOf('#'), Blocks.COBBLESTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.STONE.a()), new Object[] { "###", Character.valueOf('#'), new ItemStack(Blocks.STONE, BlockStone.EnumStoneVariant.STONE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.SAND.a()), new Object[] { "###", Character.valueOf('#'), Blocks.SANDSTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.BRICK.a()), new Object[] { "###", Character.valueOf('#'), Blocks.BRICK_BLOCK});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.SMOOTHBRICK.a()), new Object[] { "###", Character.valueOf('#'), Blocks.STONEBRICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.NETHERBRICK.a()), new Object[] { "###", Character.valueOf('#'), Blocks.NETHER_BRICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.QUARTZ.a()), new Object[] { "###", Character.valueOf('#'), Blocks.QUARTZ_BLOCK});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB2, 6, BlockDoubleStoneStepAbstract.EnumStoneSlab2Variant.RED_SANDSTONE.a()), new Object[] { "###", Character.valueOf('#'), Blocks.RED_SANDSTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, 0), new Object[] { "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, BlockWood.EnumLogVariant.BIRCH.a()), new Object[] { "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, BlockWood.EnumLogVariant.SPRUCE.a()), new Object[] { "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, BlockWood.EnumLogVariant.JUNGLE.a()), new Object[] { "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4), new Object[] { "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4), new Object[] { "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Blocks.LADDER, 3), new Object[] { "# #", "###", "# #", Character.valueOf('#'), Items.STICK});
-        this.registerShapedRecipe(new ItemStack(Items.WOODEN_DOOR, 3), new Object[] { "##", "##", "##", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a())});
-        this.registerShapedRecipe(new ItemStack(Items.SPRUCE_DOOR, 3), new Object[] { "##", "##", "##", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a())});
-        this.registerShapedRecipe(new ItemStack(Items.BIRCH_DOOR, 3), new Object[] { "##", "##", "##", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a())});
-        this.registerShapedRecipe(new ItemStack(Items.JUNGLE_DOOR, 3), new Object[] { "##", "##", "##", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a())});
-        this.registerShapedRecipe(new ItemStack(Items.ACACIA_DOOR, 3), new Object[] { "##", "##", "##", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.ACACIA.a())});
-        this.registerShapedRecipe(new ItemStack(Items.DARK_OAK_DOOR, 3), new Object[] { "##", "##", "##", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.DARK_OAK.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.TRAPDOOR, 2), new Object[] { "###", "###", Character.valueOf('#'), Blocks.PLANKS});
-        this.registerShapedRecipe(new ItemStack(Items.IRON_DOOR, 3), new Object[] { "##", "##", "##", Character.valueOf('#'), Items.IRON_INGOT});
-        this.registerShapedRecipe(new ItemStack(Blocks.IRON_TRAPDOOR, 1), new Object[] { "##", "##", Character.valueOf('#'), Items.IRON_INGOT});
-        this.registerShapedRecipe(new ItemStack(Items.SIGN, 3), new Object[] { "###", "###", " X ", Character.valueOf('#'), Blocks.PLANKS, Character.valueOf('X'), Items.STICK});
-        this.registerShapedRecipe(new ItemStack(Items.CAKE, 1), new Object[] { "AAA", "BEB", "CCC", Character.valueOf('A'), Items.MILK_BUCKET, Character.valueOf('B'), Items.SUGAR, Character.valueOf('C'), Items.WHEAT, Character.valueOf('E'), Items.EGG});
-        this.registerShapedRecipe(new ItemStack(Items.SUGAR, 1), new Object[] { "#", Character.valueOf('#'), Items.REEDS});
-        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, BlockWood.EnumLogVariant.OAK.a()), new Object[] { "#", Character.valueOf('#'), new ItemStack(Blocks.LOG, 1, BlockWood.EnumLogVariant.OAK.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, BlockWood.EnumLogVariant.SPRUCE.a()), new Object[] { "#", Character.valueOf('#'), new ItemStack(Blocks.LOG, 1, BlockWood.EnumLogVariant.SPRUCE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, BlockWood.EnumLogVariant.BIRCH.a()), new Object[] { "#", Character.valueOf('#'), new ItemStack(Blocks.LOG, 1, BlockWood.EnumLogVariant.BIRCH.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, BlockWood.EnumLogVariant.JUNGLE.a()), new Object[] { "#", Character.valueOf('#'), new ItemStack(Blocks.LOG, 1, BlockWood.EnumLogVariant.JUNGLE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4), new Object[] { "#", Character.valueOf('#'), new ItemStack(Blocks.LOG2, 1, BlockWood.EnumLogVariant.ACACIA.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4), new Object[] { "#", Character.valueOf('#'), new ItemStack(Blocks.LOG2, 1, BlockWood.EnumLogVariant.DARK_OAK.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Items.STICK, 4), new Object[] { "#", "#", Character.valueOf('#'), Blocks.PLANKS});
-        this.registerShapedRecipe(new ItemStack(Blocks.TORCH, 4), new Object[] { "X", "#", Character.valueOf('X'), Items.COAL, Character.valueOf('#'), Items.STICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.TORCH, 4), new Object[] { "X", "#", Character.valueOf('X'), new ItemStack(Items.COAL, 1, 1), Character.valueOf('#'), Items.STICK});
-        this.registerShapedRecipe(new ItemStack(Items.BOWL, 4), new Object[] { "# #", " # ", Character.valueOf('#'), Blocks.PLANKS});
-        this.registerShapedRecipe(new ItemStack(Items.GLASS_BOTTLE, 3), new Object[] { "# #", " # ", Character.valueOf('#'), Blocks.GLASS});
-        this.registerShapedRecipe(new ItemStack(Blocks.RAIL, 16), new Object[] { "X X", "X#X", "X X", Character.valueOf('X'), Items.IRON_INGOT, Character.valueOf('#'), Items.STICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.GOLDEN_RAIL, 6), new Object[] { "X X", "X#X", "XRX", Character.valueOf('X'), Items.GOLD_INGOT, Character.valueOf('R'), Items.REDSTONE, Character.valueOf('#'), Items.STICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.ACTIVATOR_RAIL, 6), new Object[] { "XSX", "X#X", "XSX", Character.valueOf('X'), Items.IRON_INGOT, Character.valueOf('#'), Blocks.REDSTONE_TORCH, Character.valueOf('S'), Items.STICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.DETECTOR_RAIL, 6), new Object[] { "X X", "X#X", "XRX", Character.valueOf('X'), Items.IRON_INGOT, Character.valueOf('R'), Items.REDSTONE, Character.valueOf('#'), Blocks.STONE_PRESSURE_PLATE});
-        this.registerShapedRecipe(new ItemStack(Items.MINECART, 1), new Object[] { "# #", "###", Character.valueOf('#'), Items.IRON_INGOT});
-        this.registerShapedRecipe(new ItemStack(Items.CAULDRON, 1), new Object[] { "# #", "# #", "###", Character.valueOf('#'), Items.IRON_INGOT});
-        this.registerShapedRecipe(new ItemStack(Items.BREWING_STAND, 1), new Object[] { " B ", "###", Character.valueOf('#'), Blocks.COBBLESTONE, Character.valueOf('B'), Items.BLAZE_ROD});
-        this.registerShapedRecipe(new ItemStack(Blocks.LIT_PUMPKIN, 1), new Object[] { "A", "B", Character.valueOf('A'), Blocks.PUMPKIN, Character.valueOf('B'), Blocks.TORCH});
-        this.registerShapedRecipe(new ItemStack(Items.CHEST_MINECART, 1), new Object[] { "A", "B", Character.valueOf('A'), Blocks.CHEST, Character.valueOf('B'), Items.MINECART});
-        this.registerShapedRecipe(new ItemStack(Items.FURNACE_MINECART, 1), new Object[] { "A", "B", Character.valueOf('A'), Blocks.FURNACE, Character.valueOf('B'), Items.MINECART});
-        this.registerShapedRecipe(new ItemStack(Items.TNT_MINECART, 1), new Object[] { "A", "B", Character.valueOf('A'), Blocks.TNT, Character.valueOf('B'), Items.MINECART});
-        this.registerShapedRecipe(new ItemStack(Items.HOPPER_MINECART, 1), new Object[] { "A", "B", Character.valueOf('A'), Blocks.HOPPER, Character.valueOf('B'), Items.MINECART});
-        this.registerShapedRecipe(new ItemStack(Items.BOAT, 1), new Object[] { "# #", "###", Character.valueOf('#'), Blocks.PLANKS});
-        this.registerShapedRecipe(new ItemStack(Items.BUCKET, 1), new Object[] { "# #", " # ", Character.valueOf('#'), Items.IRON_INGOT});
-        this.registerShapedRecipe(new ItemStack(Items.FLOWER_POT, 1), new Object[] { "# #", " # ", Character.valueOf('#'), Items.BRICK});
-        this.registerShapelessRecipe(new ItemStack(Items.FLINT_AND_STEEL, 1), new Object[] { new ItemStack(Items.IRON_INGOT, 1), new ItemStack(Items.FLINT, 1)});
-        this.registerShapedRecipe(new ItemStack(Items.BREAD, 1), new Object[] { "###", Character.valueOf('#'), Items.WHEAT});
-        this.registerShapedRecipe(new ItemStack(Blocks.OAK_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.BIRCH_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.SPRUCE_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.JUNGLE_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.ACACIA_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Blocks.DARK_OAK_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4)});
-        this.registerShapedRecipe(new ItemStack(Items.FISHING_ROD, 1), new Object[] { "  #", " #X", "# X", Character.valueOf('#'), Items.STICK, Character.valueOf('X'), Items.STRING});
-        this.registerShapedRecipe(new ItemStack(Items.CARROT_ON_A_STICK, 1), new Object[] { "# ", " X", Character.valueOf('#'), Items.FISHING_ROD, Character.valueOf('X'), Items.CARROT});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), Blocks.COBBLESTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.BRICK_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), Blocks.BRICK_BLOCK});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_BRICK_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), Blocks.STONEBRICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.NETHER_BRICK_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), Blocks.NETHER_BRICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.SANDSTONE_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), Blocks.SANDSTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.RED_SANDSTONE_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), Blocks.RED_SANDSTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.QUARTZ_STAIRS, 4), new Object[] { "#  ", "## ", "###", Character.valueOf('#'), Blocks.QUARTZ_BLOCK});
-        this.registerShapedRecipe(new ItemStack(Items.PAINTING, 1), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Items.STICK, Character.valueOf('X'), Blocks.WOOL});
-        this.registerShapedRecipe(new ItemStack(Items.ITEM_FRAME, 1), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Items.STICK, Character.valueOf('X'), Items.LEATHER});
-        this.registerShapedRecipe(new ItemStack(Items.GOLDEN_APPLE, 1, 0), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Items.GOLD_INGOT, Character.valueOf('X'), Items.APPLE});
-        this.registerShapedRecipe(new ItemStack(Items.GOLDEN_APPLE, 1, 1), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Blocks.GOLD_BLOCK, Character.valueOf('X'), Items.APPLE});
-        this.registerShapedRecipe(new ItemStack(Items.GOLDEN_CARROT, 1, 0), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Items.GOLD_NUGGET, Character.valueOf('X'), Items.CARROT});
-        this.registerShapedRecipe(new ItemStack(Items.SPECKLED_MELON, 1), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Items.GOLD_NUGGET, Character.valueOf('X'), Items.MELON});
-        this.registerShapedRecipe(new ItemStack(Blocks.LEVER, 1), new Object[] { "X", "#", Character.valueOf('#'), Blocks.COBBLESTONE, Character.valueOf('X'), Items.STICK});
-        this.registerShapedRecipe(new ItemStack(Blocks.TRIPWIRE_HOOK, 2), new Object[] { "I", "S", "#", Character.valueOf('#'), Blocks.PLANKS, Character.valueOf('S'), Items.STICK, Character.valueOf('I'), Items.IRON_INGOT});
-        this.registerShapedRecipe(new ItemStack(Blocks.REDSTONE_TORCH, 1), new Object[] { "X", "#", Character.valueOf('#'), Items.STICK, Character.valueOf('X'), Items.REDSTONE});
-        this.registerShapedRecipe(new ItemStack(Items.REPEATER, 1), new Object[] { "#X#", "III", Character.valueOf('#'), Blocks.REDSTONE_TORCH, Character.valueOf('X'), Items.REDSTONE, Character.valueOf('I'), new ItemStack(Blocks.STONE, 1, BlockStone.EnumStoneVariant.STONE.a())});
-        this.registerShapedRecipe(new ItemStack(Items.COMPARATOR, 1), new Object[] { " # ", "#X#", "III", Character.valueOf('#'), Blocks.REDSTONE_TORCH, Character.valueOf('X'), Items.QUARTZ, Character.valueOf('I'), new ItemStack(Blocks.STONE, 1, BlockStone.EnumStoneVariant.STONE.a())});
-        this.registerShapedRecipe(new ItemStack(Items.CLOCK, 1), new Object[] { " # ", "#X#", " # ", Character.valueOf('#'), Items.GOLD_INGOT, Character.valueOf('X'), Items.REDSTONE});
-        this.registerShapedRecipe(new ItemStack(Items.COMPASS, 1), new Object[] { " # ", "#X#", " # ", Character.valueOf('#'), Items.IRON_INGOT, Character.valueOf('X'), Items.REDSTONE});
-        this.registerShapedRecipe(new ItemStack(Items.MAP, 1), new Object[] { "###", "#X#", "###", Character.valueOf('#'), Items.PAPER, Character.valueOf('X'), Items.COMPASS});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_BUTTON, 1), new Object[] { "#", Character.valueOf('#'), new ItemStack(Blocks.STONE, 1, BlockStone.EnumStoneVariant.STONE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_BUTTON, 1), new Object[] { "#", Character.valueOf('#'), Blocks.PLANKS});
-        this.registerShapedRecipe(new ItemStack(Blocks.STONE_PRESSURE_PLATE, 1), new Object[] { "##", Character.valueOf('#'), new ItemStack(Blocks.STONE, 1, BlockStone.EnumStoneVariant.STONE.a())});
-        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_PRESSURE_PLATE, 1), new Object[] { "##", Character.valueOf('#'), Blocks.PLANKS});
-        this.registerShapedRecipe(new ItemStack(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE, 1), new Object[] { "##", Character.valueOf('#'), Items.IRON_INGOT});
-        this.registerShapedRecipe(new ItemStack(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, 1), new Object[] { "##", Character.valueOf('#'), Items.GOLD_INGOT});
-        this.registerShapedRecipe(new ItemStack(Blocks.DISPENSER, 1), new Object[] { "###", "#X#", "#R#", Character.valueOf('#'), Blocks.COBBLESTONE, Character.valueOf('X'), Items.BOW, Character.valueOf('R'), Items.REDSTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.DROPPER, 1), new Object[] { "###", "# #", "#R#", Character.valueOf('#'), Blocks.COBBLESTONE, Character.valueOf('R'), Items.REDSTONE});
-        this.registerShapedRecipe(new ItemStack(Blocks.PISTON, 1), new Object[] { "TTT", "#X#", "#R#", Character.valueOf('#'), Blocks.COBBLESTONE, Character.valueOf('X'), Items.IRON_INGOT, Character.valueOf('R'), Items.REDSTONE, Character.valueOf('T'), Blocks.PLANKS});
-        this.registerShapedRecipe(new ItemStack(Blocks.STICKY_PISTON, 1), new Object[] { "S", "P", Character.valueOf('S'), Items.SLIME, Character.valueOf('P'), Blocks.PISTON});
-        this.registerShapedRecipe(new ItemStack(Items.BED, 1), new Object[] { "###", "XXX", Character.valueOf('#'), Blocks.WOOL, Character.valueOf('X'), Blocks.PLANKS});
-        this.registerShapedRecipe(new ItemStack(Blocks.ENCHANTING_TABLE, 1), new Object[] { " B ", "D#D", "###", Character.valueOf('#'), Blocks.OBSIDIAN, Character.valueOf('B'), Items.BOOK, Character.valueOf('D'), Items.DIAMOND});
-        this.registerShapedRecipe(new ItemStack(Blocks.ANVIL, 1), new Object[] { "III", " i ", "iii", Character.valueOf('I'), Blocks.IRON_BLOCK, Character.valueOf('i'), Items.IRON_INGOT});
-        this.registerShapedRecipe(new ItemStack(Items.LEATHER), new Object[] { "##", "##", Character.valueOf('#'), Items.RABBIT_HIDE});
-        this.registerShapelessRecipe(new ItemStack(Items.ENDER_EYE, 1), new Object[] { Items.ENDER_PEARL, Items.BLAZE_POWDER});
-        this.registerShapelessRecipe(new ItemStack(Items.FIRE_CHARGE, 3), new Object[] { Items.GUNPOWDER, Items.BLAZE_POWDER, Items.COAL});
-        this.registerShapelessRecipe(new ItemStack(Items.FIRE_CHARGE, 3), new Object[] { Items.GUNPOWDER, Items.BLAZE_POWDER, new ItemStack(Items.COAL, 1, 1)});
-        this.registerShapedRecipe(new ItemStack(Blocks.DAYLIGHT_DETECTOR), new Object[] { "GGG", "QQQ", "WWW", Character.valueOf('G'), Blocks.GLASS, Character.valueOf('Q'), Items.QUARTZ, Character.valueOf('W'), Blocks.WOODEN_SLAB});
-        this.registerShapedRecipe(new ItemStack(Blocks.HOPPER), new Object[] { "I I", "ICI", " I ", Character.valueOf('I'), Items.IRON_INGOT, Character.valueOf('C'), Blocks.CHEST});
-        this.registerShapedRecipe(new ItemStack(Items.ARMOR_STAND, 1), new Object[] { "///", " / ", "/_/", Character.valueOf('/'), Items.STICK, Character.valueOf('_'), new ItemStack(Blocks.STONE_SLAB, 1, BlockDoubleStepAbstract.EnumStoneSlabVariant.STONE.a())});
+        this.registerShapedRecipe(new ItemStack(Items.PAPER, 3), "###", '#', Items.REEDS);
+        this.registerShapelessRecipe(new ItemStack(Items.BOOK, 1), Items.PAPER, Items.PAPER, Items.PAPER, Items.LEATHER);
+        this.registerShapelessRecipe(new ItemStack(Items.WRITABLE_BOOK, 1), Items.BOOK, new ItemStack(Items.DYE, 1, EnumColor.BLACK.getInvColorIndex()), Items.FEATHER);
+        this.registerShapedRecipe(new ItemStack(Blocks.FENCE, 3), "W#W", "W#W", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.BIRCH_FENCE, 3), "W#W", "W#W", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.SPRUCE_FENCE, 3), "W#W", "W#W", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.JUNGLE_FENCE, 3), "W#W", "W#W", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.ACACIA_FENCE, 3), "W#W", "W#W", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Blocks.DARK_OAK_FENCE, 3), "W#W", "W#W", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Blocks.COBBLESTONE_WALL, 6, BlockCobbleWall.EnumCobbleVariant.NORMAL.a()), "###", "###", '#', Blocks.COBBLESTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.COBBLESTONE_WALL, 6, BlockCobbleWall.EnumCobbleVariant.MOSSY.a()), "###", "###", '#', Blocks.MOSSY_COBBLESTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.NETHER_BRICK_FENCE, 6), "###", "###", '#', Blocks.NETHER_BRICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.FENCE_GATE, 1), "#W#", "#W#", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.BIRCH_FENCE_GATE, 1), "#W#", "#W#", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.SPRUCE_FENCE_GATE, 1), "#W#", "#W#", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.JUNGLE_FENCE_GATE, 1), "#W#", "#W#", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.ACACIA_FENCE_GATE, 1), "#W#", "#W#", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Blocks.DARK_OAK_FENCE_GATE, 1), "#W#", "#W#", '#', Items.STICK, 'W', new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Blocks.JUKEBOX, 1), "###", "#X#", "###", '#', Blocks.PLANKS, 'X', Items.DIAMOND);
+        this.registerShapedRecipe(new ItemStack(Items.LEAD, 2), "~~ ", "~O ", "  ~", '~', Items.STRING, 'O', Items.SLIME);
+        this.registerShapedRecipe(new ItemStack(Blocks.NOTEBLOCK, 1), "###", "#X#", "###", '#', Blocks.PLANKS, 'X', Items.REDSTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.BOOKSHELF, 1), "###", "XXX", "###", '#', Blocks.PLANKS, 'X', Items.BOOK);
+        this.registerShapedRecipe(new ItemStack(Blocks.SNOW, 1), "##", "##", '#', Items.SNOWBALL);
+        this.registerShapedRecipe(new ItemStack(Blocks.SNOW_LAYER, 6), "###", '#', Blocks.SNOW);
+        this.registerShapedRecipe(new ItemStack(Blocks.CLAY, 1), "##", "##", '#', Items.CLAY_BALL);
+        this.registerShapedRecipe(new ItemStack(Blocks.BRICK_BLOCK, 1), "##", "##", '#', Items.BRICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.GLOWSTONE, 1), "##", "##", '#', Items.GLOWSTONE_DUST);
+        this.registerShapedRecipe(new ItemStack(Blocks.QUARTZ_BLOCK, 1), "##", "##", '#', Items.QUARTZ);
+        this.registerShapedRecipe(new ItemStack(Blocks.WOOL, 1), "##", "##", '#', Items.STRING);
+        this.registerShapedRecipe(new ItemStack(Blocks.TNT, 1), "X#X", "#X#", "X#X", 'X', Items.GUNPOWDER, '#', Blocks.SAND);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.COBBLESTONE.a()), "###", '#', Blocks.COBBLESTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.STONE.a()), "###", '#', new ItemStack(Blocks.STONE, BlockStone.EnumStoneVariant.STONE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.SAND.a()), "###", '#', Blocks.SANDSTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.BRICK.a()), "###", '#', Blocks.BRICK_BLOCK);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.SMOOTHBRICK.a()), "###", '#', Blocks.STONEBRICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.NETHERBRICK.a()), "###", '#', Blocks.NETHER_BRICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB, 6, BlockDoubleStepAbstract.EnumStoneSlabVariant.QUARTZ.a()), "###", '#', Blocks.QUARTZ_BLOCK);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_SLAB2, 6, BlockDoubleStoneStepAbstract.EnumStoneSlab2Variant.RED_SANDSTONE.a()), "###", '#', Blocks.RED_SANDSTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, 0), "###", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, BlockWood.EnumLogVariant.BIRCH.a()), "###", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, BlockWood.EnumLogVariant.SPRUCE.a()), "###", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, BlockWood.EnumLogVariant.JUNGLE.a()), "###", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4), "###", '#', new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_SLAB, 6, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4), "###", '#', new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Blocks.LADDER, 3), "# #", "###", "# #", '#', Items.STICK);
+        this.registerShapedRecipe(new ItemStack(Items.WOODEN_DOOR, 3), "##", "##", "##", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a()));
+        this.registerShapedRecipe(new ItemStack(Items.SPRUCE_DOOR, 3), "##", "##", "##", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a()));
+        this.registerShapedRecipe(new ItemStack(Items.BIRCH_DOOR, 3), "##", "##", "##", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a()));
+        this.registerShapedRecipe(new ItemStack(Items.JUNGLE_DOOR, 3), "##", "##", "##", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a()));
+        this.registerShapedRecipe(new ItemStack(Items.ACACIA_DOOR, 3), "##", "##", "##", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.ACACIA.a()));
+        this.registerShapedRecipe(new ItemStack(Items.DARK_OAK_DOOR, 3), "##", "##", "##", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.DARK_OAK.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.TRAPDOOR, 2), "###", "###", '#', Blocks.PLANKS);
+        this.registerShapedRecipe(new ItemStack(Items.IRON_DOOR, 3), "##", "##", "##", '#', Items.IRON_INGOT);
+        this.registerShapedRecipe(new ItemStack(Blocks.IRON_TRAPDOOR, 1), "##", "##", '#', Items.IRON_INGOT);
+        this.registerShapedRecipe(new ItemStack(Items.SIGN, 3), "###", "###", " X ", '#', Blocks.PLANKS, 'X', Items.STICK);
+        this.registerShapedRecipe(new ItemStack(Items.CAKE, 1), "AAA", "BEB", "CCC", 'A', Items.MILK_BUCKET, 'B', Items.SUGAR, 'C', Items.WHEAT, 'E', Items.EGG);
+        this.registerShapedRecipe(new ItemStack(Items.SUGAR, 1), "#", '#', Items.REEDS);
+        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, BlockWood.EnumLogVariant.OAK.a()), "#", '#', new ItemStack(Blocks.LOG, 1, BlockWood.EnumLogVariant.OAK.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, BlockWood.EnumLogVariant.SPRUCE.a()), "#", '#', new ItemStack(Blocks.LOG, 1, BlockWood.EnumLogVariant.SPRUCE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, BlockWood.EnumLogVariant.BIRCH.a()), "#", '#', new ItemStack(Blocks.LOG, 1, BlockWood.EnumLogVariant.BIRCH.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, BlockWood.EnumLogVariant.JUNGLE.a()), "#", '#', new ItemStack(Blocks.LOG, 1, BlockWood.EnumLogVariant.JUNGLE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4), "#", '#', new ItemStack(Blocks.LOG2, 1, BlockWood.EnumLogVariant.ACACIA.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Blocks.PLANKS, 4, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4), "#", '#', new ItemStack(Blocks.LOG2, 1, BlockWood.EnumLogVariant.DARK_OAK.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Items.STICK, 4), "#", "#", '#', Blocks.PLANKS);
+        this.registerShapedRecipe(new ItemStack(Blocks.TORCH, 4), "X", "#", 'X', Items.COAL, '#', Items.STICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.TORCH, 4), "X", "#", 'X', new ItemStack(Items.COAL, 1, 1), '#', Items.STICK);
+        this.registerShapedRecipe(new ItemStack(Items.BOWL, 4), "# #", " # ", '#', Blocks.PLANKS);
+        this.registerShapedRecipe(new ItemStack(Items.GLASS_BOTTLE, 3), "# #", " # ", '#', Blocks.GLASS);
+        this.registerShapedRecipe(new ItemStack(Blocks.RAIL, 16), "X X", "X#X", "X X", 'X', Items.IRON_INGOT, '#', Items.STICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.GOLDEN_RAIL, 6), "X X", "X#X", "XRX", 'X', Items.GOLD_INGOT, 'R', Items.REDSTONE, '#', Items.STICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.ACTIVATOR_RAIL, 6), "XSX", "X#X", "XSX", 'X', Items.IRON_INGOT, '#', Blocks.REDSTONE_TORCH, 'S', Items.STICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.DETECTOR_RAIL, 6), "X X", "X#X", "XRX", 'X', Items.IRON_INGOT, 'R', Items.REDSTONE, '#', Blocks.STONE_PRESSURE_PLATE);
+        this.registerShapedRecipe(new ItemStack(Items.MINECART, 1), "# #", "###", '#', Items.IRON_INGOT);
+        this.registerShapedRecipe(new ItemStack(Items.CAULDRON, 1), "# #", "# #", "###", '#', Items.IRON_INGOT);
+        this.registerShapedRecipe(new ItemStack(Items.BREWING_STAND, 1), " B ", "###", '#', Blocks.COBBLESTONE, 'B', Items.BLAZE_ROD);
+        this.registerShapedRecipe(new ItemStack(Blocks.LIT_PUMPKIN, 1), "A", "B", 'A', Blocks.PUMPKIN, 'B', Blocks.TORCH);
+        this.registerShapedRecipe(new ItemStack(Items.CHEST_MINECART, 1), "A", "B", 'A', Blocks.CHEST, 'B', Items.MINECART);
+        this.registerShapedRecipe(new ItemStack(Items.FURNACE_MINECART, 1), "A", "B", 'A', Blocks.FURNACE, 'B', Items.MINECART);
+        this.registerShapedRecipe(new ItemStack(Items.TNT_MINECART, 1), "A", "B", 'A', Blocks.TNT, 'B', Items.MINECART);
+        this.registerShapedRecipe(new ItemStack(Items.HOPPER_MINECART, 1), "A", "B", 'A', Blocks.HOPPER, 'B', Items.MINECART);
+        this.registerShapedRecipe(new ItemStack(Items.BOAT, 1), "# #", "###", '#', Blocks.PLANKS);
+        this.registerShapedRecipe(new ItemStack(Items.BUCKET, 1), "# #", " # ", '#', Items.IRON_INGOT);
+        this.registerShapedRecipe(new ItemStack(Items.FLOWER_POT, 1), "# #", " # ", '#', Items.BRICK);
+        this.registerShapelessRecipe(new ItemStack(Items.FLINT_AND_STEEL, 1), new ItemStack(Items.IRON_INGOT, 1), new ItemStack(Items.FLINT, 1));
+        this.registerShapedRecipe(new ItemStack(Items.BREAD, 1), "###", '#', Items.WHEAT);
+        this.registerShapedRecipe(new ItemStack(Blocks.OAK_STAIRS, 4), "#  ", "## ", "###", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.OAK.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.BIRCH_STAIRS, 4), "#  ", "## ", "###", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.BIRCH.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.SPRUCE_STAIRS, 4), "#  ", "## ", "###", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.SPRUCE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.JUNGLE_STAIRS, 4), "#  ", "## ", "###", '#', new ItemStack(Blocks.PLANKS, 1, BlockWood.EnumLogVariant.JUNGLE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.ACACIA_STAIRS, 4), "#  ", "## ", "###", '#', new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.ACACIA.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Blocks.DARK_OAK_STAIRS, 4), "#  ", "## ", "###", '#', new ItemStack(Blocks.PLANKS, 1, 4 + BlockWood.EnumLogVariant.DARK_OAK.a() - 4));
+        this.registerShapedRecipe(new ItemStack(Items.FISHING_ROD, 1), "  #", " #X", "# X", '#', Items.STICK, 'X', Items.STRING);
+        this.registerShapedRecipe(new ItemStack(Items.CARROT_ON_A_STICK, 1), "# ", " X", '#', Items.FISHING_ROD, 'X', Items.CARROT);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_STAIRS, 4), "#  ", "## ", "###", '#', Blocks.COBBLESTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.BRICK_STAIRS, 4), "#  ", "## ", "###", '#', Blocks.BRICK_BLOCK);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_BRICK_STAIRS, 4), "#  ", "## ", "###", '#', Blocks.STONEBRICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.NETHER_BRICK_STAIRS, 4), "#  ", "## ", "###", '#', Blocks.NETHER_BRICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.SANDSTONE_STAIRS, 4), "#  ", "## ", "###", '#', Blocks.SANDSTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.RED_SANDSTONE_STAIRS, 4), "#  ", "## ", "###", '#', Blocks.RED_SANDSTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.QUARTZ_STAIRS, 4), "#  ", "## ", "###", '#', Blocks.QUARTZ_BLOCK);
+        this.registerShapedRecipe(new ItemStack(Items.PAINTING, 1), "###", "#X#", "###", '#', Items.STICK, 'X', Blocks.WOOL);
+        this.registerShapedRecipe(new ItemStack(Items.ITEM_FRAME, 1), "###", "#X#", "###", '#', Items.STICK, 'X', Items.LEATHER);
+        this.registerShapedRecipe(new ItemStack(Items.GOLDEN_APPLE, 1, 0), "###", "#X#", "###", '#', Items.GOLD_INGOT, 'X', Items.APPLE);
+        this.registerShapedRecipe(new ItemStack(Items.GOLDEN_APPLE, 1, 1), "###", "#X#", "###", '#', Blocks.GOLD_BLOCK, 'X', Items.APPLE);
+        this.registerShapedRecipe(new ItemStack(Items.GOLDEN_CARROT, 1, 0), "###", "#X#", "###", '#', Items.GOLD_NUGGET, 'X', Items.CARROT);
+        this.registerShapedRecipe(new ItemStack(Items.SPECKLED_MELON, 1), "###", "#X#", "###", '#', Items.GOLD_NUGGET, 'X', Items.MELON);
+        this.registerShapedRecipe(new ItemStack(Blocks.LEVER, 1), "X", "#", '#', Blocks.COBBLESTONE, 'X', Items.STICK);
+        this.registerShapedRecipe(new ItemStack(Blocks.TRIPWIRE_HOOK, 2), "I", "S", "#", '#', Blocks.PLANKS, 'S', Items.STICK, 'I', Items.IRON_INGOT);
+        this.registerShapedRecipe(new ItemStack(Blocks.REDSTONE_TORCH, 1), "X", "#", '#', Items.STICK, 'X', Items.REDSTONE);
+        this.registerShapedRecipe(new ItemStack(Items.REPEATER, 1), "#X#", "III", '#', Blocks.REDSTONE_TORCH, 'X', Items.REDSTONE, 'I', new ItemStack(Blocks.STONE, 1, BlockStone.EnumStoneVariant.STONE.a()));
+        this.registerShapedRecipe(new ItemStack(Items.COMPARATOR, 1), " # ", "#X#", "III", '#', Blocks.REDSTONE_TORCH, 'X', Items.QUARTZ, 'I', new ItemStack(Blocks.STONE, 1, BlockStone.EnumStoneVariant.STONE.a()));
+        this.registerShapedRecipe(new ItemStack(Items.CLOCK, 1), " # ", "#X#", " # ", '#', Items.GOLD_INGOT, 'X', Items.REDSTONE);
+        this.registerShapedRecipe(new ItemStack(Items.COMPASS, 1), " # ", "#X#", " # ", '#', Items.IRON_INGOT, 'X', Items.REDSTONE);
+        this.registerShapedRecipe(new ItemStack(Items.MAP, 1), "###", "#X#", "###", '#', Items.PAPER, 'X', Items.COMPASS);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_BUTTON, 1), "#", '#', new ItemStack(Blocks.STONE, 1, BlockStone.EnumStoneVariant.STONE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_BUTTON, 1), "#", '#', Blocks.PLANKS);
+        this.registerShapedRecipe(new ItemStack(Blocks.STONE_PRESSURE_PLATE, 1), "##", '#', new ItemStack(Blocks.STONE, 1, BlockStone.EnumStoneVariant.STONE.a()));
+        this.registerShapedRecipe(new ItemStack(Blocks.WOODEN_PRESSURE_PLATE, 1), "##", '#', Blocks.PLANKS);
+        this.registerShapedRecipe(new ItemStack(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE, 1), "##", '#', Items.IRON_INGOT);
+        this.registerShapedRecipe(new ItemStack(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, 1), "##", '#', Items.GOLD_INGOT);
+        this.registerShapedRecipe(new ItemStack(Blocks.DISPENSER, 1), "###", "#X#", "#R#", '#', Blocks.COBBLESTONE, 'X', Items.BOW, 'R', Items.REDSTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.DROPPER, 1), "###", "# #", "#R#", '#', Blocks.COBBLESTONE, 'R', Items.REDSTONE);
+        this.registerShapedRecipe(new ItemStack(Blocks.PISTON, 1), "TTT", "#X#", "#R#", '#', Blocks.COBBLESTONE, 'X', Items.IRON_INGOT, 'R', Items.REDSTONE, 'T', Blocks.PLANKS);
+        this.registerShapedRecipe(new ItemStack(Blocks.STICKY_PISTON, 1), "S", "P", 'S', Items.SLIME, 'P', Blocks.PISTON);
+        this.registerShapedRecipe(new ItemStack(Items.BED, 1), "###", "XXX", '#', Blocks.WOOL, 'X', Blocks.PLANKS);
+        this.registerShapedRecipe(new ItemStack(Blocks.ENCHANTING_TABLE, 1), " B ", "D#D", "###", '#', Blocks.OBSIDIAN, 'B', Items.BOOK, 'D', Items.DIAMOND);
+        this.registerShapedRecipe(new ItemStack(Blocks.ANVIL, 1), "III", " i ", "iii", 'I', Blocks.IRON_BLOCK, 'i', Items.IRON_INGOT);
+        this.registerShapedRecipe(new ItemStack(Items.LEATHER), "##", "##", '#', Items.RABBIT_HIDE);
+        this.registerShapelessRecipe(new ItemStack(Items.ENDER_EYE, 1), Items.ENDER_PEARL, Items.BLAZE_POWDER);
+        this.registerShapelessRecipe(new ItemStack(Items.FIRE_CHARGE, 3), Items.GUNPOWDER, Items.BLAZE_POWDER, Items.COAL);
+        this.registerShapelessRecipe(new ItemStack(Items.FIRE_CHARGE, 3), Items.GUNPOWDER, Items.BLAZE_POWDER, new ItemStack(Items.COAL, 1, 1));
+        this.registerShapedRecipe(new ItemStack(Blocks.DAYLIGHT_DETECTOR), "GGG", "QQQ", "WWW", 'G', Blocks.GLASS, 'Q', Items.QUARTZ, 'W', Blocks.WOODEN_SLAB);
+        this.registerShapedRecipe(new ItemStack(Blocks.HOPPER), "I I", "ICI", " I ", 'I', Items.IRON_INGOT, 'C', Blocks.CHEST);
+        this.registerShapedRecipe(new ItemStack(Items.ARMOR_STAND, 1), "///", " / ", "/_/", '/', Items.STICK, '_', new ItemStack(Blocks.STONE_SLAB, 1, BlockDoubleStepAbstract.EnumStoneSlabVariant.STONE.a()));
         sort();
     }
 
     // CraftBukkit start
     public void sort() {
-       Collections.sort(this.recipes, new Comparator() {
-            public int a(IRecipe irecipe, IRecipe irecipe1) {
-                return irecipe instanceof ShapelessRecipes && irecipe1 instanceof ShapedRecipes ? 1 : (irecipe1 instanceof ShapelessRecipes && irecipe instanceof ShapedRecipes ? -1 : (irecipe1.a() < irecipe.a() ? -1 : (irecipe1.a() > irecipe.a() ? 1 : 0)));
-            }
-
-            public int compare(Object object, Object object1) {
-                return this.a((IRecipe) object, (IRecipe) object1);
-            }
-        });
+       this.recipes.sort(new Comparator() {
+           public int a(IRecipe irecipe, IRecipe irecipe1) {
+               return irecipe instanceof ShapelessRecipes && irecipe1 instanceof ShapedRecipes ? 1 : (irecipe1 instanceof ShapelessRecipes && irecipe instanceof ShapedRecipes ? -1 : (Integer.compare(irecipe1.a(), irecipe.a())));
+           }
+
+           public int compare(Object object, Object object1) {
+               return this.a((IRecipe) object, (IRecipe) object1);
+           }
+       });
     }
 
     public ShapedRecipes registerShapedRecipe(ItemStack itemstack, Object... aobject) {
-        String s = "";
+        StringBuilder s = new StringBuilder();
         int i = 0;
         int j = 0;
         int k = 0;
 
         if (aobject[i] instanceof String[]) {
-            String[] astring = (String[]) ((String[]) aobject[i++]);
-
-            for (int l = 0; l < astring.length; ++l) {
-                String s1 = astring[l];
+            String[] astring = (String[]) aobject[i++];
 
+            for (String s1 : astring) {
                 ++k;
                 j = s1.length();
-                s = s + s1;
+                s.append(s1);
             }
         } else {
             while (aobject[i] instanceof String) {
@@ -211,7 +209,7 @@ public class CraftingManager {
 
                 ++k;
                 j = s2.length();
-                s = s + s2;
+                s.append(s2);
             }
         }
 
@@ -237,8 +235,8 @@ public class CraftingManager {
         for (int i1 = 0; i1 < j * k; ++i1) {
             char c0 = s.charAt(i1);
 
-            if (hashmap.containsKey(Character.valueOf(c0))) {
-                aitemstack[i1] = ((ItemStack) hashmap.get(Character.valueOf(c0))).cloneItemStack();
+            if (hashmap.containsKey(c0)) {
+                aitemstack[i1] = ((ItemStack) hashmap.get(c0)).cloneItemStack();
             } else {
                 aitemstack[i1] = null;
             }
@@ -252,11 +250,10 @@ public class CraftingManager {
 
     public void registerShapelessRecipe(ItemStack itemstack, Object... aobject) {
         ArrayList arraylist = Lists.newArrayList();
-        Object[] aobject1 = aobject;
         int i = aobject.length;
 
         for (int j = 0; j < i; ++j) {
-            Object object = aobject1[j];
+            Object object = aobject[j];
 
             if (object instanceof ItemStack) {
                 arraylist.add(((ItemStack) object).cloneItemStack());
@@ -300,11 +297,8 @@ public class CraftingManager {
     }
 
     public ItemStack[] b(InventoryCrafting inventorycrafting, World world) {
-        Iterator iterator = this.recipes.iterator();
-
-        while (iterator.hasNext()) {
-            IRecipe irecipe = (IRecipe) iterator.next();
 
+        for (IRecipe irecipe : this.recipes) {
             if (irecipe.a(inventorycrafting, world)) {
                 return irecipe.b(inventorycrafting);
             }
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 741c419fa..00817046d 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -40,7 +40,7 @@ public class CrashReport {
                 return "1.8.8";
             }
 
-            public Object call() throws Exception {
+            public Object call() {
                 return this.a();
             }
         });
@@ -49,7 +49,7 @@ public class CrashReport {
                 return System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version");
             }
 
-            public Object call() throws Exception {
+            public Object call() {
                 return this.a();
             }
         });
@@ -58,7 +58,7 @@ public class CrashReport {
                 return System.getProperty("java.version") + ", " + System.getProperty("java.vendor");
             }
 
-            public Object call() throws Exception {
+            public Object call() {
                 return this.a();
             }
         });
@@ -67,7 +67,7 @@ public class CrashReport {
                 return System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor");
             }
 
-            public Object call() throws Exception {
+            public Object call() {
                 return this.a();
             }
         });
@@ -84,7 +84,7 @@ public class CrashReport {
                 return k + " bytes (" + j1 + " MB) / " + j + " bytes (" + i1 + " MB) up to " + i + " bytes (" + l + " MB)";
             }
 
-            public Object call() throws Exception {
+            public Object call() {
                 return this.a();
             }
         });
@@ -94,10 +94,9 @@ public class CrashReport {
                 List list = runtimemxbean.getInputArguments();
                 int i = 0;
                 StringBuilder stringbuilder = new StringBuilder();
-                Iterator iterator = list.iterator();
 
-                while (iterator.hasNext()) {
-                    String s = (String) iterator.next();
+                for (Object o : list) {
+                    String s = (String) o;
 
                     if (s.startsWith("-X")) {
                         if (i++ > 0) {
@@ -108,15 +107,15 @@ public class CrashReport {
                     }
                 }
 
-                return String.format("%d total; %s", new Object[] { Integer.valueOf(i), stringbuilder.toString()});
+                return String.format("%d total; %s", i, stringbuilder.toString());
             }
 
-            public Object call() throws Exception {
+            public Object call() {
                 return this.a();
             }
         });
         this.d.a("IntCache", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return IntCache.b();
             }
 
@@ -137,7 +136,7 @@ public class CrashReport {
 
     public void a(StringBuilder stringbuilder) {
         if ((this.h == null || this.h.length <= 0) && this.e.size() > 0) {
-            this.h = (StackTraceElement[]) ArrayUtils.subarray(((CrashReportSystemDetails) this.e.get(0)).a(), 0, 1);
+            this.h = ArrayUtils.subarray(this.e.get(0).a(), 0, 1);
         }
 
         if (this.h != null && this.h.length > 0) {
@@ -146,9 +145,7 @@ public class CrashReport {
             StackTraceElement[] astacktraceelement = this.h;
             int i = astacktraceelement.length;
 
-            for (int j = 0; j < i; ++j) {
-                StackTraceElement stacktraceelement = astacktraceelement[j];
-
+            for (StackTraceElement stacktraceelement : astacktraceelement) {
                 stringbuilder.append("\t").append("at ").append(stacktraceelement.toString());
                 stringbuilder.append("\n");
             }
@@ -156,11 +153,7 @@ public class CrashReport {
             stringbuilder.append("\n");
         }
 
-        Iterator iterator = this.e.iterator();
-
-        while (iterator.hasNext()) {
-            CrashReportSystemDetails crashreportsystemdetails = (CrashReportSystemDetails) iterator.next();
-
+        for (CrashReportSystemDetails crashreportsystemdetails : this.e) {
             crashreportsystemdetails.a(stringbuilder);
             stringbuilder.append("\n\n");
         }
@@ -185,7 +178,7 @@ public class CrashReport {
             ((Throwable) object).setStackTrace(this.c.getStackTrace());
         }
 
-        String s = ((Throwable) object).toString();
+        String s = object.toString();
 
         try {
             stringwriter = new StringWriter();
@@ -278,7 +271,7 @@ public class CrashReport {
 
             this.g = crashreportsystemdetails.a(stacktraceelement, stacktraceelement1);
             if (j > 0 && !this.e.isEmpty()) {
-                CrashReportSystemDetails crashreportsystemdetails1 = (CrashReportSystemDetails) this.e.get(this.e.size() - 1);
+                CrashReportSystemDetails crashreportsystemdetails1 = this.e.get(this.e.size() - 1);
 
                 crashreportsystemdetails1.b(j);
             } else if (astacktraceelement != null && astacktraceelement.length >= j && 0 <= k && k < astacktraceelement.length) {
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index 1fbbfaaed..12b5e9066 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -1,7 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -15,7 +15,6 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.ints.IntIterator;
 // TacoSpigot end
 
 public class DataWatcher {
@@ -58,7 +57,7 @@ public class DataWatcher {
     }
 
     public void add(int i, int j) {
-        DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(j, i, (Object) null);
+        DataWatcher.WatchableObject datawatcher_watchableobject = new DataWatcher.WatchableObject(j, i, null);
 
         this.f.writeLock().lock();
         this.dataValues.put(i, datawatcher_watchableobject); // Spigot
@@ -67,19 +66,19 @@ public class DataWatcher {
     }
 
     public byte getByte(int i) {
-        return ((Byte) this.j(i).b()).byteValue();
+        return (Byte) this.j(i).b();
     }
 
     public short getShort(int i) {
-        return ((Short) this.j(i).b()).shortValue();
+        return (Short) this.j(i).b();
     }
 
     public int getInt(int i) {
-        return ((Integer) this.j(i).b()).intValue();
+        return (Integer) this.j(i).b();
     }
 
     public float getFloat(int i) {
-        return ((Float) this.j(i).b()).floatValue();
+        return (Float) this.j(i).b();
     }
 
     public String getString(int i) {
@@ -101,7 +100,7 @@ public class DataWatcher {
             CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
 
-            crashreportsystemdetails.a("Data ID", (Object) Integer.valueOf(i));
+            crashreportsystemdetails.a("Data ID", i);
             throw new ReportedException(crashreport);
         }
 
@@ -136,11 +135,8 @@ public class DataWatcher {
 
     public static void a(List<DataWatcher.WatchableObject> list, PacketDataSerializer packetdataserializer) throws IOException {
         if (list != null) {
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                DataWatcher.WatchableObject datawatcher_watchableobject = (DataWatcher.WatchableObject) iterator.next();
 
+            for (WatchableObject datawatcher_watchableobject : list) {
                 a(packetdataserializer, datawatcher_watchableobject);
             }
         }
@@ -153,10 +149,9 @@ public class DataWatcher {
 
         if (this.e) {
             this.f.readLock().lock();
-            Iterator iterator = this.dataValues.values().iterator(); // Spigot // TacoSpigot
 
-            while (iterator.hasNext()) {
-                DataWatcher.WatchableObject datawatcher_watchableobject = (DataWatcher.WatchableObject) iterator.next();
+            for (Object o : this.dataValues.values()) {
+                WatchableObject datawatcher_watchableobject = (WatchableObject) o;
 
                 if (datawatcher_watchableobject.d()) {
                     datawatcher_watchableobject.a(false);
@@ -164,13 +159,12 @@ public class DataWatcher {
                         arraylist = Lists.newArrayList();
                     }
 
-                   // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
-                    if ( datawatcher_watchableobject.b() instanceof ItemStack )
-                    {
+                    // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
+                    if (datawatcher_watchableobject.b() instanceof ItemStack) {
                         datawatcher_watchableobject = new WatchableObject(
                                 datawatcher_watchableobject.c(),
                                 datawatcher_watchableobject.a(),
-                                ( (ItemStack) datawatcher_watchableobject.b() ).cloneItemStack()
+                                ((ItemStack) datawatcher_watchableobject.b()).cloneItemStack()
                         );
                     }
                     // Spigot end
@@ -188,10 +182,9 @@ public class DataWatcher {
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.f.readLock().lock();
-        Iterator iterator = this.dataValues.values().iterator(); // Spigot // TacoSpigot
 
-        while (iterator.hasNext()) {
-            DataWatcher.WatchableObject datawatcher_watchableobject = (DataWatcher.WatchableObject) iterator.next();
+        for (Object o : this.dataValues.values()) {
+            WatchableObject datawatcher_watchableobject = (WatchableObject) o;
 
             a(packetdataserializer, datawatcher_watchableobject);
         }
@@ -226,25 +219,25 @@ public class DataWatcher {
         return arraylist;
     }
 
-    private static void a(PacketDataSerializer packetdataserializer, DataWatcher.WatchableObject datawatcher_watchableobject) throws IOException {
+    private static void a(PacketDataSerializer packetdataserializer, DataWatcher.WatchableObject datawatcher_watchableobject) {
         int i = (datawatcher_watchableobject.c() << 5 | datawatcher_watchableobject.a() & 31) & 255;
 
         packetdataserializer.writeByte(i);
         switch (datawatcher_watchableobject.c()) {
         case 0:
-            packetdataserializer.writeByte(((Byte) datawatcher_watchableobject.b()).byteValue());
+            packetdataserializer.writeByte((Byte) datawatcher_watchableobject.b());
             break;
 
         case 1:
-            packetdataserializer.writeShort(((Short) datawatcher_watchableobject.b()).shortValue());
+            packetdataserializer.writeShort((Short) datawatcher_watchableobject.b());
             break;
 
         case 2:
-            packetdataserializer.writeInt(((Integer) datawatcher_watchableobject.b()).intValue());
+            packetdataserializer.writeInt((Integer) datawatcher_watchableobject.b());
             break;
 
         case 3:
-            packetdataserializer.writeFloat(((Float) datawatcher_watchableobject.b()).floatValue());
+            packetdataserializer.writeFloat((Float) datawatcher_watchableobject.b());
             break;
 
         case 4:
@@ -289,19 +282,19 @@ public class DataWatcher {
 
             switch (i) {
             case 0:
-                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, Byte.valueOf(packetdataserializer.readByte()));
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.readByte());
                 break;
 
             case 1:
-                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, Short.valueOf(packetdataserializer.readShort()));
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.readShort());
                 break;
 
             case 2:
-                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, Integer.valueOf(packetdataserializer.readInt()));
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.readInt());
                 break;
 
             case 3:
-                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, Float.valueOf(packetdataserializer.readFloat()));
+                datawatcher_watchableobject = new DataWatcher.WatchableObject(i, j, packetdataserializer.readFloat());
                 break;
 
             case 4:
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 1b93a28de..7971a45ab 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -150,9 +150,9 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             this.setForceGamemode(this.propertyManager.getBoolean("force-gamemode", false));
             this.setIdleTimeout(this.propertyManager.getInt("player-idle-timeout", 0));
             if (this.propertyManager.getInt("difficulty", 1) < 0) {
-                this.propertyManager.setProperty("difficulty", Integer.valueOf(0));
+                this.propertyManager.setProperty("difficulty", 0);
             } else if (this.propertyManager.getInt("difficulty", 1) > 3) {
-                this.propertyManager.setProperty("difficulty", Integer.valueOf(3));
+                this.propertyManager.setProperty("difficulty", 3);
             }
 
             this.generateStructures = this.propertyManager.getBoolean("generate-structures", true);
@@ -184,14 +184,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
 
             if (!org.spigotmc.SpigotConfig.lateBind) {
-                try {
-                    this.aq().a(inetaddress, this.R());
-                } catch (IOException ioexception) {
-                    DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                    DedicatedServer.LOGGER.warn("The exception was: {}", ioexception.toString());
-                    DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
-                    return false;
-                }
+                this.aq().a(inetaddress, this.R());
             }
 
             // Spigot Start - Move DedicatedPlayerList up and bring plugin loading from CraftServer to here
@@ -290,14 +283,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 // CraftBukkit end
 
                 if (org.spigotmc.SpigotConfig.lateBind) {
-                    try {
-                        this.aq().a(inetaddress, this.R());
-                    } catch (IOException ioexception) {
-                        DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                        DedicatedServer.LOGGER.warn("The exception was: {}", ioexception.toString());
-                        DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
-                        return false;
-                    }
+                    this.aq().a(inetaddress, this.R());
                 }
 
                 return true;
@@ -566,7 +552,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     private void aU() {
         try {
             Thread.sleep(5000L);
-        } catch (InterruptedException interruptedexception) {
+        } catch (InterruptedException ignored) {
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
index 35a3ff8fb..bd92f44ef 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
@@ -75,7 +75,7 @@ public class DispenseBehaviorItem implements IDispenseBehavior {
         if (!event.getItem().getType().equals(craftItem.getType())) {
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+            IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
             if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior.getClass() != DispenseBehaviorItem.class) {
                 idispensebehavior.a(isourceblock, eventStack);
             } else {
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java b/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
index 5cb03637d..0e6c991eb 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
@@ -35,7 +35,7 @@ public abstract class DispenseBehaviorProjectile extends DispenseBehaviorItem {
             itemstack.count++;
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+            IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
             if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                 idispensebehavior.a(isourceblock, eventStack);
                 return itemstack;
@@ -43,7 +43,7 @@ public abstract class DispenseBehaviorProjectile extends DispenseBehaviorItem {
         }
 
         iprojectile.shoot(event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), this.getPower(), this.a());
-        ((Entity) iprojectile).projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) isourceblock.getTileEntity());
+        ((Entity) iprojectile).projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(isourceblock.getTileEntity());
         // CraftBukkit end
         world.addEntity((Entity) iprojectile);
         // itemstack.a(1); // CraftBukkit - Handled during event processing
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index c617973ad..ba9d0828f 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import com.mojang.authlib.GameProfile;
 import java.io.PrintStream;
 import java.util.Random;
-import java.util.UUID;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -436,7 +436,7 @@ public class DispenserRegistry {
                     }
                     // CraftBukkit end
                 } else if (world.getType(blockposition).getBlock() == Blocks.TNT) {
-                    Blocks.TNT.postBreak(world, blockposition, Blocks.TNT.getBlockData().set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+                    Blocks.TNT.postBreak(world, blockposition, Blocks.TNT.getBlockData().set(BlockTNT.EXPLODE, Boolean.TRUE));
                     world.setAir(blockposition);
                 } else {
                     this.b = false;
diff --git a/src/main/java/net/minecraft/server/Enchantment.java b/src/main/java/net/minecraft/server/Enchantment.java
index 0f61eeccf..17ecff074 100644
--- a/src/main/java/net/minecraft/server/Enchantment.java
+++ b/src/main/java/net/minecraft/server/Enchantment.java
@@ -61,7 +61,7 @@ public abstract class Enchantment {
     }
 
     public static Enchantment getByName(String s) {
-        return (Enchantment) Enchantment.E.get(new MinecraftKey(s));
+        return Enchantment.E.get(new MinecraftKey(s));
     }
 
     public static Set<MinecraftKey> getEffects() {
@@ -128,14 +128,12 @@ public abstract class Enchantment {
         Enchantment[] aenchantment = Enchantment.byId;
         int i = aenchantment.length;
 
-        for (int j = 0; j < i; ++j) {
-            Enchantment enchantment = aenchantment[j];
-
+        for (Enchantment enchantment : aenchantment) {
             if (enchantment != null) {
                 arraylist.add(enchantment);
             }
         }
 
-        b = (Enchantment[]) arraylist.toArray(new Enchantment[arraylist.size()]);
+        b = (Enchantment[]) arraylist.toArray(new Enchantment[0]);
     }
 }
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 98656815f..7f2910b45 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -13,10 +13,10 @@ import java.util.Random;
 public class EnchantmentManager {
 
     private static final Random a = new Random();
-    private static final EnchantmentManager.EnchantmentModifierProtection b = new EnchantmentManager.EnchantmentModifierProtection((EnchantmentManager.SyntheticClass_1) null);
-    private static final EnchantmentManager.EnchantmentModifierDamage c = new EnchantmentManager.EnchantmentModifierDamage((EnchantmentManager.SyntheticClass_1) null);
-    private static final EnchantmentManager.EnchantmentModifierThorns d = new EnchantmentManager.EnchantmentModifierThorns((EnchantmentManager.SyntheticClass_1) null);
-    private static final EnchantmentManager.EnchantmentModifierArthropods e = new EnchantmentManager.EnchantmentModifierArthropods((EnchantmentManager.SyntheticClass_1) null);
+    private static final EnchantmentManager.EnchantmentModifierProtection b = new EnchantmentManager.EnchantmentModifierProtection(null);
+    private static final EnchantmentManager.EnchantmentModifierDamage c = new EnchantmentManager.EnchantmentModifierDamage(null);
+    private static final EnchantmentManager.EnchantmentModifierThorns d = new EnchantmentManager.EnchantmentModifierThorns(null);
+    private static final EnchantmentManager.EnchantmentModifierArthropods e = new EnchantmentManager.EnchantmentModifierArthropods(null);
 
     public static int getEnchantmentLevel(int i, ItemStack itemstack) {
         if (itemstack == null) {
@@ -50,7 +50,7 @@ public class EnchantmentManager {
                 short short0 = nbttaglist.get(i).getShort("id");
                 short short1 = nbttaglist.get(i).getShort("lvl");
 
-                linkedhashmap.put(Integer.valueOf(short0), Integer.valueOf(short1));
+                linkedhashmap.put((int) short0, (int) short1);
             }
         }
 
@@ -59,27 +59,25 @@ public class EnchantmentManager {
 
     public static void a(Map<Integer, Integer> map, ItemStack itemstack) {
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = map.keySet().iterator();
 
-        while (iterator.hasNext()) {
-            int i = ((Integer) iterator.next()).intValue();
+        for (int i : map.keySet()) {
             Enchantment enchantment = Enchantment.getById(i);
 
             if (enchantment != null) {
                 NBTTagCompound nbttagcompound = new NBTTagCompound();
 
                 nbttagcompound.setShort("id", (short) i);
-                nbttagcompound.setShort("lvl", (short) ((Integer) map.get(Integer.valueOf(i))).intValue());
+                nbttagcompound.setShort("lvl", (short) map.get(i).intValue());
                 nbttaglist.add(nbttagcompound);
                 if (itemstack.getItem() == Items.ENCHANTED_BOOK) {
-                    Items.ENCHANTED_BOOK.a(itemstack, new WeightedRandomEnchant(enchantment, ((Integer) map.get(Integer.valueOf(i))).intValue()));
+                    Items.ENCHANTED_BOOK.a(itemstack, new WeightedRandomEnchant(enchantment, (Integer) map.get(i)));
                 }
             }
         }
 
         if (nbttaglist.size() > 0) {
             if (itemstack.getItem() != Items.ENCHANTED_BOOK) {
-                itemstack.a("ench", (NBTBase) nbttaglist);
+                itemstack.a("ench", nbttaglist);
             }
         } else if (itemstack.hasTag()) {
             itemstack.getTag().remove("ench");
@@ -92,11 +90,10 @@ public class EnchantmentManager {
             return 0;
         } else {
             int j = 0;
-            ItemStack[] aitemstack1 = aitemstack;
             int k = aitemstack.length;
 
             for (int l = 0; l < k; ++l) {
-                ItemStack itemstack = aitemstack1[l];
+                ItemStack itemstack = aitemstack[l];
                 int i1 = getEnchantmentLevel(i, itemstack);
 
                 if (i1 > j) {
@@ -127,11 +124,10 @@ public class EnchantmentManager {
     }
 
     private static void a(EnchantmentManager.EnchantmentModifier enchantmentmanager_enchantmentmodifier, ItemStack[] aitemstack) {
-        ItemStack[] aitemstack1 = aitemstack;
         int i = aitemstack.length;
 
         for (int j = 0; j < i; ++j) {
-            ItemStack itemstack = aitemstack1[j];
+            ItemStack itemstack = aitemstack[j];
 
             a(enchantmentmanager_enchantmentmodifier, itemstack);
         }
@@ -141,7 +137,7 @@ public class EnchantmentManager {
     public static int a(ItemStack[] aitemstack, DamageSource damagesource) {
         EnchantmentManager.b.a = 0;
         EnchantmentManager.b.b = damagesource;
-        a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.b, aitemstack);
+        a(EnchantmentManager.b, aitemstack);
         if (EnchantmentManager.b.a > 25) {
             EnchantmentManager.b.a = 25;
         } else if (EnchantmentManager.b.a < 0) {
@@ -154,7 +150,7 @@ public class EnchantmentManager {
     public static float a(ItemStack itemstack, EnumMonsterType enummonstertype) {
         EnchantmentManager.c.a = 0.0F;
         EnchantmentManager.c.b = enummonstertype;
-        a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.c, itemstack);
+        a(EnchantmentManager.c, itemstack);
         return EnchantmentManager.c.a;
     }
 
@@ -162,11 +158,11 @@ public class EnchantmentManager {
         EnchantmentManager.d.b = entity;
         EnchantmentManager.d.a = entityliving;
         if (entityliving != null) {
-            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.getEquipment());
+            a(EnchantmentManager.d, entityliving.getEquipment());
         }
 
         if (entity instanceof EntityHuman) {
-            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.bA());
+            a(EnchantmentManager.d, entityliving.bA());
         }
 
     }
@@ -175,11 +171,11 @@ public class EnchantmentManager {
         EnchantmentManager.e.a = entityliving;
         EnchantmentManager.e.b = entity;
         if (entityliving != null) {
-            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.e, entityliving.getEquipment());
+            a(EnchantmentManager.e, entityliving.getEquipment());
         }
 
         if (entityliving instanceof EntityHuman) {
-            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.e, entityliving.bA());
+            a(EnchantmentManager.e, entityliving.bA());
         }
 
     }
@@ -232,9 +228,7 @@ public class EnchantmentManager {
         ItemStack[] aitemstack = entityliving.getEquipment();
         int i = aitemstack.length;
 
-        for (int j = 0; j < i; ++j) {
-            ItemStack itemstack = aitemstack[j];
-
+        for (ItemStack itemstack : aitemstack) {
             if (itemstack != null && getEnchantmentLevel(enchantment.id, itemstack) > 0) {
                 return itemstack;
             }
@@ -269,10 +263,9 @@ public class EnchantmentManager {
         }
 
         if (list != null) {
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                WeightedRandomEnchant weightedrandomenchant = (WeightedRandomEnchant) iterator.next();
+            for (Object o : list) {
+                WeightedRandomEnchant weightedrandomenchant = (WeightedRandomEnchant) o;
 
                 if (flag) {
                     Items.ENCHANTED_BOOK.a(itemstack, weightedrandomenchant);
@@ -324,7 +317,7 @@ public class EnchantmentManager {
                                 if (iterator1.hasNext()) {
                                     WeightedRandomEnchant weightedrandomenchant1 = (WeightedRandomEnchant) iterator1.next();
 
-                                    if (weightedrandomenchant1.enchantment.a(Enchantment.getById(integer.intValue()))) {
+                                    if (weightedrandomenchant1.enchantment.a(Enchantment.getById(integer))) {
                                         continue;
                                     }
 
@@ -358,9 +351,7 @@ public class EnchantmentManager {
         Enchantment[] aenchantment = Enchantment.b;
         int j = aenchantment.length;
 
-        for (int k = 0; k < j; ++k) {
-            Enchantment enchantment = aenchantment[k];
-
+        for (Enchantment enchantment : aenchantment) {
             if (enchantment != null && (enchantment.slot.canEnchant(item) || flag)) {
                 for (int l = enchantment.getStartLevel(); l <= enchantment.getMaxLevel(); ++l) {
                     if (i >= enchantment.a(l) && i <= enchantment.b(l)) {
@@ -368,7 +359,7 @@ public class EnchantmentManager {
                             hashmap = Maps.newHashMap();
                         }
 
-                        hashmap.put(Integer.valueOf(enchantment.id), new WeightedRandomEnchant(enchantment, l));
+                        hashmap.put(enchantment.id, new WeightedRandomEnchant(enchantment, l));
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index dd110b199..7c22139cb 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -95,7 +95,6 @@ public abstract class Entity implements ICommandListener {
     public float S;
     public boolean noclip;
     public float U;
-    protected Random random;
     public int ticksLived;
     public int maxFireTicks;
     public int fireTicks;
@@ -184,10 +183,9 @@ public abstract class Entity implements ICommandListener {
         this.width = 0.6F;
         this.length = 1.8F;
         this.h = 1;
-        this.random = new Random();
         this.maxFireTicks = 1;
         this.justCreated = true;
-        this.uniqueID = MathHelper.a(this.random);
+        this.uniqueID = MathHelper.a(getRandom());
         this.au = new CommandObjectiveExecutor();
         this.world = world;
         this.setPosition(0.0D, 0.0D, 0.0D);
@@ -201,11 +199,11 @@ public abstract class Entity implements ICommandListener {
         // Spigot end
 
         this.datawatcher = new DataWatcher(this);
-        this.datawatcher.a(0, Byte.valueOf((byte) 0));
-        this.datawatcher.a(1, Short.valueOf((short) 300));
-        this.datawatcher.a(3, Byte.valueOf((byte) 0));
+        this.datawatcher.a(0, (byte) 0);
+        this.datawatcher.a(1, (short) 300);
+        this.datawatcher.a(3, (byte) 0);
         this.datawatcher.a(2, "");
-        this.datawatcher.a(4, Byte.valueOf((byte) 0));
+        this.datawatcher.a(4, (byte) 0);
         this.h();
     }
 
@@ -216,7 +214,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public boolean equals(Object object) {
-        return object instanceof Entity ? ((Entity) object).id == this.id : false;
+        return object instanceof Entity && ((Entity) object).id == this.id;
     }
 
     public int hashCode() {
@@ -308,7 +306,6 @@ public abstract class Entity implements ICommandListener {
         this.lastYaw = this.yaw;
         if (!this.world.isClientSide && this.world instanceof WorldServer) {
             this.world.methodProfiler.a("portal");
-            MinecraftServer minecraftserver = ((WorldServer) this.world).getMinecraftServer();
             int i = this.L();
 
             if (this.ak) {
@@ -792,7 +789,7 @@ public abstract class Entity implements ICommandListener {
                             f = 1.0F;
                         }
 
-                        this.makeSound(this.P(), f, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                        this.makeSound(this.P(), f, 1.0F + (getRandom().nextFloat() - getRandom().nextFloat()) * 0.4F);
                     }
 
                     this.a(blockposition, block);
@@ -838,7 +835,7 @@ public abstract class Entity implements ICommandListener {
             }
 
             if (flag2 && this.fireTicks > 0) {
-                this.makeSound("random.fizz", 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                this.makeSound("getRandom().fizz", 0.7F, 1.6F + (getRandom().nextFloat() - getRandom().nextFloat()) * 0.4F);
                 this.fireTicks = -this.maxFireTicks;
             }
 
@@ -907,7 +904,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void b(boolean flag) {
-        this.datawatcher.watch(4, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.datawatcher.watch(4, (byte) (flag ? 1 : 0));
     }
 
     protected boolean s_() {
@@ -937,7 +934,7 @@ public abstract class Entity implements ICommandListener {
 
     protected void burn(float i) { // CraftBukkit - int -> float
         if (!this.fireProof) {
-            this.damageEntity(DamageSource.FIRE, (float) i);
+            this.damageEntity(DamageSource.FIRE, i);
         }
 
     }
@@ -984,7 +981,7 @@ public abstract class Entity implements ICommandListener {
             f = 1.0F;
         }
 
-        this.makeSound(this.aa(), f, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+        this.makeSound(this.aa(), f, 1.0F + (getRandom().nextFloat() - getRandom().nextFloat()) * 0.4F);
         float f1 = (float) MathHelper.floor(this.getBoundingBox().b);
 
         int i;
@@ -992,15 +989,15 @@ public abstract class Entity implements ICommandListener {
         float f3;
 
         for (i = 0; (float) i < 1.0F + this.width * 20.0F; ++i) {
-            f2 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
-            f3 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
-            this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f2, (double) (f1 + 1.0F), this.locZ + (double) f3, this.motX, this.motY - (double) (this.random.nextFloat() * 0.2F), this.motZ, new int[0]);
+            f2 = (getRandom().nextFloat() * 2.0F - 1.0F) * this.width;
+            f3 = (getRandom().nextFloat() * 2.0F - 1.0F) * this.width;
+            this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f2, (double) (f1 + 1.0F), this.locZ + (double) f3, this.motX, this.motY - (double) (getRandom().nextFloat() * 0.2F), this.motZ);
         }
 
         for (i = 0; (float) i < 1.0F + this.width * 20.0F; ++i) {
-            f2 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
-            f3 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
-            this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f2, (double) (f1 + 1.0F), this.locZ + (double) f3, this.motX, this.motY, this.motZ, new int[0]);
+            f2 = (getRandom().nextFloat() * 2.0F - 1.0F) * this.width;
+            f3 = (getRandom().nextFloat() * 2.0F - 1.0F) * this.width;
+            this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f2, (double) (f1 + 1.0F), this.locZ + (double) f3, this.motX, this.motY, this.motZ);
         }
 
     }
@@ -1021,7 +1018,7 @@ public abstract class Entity implements ICommandListener {
         Block block = iblockdata.getBlock();
 
         if (block.b() != -1) {
-            this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, -this.motX * 4.0D, 1.5D, -this.motZ * 4.0D, new int[]{Block.getCombinedId(iblockdata)});
+            this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) getRandom().nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) getRandom().nextFloat() - 0.5D) * (double) this.width, -this.motX * 4.0D, 1.5D, -this.motZ * 4.0D, Block.getCombinedId(iblockdata));
         }
 
     }
@@ -1041,7 +1038,7 @@ public abstract class Entity implements ICommandListener {
             float f1 = (float) (blockposition.getY() + 1) - f;
             boolean flag = d0 < (double) f1;
 
-            return !flag && this instanceof EntityHuman ? false : flag;
+            return (flag || !(this instanceof EntityHuman)) && flag;
         } else {
             return false;
         }
@@ -1279,8 +1276,8 @@ public abstract class Entity implements ICommandListener {
 
     public void e(NBTTagCompound nbttagcompound) {
         try {
-            nbttagcompound.set("Pos", this.a(new double[]{this.locX, this.locY, this.locZ}));
-            nbttagcompound.set("Motion", this.a(new double[]{this.motX, this.motY, this.motZ}));
+            nbttagcompound.set("Pos", this.a(this.locX, this.locY, this.locZ));
+            nbttagcompound.set("Motion", this.a(this.motX, this.motY, this.motZ));
 
             // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
             // TODO: make sure this is the best way to address this.
@@ -1293,7 +1290,7 @@ public abstract class Entity implements ICommandListener {
             }
             // CraftBukkit end
 
-            nbttagcompound.set("Rotation", this.a(new float[]{this.yaw, this.pitch}));
+            nbttagcompound.set("Rotation", this.a(this.yaw, this.pitch));
             nbttagcompound.setFloat("FallDistance", this.fallDistance);
             nbttagcompound.setShort("Fire", (short) this.fireTicks);
             nbttagcompound.setShort("Air", (short) this.getAirTicks());
@@ -1475,11 +1472,10 @@ public abstract class Entity implements ICommandListener {
 
     protected NBTTagList a(double... adouble) {
         NBTTagList nbttaglist = new NBTTagList();
-        double[] adouble1 = adouble;
         int i = adouble.length;
 
         for (int j = 0; j < i; ++j) {
-            double d0 = adouble1[j];
+            double d0 = adouble[j];
 
             nbttaglist.add(new NBTTagDouble(d0));
         }
@@ -1489,11 +1485,10 @@ public abstract class Entity implements ICommandListener {
 
     protected NBTTagList a(float... afloat) {
         NBTTagList nbttaglist = new NBTTagList();
-        float[] afloat1 = afloat;
         int i = afloat.length;
 
         for (int j = 0; j < i; ++j) {
-            float f = afloat1[j];
+            float f = afloat[j];
 
             nbttaglist.add(new NBTTagFloat(f));
         }
@@ -1538,7 +1533,7 @@ public abstract class Entity implements ICommandListener {
             BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
 
             for (int i = 0; i < 8; ++i) {
-                int j = MathHelper.floor(this.locY + (double) (((float) ((i >> 0) % 2) - 0.5F) * 0.1F) + (double) this.getHeadHeight());
+                int j = MathHelper.floor(this.locY + (double) (((float) ((i) % 2) - 0.5F) * 0.1F) + (double) this.getHeadHeight());
                 int k = MathHelper.floor(this.locX + (double) (((float) ((i >> 1) % 2) - 0.5F) * this.width * 0.8F));
                 int l = MathHelper.floor(this.locZ + (double) (((float) ((i >> 2) % 2) - 0.5F) * this.width * 0.8F));
 
@@ -1575,7 +1570,6 @@ public abstract class Entity implements ICommandListener {
                 this.as += (double) (this.vehicle.yaw - this.vehicle.lastYaw);
 
                 for (this.ar += (double) (this.vehicle.pitch - this.vehicle.lastPitch); this.as >= 180.0D; this.as -= 360.0D) {
-                    ;
                 }
 
                 while (this.as < -180.0D) {
@@ -1812,9 +1806,9 @@ public abstract class Entity implements ICommandListener {
         byte b0 = this.datawatcher.getByte(0);
 
         if (flag) {
-            this.datawatcher.watch(0, Byte.valueOf((byte) (b0 | 1 << i)));
+            this.datawatcher.watch(0, (byte) (b0 | 1 << i));
         } else {
-            this.datawatcher.watch(0, Byte.valueOf((byte) (b0 & ~(1 << i))));
+            this.datawatcher.watch(0, (byte) (b0 & ~(1 << i)));
         }
 
     }
@@ -1824,7 +1818,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setAirTicks(int i) {
-        this.datawatcher.watch(1, Short.valueOf((short) i));
+        this.datawatcher.watch(1, (short) i);
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
@@ -1916,7 +1910,7 @@ public abstract class Entity implements ICommandListener {
                 b0 = 5;
             }
 
-            float f = this.random.nextFloat() * 0.2F + 0.1F;
+            float f = getRandom().nextFloat() * 0.2F + 0.1F;
 
             if (b0 == 0) {
                 this.motX = (double) (-f);
@@ -1988,7 +1982,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public String toString() {
-        return String.format("%s[\'%s\'/%d, l=\'%s\', x=%.2f, y=%.2f, z=%.2f]", new Object[]{this.getClass().getSimpleName(), this.getName(), Integer.valueOf(this.id), this.world == null ? "~NULL~" : this.world.getWorldData().getName(), Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ)});
+        return String.format("%s[\'%s\'/%d, l=\'%s\', x=%.2f, y=%.2f, z=%.2f]", this.getClass().getSimpleName(), this.getName(), this.id, this.world == null ? "~NULL~" : this.world.getWorldData().getName(), this.locX, this.locY, this.locZ);
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
@@ -2048,10 +2042,9 @@ public abstract class Entity implements ICommandListener {
         if (true) {
             WorldServer worldserver = ((CraftWorld) getBukkitEntity().getLocation().getWorld()).getHandle();
             WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
-            int i = worldserver1.dimension;
             // CraftBukkit end
 
-            this.dimension = i;
+            this.dimension = worldserver1.dimension;
             /* CraftBukkit start - TODO: Check if we need this
             if (j == 1 && i == 1) {
                 worldserver1 = minecraftserver.getWorldServer(0);
@@ -2127,7 +2120,7 @@ public abstract class Entity implements ICommandListener {
 
     public void appendEntityCrashDetails(CrashReportSystemDetails crashreportsystemdetails) {
         crashreportsystemdetails.a("Entity Type", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return EntityTypes.b(Entity.this) + " (" + Entity.this.getClass().getCanonicalName() + ")";
             }
 
@@ -2135,9 +2128,9 @@ public abstract class Entity implements ICommandListener {
                 return this.a();
             }
         });
-        crashreportsystemdetails.a("Entity ID", (Object) Integer.valueOf(this.id));
+        crashreportsystemdetails.a("Entity ID", this.id);
         crashreportsystemdetails.a("Entity Name", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return Entity.this.getName();
             }
 
@@ -2145,11 +2138,11 @@ public abstract class Entity implements ICommandListener {
                 return this.a();
             }
         });
-        crashreportsystemdetails.a("Entity\'s Exact location", (Object) String.format("%.2f, %.2f, %.2f", new Object[]{Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ)}));
-        crashreportsystemdetails.a("Entity\'s Block location", (Object) CrashReportSystemDetails.a((double) MathHelper.floor(this.locX), (double) MathHelper.floor(this.locY), (double) MathHelper.floor(this.locZ)));
-        crashreportsystemdetails.a("Entity\'s Momentum", (Object) String.format("%.2f, %.2f, %.2f", new Object[]{Double.valueOf(this.motX), Double.valueOf(this.motY), Double.valueOf(this.motZ)}));
+        crashreportsystemdetails.a("Entity\'s Exact location", String.format("%.2f, %.2f, %.2f", this.locX, this.locY, this.locZ));
+        crashreportsystemdetails.a("Entity\'s Block location", CrashReportSystemDetails.a((double) MathHelper.floor(this.locX), (double) MathHelper.floor(this.locY), (double) MathHelper.floor(this.locZ)));
+        crashreportsystemdetails.a("Entity\'s Momentum", String.format("%.2f, %.2f, %.2f", this.motX, this.motY, this.motZ));
         crashreportsystemdetails.a("Entity\'s Rider", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return Entity.this.passenger.toString();
             }
 
@@ -2158,7 +2151,7 @@ public abstract class Entity implements ICommandListener {
             }
         });
         crashreportsystemdetails.a("Entity\'s Vehicle", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return Entity.this.vehicle.toString();
             }
 
@@ -2202,7 +2195,7 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void setCustomNameVisible(boolean flag) {
-        this.datawatcher.watch(3, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.datawatcher.watch(3, (byte) (flag ? 1 : 0));
     }
 
     public boolean getCustomNameVisible() {
@@ -2333,9 +2326,13 @@ public abstract class Entity implements ICommandListener {
 
     protected void a(EntityLiving entityliving, Entity entity) {
         if (entity instanceof EntityLiving) {
-            EnchantmentManager.a((EntityLiving) entity, (Entity) entityliving);
+            EnchantmentManager.a((EntityLiving) entity, entityliving);
         }
 
         EnchantmentManager.b(entityliving, entity);
     }
+
+    public Random getRandom() {
+        return world.random;
+    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityAgeable.java b/src/main/java/net/minecraft/server/EntityAgeable.java
index 09d433585..87b3e190e 100644
--- a/src/main/java/net/minecraft/server/EntityAgeable.java
+++ b/src/main/java/net/minecraft/server/EntityAgeable.java
@@ -61,7 +61,7 @@ public abstract class EntityAgeable extends EntityCreature {
                         if (!entityhuman.abilities.canInstantlyBuild) {
                             --itemstack.count;
                             if (itemstack.count == 0) { // CraftBukkit - allow less than 0 stacks as "infinite"
-                                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                             }
                         }
                     }
@@ -76,7 +76,7 @@ public abstract class EntityAgeable extends EntityCreature {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(12, Byte.valueOf((byte) 0));
+        this.datawatcher.a(12, (byte) 0);
     }
 
     public int getAge() {
@@ -116,7 +116,7 @@ public abstract class EntityAgeable extends EntityCreature {
     }
 
     public void setAgeRaw(int i) {
-        this.datawatcher.watch(12, Byte.valueOf((byte) MathHelper.clamp(i, -1, 1)));
+        this.datawatcher.watch(12, (byte) MathHelper.clamp(i, -1, 1));
         this.a = i;
         this.a(this.isBaby());
     }
@@ -140,7 +140,7 @@ public abstract class EntityAgeable extends EntityCreature {
         if (this.world.isClientSide || ageLocked) { // CraftBukkit
             if (this.c > 0) {
                 if (this.c % 4 == 0) {
-                    this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
+                    this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.getRandom().nextFloat() * this.length), this.locZ + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D);
                 }
 
                 --this.c;
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index a8315297b..cb79959f9 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -28,11 +28,11 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
         if (this.bm > 0) {
             --this.bm;
             if (this.bm % 10 == 0) {
-                double d0 = this.random.nextGaussian() * 0.02D;
-                double d1 = this.random.nextGaussian() * 0.02D;
-                double d2 = this.random.nextGaussian() * 0.02D;
+                double d0 = this.getRandom().nextGaussian() * 0.02D;
+                double d1 = this.getRandom().nextGaussian() * 0.02D;
+                double d2 = this.getRandom().nextGaussian() * 0.02D;
 
-                this.world.addParticle(EnumParticle.HEART, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2, new int[0]);
+                this.world.addParticle(EnumParticle.HEART, this.locX + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.getRandom().nextFloat() * this.length), this.locZ + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2);
             }
         }
 
@@ -114,7 +114,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
         if (!entityhuman.abilities.canInstantlyBuild) {
             --itemstack.count;
             if (itemstack.count <= 0) {
-                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 7be0351a8..bdb9a2ad9 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -56,7 +56,7 @@ public class EntityArmorStand extends EntityLiving {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(10, Byte.valueOf((byte) 0));
+        this.datawatcher.a(10, (byte) 0);
         this.datawatcher.a(11, EntityArmorStand.a);
         this.datawatcher.a(12, EntityArmorStand.b);
         this.datawatcher.a(13, EntityArmorStand.c);
@@ -105,11 +105,11 @@ public class EntityArmorStand extends EntityLiving {
         super.b(nbttagcompound);
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.items.length; ++i) {
+        for (ItemStack item : this.items) {
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
-            if (this.items[i] != null) {
-                this.items[i].save(nbttagcompound1);
+            if (item != null) {
+                item.save(nbttagcompound1);
             }
 
             nbttaglist.add(nbttagcompound1);
@@ -248,8 +248,8 @@ public class EntityArmorStand extends EntityLiving {
         List list = this.world.getEntities(this, this.getBoundingBox());
 
         if (list != null && !list.isEmpty()) {
-            for (int i = 0; i < list.size(); ++i) {
-                Entity entity = (Entity) list.get(i);
+            for (Object o : list) {
+                Entity entity = (Entity) o;
 
                 if (entity instanceof EntityMinecartAbstract && ((EntityMinecartAbstract) entity).s() == EntityMinecartAbstract.EnumMinecartType.RIDEABLE && this.h(entity) <= 0.2D) {
                     entity.collide(this);
@@ -442,7 +442,7 @@ public class EntityArmorStand extends EntityLiving {
 
     private void A() {
         if (this.world instanceof WorldServer) {
-            ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY + (double) this.length / 1.5D, this.locZ, 10, (double) (this.width / 4.0F), (double) (this.length / 4.0F), (double) (this.width / 4.0F), 0.05D, new int[] { Block.getCombinedId(Blocks.PLANKS.getBlockData())});
+            ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY + (double) this.length / 1.5D, this.locZ, 10, (double) (this.width / 4.0F), (double) (this.length / 4.0F), (double) (this.width / 4.0F), 0.05D, Block.getCombinedId(Blocks.PLANKS.getBlockData()));
         }
 
     }
@@ -591,7 +591,7 @@ public class EntityArmorStand extends EntityLiving {
             b0 &= -2;
         }
 
-        this.datawatcher.watch(10, Byte.valueOf(b0));
+        this.datawatcher.watch(10, b0);
     }
 
     public boolean isSmall() {
@@ -607,7 +607,7 @@ public class EntityArmorStand extends EntityLiving {
             b0 &= -3;
         }
 
-        this.datawatcher.watch(10, Byte.valueOf(b0));
+        this.datawatcher.watch(10, b0);
     }
 
     public boolean hasGravity() {
@@ -623,7 +623,7 @@ public class EntityArmorStand extends EntityLiving {
             b0 &= -5;
         }
 
-        this.datawatcher.watch(10, Byte.valueOf(b0));
+        this.datawatcher.watch(10, b0);
     }
 
     public boolean hasArms() {
@@ -639,7 +639,7 @@ public class EntityArmorStand extends EntityLiving {
             b0 &= -9;
         }
 
-        this.datawatcher.watch(10, Byte.valueOf(b0));
+        this.datawatcher.watch(10, b0);
     }
 
     public boolean hasBasePlate() {
@@ -656,7 +656,7 @@ public class EntityArmorStand extends EntityLiving {
             b0 &= -17;
         }
 
-        this.datawatcher.watch(10, Byte.valueOf(b0));
+        this.datawatcher.watch(10, b0);
     }
 
     // PAIL
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index ff70a3591..bfd0111b6 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -1,16 +1,17 @@
 package net.minecraft.server;
 
-import java.util.List;
-
-// CraftBukkit start
+import net.techcable.tacospigot.event.entity.ArrowCollideEvent;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Arrow;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerPickupItemEvent;
+
+import java.util.List;
+
+// CraftBukkit start
 // CraftBukkit end
 // TacoSpigot start
-import net.techcable.tacospigot.event.entity.ArrowCollideEvent;
-import org.bukkit.Bukkit;
-import org.bukkit.entity.Arrow;
 // TacoSpigot end
 
 public class EntityArrow extends Entity implements IProjectile {
@@ -31,10 +32,8 @@ public class EntityArrow extends Entity implements IProjectile {
 
     // Spigot Start
     @Override
-    public void inactiveTick()
-    {
-        if ( this.inGround )
-        {
+    public void inactiveTick() {
+        if (this.inGround) {
             this.ar += 1; // Despawn counter. First int after shooter
         }
         super.inactiveTick();
@@ -104,7 +103,7 @@ public class EntityArrow extends Entity implements IProjectile {
     }
 
     protected void h() {
-        this.datawatcher.a(16, Byte.valueOf((byte) 0));
+        this.datawatcher.a(16, (byte) 0);
     }
 
     public void shoot(double d0, double d1, double d2, float f, float f1) {
@@ -113,9 +112,9 @@ public class EntityArrow extends Entity implements IProjectile {
         d0 /= (double) f2;
         d1 /= (double) f2;
         d2 /= (double) f2;
-        d0 += this.random.nextGaussian() * (double) (this.random.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
-        d1 += this.random.nextGaussian() * (double) (this.random.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
-        d2 += this.random.nextGaussian() * (double) (this.random.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
+        d0 += this.getRandom().nextGaussian() * (double) (this.getRandom().nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
+        d1 += this.getRandom().nextGaussian() * (double) (this.getRandom().nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
+        d2 += this.getRandom().nextGaussian() * (double) (this.getRandom().nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
         d0 *= (double) f;
         d1 *= (double) f;
         d2 *= (double) f;
@@ -165,9 +164,9 @@ public class EntityArrow extends Entity implements IProjectile {
                 }
             } else {
                 this.inGround = false;
-                this.motX *= (double) (this.random.nextFloat() * 0.2F);
-                this.motY *= (double) (this.random.nextFloat() * 0.2F);
-                this.motZ *= (double) (this.random.nextFloat() * 0.2F);
+                this.motX *= (double) (this.getRandom().nextFloat() * 0.2F);
+                this.motY *= (double) (this.getRandom().nextFloat() * 0.2F);
+                this.motZ *= (double) (this.getRandom().nextFloat() * 0.2F);
                 this.ar = 0;
                 this.as = 0;
             }
@@ -246,7 +245,7 @@ public class EntityArrow extends Entity implements IProjectile {
                     int k = MathHelper.f((double) f2 * this.damage);
 
                     if (this.isCritical()) {
-                        k += this.random.nextInt(k / 2 + 2);
+                        k += this.getRandom().nextInt(k / 2 + 2);
                     }
 
                     DamageSource damagesource;
@@ -259,16 +258,16 @@ public class EntityArrow extends Entity implements IProjectile {
 
                     // CraftBukkit start - Moved damage call
                     if (movingobjectposition.entity.damageEntity(damagesource, (float) k)) {
-                    if (this.isBurning() && !(movingobjectposition.entity instanceof EntityEnderman) && (!(movingobjectposition.entity instanceof EntityPlayer) || !(this.shooter instanceof EntityPlayer) || this.world.pvpMode)) { // CraftBukkit - abide by pvp setting if destination is a player
-                        EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
-                        org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
-                        if (!combustEvent.isCancelled()) {
-                            movingobjectposition.entity.setOnFire(combustEvent.getDuration());
+                        if (this.isBurning() && !(movingobjectposition.entity instanceof EntityEnderman) && (!(movingobjectposition.entity instanceof EntityPlayer) || !(this.shooter instanceof EntityPlayer) || this.world.pvpMode)) { // CraftBukkit - abide by pvp setting if destination is a player
+                            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+                            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+                            if (!combustEvent.isCancelled()) {
+                                movingobjectposition.entity.setOnFire(combustEvent.getDuration());
+                            }
+                            // CraftBukkit end
                         }
-                        // CraftBukkit end
-                    }
 
-                    // if (movingobjectposition.entity.damageEntity(damagesource, (float) k)) { // CraftBukkit - moved up
+                        // if (movingobjectposition.entity.damageEntity(damagesource, (float) k)) { // CraftBukkit - moved up
                         if (movingobjectposition.entity instanceof EntityLiving) {
                             EntityLiving entityliving = (EntityLiving) movingobjectposition.entity;
 
@@ -293,7 +292,7 @@ public class EntityArrow extends Entity implements IProjectile {
                             }
                         }
 
-                        this.makeSound("random.bowhit", 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
+                        this.makeSound("getRandom().bowhit", 1.0F, 1.2F / (this.getRandom().nextFloat() * 0.2F + 0.9F));
                         if (!(movingobjectposition.entity instanceof EntityEnderman)) {
                             this.die();
                         }
@@ -322,19 +321,19 @@ public class EntityArrow extends Entity implements IProjectile {
                     this.locX -= this.motX / (double) f1 * 0.05000000074505806D;
                     this.locY -= this.motY / (double) f1 * 0.05000000074505806D;
                     this.locZ -= this.motZ / (double) f1 * 0.05000000074505806D;
-                    this.makeSound("random.bowhit", 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
+                    this.makeSound("getRandom().bowhit", 1.0F, 1.2F / (this.getRandom().nextFloat() * 0.2F + 0.9F));
                     this.inGround = true;
                     this.shake = 7;
                     this.setCritical(false);
                     if (this.g.getMaterial() != Material.AIR) {
-                        this.g.a(this.world, blockposition1, iblockdata1, (Entity) this);
+                        this.g.a(this.world, blockposition1, iblockdata1, this);
                     }
                 }
             }
 
             if (this.isCritical()) {
                 for (j = 0; j < 4; ++j) {
-                    this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ);
                 }
             }
 
@@ -345,7 +344,6 @@ public class EntityArrow extends Entity implements IProjectile {
             this.yaw = (float) (MathHelper.b(this.motX, this.motZ) * 180.0D / 3.1415927410125732D);
 
             for (this.pitch = (float) (MathHelper.b(this.motY, (double) f2) * 180.0D / 3.1415927410125732D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-                ;
             }
 
             while (this.pitch - this.lastPitch >= 180.0F) {
@@ -368,7 +366,7 @@ public class EntityArrow extends Entity implements IProjectile {
             if (this.V()) {
                 for (int l = 0; l < 4; ++l) {
                     f3 = 0.25F;
-                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * (double) f3, this.locY - this.motY * (double) f3, this.locZ - this.motZ * (double) f3, this.motX, this.motY, this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * (double) f3, this.locY - this.motY * (double) f3, this.locZ - this.motZ * (double) f3, this.motX, this.motY, this.motZ);
                 }
 
                 f4 = 0.6F;
@@ -392,7 +390,7 @@ public class EntityArrow extends Entity implements IProjectile {
         nbttagcompound.setShort("yTile", (short) this.e);
         nbttagcompound.setShort("zTile", (short) this.f);
         nbttagcompound.setShort("life", (short) this.ar);
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(this.g);
+        MinecraftKey minecraftkey = Block.REGISTRY.c(this.g);
 
         nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
         nbttagcompound.setByte("inData", (byte) this.h);
@@ -451,7 +449,7 @@ public class EntityArrow extends Entity implements IProjectile {
             }
 
             if (flag) {
-                this.makeSound("random.pop", 0.2F, ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+                this.makeSound("getRandom().pop", 0.2F, ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.7F + 1.0F) * 2.0F);
                 entityhuman.receive(this, 1);
                 this.die();
             }
@@ -487,9 +485,9 @@ public class EntityArrow extends Entity implements IProjectile {
         byte b0 = this.datawatcher.getByte(16);
 
         if (flag) {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 | 1)));
+            this.datawatcher.watch(16, (byte) (b0 | 1));
         } else {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 & -2)));
+            this.datawatcher.watch(16, (byte) (b0 & -2));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 0e6f8c035..8ae179427 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -57,9 +57,9 @@ public class EntityBoat extends Entity {
     }
 
     protected void h() {
-        this.datawatcher.a(17, new Integer(0));
-        this.datawatcher.a(18, new Integer(1));
-        this.datawatcher.a(19, new Float(0.0F));
+        this.datawatcher.a(17, 0);
+        this.datawatcher.a(18, 1);
+        this.datawatcher.a(19, 0.0F);
     }
 
     public AxisAlignedBB j(Entity entity) {
@@ -192,19 +192,19 @@ public class EntityBoat extends Entity {
             d5 = Math.sin((double) this.yaw * 3.141592653589793D / 180.0D);
 
             for (j = 0; (double) j < 1.0D + d3 * 60.0D; ++j) {
-                double d6 = (double) (this.random.nextFloat() * 2.0F - 1.0F);
-                double d7 = (double) (this.random.nextInt(2) * 2 - 1) * 0.7D;
+                double d6 = (double) (this.getRandom().nextFloat() * 2.0F - 1.0F);
+                double d7 = (double) (this.getRandom().nextInt(2) * 2 - 1) * 0.7D;
                 double d8;
                 double d9;
 
-                if (this.random.nextBoolean()) {
+                if (this.getRandom().nextBoolean()) {
                     d8 = this.locX - d4 * d6 * 0.8D + d5 * d7;
                     d9 = this.locZ - d5 * d6 * 0.8D - d4 * d7;
-                    this.world.addParticle(EnumParticle.WATER_SPLASH, d8, this.locY - 0.125D, d9, this.motX, this.motY, this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.WATER_SPLASH, d8, this.locY - 0.125D, d9, this.motX, this.motY, this.motZ);
                 } else {
                     d8 = this.locX + d4 + d5 * d6 * 0.7D;
                     d9 = this.locZ + d5 - d4 * d6 * 0.7D;
-                    this.world.addParticle(EnumParticle.WATER_SPLASH, d8, this.locY - 0.125D, d9, this.motX, this.motY, this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.WATER_SPLASH, d8, this.locY - 0.125D, d9, this.motX, this.motY, this.motZ);
                 }
             }
         }
@@ -390,8 +390,8 @@ public class EntityBoat extends Entity {
                 List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D));
 
                 if (list != null && !list.isEmpty()) {
-                    for (int k1 = 0; k1 < list.size(); ++k1) {
-                        Entity entity = (Entity) list.get(k1);
+                    for (Object o : list) {
+                        Entity entity = (Entity) o;
 
                         if (entity != this.passenger && entity.ae() && entity instanceof EntityBoat) {
                             entity.collide(this);
@@ -459,7 +459,7 @@ public class EntityBoat extends Entity {
     }
 
     public void setDamage(float f) {
-        this.datawatcher.watch(19, Float.valueOf(f));
+        this.datawatcher.watch(19, f);
     }
 
     public float j() {
@@ -467,7 +467,7 @@ public class EntityBoat extends Entity {
     }
 
     public void a(int i) {
-        this.datawatcher.watch(17, Integer.valueOf(i));
+        this.datawatcher.watch(17, i);
     }
 
     public int l() {
@@ -475,7 +475,7 @@ public class EntityBoat extends Entity {
     }
 
     public void b(int i) {
-        this.datawatcher.watch(18, Integer.valueOf(i));
+        this.datawatcher.watch(18, i);
     }
 
     public int m() {
diff --git a/src/main/java/net/minecraft/server/EntityChicken.java b/src/main/java/net/minecraft/server/EntityChicken.java
index 0d279987f..9f0bd9f1f 100644
--- a/src/main/java/net/minecraft/server/EntityChicken.java
+++ b/src/main/java/net/minecraft/server/EntityChicken.java
@@ -13,7 +13,7 @@ public class EntityChicken extends EntityAnimal {
     public EntityChicken(World world) {
         super(world);
         this.setSize(0.4F, 0.7F);
-        this.bs = this.random.nextInt(6000) + 6000;
+        this.bs = this.getRandom().nextInt(6000) + 6000;
         this.goalSelector.a(0, new PathfinderGoalFloat(this));
         this.goalSelector.a(1, new PathfinderGoalPanic(this, 1.4D));
         this.goalSelector.a(2, new PathfinderGoalBreed(this, 1.0D));
@@ -56,9 +56,9 @@ public class EntityChicken extends EntityAnimal {
 
         this.bm += this.br * 2.0F;
         if (!this.world.isClientSide && !this.isBaby() && !this.isChickenJockey() && --this.bs <= 0) {
-            this.makeSound("mob.chicken.plop", 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            this.makeSound("mob.chicken.plop", 1.0F, (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F);
             this.a(Items.EGG, 1);
-            this.bs = this.random.nextInt(6000) + 6000;
+            this.bs = this.getRandom().nextInt(6000) + 6000;
         }
 
     }
@@ -86,7 +86,7 @@ public class EntityChicken extends EntityAnimal {
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(3) + this.random.nextInt(1 + i);
+        int j = this.getRandom().nextInt(3) + this.getRandom().nextInt(1 + i);
 
         for (int k = 0; k < j; ++k) {
             this.a(Items.FEATHER, 1);
diff --git a/src/main/java/net/minecraft/server/EntityCow.java b/src/main/java/net/minecraft/server/EntityCow.java
index b5627b7cc..c4606be22 100644
--- a/src/main/java/net/minecraft/server/EntityCow.java
+++ b/src/main/java/net/minecraft/server/EntityCow.java
@@ -52,7 +52,7 @@ public class EntityCow extends EntityAnimal {
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(3) + this.random.nextInt(1 + i);
+        int j = this.getRandom().nextInt(3) + this.getRandom().nextInt(1 + i);
 
         int k;
 
@@ -60,7 +60,7 @@ public class EntityCow extends EntityAnimal {
             this.a(Items.LEATHER, 1);
         }
 
-        j = this.random.nextInt(3) + 1 + this.random.nextInt(1 + i);
+        j = this.getRandom().nextInt(3) + 1 + this.getRandom().nextInt(1 + i);
 
         for (k = 0; k < j; ++k) {
             if (this.isBurning()) {
diff --git a/src/main/java/net/minecraft/server/EntityCreeper.java b/src/main/java/net/minecraft/server/EntityCreeper.java
index fecf94da1..88850f25b 100644
--- a/src/main/java/net/minecraft/server/EntityCreeper.java
+++ b/src/main/java/net/minecraft/server/EntityCreeper.java
@@ -24,7 +24,7 @@ public class EntityCreeper extends EntityMonster {
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
-        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false));
     }
 
     protected void initAttributes() {
@@ -47,9 +47,9 @@ public class EntityCreeper extends EntityMonster {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) -1));
-        this.datawatcher.a(17, Byte.valueOf((byte) 0));
-        this.datawatcher.a(18, Byte.valueOf((byte) 0));
+        this.datawatcher.a(16, (byte) -1);
+        this.datawatcher.a(17, (byte) 0);
+        this.datawatcher.a(18, (byte) 0);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -65,7 +65,7 @@ public class EntityCreeper extends EntityMonster {
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.datawatcher.watch(17, Byte.valueOf((byte) (nbttagcompound.getBoolean("powered") ? 1 : 0)));
+        this.datawatcher.watch(17, (byte) (nbttagcompound.getBoolean("powered") ? 1 : 0));
         if (nbttagcompound.hasKeyOfType("Fuse", 99)) {
             this.maxFuseTicks = nbttagcompound.getShort("Fuse");
         }
@@ -120,11 +120,10 @@ public class EntityCreeper extends EntityMonster {
         if (damagesource.getEntity() instanceof EntitySkeleton) {
             int i = Item.getId(Items.RECORD_13);
             int j = Item.getId(Items.RECORD_WAIT);
-            int k = i + this.random.nextInt(j - i + 1);
 
             // CraftBukkit start - Store record for now, drop in dropDeathLoot
             // this.a(Item.getById(k), 1);
-            this.record = k;
+            this.record = i + this.getRandom().nextInt(j - i + 1);
             // CraftBukkit end
         } else if (damagesource.getEntity() instanceof EntityCreeper && damagesource.getEntity() != this && ((EntityCreeper) damagesource.getEntity()).isPowered() && ((EntityCreeper) damagesource.getEntity()).cp()) {
             ((EntityCreeper) damagesource.getEntity()).cq();
@@ -167,7 +166,7 @@ public class EntityCreeper extends EntityMonster {
     }
 
     public void a(int i) {
-        this.datawatcher.watch(16, Byte.valueOf((byte) i));
+        this.datawatcher.watch(16, (byte) i);
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
@@ -182,9 +181,9 @@ public class EntityCreeper extends EntityMonster {
 
     public void setPowered(boolean powered) {
         if (!powered) {
-            this.datawatcher.watch(17, Byte.valueOf((byte) 0));
+            this.datawatcher.watch(17, (byte) 0);
         } else {
-            this.datawatcher.watch(17, Byte.valueOf((byte) 1));
+            this.datawatcher.watch(17, (byte) 1);
         }
         // CraftBukkit end
     }
@@ -193,7 +192,7 @@ public class EntityCreeper extends EntityMonster {
         ItemStack itemstack = entityhuman.inventory.getItemInHand();
 
         if (itemstack != null && itemstack.getItem() == Items.FLINT_AND_STEEL) {
-            this.world.makeSound(this.locX + 0.5D, this.locY + 0.5D, this.locZ + 0.5D, "fire.ignite", 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
+            this.world.makeSound(this.locX + 0.5D, this.locY + 0.5D, this.locZ + 0.5D, "fire.ignite", 1.0F, this.getRandom().nextFloat() * 0.4F + 0.8F);
             entityhuman.bw();
             if (!this.world.isClientSide) {
                 this.co();
@@ -228,7 +227,7 @@ public class EntityCreeper extends EntityMonster {
     }
 
     public void co() {
-        this.datawatcher.watch(18, Byte.valueOf((byte) 1));
+        this.datawatcher.watch(18, (byte) 1);
     }
 
     public boolean cp() {
diff --git a/src/main/java/net/minecraft/server/EntityDamageSourceIndirect.java b/src/main/java/net/minecraft/server/EntityDamageSourceIndirect.java
index b72fb3c4a..5f57f0f06 100644
--- a/src/main/java/net/minecraft/server/EntityDamageSourceIndirect.java
+++ b/src/main/java/net/minecraft/server/EntityDamageSourceIndirect.java
@@ -23,7 +23,7 @@ public class EntityDamageSourceIndirect extends EntityDamageSource {
         String s = "death.attack." + this.translationIndex;
         String s1 = s + ".item";
 
-        return itemstack != null && itemstack.hasName() && LocaleI18n.c(s1) ? new ChatMessage(s1, new Object[] { entityliving.getScoreboardDisplayName(), ichatbasecomponent, itemstack.C()}) : new ChatMessage(s, new Object[] { entityliving.getScoreboardDisplayName(), ichatbasecomponent});
+        return itemstack != null && itemstack.hasName() && LocaleI18n.c(s1) ? new ChatMessage(s1, entityliving.getScoreboardDisplayName(), ichatbasecomponent, itemstack.C()) : new ChatMessage(s, entityliving.getScoreboardDisplayName(), ichatbasecomponent);
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/EntityEgg.java b/src/main/java/net/minecraft/server/EntityEgg.java
index 5d57a1181..85d89e19d 100644
--- a/src/main/java/net/minecraft/server/EntityEgg.java
+++ b/src/main/java/net/minecraft/server/EntityEgg.java
@@ -27,8 +27,8 @@ public class EntityEgg extends EntityProjectile {
         }
 
         // CraftBukkit start - Fire PlayerEggThrowEvent
-        boolean hatching = !this.world.isClientSide && this.random.nextInt(8) == 0;
-        int numHatching = (this.random.nextInt(32) == 0) ? 4 : 1;
+        boolean hatching = !this.world.isClientSide && this.getRandom().nextInt(8) == 0;
+        int numHatching = (this.getRandom().nextInt(32) == 0) ? 4 : 1;
         if (!hatching) {
             numHatching = 0;
         }
@@ -61,7 +61,7 @@ public class EntityEgg extends EntityProjectile {
         double d0 = 0.08D;
 
         for (int j = 0; j < 8; ++j) {
-            this.world.addParticle(EnumParticle.ITEM_CRACK, this.locX, this.locY, this.locZ, ((double) this.random.nextFloat() - 0.5D) * 0.08D, ((double) this.random.nextFloat() - 0.5D) * 0.08D, ((double) this.random.nextFloat() - 0.5D) * 0.08D, new int[] { Item.getId(Items.EGG)});
+            this.world.addParticle(EnumParticle.ITEM_CRACK, this.locX, this.locY, this.locZ, ((double) this.getRandom().nextFloat() - 0.5D) * 0.08D, ((double) this.getRandom().nextFloat() - 0.5D) * 0.08D, ((double) this.getRandom().nextFloat() - 0.5D) * 0.08D, Item.getId(Items.EGG));
         }
 
         if (!this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderCrystal.java b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
index 07533e4a6..47dc83919 100644
--- a/src/main/java/net/minecraft/server/EntityEnderCrystal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
@@ -15,7 +15,7 @@ public class EntityEnderCrystal extends Entity {
         this.k = true;
         this.setSize(2.0F, 2.0F);
         this.b = 5;
-        this.a = this.random.nextInt(100000);
+        this.a = this.getRandom().nextInt(100000);
     }
 
     protected boolean s_() {
@@ -23,7 +23,7 @@ public class EntityEnderCrystal extends Entity {
     }
 
     protected void h() {
-        this.datawatcher.a(8, Integer.valueOf(this.b));
+        this.datawatcher.a(8, this.b);
     }
 
     public void t_() {
@@ -31,7 +31,7 @@ public class EntityEnderCrystal extends Entity {
         this.lastY = this.locY;
         this.lastZ = this.locZ;
         ++this.a;
-        this.datawatcher.watch(8, Integer.valueOf(this.b));
+        this.datawatcher.watch(8, this.b);
         int i = MathHelper.floor(this.locX);
         int j = MathHelper.floor(this.locY);
         int k = MathHelper.floor(this.locZ);
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index d246ae749..ae7489670 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -88,7 +88,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             f = MathHelper.cos(this.bv * 3.1415927F * 2.0F);
             f1 = MathHelper.cos(this.bu * 3.1415927F * 2.0F);
             if (f1 <= -0.3F && f >= -0.3F && !this.R()) {
-                this.world.a(this.locX, this.locY, this.locZ, "mob.enderdragon.wings", 5.0F, 0.8F + this.random.nextFloat() * 0.3F, false);
+                this.world.a(this.locX, this.locY, this.locZ, "mob.enderdragon.wings", 5.0F, 0.8F + this.getRandom().nextFloat() * 0.3F, false);
             }
         }
 
@@ -96,10 +96,10 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         float f2;
 
         if (this.getHealth() <= 0.0F) {
-            f = (this.random.nextFloat() - 0.5F) * 8.0F;
-            f1 = (this.random.nextFloat() - 0.5F) * 4.0F;
-            f2 = (this.random.nextFloat() - 0.5F) * 8.0F;
-            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D, new int[0]);
+            f = (this.getRandom().nextFloat() - 0.5F) * 8.0F;
+            f1 = (this.getRandom().nextFloat() - 0.5F) * 4.0F;
+            f2 = (this.getRandom().nextFloat() - 0.5F) * 8.0F;
+            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D);
         } else {
             this.n();
             f = 0.2F / (MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 10.0F + 1.0F);
@@ -166,8 +166,8 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
                         this.b = this.target.getBoundingBox().b + d4;
                     } else {
-                        this.a += this.random.nextGaussian() * 2.0D;
-                        this.c += this.random.nextGaussian() * 2.0D;
+                        this.a += this.getRandom().nextGaussian() * 2.0D;
+                        this.c += this.getRandom().nextGaussian() * 2.0D;
                     }
 
                     if (this.bw || d2 < 100.0D || d2 > 22500.0D || this.positionChanged || this.E) {
@@ -307,7 +307,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             if (this.bz.dead) {
                 if (!this.world.isClientSide) {
                     CraftEventFactory.entityDamage = this.bz; // CraftBukkit
-                    this.a(this.bn, DamageSource.explosion((Explosion) null), 10.0F);
+                    this.a(this.bn, DamageSource.explosion(null), 10.0F);
                     CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
@@ -324,15 +324,14 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             }
         }
 
-        if (this.random.nextInt(10) == 0) {
+        if (this.getRandom().nextInt(10) == 0) {
             float f = 32.0F;
             List list = this.world.a(EntityEnderCrystal.class, this.getBoundingBox().grow((double) f, (double) f, (double) f));
             EntityEnderCrystal entityendercrystal = null;
             double d0 = Double.MAX_VALUE;
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                EntityEnderCrystal entityendercrystal1 = (EntityEnderCrystal) iterator.next();
+            for (Object o : list) {
+                EntityEnderCrystal entityendercrystal1 = (EntityEnderCrystal) o;
                 double d1 = entityendercrystal1.h(this);
 
                 if (d1 < d0) {
@@ -349,11 +348,8 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     private void a(List<Entity> list) {
         double d0 = (this.bo.getBoundingBox().a + this.bo.getBoundingBox().d) / 2.0D;
         double d1 = (this.bo.getBoundingBox().c + this.bo.getBoundingBox().f) / 2.0D;
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : list) {
             if (entity instanceof EntityLiving) {
                 double d2 = entity.locX - d0;
                 double d3 = entity.locZ - d1;
@@ -366,12 +362,12 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     }
 
     private void b(List<Entity> list) {
-        for (int i = 0; i < list.size(); ++i) {
-            Entity entity = (Entity) list.get(i);
+        for (Entity value : list) {
+            Entity entity = (Entity) value;
 
             if (entity instanceof EntityLiving) {
                 entity.damageEntity(DamageSource.mobAttack(this), 10.0F);
-                this.a((EntityLiving) this, entity);
+                this.a(this, entity);
             }
         }
 
@@ -380,17 +376,12 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     private void cf() {
         this.bw = false;
         ArrayList arraylist = Lists.newArrayList(this.world.players);
-        Iterator iterator = arraylist.iterator();
 
-        while (iterator.hasNext()) {
-            if (((EntityHuman) iterator.next()).isSpectator()) {
-                iterator.remove();
-            }
-        }
+        arraylist.removeIf(o -> ((EntityHuman) o).isSpectator());
 
-        if (this.random.nextInt(2) == 0 && !arraylist.isEmpty()) {
+        if (this.getRandom().nextInt(2) == 0 && !arraylist.isEmpty()) {
             // CraftBukkit start
-            Entity target = (Entity) this.world.players.get(this.random.nextInt(this.world.players.size()));
+            Entity target = this.world.players.get(this.getRandom().nextInt(this.world.players.size()));
             EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), target.getBukkitEntity(), EntityTargetEvent.TargetReason.RANDOM_TARGET);
             this.world.getServer().getPluginManager().callEvent(event);
 
@@ -407,10 +398,10 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
             do {
                 this.a = 0.0D;
-                this.b = (double) (70.0F + this.random.nextFloat() * 50.0F);
+                this.b = (double) (70.0F + this.getRandom().nextFloat() * 50.0F);
                 this.c = 0.0D;
-                this.a += (double) (this.random.nextFloat() * 120.0F - 60.0F);
-                this.c += (double) (this.random.nextFloat() * 120.0F - 60.0F);
+                this.a += (double) (this.getRandom().nextFloat() * 120.0F - 60.0F);
+                this.c += (double) (this.getRandom().nextFloat() * 120.0F - 60.0F);
                 double d0 = this.locX - this.a;
                 double d1 = this.locY - this.b;
                 double d2 = this.locZ - this.c;
@@ -438,7 +429,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         boolean flag1 = false;
 
         // CraftBukkit start - Create a list to hold all the destroyed blocks
-        List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<org.bukkit.block.Block>();
+        List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<>();
         org.bukkit.craftbukkit.CraftWorld craftWorld = this.world.getWorld();
         // CraftBukkit end
 
@@ -498,11 +489,11 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                 }
             }
             // CraftBukkit end
-            double d0 = axisalignedbb.a + (axisalignedbb.d - axisalignedbb.a) * (double) this.random.nextFloat();
-            double d1 = axisalignedbb.b + (axisalignedbb.e - axisalignedbb.b) * (double) this.random.nextFloat();
-            double d2 = axisalignedbb.c + (axisalignedbb.f - axisalignedbb.c) * (double) this.random.nextFloat();
+            double d0 = axisalignedbb.a + (axisalignedbb.d - axisalignedbb.a) * (double) this.getRandom().nextFloat();
+            double d1 = axisalignedbb.b + (axisalignedbb.e - axisalignedbb.b) * (double) this.getRandom().nextFloat();
+            double d2 = axisalignedbb.c + (axisalignedbb.f - axisalignedbb.c) * (double) this.getRandom().nextFloat();
 
-            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D);
         }
 
         return flag;
@@ -517,9 +508,9 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         float f2 = MathHelper.sin(f1);
         float f3 = MathHelper.cos(f1);
 
-        this.a = this.locX + (double) (f2 * 5.0F) + (double) ((this.random.nextFloat() - 0.5F) * 2.0F);
-        this.b = this.locY + (double) (this.random.nextFloat() * 3.0F) + 1.0D;
-        this.c = this.locZ - (double) (f3 * 5.0F) + (double) ((this.random.nextFloat() - 0.5F) * 2.0F);
+        this.a = this.locX + (double) (f2 * 5.0F) + (double) ((this.getRandom().nextFloat() - 0.5F) * 2.0F);
+        this.b = this.locY + (double) (this.getRandom().nextFloat() * 3.0F) + 1.0D;
+        this.c = this.locZ - (double) (f3 * 5.0F) + (double) ((this.getRandom().nextFloat() - 0.5F) * 2.0F);
         this.target = null;
         if (damagesource.getEntity() instanceof EntityHuman || damagesource.isExplosion()) {
             this.dealDamage(damagesource, f);
@@ -548,11 +539,11 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         if (this.dead) return; // CraftBukkit - can't kill what's already dead
         ++this.by;
         if (this.by >= 180 && this.by <= 200) {
-            float f = (this.random.nextFloat() - 0.5F) * 8.0F;
-            float f1 = (this.random.nextFloat() - 0.5F) * 4.0F;
-            float f2 = (this.random.nextFloat() - 0.5F) * 8.0F;
+            float f = (this.getRandom().nextFloat() - 0.5F) * 8.0F;
+            float f1 = (this.getRandom().nextFloat() - 0.5F) * 4.0F;
+            float f2 = (this.getRandom().nextFloat() - 0.5F) * 8.0F;
 
-            this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D);
         }
 
         boolean flag = this.world.getGameRules().getBoolean("doMobLoot");
@@ -573,8 +564,8 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             if (this.by == 1) {
                 // CraftBukkit start - Use relative location for far away sounds
                 // this.world.a(1018, new BlockPosition(this), 0);
-                int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
-                for (EntityPlayer player : (List<EntityPlayer>) MinecraftServer.getServer().getPlayerList().players) {
+                int viewDistance = this.world.getServer().getViewDistance() * 16;
+                for (EntityPlayer player : MinecraftServer.getServer().getPlayerList().players) {
                     double deltaX = this.locX - player.locX;
                     double deltaZ = this.locZ - player.locZ;
                     double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
@@ -665,8 +656,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         } else {
             for (BlockState state : event.getBlocks()) {
                 PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, new BlockPosition(state.getX(), state.getY(), state.getZ()));
-                for (Iterator it = this.world.players.iterator(); it.hasNext();) {
-                    EntityHuman entity = (EntityHuman) it.next();
+                for (EntityHuman entity : this.world.players) {
                     if (entity instanceof EntityPlayer) {
                         ((EntityPlayer) entity).playerConnection.sendPacket(packet);
                     }
diff --git a/src/main/java/net/minecraft/server/EntityEnderPearl.java b/src/main/java/net/minecraft/server/EntityEnderPearl.java
index 319c0bc6f..b838ad133 100644
--- a/src/main/java/net/minecraft/server/EntityEnderPearl.java
+++ b/src/main/java/net/minecraft/server/EntityEnderPearl.java
@@ -39,7 +39,7 @@ public class EntityEnderPearl extends EntityProjectile {
         // PaperSpigot end
 
         for (int i = 0; i < 32; ++i) {
-            this.world.addParticle(EnumParticle.PORTAL, this.locX, this.locY + this.random.nextDouble() * 2.0D, this.locZ, this.random.nextGaussian(), 0.0D, this.random.nextGaussian(), new int[0]);
+            this.world.addParticle(EnumParticle.PORTAL, this.locX, this.locY + this.getRandom().nextDouble() * 2.0D, this.locZ, this.getRandom().nextGaussian(), 0.0D, this.getRandom().nextGaussian());
         }
 
         if (!this.world.isClientSide) {
@@ -57,7 +57,7 @@ public class EntityEnderPearl extends EntityProjectile {
                     Bukkit.getPluginManager().callEvent(teleEvent);
 
                     if (!teleEvent.isCancelled() && !entityplayer.playerConnection.isDisconnected()) {
-                        if (this.random.nextFloat() < 0.05F && this.world.getGameRules().getBoolean("doMobSpawning")) {
+                        if (this.getRandom().nextFloat() < 0.05F && this.world.getGameRules().getBoolean("doMobSpawning")) {
                             EntityEndermite entityendermite = new EntityEndermite(this.world);
 
                             entityendermite.a(true);
@@ -66,7 +66,7 @@ public class EntityEnderPearl extends EntityProjectile {
                         }
 
                         if (entityliving.au()) {
-                            entityliving.mount((Entity) null);
+                            entityliving.mount(null);
                         }
 
                         entityplayer.playerConnection.teleport(teleEvent.getTo());
diff --git a/src/main/java/net/minecraft/server/EntityEnderman.java b/src/main/java/net/minecraft/server/EntityEnderman.java
index f3afbbd3a..e65a9dd92 100644
--- a/src/main/java/net/minecraft/server/EntityEnderman.java
+++ b/src/main/java/net/minecraft/server/EntityEnderman.java
@@ -10,7 +10,6 @@ import java.util.UUID;
 
 // CraftBukkit start
 import org.bukkit.Location;
-import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.EntityTeleportEvent;
 // CraftBukkit end
 
@@ -32,7 +31,7 @@ public class EntityEnderman extends EntityMonster {
         this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
         this.goalSelector.a(10, new EntityEnderman.PathfinderGoalEndermanPlaceBlock(this));
         this.goalSelector.a(11, new EntityEnderman.PathfinderGoalEndermanPickupBlock(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(2, new EntityEnderman.PathfinderGoalPlayerWhoLookedAtTarget(this));
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityEndermite.class, 10, true, false, new Predicate() {
             public boolean a(EntityEndermite entityendermite) {
@@ -55,9 +54,9 @@ public class EntityEnderman extends EntityMonster {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Short((short) 0));
-        this.datawatcher.a(17, new Byte((byte) 0));
-        this.datawatcher.a(18, new Byte((byte) 0));
+        this.datawatcher.a(16, (short) 0);
+        this.datawatcher.a(17, (byte) 0);
+        this.datawatcher.a(18, (byte) 0);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -105,7 +104,7 @@ public class EntityEnderman extends EntityMonster {
     public void m() {
         if (this.world.isClientSide) {
             for (int i = 0; i < 2; ++i) {
-                this.world.addParticle(EnumParticle.PORTAL, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length - 0.25D, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, (this.random.nextDouble() - 0.5D) * 2.0D, -this.random.nextDouble(), (this.random.nextDouble() - 0.5D) * 2.0D, new int[0]);
+                this.world.addParticle(EnumParticle.PORTAL, this.locX + (this.getRandom().nextDouble() - 0.5D) * (double) this.width, this.locY + this.getRandom().nextDouble() * (double) this.length - 0.25D, this.locZ + (this.getRandom().nextDouble() - 0.5D) * (double) this.width, (this.getRandom().nextDouble() - 0.5D) * 2.0D, -this.getRandom().nextDouble(), (this.getRandom().nextDouble() - 0.5D) * 2.0D);
             }
         }
 
@@ -118,15 +117,15 @@ public class EntityEnderman extends EntityMonster {
             this.damageEntity(DamageSource.DROWN, 1.0F);
         }
 
-        if (this.co() && !this.bm && this.random.nextInt(100) == 0) {
+        if (this.co() && !this.bm && this.getRandom().nextInt(100) == 0) {
             this.a(false);
         }
 
         if (this.world.w()) {
             float f = this.c(1.0F);
 
-            if (f > 0.5F && this.world.i(new BlockPosition(this)) && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F) {
-                this.setGoalTarget((EntityLiving) null);
+            if (f > 0.5F && this.world.i(new BlockPosition(this)) && this.getRandom().nextFloat() * 30.0F < (f - 0.4F) * 2.0F) {
+                this.setGoalTarget(null);
                 this.a(false);
                 this.bm = false;
                 this.n();
@@ -137,9 +136,9 @@ public class EntityEnderman extends EntityMonster {
     }
 
     protected boolean n() {
-        double d0 = this.locX + (this.random.nextDouble() - 0.5D) * 64.0D;
-        double d1 = this.locY + (double) (this.random.nextInt(64) - 32);
-        double d2 = this.locZ + (this.random.nextDouble() - 0.5D) * 64.0D;
+        double d0 = this.locX + (this.getRandom().nextDouble() - 0.5D) * 64.0D;
+        double d1 = this.locY + (double) (this.getRandom().nextInt(64) - 32);
+        double d2 = this.locZ + (this.getRandom().nextDouble() - 0.5D) * 64.0D;
 
         return this.k(d0, d1, d2);
     }
@@ -149,9 +148,9 @@ public class EntityEnderman extends EntityMonster {
 
         vec3d = vec3d.a();
         double d0 = 16.0D;
-        double d1 = this.locX + (this.random.nextDouble() - 0.5D) * 8.0D - vec3d.a * d0;
-        double d2 = this.locY + (double) (this.random.nextInt(16) - 8) - vec3d.b * d0;
-        double d3 = this.locZ + (this.random.nextDouble() - 0.5D) * 8.0D - vec3d.c * d0;
+        double d1 = this.locX + (this.getRandom().nextDouble() - 0.5D) * 8.0D - vec3d.a * d0;
+        double d2 = this.locY + (double) (this.getRandom().nextInt(16) - 8) - vec3d.b * d0;
+        double d3 = this.locZ + (this.getRandom().nextDouble() - 0.5D) * 8.0D - vec3d.c * d0;
 
         return this.k(d1, d2, d3);
     }
@@ -208,14 +207,14 @@ public class EntityEnderman extends EntityMonster {
 
             for (int i = 0; i < short0; ++i) {
                 double d6 = (double) i / ((double) short0 - 1.0D);
-                float f = (this.random.nextFloat() - 0.5F) * 0.2F;
-                float f1 = (this.random.nextFloat() - 0.5F) * 0.2F;
-                float f2 = (this.random.nextFloat() - 0.5F) * 0.2F;
-                double d7 = d3 + (this.locX - d3) * d6 + (this.random.nextDouble() - 0.5D) * (double) this.width * 2.0D;
-                double d8 = d4 + (this.locY - d4) * d6 + this.random.nextDouble() * (double) this.length;
-                double d9 = d5 + (this.locZ - d5) * d6 + (this.random.nextDouble() - 0.5D) * (double) this.width * 2.0D;
-
-                this.world.addParticle(EnumParticle.PORTAL, d7, d8, d9, (double) f, (double) f1, (double) f2, new int[0]);
+                float f = (this.getRandom().nextFloat() - 0.5F) * 0.2F;
+                float f1 = (this.getRandom().nextFloat() - 0.5F) * 0.2F;
+                float f2 = (this.getRandom().nextFloat() - 0.5F) * 0.2F;
+                double d7 = d3 + (this.locX - d3) * d6 + (this.getRandom().nextDouble() - 0.5D) * (double) this.width * 2.0D;
+                double d8 = d4 + (this.locY - d4) * d6 + this.getRandom().nextDouble() * (double) this.length;
+                double d9 = d5 + (this.locZ - d5) * d6 + (this.getRandom().nextDouble() - 0.5D) * (double) this.width * 2.0D;
+
+                this.world.addParticle(EnumParticle.PORTAL, d7, d8, d9, (double) f, (double) f1, (double) f2);
             }
 
             this.world.makeSound(d3, d4, d5, "mob.endermen.portal", 1.0F, 1.0F);
@@ -244,7 +243,7 @@ public class EntityEnderman extends EntityMonster {
         Item item = this.getLoot();
 
         if (item != null) {
-            int j = this.random.nextInt(2 + i);
+            int j = this.getRandom().nextInt(2 + i);
 
             for (int k = 0; k < j; ++k) {
                 this.a(item, 1);
@@ -261,7 +260,7 @@ public class EntityEnderman extends EntityMonster {
     }
 
     public void setCarried(IBlockData iblockdata) {
-        this.datawatcher.watch(16, Short.valueOf((short) (Block.getCombinedId(iblockdata) & '\uffff')));
+        this.datawatcher.watch(16, (short) (Block.getCombinedId(iblockdata) & '\uffff'));
     }
 
     public IBlockData getCarried() {
@@ -300,7 +299,7 @@ public class EntityEnderman extends EntityMonster {
 
             boolean flag = super.damageEntity(damagesource, f);
 
-            if (damagesource.ignoresArmor() && this.random.nextInt(10) != 0) {
+            if (damagesource.ignoresArmor() && this.getRandom().nextInt(10) != 0) {
                 this.n();
             }
 
@@ -313,7 +312,7 @@ public class EntityEnderman extends EntityMonster {
     }
 
     public void a(boolean flag) {
-        this.datawatcher.watch(18, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.datawatcher.watch(18, (byte) (flag ? 1 : 0));
     }
 
     static {
@@ -421,7 +420,7 @@ public class EntityEnderman extends EntityMonster {
             double d0 = this.f();
             List list = this.e.world.a(EntityHuman.class, this.e.getBoundingBox().grow(d0, 4.0D, d0), this.c);
 
-            Collections.sort(list, this.b);
+            list.sort(this.b);
             if (list.isEmpty()) {
                 return false;
             } else {
diff --git a/src/main/java/net/minecraft/server/EntityExperienceOrb.java b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
index aefa9fa87..58d6c3cc9 100644
--- a/src/main/java/net/minecraft/server/EntityExperienceOrb.java
+++ b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
@@ -51,9 +51,9 @@ public class EntityExperienceOrb extends Entity {
         this.motY -= 0.029999999329447746D;
         if (this.world.getType(new BlockPosition(this)).getBlock().getMaterial() == Material.LAVA) {
             this.motY = 0.20000000298023224D;
-            this.motX = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
-            this.motZ = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
-            this.makeSound("random.fizz", 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
+            this.motX = (double) ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F);
+            this.motZ = (double) ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F);
+            this.makeSound("random.fizz", 0.4F, 2.0F + this.getRandom().nextFloat() * 0.4F);
         }
 
         this.j(this.locX, (this.getBoundingBox().b + this.getBoundingBox().e) / 2.0D, this.locZ);
@@ -121,7 +121,7 @@ public class EntityExperienceOrb extends Entity {
     }
 
     public boolean W() {
-        return this.world.a(this.getBoundingBox(), Material.WATER, (Entity) this);
+        return this.world.a(this.getBoundingBox(), Material.WATER, this);
     }
 
     protected void burn(int i) {
@@ -158,7 +158,7 @@ public class EntityExperienceOrb extends Entity {
         if (!this.world.isClientSide) {
             if (this.c == 0 && entityhuman.bp == 0) {
                 entityhuman.bp = 2;
-                this.world.makeSound(entityhuman, "random.orb", 0.1F, 0.5F * ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.8F));
+                this.world.makeSound(entityhuman, "random.orb", 0.1F, 0.5F * ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.7F + 1.8F));
                 entityhuman.receive(this, 1);
                 entityhuman.giveExp(CraftEventFactory.callPlayerExpChangeEvent(entityhuman, this.value).getAmount()); // CraftBukkit - this.value -> event.getAmount()
                 this.die();
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index e3bfd8683..f417ddbdf 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -113,7 +113,7 @@ public class EntityFallingBlock extends Entity {
                     if (this.world.getType(blockposition).getBlock() != Blocks.PISTON_EXTENSION) {
                         this.die();
                         if (!this.e) {
-                            if (this.world.a(block, blockposition, true, EnumDirection.UP, (Entity) null, (ItemStack) null) && !BlockFalling.canFall(this.world, blockposition.down()) /* mimic the false conditions of setTypeIdAndData */ && blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000 && blockposition.getY() >= 0 && blockposition.getY() < (this.world.tacoSpigotConfig.disableFallingBlockStackingAt256 ? 255 : 256) && this.world.getType(blockposition) != this.block) {
+                            if (this.world.a(block, blockposition, true, EnumDirection.UP, null, null) && !BlockFalling.canFall(this.world, blockposition.down()) /* mimic the false conditions of setTypeIdAndData */ && blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000 && blockposition.getY() >= 0 && blockposition.getY() < (this.world.tacoSpigotConfig.disableFallingBlockStackingAt256 ? 255 : 256) && this.world.getType(blockposition) != this.block) {
                                 if (CraftEventFactory.callEntityChangeBlockEvent(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.block.getBlock(), this.block.getBlock().toLegacyData(this.block)).isCancelled()) {
                                     return;
                                 }
@@ -131,10 +131,8 @@ public class EntityFallingBlock extends Entity {
                                         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
                                         tileentity.b(nbttagcompound);
-                                        Iterator iterator = this.tileEntityData.c().iterator();
 
-                                        while (iterator.hasNext()) {
-                                            String s = (String) iterator.next();
+                                        for (String s : this.tileEntityData.c()) {
                                             NBTBase nbtbase = this.tileEntityData.get(s);
 
                                             if (!s.equals("x") && !s.equals("y") && !s.equals("z")) {
@@ -173,24 +171,23 @@ public class EntityFallingBlock extends Entity {
                 ArrayList arraylist = Lists.newArrayList(this.world.getEntities(this, this.getBoundingBox()));
                 boolean flag = block == Blocks.ANVIL;
                 DamageSource damagesource = flag ? DamageSource.ANVIL : DamageSource.FALLING_BLOCK;
-                Iterator iterator = arraylist.iterator();
 
-                while (iterator.hasNext()) {
-                    Entity entity = (Entity) iterator.next();
+                for (Object o : arraylist) {
+                    Entity entity = (Entity) o;
 
                     CraftEventFactory.entityDamage = this; // CraftBukkit
                     entity.damageEntity(damagesource, (float) Math.min(MathHelper.d((float) i * this.fallHurtAmount), this.fallHurtMax));
                     CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
-                if (flag && (double) this.random.nextFloat() < 0.05000000074505806D + (double) i * 0.05D) {
-                    int j = ((Integer) this.block.get(BlockAnvil.DAMAGE)).intValue();
+                if (flag && (double) this.getRandom().nextFloat() < 0.05000000074505806D + (double) i * 0.05D) {
+                    int j = (Integer) this.block.get(BlockAnvil.DAMAGE);
 
                     ++j;
                     if (j > 2) {
                         this.e = true;
                     } else {
-                        this.block = this.block.set(BlockAnvil.DAMAGE, Integer.valueOf(j));
+                        this.block = this.block.set(BlockAnvil.DAMAGE, j);
                     }
                 }
             }
@@ -200,7 +197,7 @@ public class EntityFallingBlock extends Entity {
 
     protected void b(NBTTagCompound nbttagcompound) {
         Block block = this.block != null ? this.block.getBlock() : Blocks.AIR;
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(block);
+        MinecraftKey minecraftkey = Block.REGISTRY.c(block);
 
         nbttagcompound.setString("Block", minecraftkey == null ? "" : minecraftkey.toString());
         nbttagcompound.setByte("Data", (byte) block.toLegacyData(this.block));
@@ -273,8 +270,8 @@ public class EntityFallingBlock extends Entity {
         if (this.block != null) {
             Block block = this.block.getBlock();
 
-            crashreportsystemdetails.a("Immitating block ID", (Object) Integer.valueOf(Block.getId(block)));
-            crashreportsystemdetails.a("Immitating block data", (Object) Integer.valueOf(block.toLegacyData(this.block)));
+            crashreportsystemdetails.a("Immitating block ID", Block.getId(block));
+            crashreportsystemdetails.a("Immitating block data", block.toLegacyData(this.block));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityFireball.java b/src/main/java/net/minecraft/server/EntityFireball.java
index 125f74dfc..9e65d0285 100644
--- a/src/main/java/net/minecraft/server/EntityFireball.java
+++ b/src/main/java/net/minecraft/server/EntityFireball.java
@@ -53,9 +53,9 @@ public abstract class EntityFireball extends Entity {
 
     public void setDirection(double d0, double d1, double d2) {
         // CraftBukkit end
-        d0 += this.random.nextGaussian() * 0.4D;
-        d1 += this.random.nextGaussian() * 0.4D;
-        d2 += this.random.nextGaussian() * 0.4D;
+        d0 += this.getRandom().nextGaussian() * 0.4D;
+        d1 += this.getRandom().nextGaussian() * 0.4D;
+        d2 += this.getRandom().nextGaussian() * 0.4D;
         double d3 = (double) MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
 
         this.dirX = d0 / d3 * 0.1D;
@@ -80,9 +80,9 @@ public abstract class EntityFireball extends Entity {
                 }
 
                 this.i = false;
-                this.motX *= (double) (this.random.nextFloat() * 0.2F);
-                this.motY *= (double) (this.random.nextFloat() * 0.2F);
-                this.motZ *= (double) (this.random.nextFloat() * 0.2F);
+                this.motX *= (double) (this.getRandom().nextFloat() * 0.2F);
+                this.motY *= (double) (this.getRandom().nextFloat() * 0.2F);
+                this.motZ *= (double) (this.getRandom().nextFloat() * 0.2F);
                 this.ar = 0;
                 this.as = 0;
             } else {
@@ -103,8 +103,8 @@ public abstract class EntityFireball extends Entity {
             List list = this.world.getEntities(this, this.getBoundingBox().a(this.motX, this.motY, this.motZ).grow(1.0D, 1.0D, 1.0D));
             double d0 = 0.0D;
 
-            for (int i = 0; i < list.size(); ++i) {
-                Entity entity1 = (Entity) list.get(i);
+            for (Object o : list) {
+                Entity entity1 = (Entity) o;
 
                 if (entity1.ad() && (!entity1.k(this.shooter) || this.as >= 25)) {
                     float f = 0.3F;
@@ -144,7 +144,6 @@ public abstract class EntityFireball extends Entity {
             this.yaw = (float) (MathHelper.b(this.motZ, this.motX) * 180.0D / 3.1415927410125732D) + 90.0F;
 
             for (this.pitch = (float) (MathHelper.b((double) f1, this.motY) * 180.0D / 3.1415927410125732D) - 90.0F; this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-                ;
             }
 
             while (this.pitch - this.lastPitch >= 180.0F) {
@@ -167,7 +166,7 @@ public abstract class EntityFireball extends Entity {
                 for (int j = 0; j < 4; ++j) {
                     float f3 = 0.25F;
 
-                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * (double) f3, this.locY - this.motY * (double) f3, this.locZ - this.motZ * (double) f3, this.motX, this.motY, this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * (double) f3, this.locY - this.motY * (double) f3, this.locZ - this.motZ * (double) f3, this.motX, this.motY, this.motZ);
                 }
 
                 f2 = 0.8F;
@@ -179,7 +178,7 @@ public abstract class EntityFireball extends Entity {
             this.motX *= (double) f2;
             this.motY *= (double) f2;
             this.motZ *= (double) f2;
-            this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D);
             this.setPosition(this.locX, this.locY, this.locZ);
         }
     }
@@ -194,13 +193,13 @@ public abstract class EntityFireball extends Entity {
         nbttagcompound.setShort("xTile", (short) this.e);
         nbttagcompound.setShort("yTile", (short) this.f);
         nbttagcompound.setShort("zTile", (short) this.g);
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(this.h);
+        MinecraftKey minecraftkey = Block.REGISTRY.c(this.h);
 
         nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
         nbttagcompound.setByte("inGround", (byte) (this.i ? 1 : 0));
         // CraftBukkit - Fix direction being mismapped to invalid variables
-        nbttagcompound.set("power", this.a(new double[] { this.dirX, this.dirY, this.dirZ}));
-        nbttagcompound.set("direction", this.a(new double[] { this.motX, this.motY, this.motZ}));
+        nbttagcompound.set("power", this.a(this.dirX, this.dirY, this.dirZ));
+        nbttagcompound.set("direction", this.a(this.motX, this.motY, this.motZ));
     }
 
     public void a(NBTTagCompound nbttagcompound) {
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
index d7be6c268..ab3650fd2 100644
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -40,10 +40,10 @@ public class EntityFireworks extends Entity {
             }
         }
 
-        this.motX = this.random.nextGaussian() * 0.001D;
-        this.motZ = this.random.nextGaussian() * 0.001D;
+        this.motX = this.getRandom().nextGaussian() * 0.001D;
+        this.motZ = this.getRandom().nextGaussian() * 0.001D;
         this.motY = 0.05D;
-        this.expectedLifespan = 10 * i + this.random.nextInt(6) + this.random.nextInt(7);
+        this.expectedLifespan = 10 * i + this.getRandom().nextInt(6) + this.getRandom().nextInt(7);
     }
 
     public void t_() {
@@ -60,7 +60,6 @@ public class EntityFireworks extends Entity {
         this.yaw = (float) (MathHelper.b(this.motX, this.motZ) * 180.0D / 3.1415927410125732D);
 
         for (this.pitch = (float) (MathHelper.b(this.motY, (double) f) * 180.0D / 3.1415927410125732D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-            ;
         }
 
         while (this.pitch - this.lastPitch >= 180.0F) {
@@ -83,7 +82,7 @@ public class EntityFireworks extends Entity {
 
         ++this.ticksFlown;
         if (this.world.isClientSide && this.ticksFlown % 2 < 2) {
-            this.world.addParticle(EnumParticle.FIREWORKS_SPARK, this.locX, this.locY - 0.3D, this.locZ, this.random.nextGaussian() * 0.05D, -this.motY * 0.5D, this.random.nextGaussian() * 0.05D, new int[0]);
+            this.world.addParticle(EnumParticle.FIREWORKS_SPARK, this.locX, this.locY - 0.3D, this.locZ, this.getRandom().nextGaussian() * 0.05D, -this.motY * 0.5D, this.getRandom().nextGaussian() * 0.05D);
         }
 
         if (!this.world.isClientSide && this.ticksFlown > this.expectedLifespan) {
diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index df6ce0dbb..af228078b 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -11,9 +11,9 @@ import org.bukkit.event.player.PlayerFishEvent;
 
 public class EntityFishingHook extends Entity {
 
-    private static final List<PossibleFishingResult> d = Arrays.asList(new PossibleFishingResult[] { (new PossibleFishingResult(new ItemStack(Items.LEATHER_BOOTS), 10)).a(0.9F), new PossibleFishingResult(new ItemStack(Items.LEATHER), 10), new PossibleFishingResult(new ItemStack(Items.BONE), 10), new PossibleFishingResult(new ItemStack(Items.POTION), 10), new PossibleFishingResult(new ItemStack(Items.STRING), 5), (new PossibleFishingResult(new ItemStack(Items.FISHING_ROD), 2)).a(0.9F), new PossibleFishingResult(new ItemStack(Items.BOWL), 10), new PossibleFishingResult(new ItemStack(Items.STICK), 5), new PossibleFishingResult(new ItemStack(Items.DYE, 10, EnumColor.BLACK.getInvColorIndex()), 1), new PossibleFishingResult(new ItemStack(Blocks.TRIPWIRE_HOOK), 10), new PossibleFishingResult(new ItemStack(Items.ROTTEN_FLESH), 10)});
-    private static final List<PossibleFishingResult> e = Arrays.asList(new PossibleFishingResult[] { new PossibleFishingResult(new ItemStack(Blocks.WATERLILY), 1), new PossibleFishingResult(new ItemStack(Items.NAME_TAG), 1), new PossibleFishingResult(new ItemStack(Items.SADDLE), 1), (new PossibleFishingResult(new ItemStack(Items.BOW), 1)).a(0.25F).a(), (new PossibleFishingResult(new ItemStack(Items.FISHING_ROD), 1)).a(0.25F).a(), (new PossibleFishingResult(new ItemStack(Items.BOOK), 1)).a()});
-    private static final List<PossibleFishingResult> f = Arrays.asList(new PossibleFishingResult[] { new PossibleFishingResult(new ItemStack(Items.FISH, 1, ItemFish.EnumFish.COD.a()), 60), new PossibleFishingResult(new ItemStack(Items.FISH, 1, ItemFish.EnumFish.SALMON.a()), 25), new PossibleFishingResult(new ItemStack(Items.FISH, 1, ItemFish.EnumFish.CLOWNFISH.a()), 2), new PossibleFishingResult(new ItemStack(Items.FISH, 1, ItemFish.EnumFish.PUFFERFISH.a()), 13)});
+    private static final List<PossibleFishingResult> d = Arrays.asList((new PossibleFishingResult(new ItemStack(Items.LEATHER_BOOTS), 10)).a(0.9F), new PossibleFishingResult(new ItemStack(Items.LEATHER), 10), new PossibleFishingResult(new ItemStack(Items.BONE), 10), new PossibleFishingResult(new ItemStack(Items.POTION), 10), new PossibleFishingResult(new ItemStack(Items.STRING), 5), (new PossibleFishingResult(new ItemStack(Items.FISHING_ROD), 2)).a(0.9F), new PossibleFishingResult(new ItemStack(Items.BOWL), 10), new PossibleFishingResult(new ItemStack(Items.STICK), 5), new PossibleFishingResult(new ItemStack(Items.DYE, 10, EnumColor.BLACK.getInvColorIndex()), 1), new PossibleFishingResult(new ItemStack(Blocks.TRIPWIRE_HOOK), 10), new PossibleFishingResult(new ItemStack(Items.ROTTEN_FLESH), 10));
+    private static final List<PossibleFishingResult> e = Arrays.asList(new PossibleFishingResult(new ItemStack(Blocks.WATERLILY), 1), new PossibleFishingResult(new ItemStack(Items.NAME_TAG), 1), new PossibleFishingResult(new ItemStack(Items.SADDLE), 1), (new PossibleFishingResult(new ItemStack(Items.BOW), 1)).a(0.25F).a(), (new PossibleFishingResult(new ItemStack(Items.FISHING_ROD), 1)).a(0.25F).a(), (new PossibleFishingResult(new ItemStack(Items.BOOK), 1)).a());
+    private static final List<PossibleFishingResult> f = Arrays.asList(new PossibleFishingResult(new ItemStack(Items.FISH, 1, ItemFish.EnumFish.COD.a()), 60), new PossibleFishingResult(new ItemStack(Items.FISH, 1, ItemFish.EnumFish.SALMON.a()), 25), new PossibleFishingResult(new ItemStack(Items.FISH, 1, ItemFish.EnumFish.CLOWNFISH.a()), 2), new PossibleFishingResult(new ItemStack(Items.FISH, 1, ItemFish.EnumFish.PUFFERFISH.a()), 13));
     private int g = -1;
     private int h = -1;
     private int i = -1;
@@ -72,9 +72,9 @@ public class EntityFishingHook extends Entity {
         d0 /= (double) f2;
         d1 /= (double) f2;
         d2 /= (double) f2;
-        d0 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d1 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d2 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
+        d0 += this.getRandom().nextGaussian() * 0.007499999832361937D * (double) f1;
+        d1 += this.getRandom().nextGaussian() * 0.007499999832361937D * (double) f1;
+        d2 += this.getRandom().nextGaussian() * 0.007499999832361937D * (double) f1;
         d0 *= (double) f;
         d1 *= (double) f;
         d2 *= (double) f;
@@ -140,9 +140,9 @@ public class EntityFishingHook extends Entity {
                 }
 
                 this.as = false;
-                this.motX *= (double) (this.random.nextFloat() * 0.2F);
-                this.motY *= (double) (this.random.nextFloat() * 0.2F);
-                this.motZ *= (double) (this.random.nextFloat() * 0.2F);
+                this.motX *= (double) (this.getRandom().nextFloat() * 0.2F);
+                this.motY *= (double) (this.getRandom().nextFloat() * 0.2F);
+                this.motZ *= (double) (this.getRandom().nextFloat() * 0.2F);
                 this.at = 0;
                 this.au = 0;
             } else {
@@ -165,8 +165,8 @@ public class EntityFishingHook extends Entity {
 
             double d6;
 
-            for (int i = 0; i < list.size(); ++i) {
-                Entity entity1 = (Entity) list.get(i);
+            for (Object o : list) {
+                Entity entity1 = (Entity) o;
 
                 if (entity1.ad() && (entity1 != this.owner || this.au >= 5)) {
                     float f = 0.3F;
@@ -213,7 +213,6 @@ public class EntityFishingHook extends Entity {
                 this.yaw = (float) (MathHelper.b(this.motX, this.motZ) * 180.0D / 3.1415927410125732D);
 
                 for (this.pitch = (float) (MathHelper.b(this.motY, (double) f1) * 180.0D / 3.1415927410125732D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-                    ;
                 }
 
                 while (this.pitch - this.lastPitch >= 180.0F) {
@@ -259,11 +258,11 @@ public class EntityFishingHook extends Entity {
                     int k = 1;
                     BlockPosition blockposition = (new BlockPosition(this)).up();
 
-                    if (this.random.nextFloat() < 0.25F && this.world.isRainingAt(blockposition)) {
+                    if (this.getRandom().nextFloat() < 0.25F && this.world.isRainingAt(blockposition)) {
                         k = 2;
                     }
 
-                    if (this.random.nextFloat() < 0.5F && !this.world.i(blockposition)) {
+                    if (this.getRandom().nextFloat() < 0.5F && !this.world.i(blockposition)) {
                         --k;
                     }
 
@@ -285,13 +284,13 @@ public class EntityFishingHook extends Entity {
                             this.ax -= k;
                             if (this.ax <= 0) {
                                 this.motY -= 0.20000000298023224D;
-                                this.makeSound("random.splash", 0.25F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                                this.makeSound("random.splash", 0.25F, 1.0F + (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.4F);
                                 f3 = (float) MathHelper.floor(this.getBoundingBox().b);
-                                worldserver.a(EnumParticle.WATER_BUBBLE, this.locX, (double) (f3 + 1.0F), this.locZ, (int) (1.0F + this.width * 20.0F), (double) this.width, 0.0D, (double) this.width, 0.20000000298023224D, new int[0]);
-                                worldserver.a(EnumParticle.WATER_WAKE, this.locX, (double) (f3 + 1.0F), this.locZ, (int) (1.0F + this.width * 20.0F), (double) this.width, 0.0D, (double) this.width, 0.20000000298023224D, new int[0]);
-                                this.av = MathHelper.nextInt(this.random, 10, 30);
+                                worldserver.a(EnumParticle.WATER_BUBBLE, this.locX, (double) (f3 + 1.0F), this.locZ, (int) (1.0F + this.width * 20.0F), (double) this.width, 0.0D, (double) this.width, 0.20000000298023224D);
+                                worldserver.a(EnumParticle.WATER_WAKE, this.locX, (double) (f3 + 1.0F), this.locZ, (int) (1.0F + this.width * 20.0F), (double) this.width, 0.0D, (double) this.width, 0.20000000298023224D);
+                                this.av = MathHelper.nextInt(this.getRandom(), 10, 30);
                             } else {
-                                this.ay = (float) ((double) this.ay + this.random.nextGaussian() * 4.0D);
+                                this.ay = (float) ((double) this.ay + this.getRandom().nextGaussian() * 4.0D);
                                 f3 = this.ay * 0.017453292F;
                                 f5 = MathHelper.sin(f3);
                                 f4 = MathHelper.cos(f3);
@@ -300,15 +299,15 @@ public class EntityFishingHook extends Entity {
                                 d11 = this.locZ + (double) (f4 * (float) this.ax * 0.1F);
                                 block = worldserver.getType(new BlockPosition((int) d8, (int) d12 - 1, (int) d11)).getBlock();
                                 if (block == Blocks.WATER || block == Blocks.FLOWING_WATER) {
-                                    if (this.random.nextFloat() < 0.15F) {
-                                        worldserver.a(EnumParticle.WATER_BUBBLE, d8, d12 - 0.10000000149011612D, d11, 1, (double) f5, 0.1D, (double) f4, 0.0D, new int[0]);
+                                    if (this.getRandom().nextFloat() < 0.15F) {
+                                        worldserver.a(EnumParticle.WATER_BUBBLE, d8, d12 - 0.10000000149011612D, d11, 1, (double) f5, 0.1D, (double) f4, 0.0D);
                                     }
 
                                     float f6 = f5 * 0.04F;
                                     float f7 = f4 * 0.04F;
 
-                                    worldserver.a(EnumParticle.WATER_WAKE, d8, d12, d11, 0, (double) f7, 0.01D, (double) (-f6), 1.0D, new int[0]);
-                                    worldserver.a(EnumParticle.WATER_WAKE, d8, d12, d11, 0, (double) (-f7), 0.01D, (double) f6, 1.0D, new int[0]);
+                                    worldserver.a(EnumParticle.WATER_WAKE, d8, d12, d11, 0, (double) f7, 0.01D, (double) (-f6), 1.0D);
+                                    worldserver.a(EnumParticle.WATER_WAKE, d8, d12, d11, 0, (double) (-f7), 0.01D, (double) f6, 1.0D);
                                 }
                             }
                         } else if (this.aw > 0) {
@@ -322,30 +321,30 @@ public class EntityFishingHook extends Entity {
                                 f3 = (float) ((double) f3 + (double) (60 - this.aw) * 0.01D);
                             }
 
-                            if (this.random.nextFloat() < f3) {
-                                f5 = MathHelper.a(this.random, 0.0F, 360.0F) * 0.017453292F;
-                                f4 = MathHelper.a(this.random, 25.0F, 60.0F);
+                            if (this.getRandom().nextFloat() < f3) {
+                                f5 = MathHelper.a(this.getRandom(), 0.0F, 360.0F) * 0.017453292F;
+                                f4 = MathHelper.a(this.getRandom(), 25.0F, 60.0F);
                                 d8 = this.locX + (double) (MathHelper.sin(f5) * f4 * 0.1F);
                                 d12 = (double) ((float) MathHelper.floor(this.getBoundingBox().b) + 1.0F);
                                 d11 = this.locZ + (double) (MathHelper.cos(f5) * f4 * 0.1F);
                                 block = worldserver.getType(new BlockPosition((int) d8, (int) d12 - 1, (int) d11)).getBlock();
                                 if (block == Blocks.WATER || block == Blocks.FLOWING_WATER) {
-                                    worldserver.a(EnumParticle.WATER_SPLASH, d8, d12, d11, 2 + this.random.nextInt(2), 0.10000000149011612D, 0.0D, 0.10000000149011612D, 0.0D, new int[0]);
+                                    worldserver.a(EnumParticle.WATER_SPLASH, d8, d12, d11, 2 + this.getRandom().nextInt(2), 0.10000000149011612D, 0.0D, 0.10000000149011612D, 0.0D);
                                 }
                             }
 
                             if (this.aw <= 0) {
-                                this.ay = MathHelper.a(this.random, 0.0F, 360.0F);
-                                this.ax = MathHelper.nextInt(this.random, 20, 80);
+                                this.ay = MathHelper.a(this.getRandom(), 0.0F, 360.0F);
+                                this.ax = MathHelper.nextInt(this.getRandom(), 20, 80);
                             }
                         } else {
-                            this.aw = MathHelper.nextInt(this.random, this.world.paperSpigotConfig.fishingMinTicks, this.world.paperSpigotConfig.fishingMaxTicks); // PaperSpigot - Configurable fishing tick range
+                            this.aw = MathHelper.nextInt(this.getRandom(), this.world.paperSpigotConfig.fishingMinTicks, this.world.paperSpigotConfig.fishingMaxTicks); // PaperSpigot - Configurable fishing tick range
                             this.aw -= EnchantmentManager.h(this.owner) * 20 * 5;
                         }
                     }
 
                     if (this.av > 0) {
-                        this.motY -= (double) (this.random.nextFloat() * this.random.nextFloat() * this.random.nextFloat()) * 0.2D;
+                        this.motY -= (double) (this.getRandom().nextFloat() * this.getRandom().nextFloat() * this.getRandom().nextFloat()) * 0.2D;
                     }
                 }
 
@@ -368,7 +367,7 @@ public class EntityFishingHook extends Entity {
         nbttagcompound.setShort("xTile", (short) this.g);
         nbttagcompound.setShort("yTile", (short) this.h);
         nbttagcompound.setShort("zTile", (short) this.i);
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(this.ar);
+        MinecraftKey minecraftkey = Block.REGISTRY.c(this.ar);
 
         nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
         nbttagcompound.setByte("shake", (byte) this.a);
@@ -419,7 +418,7 @@ public class EntityFishingHook extends Entity {
                 EntityItem entityitem = new EntityItem(this.world, this.locX, this.locY, this.locZ, this.m());
                 // CraftBukkit start
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), entityitem.getBukkitEntity(), (Fish) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_FISH);
-                playerFishEvent.setExpToDrop(this.random.nextInt(6) + 1);
+                playerFishEvent.setExpToDrop(this.getRandom().nextInt(6) + 1);
                 this.world.getServer().getPluginManager().callEvent(playerFishEvent);
 
                 if (playerFishEvent.isCancelled()) {
@@ -436,7 +435,7 @@ public class EntityFishingHook extends Entity {
                 entityitem.motY = d6 * d9 + (double) MathHelper.sqrt(d8) * 0.08D;
                 entityitem.motZ = d7 * d9;
                 this.world.addEntity(entityitem);
-                // CraftBukkit start - this.random.nextInt(6) + 1 -> playerFishEvent.getExpToDrop()
+                // CraftBukkit start - this.getRandom().nextInt(6) + 1 -> playerFishEvent.getExpToDrop()
                 if (playerFishEvent.getExpToDrop() > 0) {
                 this.owner.world.addEntity(new EntityExperienceOrb(this.owner.world, this.owner.locX, this.owner.locY + 0.5D, this.owner.locZ + 0.5D, playerFishEvent.getExpToDrop()));
                 } // CraftBukkit end
@@ -482,17 +481,17 @@ public class EntityFishingHook extends Entity {
         f2 = MathHelper.a(f2, 0.0F, 1.0F);
         if (f < f1) {
             this.owner.b(StatisticList.D);
-            return ((PossibleFishingResult) WeightedRandom.a(this.random, EntityFishingHook.d)).a(this.random);
+            return WeightedRandom.a(this.getRandom(), EntityFishingHook.d).a(this.getRandom());
         } else {
             f -= f1;
             if (f < f2) {
                 this.owner.b(StatisticList.E);
-                return ((PossibleFishingResult) WeightedRandom.a(this.random, EntityFishingHook.e)).a(this.random);
+                return WeightedRandom.a(this.getRandom(), EntityFishingHook.e).a(this.getRandom());
             } else {
                 float f3 = f - f2;
 
                 this.owner.b(StatisticList.C);
-                return ((PossibleFishingResult) WeightedRandom.a(this.random, EntityFishingHook.f)).a(this.random);
+                return WeightedRandom.a(this.getRandom(), EntityFishingHook.f).a(this.getRandom());
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntityGhast.java b/src/main/java/net/minecraft/server/EntityGhast.java
index 51608e9d2..4a1319865 100644
--- a/src/main/java/net/minecraft/server/EntityGhast.java
+++ b/src/main/java/net/minecraft/server/EntityGhast.java
@@ -19,7 +19,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
     }
 
     public void a(boolean flag) {
-        this.datawatcher.watch(16, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.datawatcher.watch(16, (byte) (flag ? 1 : 0));
     }
 
     public int cf() {
@@ -39,7 +39,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
             return false;
         } else if ("fireball".equals(damagesource.p()) && damagesource.getEntity() instanceof EntityHuman) {
             super.damageEntity(damagesource, 1000.0F);
-            ((EntityHuman) damagesource.getEntity()).b((Statistic) AchievementList.z);
+            ((EntityHuman) damagesource.getEntity()).b(AchievementList.z);
             return true;
         } else {
             return super.damageEntity(damagesource, f);
@@ -48,7 +48,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) 0));
+        this.datawatcher.a(16, (byte) 0);
     }
 
     protected void initAttributes() {
@@ -74,7 +74,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(2) + this.random.nextInt(1 + i);
+        int j = this.getRandom().nextInt(2) + this.getRandom().nextInt(1 + i);
 
         int k;
 
@@ -82,7 +82,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
             this.a(Items.GHAST_TEAR, 1);
         }
 
-        j = this.random.nextInt(3) + this.random.nextInt(1 + i);
+        j = this.getRandom().nextInt(3) + this.getRandom().nextInt(1 + i);
 
         for (k = 0; k < j; ++k) {
             this.a(Items.GUNPOWDER, 1);
@@ -95,7 +95,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
     }
 
     public boolean bR() {
-        return this.random.nextInt(20) == 0 && super.bR() && this.world.getDifficulty() != EnumDifficulty.PEACEFUL;
+        return this.getRandom().nextInt(20) == 0 && super.bR() && this.world.getDifficulty() != EnumDifficulty.PEACEFUL;
     }
 
     public int bV() {
@@ -149,7 +149,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
                 ++this.a;
                 if (this.a == 10) {
-                    world.a((EntityHuman) null, 1007, new BlockPosition(this.b), 0);
+                    world.a(null, 1007, new BlockPosition(this.b), 0);
                 }
 
                 if (this.a == 20) {
@@ -159,7 +159,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
                     double d3 = entityliving.getBoundingBox().b + (double) (entityliving.length / 2.0F) - (0.5D + this.b.locY + (double) (this.b.length / 2.0F));
                     double d4 = entityliving.locZ - (this.b.locZ + vec3d.c * d1);
 
-                    world.a((EntityHuman) null, 1008, new BlockPosition(this.b), 0);
+                    world.a(null, 1008, new BlockPosition(this.b), 0);
                     EntityLargeFireball entitylargefireball = new EntityLargeFireball(world, this.b, d2, d3, d4);
 
 
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index f374c3960..688f02c0b 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -242,7 +242,7 @@ public abstract class EntityHanging extends Entity {
     }
 
     public void g(double d0, double d1, double d2) {
-        if (false && !this.world.isClientSide && !this.dead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) { // CraftBukkit - not needed
+        if (false) { // CraftBukkit - not needed
             this.die();
             this.b((Entity) null);
         }
diff --git a/src/main/java/net/minecraft/server/EntityHorse.java b/src/main/java/net/minecraft/server/EntityHorse.java
index 53aaa6549..6dcef1f8b 100644
--- a/src/main/java/net/minecraft/server/EntityHorse.java
+++ b/src/main/java/net/minecraft/server/EntityHorse.java
@@ -17,7 +17,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
             return this.a((Entity) object);
         }
     };
-    public static final IAttribute attributeJumpStrength = (new AttributeRanged((IAttribute) null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).a("Jump Strength").a(true);
+    public static final IAttribute attributeJumpStrength = (new AttributeRanged(null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).a("Jump Strength").a(true);
     private static final String[] bu = new String[] { null, "textures/entity/horse/armor/horse_armor_iron.png", "textures/entity/horse/armor/horse_armor_gold.png", "textures/entity/horse/armor/horse_armor_diamond.png"};
     private static final String[] bv = new String[] { "", "meo", "goo", "dio"};
     private static final int[] bw = new int[] { 0, 5, 7, 11};
@@ -67,15 +67,15 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, Integer.valueOf(0));
-        this.datawatcher.a(19, Byte.valueOf((byte) 0));
-        this.datawatcher.a(20, Integer.valueOf(0));
-        this.datawatcher.a(21, String.valueOf(""));
-        this.datawatcher.a(22, Integer.valueOf(0));
+        this.datawatcher.a(16, 0);
+        this.datawatcher.a(19, (byte) 0);
+        this.datawatcher.a(20, 0);
+        this.datawatcher.a(21, "");
+        this.datawatcher.a(22, 0);
     }
 
     public void setType(int i) {
-        this.datawatcher.watch(19, Byte.valueOf((byte) i));
+        this.datawatcher.watch(19, (byte) i);
         this.dc();
     }
 
@@ -84,7 +84,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
     }
 
     public void setVariant(int i) {
-        this.datawatcher.watch(20, Integer.valueOf(i));
+        this.datawatcher.watch(20, i);
         this.dc();
     }
 
@@ -126,9 +126,9 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
         int j = this.datawatcher.getInt(16);
 
         if (flag) {
-            this.datawatcher.watch(16, Integer.valueOf(j | i));
+            this.datawatcher.watch(16, j | i);
         } else {
-            this.datawatcher.watch(16, Integer.valueOf(j & ~i));
+            this.datawatcher.watch(16, j & ~i);
         }
 
     }
@@ -229,7 +229,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
     }
 
     public void e(ItemStack itemstack) {
-        this.datawatcher.watch(22, Integer.valueOf(this.f(itemstack)));
+        this.datawatcher.watch(22, this.f(itemstack));
         this.dc();
     }
 
@@ -296,7 +296,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
     private void cY() {
         this.df();
         if (!this.R()) {
-            this.world.makeSound(this, "eating", 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+            this.world.makeSound(this, "eating", 1.0F, 1.0F + (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F);
         }
 
     }
@@ -349,7 +349,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
             }
         }
 
-        this.inventoryChest.a((IInventoryListener) this);
+        this.inventoryChest.a(this);
         this.db();
     }
 
@@ -391,10 +391,9 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
         double d1 = Double.MAX_VALUE;
         Entity entity1 = null;
         List list = this.world.a(entity, entity.getBoundingBox().a(d0, d0, d0), EntityHorse.bs);
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity2 = (Entity) iterator.next();
+        for (Object o : list) {
+            Entity entity2 = (Entity) o;
             double d2 = entity2.e(entity.locX, entity.locY, entity.locZ);
 
             if (d2 < d1) {
@@ -418,7 +417,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
     }
 
     protected Item getLoot() {
-        boolean flag = this.random.nextInt(4) == 0;
+        boolean flag = this.getRandom().nextInt(4) == 0;
         int i = this.getType();
 
         return i == 4 ? Items.BONE : (i == 3 ? (flag ? null : Items.ROTTEN_FLESH) : Items.LEATHER);
@@ -426,7 +425,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
     protected String bo() {
         this.df();
-        if (this.random.nextInt(3) == 0) {
+        if (this.getRandom().nextInt(3) == 0) {
             this.dh();
         }
 
@@ -441,7 +440,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
     protected String z() {
         this.df();
-        if (this.random.nextInt(10) == 0 && !this.bD()) {
+        if (this.getRandom().nextInt(10) == 0 && !this.bD()) {
             this.dh();
         }
 
@@ -472,7 +471,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
                 ++this.bN;
                 if (this.bN > 5 && this.bN % 3 == 0) {
                     this.makeSound("mob.horse.gallop", block_stepsound.getVolume1() * 0.15F, block_stepsound.getVolume2());
-                    if (i == 0 && this.random.nextInt(10) == 0) {
+                    if (i == 0 && this.getRandom().nextInt(10) == 0) {
                         this.makeSound("mob.horse.breathe", block_stepsound.getVolume1() * 0.6F, block_stepsound.getVolume2());
                     }
                 } else if (this.bN <= 5) {
@@ -619,7 +618,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
                 }
 
                 if (!this.isTame() && !flag) {
-                    if (itemstack != null && itemstack.a(entityhuman, (EntityLiving) this)) {
+                    if (itemstack != null && itemstack.a(entityhuman, this)) {
                         return true;
                     }
 
@@ -629,7 +628,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
                 if (!flag && this.cP() && !this.hasChest() && itemstack.getItem() == Item.getItemOf(Blocks.CHEST)) {
                     this.setHasChest(true);
-                    this.makeSound("mob.chickenplop", 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+                    this.makeSound("mob.chickenplop", 1.0F, (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F);
                     flag = true;
                     this.loadChest();
                 }
@@ -641,7 +640,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
                 if (flag) {
                     if (!entityhuman.abilities.canInstantlyBuild && --itemstack.count == 0) {
-                        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                     }
 
                     return true;
@@ -649,7 +648,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
             }
 
             if (this.cp() && this.passenger == null) {
-                if (itemstack != null && itemstack.a(entityhuman, (EntityLiving) this)) {
+                if (itemstack != null && itemstack.a(entityhuman, this)) {
                     return true;
                 } else {
                     this.i(entityhuman);
@@ -726,17 +725,17 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
     // CraftBukkit end
 
     public void m() {
-        if (this.random.nextInt(200) == 0) {
+        if (this.getRandom().nextInt(200) == 0) {
             this.de();
         }
 
         super.m();
         if (!this.world.isClientSide) {
-            if (this.random.nextInt(900) == 0 && this.deathTicks == 0) {
+            if (this.getRandom().nextInt(900) == 0 && this.deathTicks == 0) {
                 this.heal(1.0F, RegainReason.REGEN); // CraftBukkit
             }
 
-            if (!this.cy() && this.passenger == null && this.random.nextInt(300) == 0 && this.world.getType(new BlockPosition(MathHelper.floor(this.locX), MathHelper.floor(this.locY) - 1, MathHelper.floor(this.locZ))).getBlock() == Blocks.GRASS) {
+            if (!this.cy() && this.passenger == null && this.getRandom().nextInt(300) == 0 && this.world.getType(new BlockPosition(MathHelper.floor(this.locX), MathHelper.floor(this.locY) - 1, MathHelper.floor(this.locZ))).getBlock() == Blocks.GRASS) {
                 this.r(true);
             }
 
@@ -748,8 +747,8 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
             if (this.cA() && !this.cn() && !this.cy()) {
                 EntityHorse entityhorse = this.a(this, 16.0D);
 
-                if (entityhorse != null && this.h((Entity) entityhorse) > 4.0D) {
-                    this.navigation.a((Entity) entityhorse);
+                if (entityhorse != null && this.h(entityhorse) > 4.0D) {
+                    this.navigation.a(entityhorse);
                 }
             }
         }
@@ -874,7 +873,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
     }
 
     public void dropChest() {
-        this.a((Entity) this, this.inventoryChest);
+        this.a(this, this.inventoryChest);
         this.cE();
     }
 
@@ -1121,7 +1120,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
         }
 
         if (k == 0) {
-            int l = this.random.nextInt(9);
+            int l = this.getRandom().nextInt(9);
             int i1;
 
             if (l < 4) {
@@ -1129,17 +1128,17 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
             } else if (l < 8) {
                 i1 = entityhorse.getVariant() & 255;
             } else {
-                i1 = this.random.nextInt(7);
+                i1 = this.getRandom().nextInt(7);
             }
 
-            int j1 = this.random.nextInt(5);
+            int j1 = this.getRandom().nextInt(5);
 
             if (j1 < 2) {
                 i1 |= this.getVariant() & '\uff00';
             } else if (j1 < 4) {
                 i1 |= entityhorse.getVariant() & '\uff00';
             } else {
-                i1 |= this.random.nextInt(5) << 8 & '\uff00';
+                i1 |= this.getRandom().nextInt(5) << 8 & '\uff00';
             }
 
             entityhorse1.setVariant(i1);
@@ -1166,13 +1165,13 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
         if (object instanceof EntityHorse.GroupDataHorse) {
             j = ((EntityHorse.GroupDataHorse) object).a;
-            i = ((EntityHorse.GroupDataHorse) object).b & 255 | this.random.nextInt(5) << 8;
+            i = ((EntityHorse.GroupDataHorse) object).b & 255 | this.getRandom().nextInt(5) << 8;
         } else {
-            if (this.random.nextInt(10) == 0) {
+            if (this.getRandom().nextInt(10) == 0) {
                 j = 1;
             } else {
-                int k = this.random.nextInt(7);
-                int l = this.random.nextInt(5);
+                int k = this.getRandom().nextInt(7);
+                int l = this.getRandom().nextInt(5);
 
                 j = 0;
                 i = k | l << 8;
@@ -1183,7 +1182,7 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
 
         this.setType(j);
         this.setVariant(i);
-        if (this.random.nextInt(5) == 0) {
+        if (this.getRandom().nextInt(5) == 0) {
             this.setAgeRaw(-24000);
         }
 
@@ -1251,15 +1250,15 @@ public class EntityHorse extends EntityAnimal implements IInventoryListener {
     }
 
     private float di() {
-        return 15.0F + (float) this.random.nextInt(8) + (float) this.random.nextInt(9);
+        return 15.0F + (float) this.getRandom().nextInt(8) + (float) this.getRandom().nextInt(9);
     }
 
     private double dj() {
-        return 0.4000000059604645D + this.random.nextDouble() * 0.2D + this.random.nextDouble() * 0.2D + this.random.nextDouble() * 0.2D;
+        return 0.4000000059604645D + this.getRandom().nextDouble() * 0.2D + this.getRandom().nextDouble() * 0.2D + this.getRandom().nextDouble() * 0.2D;
     }
 
     private double dk() {
-        return (0.44999998807907104D + this.random.nextDouble() * 0.3D + this.random.nextDouble() * 0.3D + this.random.nextDouble() * 0.3D) * 0.25D;
+        return (0.44999998807907104D + this.getRandom().nextDouble() * 0.3D + this.getRandom().nextDouble() * 0.3D + this.getRandom().nextDouble() * 0.3D) * 0.25D;
     }
 
     public static boolean a(Item item) {
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 0ad4edb83..c283f8006 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -94,10 +94,10 @@ public abstract class EntityHuman extends EntityLiving {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) 0));
-        this.datawatcher.a(17, Float.valueOf(0.0F));
-        this.datawatcher.a(18, Integer.valueOf(0));
-        this.datawatcher.a(10, Byte.valueOf((byte) 0));
+        this.datawatcher.a(16, (byte) 0);
+        this.datawatcher.a(17, 0.0F);
+        this.datawatcher.a(18, 0);
+        this.datawatcher.a(10, (byte) 0);
     }
 
     public boolean bS() {
@@ -260,29 +260,29 @@ public abstract class EntityHuman extends EntityLiving {
 
     protected void b(ItemStack itemstack, int i) {
         if (itemstack.m() == EnumAnimation.DRINK) {
-            this.makeSound("random.drink", 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+            this.makeSound("getRandom().drink", 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
         }
 
         if (itemstack.m() == EnumAnimation.EAT) {
             for (int j = 0; j < i; ++j) {
-                Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+                Vec3D vec3d = new Vec3D(((double) this.getRandom().nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
 
                 vec3d = vec3d.a(-this.pitch * 3.1415927F / 180.0F);
                 vec3d = vec3d.b(-this.yaw * 3.1415927F / 180.0F);
-                double d0 = (double) (-this.random.nextFloat()) * 0.6D - 0.3D;
-                Vec3D vec3d1 = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+                double d0 = (double) (-this.getRandom().nextFloat()) * 0.6D - 0.3D;
+                Vec3D vec3d1 = new Vec3D(((double) this.getRandom().nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
 
                 vec3d1 = vec3d1.a(-this.pitch * 3.1415927F / 180.0F);
                 vec3d1 = vec3d1.b(-this.yaw * 3.1415927F / 180.0F);
                 vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
                 if (itemstack.usesData()) {
-                    this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, new int[] { Item.getId(itemstack.getItem()), itemstack.getData()});
+                    this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, Item.getId(itemstack.getItem()), itemstack.getData());
                 } else {
-                    this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, new int[] { Item.getId(itemstack.getItem())});
+                    this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, Item.getId(itemstack.getItem()));
                 }
             }
 
-            this.makeSound("random.eat", 0.5F + 0.5F * (float) this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            this.makeSound("getRandom().eat", 0.5F + 0.5F * (float) this.getRandom().nextInt(2), (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F);
         }
 
     }
@@ -300,7 +300,7 @@ public abstract class EntityHuman extends EntityLiving {
             if (event.isCancelled()) {
                 // Update client
                 if (this instanceof EntityPlayer) {
-                    ((EntityPlayer) this).playerConnection.sendPacket(new PacketPlayOutSetSlot((byte) 0, activeContainer.getSlot((IInventory) this.inventory, this.inventory.itemInHandIndex).index, this.g));
+                    ((EntityPlayer) this).playerConnection.sendPacket(new PacketPlayOutSetSlot((byte) 0, activeContainer.getSlot(this.inventory, this.inventory.itemInHandIndex).index, this.g));
                     // Spigot Start
                     ((EntityPlayer) this).getBukkitEntity().updateInventory();
                     ((EntityPlayer) this).getBukkitEntity().updateScaledHealth();
@@ -315,7 +315,7 @@ public abstract class EntityHuman extends EntityLiving {
 
                 // Update client
                 if (this instanceof EntityPlayer) {
-                    ((EntityPlayer) this).playerConnection.sendPacket(new PacketPlayOutSetSlot((byte) 0, activeContainer.getSlot((IInventory) this.inventory, this.inventory.itemInHandIndex).index, this.g));
+                    ((EntityPlayer) this).playerConnection.sendPacket(new PacketPlayOutSetSlot((byte) 0, activeContainer.getSlot(this.inventory, this.inventory.itemInHandIndex).index, this.g));
                 }
                 return;
             }
@@ -345,7 +345,7 @@ public abstract class EntityHuman extends EntityLiving {
 
     public void ak() {
         if (!this.world.isClientSide && this.isSneaking()) {
-            this.mount((Entity) null);
+            this.mount(null);
             this.setSneaking(false);
         } else {
             double d0 = this.locX;
@@ -433,13 +433,13 @@ public abstract class EntityHuman extends EntityLiving {
             List list = this.world.getEntities(this, axisalignedbb);
 
             if (this.ae()) { // Spigot: Add this.ae() condition (second !this.isDead near bottom of EntityLiving)
-            for (int i = 0; i < list.size(); ++i) {
-                Entity entity = (Entity) list.get(i);
+                for (Object o : list) {
+                    Entity entity = (Entity) o;
 
-                if (!entity.dead) {
-                    this.d(entity);
+                    if (!entity.dead) {
+                        this.d(entity);
+                    }
                 }
-            }
             } // Spigot 
         }
 
@@ -454,13 +454,13 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public void setScore(int i) {
-        this.datawatcher.watch(18, Integer.valueOf(i));
+        this.datawatcher.watch(18, i);
     }
 
     public void addScore(int i) {
         int j = this.getScore();
 
-        this.datawatcher.watch(18, Integer.valueOf(j + i));
+        this.datawatcher.watch(18, j + i);
     }
 
     public void die(DamageSource damagesource) {
@@ -498,7 +498,7 @@ public abstract class EntityHuman extends EntityLiving {
     public void b(Entity entity, int i) {
         this.addScore(i);
         // CraftBukkit - Get our scores instead
-        Collection<ScoreboardScore> collection = this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreboardCriteria.f, this.getName(), new java.util.ArrayList<ScoreboardScore>());
+        Collection<ScoreboardScore> collection = this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreboardCriteria.f, this.getName(), new java.util.ArrayList<>());
 
         if (entity instanceof EntityHuman) {
             this.b(StatisticList.B);
@@ -509,11 +509,7 @@ public abstract class EntityHuman extends EntityLiving {
             this.b(StatisticList.z);
         }
 
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            ScoreboardScore scoreboardscore = (ScoreboardScore) iterator.next(); // CraftBukkit - Use our scores instead
-
+        for (ScoreboardScore scoreboardscore : collection) {
             scoreboardscore.incrementScore();
         }
 
@@ -526,10 +522,8 @@ public abstract class EntityHuman extends EntityLiving {
             int i = scoreboardteam.l().b();
 
             if (i >= 0 && i < IScoreboardCriteria.i.length) {
-                Iterator iterator = this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.i[i]).iterator();
 
-                while (iterator.hasNext()) {
-                    ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+                for (ScoreboardObjective scoreboardobjective : this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.i[i])) {
                     ScoreboardScore scoreboardscore = this.getScoreboard().getPlayerScoreForObjective(entity.getName(), scoreboardobjective);
 
                     scoreboardscore.incrementScore();
@@ -577,8 +571,8 @@ public abstract class EntityHuman extends EntityLiving {
             float f1;
 
             if (flag) {
-                f = this.random.nextFloat() * 0.5F;
-                f1 = this.random.nextFloat() * 3.1415927F * 2.0F;
+                f = this.getRandom().nextFloat() * 0.5F;
+                f1 = this.getRandom().nextFloat() * 3.1415927F * 2.0F;
                 entityitem.motX = (double) (-MathHelper.sin(f1) * f);
                 entityitem.motZ = (double) (MathHelper.cos(f1) * f);
                 entityitem.motY = 0.20000000298023224D;
@@ -587,10 +581,10 @@ public abstract class EntityHuman extends EntityLiving {
                 entityitem.motX = (double) (-MathHelper.sin(this.yaw / 180.0F * 3.1415927F) * MathHelper.cos(this.pitch / 180.0F * 3.1415927F) * f);
                 entityitem.motZ = (double) (MathHelper.cos(this.yaw / 180.0F * 3.1415927F) * MathHelper.cos(this.pitch / 180.0F * 3.1415927F) * f);
                 entityitem.motY = (double) (-MathHelper.sin(this.pitch / 180.0F * 3.1415927F) * f + 0.1F);
-                f1 = this.random.nextFloat() * 3.1415927F * 2.0F;
-                f = 0.02F * this.random.nextFloat();
+                f1 = this.getRandom().nextFloat() * 3.1415927F * 2.0F;
+                f = 0.02F * this.getRandom().nextFloat();
                 entityitem.motX += Math.cos((double) f1) * (double) f;
-                entityitem.motY += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
+                entityitem.motY += (double) ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.1F);
                 entityitem.motZ += Math.sin((double) f1) * (double) f;
             }
 
@@ -700,7 +694,7 @@ public abstract class EntityHuman extends EntityLiving {
         this.expTotal = nbttagcompound.getInt("XpTotal");
         this.f = nbttagcompound.getInt("XpSeed");
         if (this.f == 0) {
-            this.f = this.random.nextInt();
+            this.f = this.getRandom().nextInt();
         }
 
         this.setScore(nbttagcompound.getInt("Score"));
@@ -789,7 +783,7 @@ public abstract class EntityHuman extends EntityLiving {
                     }
                 }
 
-                if (false && f == 0.0F) { // CraftBukkit - Don't filter out 0 damage
+                if (false) { // CraftBukkit - Don't filter out 0 damage
                     return false;
                 } else {
                     Entity entity = damagesource.getEntity();
@@ -843,9 +837,7 @@ public abstract class EntityHuman extends EntityLiving {
         ItemStack[] aitemstack = this.inventory.armor;
         int j = aitemstack.length;
 
-        for (int k = 0; k < j; ++k) {
-            ItemStack itemstack = aitemstack[k];
-
+        for (ItemStack itemstack : aitemstack) {
             if (itemstack != null) {
                 ++i;
             }
@@ -947,7 +939,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public void ca() {
-        this.inventory.setItem(this.inventory.itemInHandIndex, (ItemStack) null);
+        this.inventory.setItem(this.inventory.itemInHandIndex, null);
     }
 
     public double am() {
@@ -967,7 +959,7 @@ public abstract class EntityHuman extends EntityLiving {
                     f1 = EnchantmentManager.a(this.bA(), EnumMonsterType.UNDEFINED);
                 }
 
-                int i = b0 + EnchantmentManager.a((EntityLiving) this);
+                int i = b0 + EnchantmentManager.a(this);
 
                 if (this.isSprinting()) {
                     ++i;
@@ -1043,12 +1035,12 @@ public abstract class EntityHuman extends EntityLiving {
                         }
 
                         if (f >= 18.0F) {
-                            this.b((Statistic) AchievementList.F);
+                            this.b(AchievementList.F);
                         }
 
                         this.p(entity);
                         if (entity instanceof EntityLiving) {
-                            EnchantmentManager.a((EntityLiving) entity, (Entity) this);
+                            EnchantmentManager.a((EntityLiving) entity, this);
                         }
 
                         EnchantmentManager.b(this, entity);
@@ -1059,7 +1051,7 @@ public abstract class EntityHuman extends EntityLiving {
                             IComplex icomplex = ((EntityComplexPart) entity).owner;
 
                             if (icomplex instanceof EntityLiving) {
-                                object = (EntityLiving) icomplex;
+                                object = icomplex;
                             }
                         }
 
@@ -1144,7 +1136,7 @@ public abstract class EntityHuman extends EntityLiving {
         }
 
         if (this.au()) {
-            this.mount((Entity) null);
+            this.mount(null);
         }
 
         // CraftBukkit start - fire PlayerBedEnterEvent
@@ -1163,7 +1155,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         this.setSize(0.2F, 0.2F);
         if (this.world.isLoaded(blockposition)) {
-            EnumDirection enumdirection = (EnumDirection) this.world.getType(blockposition).get(BlockDirectional.FACING);
+            EnumDirection enumdirection = this.world.getType(blockposition).get(BlockDirectional.FACING);
             float f = 0.5F;
             float f1 = 0.5F;
 
@@ -1228,7 +1220,7 @@ public abstract class EntityHuman extends EntityLiving {
         IBlockData iblockdata = this.world.getType(this.bx);
 
         if (this.bx != null && iblockdata.getBlock() == Blocks.BED) {
-            this.world.setTypeAndData(this.bx, iblockdata.set(BlockBed.OCCUPIED, Boolean.valueOf(false)), 4);
+            this.world.setTypeAndData(this.bx, iblockdata.set(BlockBed.OCCUPIED, Boolean.FALSE), 4);
             BlockPosition blockposition = BlockBed.a(this.world, this.bx, 0);
 
             if (blockposition == null) {
@@ -1428,7 +1420,7 @@ public abstract class EntityHuman extends EntityLiving {
                     if (this.e == null) {
                         this.e = new BlockPosition(this);
                     } else if (this.e.c((double) MathHelper.floor(this.locX), (double) MathHelper.floor(this.locY), (double) MathHelper.floor(this.locZ)) >= 1000000.0D) {
-                        this.b((Statistic) AchievementList.q);
+                        this.b(AchievementList.q);
                     }
                 } else if (this.vehicle instanceof EntityBoat) {
                     this.a(StatisticList.r, i);
@@ -1465,10 +1457,10 @@ public abstract class EntityHuman extends EntityLiving {
 
     public void a(EntityLiving entityliving) {
         if (entityliving instanceof IMonster) {
-            this.b((Statistic) AchievementList.s);
+            this.b(AchievementList.s);
         }
 
-        EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(Integer.valueOf(EntityTypes.a(entityliving)));
+        EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = EntityTypes.eggInfo.get(EntityTypes.a(entityliving));
 
         if (entitytypes_monsteregginfo != null) {
             this.b(entitytypes_monsteregginfo.killEntityStatistic);
@@ -1516,7 +1508,7 @@ public abstract class EntityHuman extends EntityLiving {
             this.expTotal = 0;
         }
 
-        this.f = this.random.nextInt();
+        this.f = this.getRandom().nextInt();
     }
 
     public void levelDown(int i) {
@@ -1530,7 +1522,7 @@ public abstract class EntityHuman extends EntityLiving {
         if (i > 0 && this.expLevel % 5 == 0 && (float) this.i < (float) this.ticksLived - 100.0F) {
             float f = this.expLevel > 30 ? 1.0F : (float) this.expLevel / 30.0F;
 
-            this.world.makeSound(this, "random.levelup", f * 0.75F, 1.0F);
+            this.world.makeSound(this, "getRandom().levelup", f * 0.75F, 1.0F);
             this.i = this.ticksLived;
         }
 
@@ -1625,7 +1617,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         this.f = entityhuman.f;
         this.enderChest = entityhuman.enderChest;
-        this.getDataWatcher().watch(10, Byte.valueOf(entityhuman.getDataWatcher().getByte(10)));
+        this.getDataWatcher().watch(10, entityhuman.getDataWatcher().getByte(10));
     }
 
     protected boolean s_() {
@@ -1703,7 +1695,7 @@ public abstract class EntityHuman extends EntityLiving {
             f = 0.0F;
         }
 
-        this.getDataWatcher().watch(17, Float.valueOf(f));
+        this.getDataWatcher().watch(17, f);
     }
 
     public float getAbsorptionHearts() {
@@ -1779,39 +1771,35 @@ public abstract class EntityHuman extends EntityLiving {
         static {
             try {
                 EntityHuman.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityHuman.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityHuman.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityHuman.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
     }
 
-    public static enum EnumBedResult {
+    public enum EnumBedResult {
 
         OK, NOT_POSSIBLE_HERE, NOT_POSSIBLE_NOW, TOO_FAR_AWAY, OTHER_PROBLEM, NOT_SAFE;
 
-        private EnumBedResult() {}
+        EnumBedResult() {}
     }
 
-    public static enum EnumChatVisibility {
+    public enum EnumChatVisibility {
 
         FULL(0, "options.chat.visibility.full"), SYSTEM(1, "options.chat.visibility.system"), HIDDEN(2, "options.chat.visibility.hidden");
 
@@ -1819,7 +1807,7 @@ public abstract class EntityHuman extends EntityLiving {
         private final int e;
         private final String f;
 
-        private EnumChatVisibility(int i, String s) {
+        EnumChatVisibility(int i, String s) {
             this.e = i;
             this.f = s;
         }
@@ -1836,10 +1824,8 @@ public abstract class EntityHuman extends EntityLiving {
             EntityHuman.EnumChatVisibility[] aentityhuman_enumchatvisibility = values();
             int i = aentityhuman_enumchatvisibility.length;
 
-            for (int j = 0; j < i; ++j) {
-                EntityHuman.EnumChatVisibility entityhuman_enumchatvisibility = aentityhuman_enumchatvisibility[j];
-
-                EntityHuman.EnumChatVisibility.d[entityhuman_enumchatvisibility.e] = entityhuman_enumchatvisibility;
+            for (EnumChatVisibility entityhuman_enumchatvisibility : aentityhuman_enumchatvisibility) {
+                EnumChatVisibility.d[entityhuman_enumchatvisibility.e] = entityhuman_enumchatvisibility;
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index b82b98473..f2fa8e87d 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -130,7 +130,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(15, Byte.valueOf((byte) 0));
+        this.datawatcher.a(15, (byte) 0);
     }
 
     public int w() {
@@ -149,7 +149,7 @@ public abstract class EntityInsentient extends EntityLiving {
     public void K() {
         super.K();
         this.world.methodProfiler.a("mobBaseTick");
-        if (this.isAlive() && this.random.nextInt(1000) < this.a_++) {
+        if (this.isAlive() && this.getRandom().nextInt(1000) < this.a_++) {
             this.a_ = -this.w();
             this.x();
         }
@@ -164,7 +164,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
             for (int j = 0; j < aitemstack.length; ++j) {
                 if (aitemstack[j] != null && this.dropChances[j] <= 1.0F) {
-                    i += 1 + this.random.nextInt(3);
+                    i += 1 + this.getRandom().nextInt(3);
                 }
             }
 
@@ -177,12 +177,12 @@ public abstract class EntityInsentient extends EntityLiving {
     public void y() {
         if (this.world.isClientSide) {
             for (int i = 0; i < 20; ++i) {
-                double d0 = this.random.nextGaussian() * 0.02D;
-                double d1 = this.random.nextGaussian() * 0.02D;
-                double d2 = this.random.nextGaussian() * 0.02D;
+                double d0 = this.getRandom().nextGaussian() * 0.02D;
+                double d1 = this.getRandom().nextGaussian() * 0.02D;
+                double d2 = this.getRandom().nextGaussian() * 0.02D;
                 double d3 = 10.0D;
 
-                this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width - d0 * d3, this.locY + (double) (this.random.nextFloat() * this.length) - d1 * d3, this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width - d2 * d3, d0, d1, d2, new int[0]);
+                this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width - d0 * d3, this.locY + (double) (this.getRandom().nextFloat() * this.length) - d1 * d3, this.locZ + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width - d2 * d3, d0, d1, d2);
             }
         } else {
             this.world.broadcastEntityEffect(this, (byte) 20);
@@ -216,10 +216,10 @@ public abstract class EntityInsentient extends EntityLiving {
         Item item = this.getLoot();
 
         if (item != null) {
-            int j = this.random.nextInt(3);
+            int j = this.getRandom().nextInt(3);
 
             if (i > 0) {
-                j += this.random.nextInt(i + 1);
+                j += this.getRandom().nextInt(i + 1);
             }
 
             for (int k = 0; k < j; ++k) {
@@ -243,10 +243,10 @@ public abstract class EntityInsentient extends EntityLiving {
 
         NBTTagCompound nbttagcompound1;
 
-        for (int i = 0; i < this.equipment.length; ++i) {
+        for (ItemStack itemStack : this.equipment) {
             nbttagcompound1 = new NBTTagCompound();
-            if (this.equipment[i] != null) {
-                this.equipment[i].save(nbttagcompound1);
+            if (itemStack != null) {
+                itemStack.save(nbttagcompound1);
             }
 
             nbttaglist.add(nbttagcompound1);
@@ -255,8 +255,8 @@ public abstract class EntityInsentient extends EntityLiving {
         nbttagcompound.set("Equipment", nbttaglist);
         NBTTagList nbttaglist1 = new NBTTagList();
 
-        for (int j = 0; j < this.dropChances.length; ++j) {
-            nbttaglist1.add(new NBTTagFloat(this.dropChances[j]));
+        for (float dropChance : this.dropChances) {
+            nbttaglist1.add(new NBTTagFloat(dropChance));
         }
 
         nbttagcompound.set("DropChances", nbttaglist1);
@@ -340,10 +340,9 @@ public abstract class EntityInsentient extends EntityLiving {
         this.world.methodProfiler.a("looting");
         if (!this.world.isClientSide && this.bY() && !this.aP && this.world.getGameRules().getBoolean("mobGriefing")) {
             List list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                EntityItem entityitem = (EntityItem) iterator.next();
+            for (Object o : list) {
+                EntityItem entityitem = (EntityItem) o;
 
                 if (!entityitem.dead && entityitem.getItemStack() != null && !entityitem.s()) {
                     this.a(entityitem);
@@ -397,7 +396,7 @@ public abstract class EntityInsentient extends EntityLiving {
             }
 
             if (flag && this.a(itemstack)) {
-                if (itemstack1 != null && this.random.nextFloat() - 0.1F < this.dropChances[i]) {
+                if (itemstack1 != null && this.getRandom().nextFloat() - 0.1F < this.dropChances[i]) {
                     this.a(itemstack1, 0.0F);
                 }
 
@@ -405,7 +404,7 @@ public abstract class EntityInsentient extends EntityLiving {
                     EntityHuman entityhuman = this.world.a(entityitem.n());
 
                     if (entityhuman != null) {
-                        entityhuman.b((Statistic) AchievementList.x);
+                        entityhuman.b(AchievementList.x);
                     }
                 }
 
@@ -443,7 +442,7 @@ public abstract class EntityInsentient extends EntityLiving {
                     this.die();
                 }
 
-                if (this.ticksFarFromPlayer > 600 && this.random.nextInt(800) == 0 && d3 > this.world.paperSpigotConfig.softDespawnDistance) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distance
+                if (this.ticksFarFromPlayer > 600 && this.getRandom().nextInt(800) == 0 && d3 > this.world.paperSpigotConfig.softDespawnDistance) { // CraftBukkit - remove isTypeNotPersistent() check // PaperSpigot - custom despawn distance
                     this.die();
                 } else if (d3 < this.world.paperSpigotConfig.softDespawnDistance) { // PaperSpigot - custom despawn distances
                     this.ticksFarFromPlayer = 0;
@@ -542,7 +541,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public boolean canSpawn() {
-        return this.world.a(this.getBoundingBox(), (Entity) this) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && !this.world.containsLiquid(this.getBoundingBox());
+        return this.world.a(this.getBoundingBox(), this) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && !this.world.containsLiquid(this.getBoundingBox());
     }
 
     public int bV() {
@@ -589,10 +588,10 @@ public abstract class EntityInsentient extends EntityLiving {
             ItemStack itemstack = this.getEquipment(j);
             boolean flag1 = this.dropChances[j] > 1.0F;
 
-            if (itemstack != null && (flag || flag1) && this.random.nextFloat() - (float) i * 0.01F < this.dropChances[j]) {
+            if (itemstack != null && (flag || flag1) && this.getRandom().nextFloat() - (float) i * 0.01F < this.dropChances[j]) {
                 if (!flag1 && itemstack.e()) {
                     int k = Math.max(itemstack.j() - 25, 1);
-                    int l = itemstack.j() - this.random.nextInt(this.random.nextInt(k) + 1);
+                    int l = itemstack.j() - this.getRandom().nextInt(this.getRandom().nextInt(k) + 1);
 
                     if (l > k) {
                         l = k;
@@ -612,26 +611,26 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     protected void a(DifficultyDamageScaler difficultydamagescaler) {
-        if (this.random.nextFloat() < 0.15F * difficultydamagescaler.c()) {
-            int i = this.random.nextInt(2);
+        if (this.getRandom().nextFloat() < 0.15F * difficultydamagescaler.c()) {
+            int i = this.getRandom().nextInt(2);
             float f = this.world.getDifficulty() == EnumDifficulty.HARD ? 0.1F : 0.25F;
 
-            if (this.random.nextFloat() < 0.095F) {
+            if (this.getRandom().nextFloat() < 0.095F) {
                 ++i;
             }
 
-            if (this.random.nextFloat() < 0.095F) {
+            if (this.getRandom().nextFloat() < 0.095F) {
                 ++i;
             }
 
-            if (this.random.nextFloat() < 0.095F) {
+            if (this.getRandom().nextFloat() < 0.095F) {
                 ++i;
             }
 
             for (int j = 3; j >= 0; --j) {
                 ItemStack itemstack = this.q(j);
 
-                if (j < 3 && this.random.nextFloat() < f) {
+                if (j < 3 && this.getRandom().nextFloat() < f) {
                     break;
                 }
 
@@ -733,22 +732,22 @@ public abstract class EntityInsentient extends EntityLiving {
     protected void b(DifficultyDamageScaler difficultydamagescaler) {
         float f = difficultydamagescaler.c();
 
-        if (this.bA() != null && this.random.nextFloat() < 0.25F * f) {
-            EnchantmentManager.a(this.random, this.bA(), (int) (5.0F + f * (float) this.random.nextInt(18)));
+        if (this.bA() != null && this.getRandom().nextFloat() < 0.25F * f) {
+            EnchantmentManager.a(this.getRandom(), this.bA(), (int) (5.0F + f * (float) this.getRandom().nextInt(18)));
         }
 
         for (int i = 0; i < 4; ++i) {
             ItemStack itemstack = this.q(i);
 
-            if (itemstack != null && this.random.nextFloat() < 0.5F * f) {
-                EnchantmentManager.a(this.random, itemstack, (int) (5.0F + f * (float) this.random.nextInt(18)));
+            if (itemstack != null && this.getRandom().nextFloat() < 0.5F * f) {
+                EnchantmentManager.a(this.getRandom(), itemstack, (int) (5.0F + f * (float) this.getRandom().nextInt(18)));
             }
         }
 
     }
 
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, GroupDataEntity groupdataentity) {
-        this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).b(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, 1));
+        this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).b(new AttributeModifier("Random spawn bonus", this.getRandom().nextGaussian() * 0.05D, 1));
         return groupdataentity;
     }
 
@@ -850,7 +849,7 @@ public abstract class EntityInsentient extends EntityLiving {
             }
 
             if (!this.world.isClientSide && flag && this.world instanceof WorldServer) {
-                ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(1, this, (Entity) null)));
+                ((WorldServer) this.world).getTracker().a(this, new PacketPlayOutAttachEntity(1, this, null));
             }
         }
 
@@ -872,7 +871,7 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bo = true;
         this.bp = entity;
         if (!this.world.isClientSide && flag && this.world instanceof WorldServer) {
-            ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(1, this, this.bp)));
+            ((WorldServer) this.world).getTracker().a(this, new PacketPlayOutAttachEntity(1, this, this.bp));
         }
 
     }
@@ -882,10 +881,9 @@ public abstract class EntityInsentient extends EntityLiving {
             if (this.bq.hasKeyOfType("UUIDMost", 4) && this.bq.hasKeyOfType("UUIDLeast", 4)) {
                 UUID uuid = new UUID(this.bq.getLong("UUIDMost"), this.bq.getLong("UUIDLeast"));
                 List list = this.world.a(EntityLiving.class, this.getBoundingBox().grow(10.0D, 10.0D, 10.0D));
-                Iterator iterator = list.iterator();
 
-                while (iterator.hasNext()) {
-                    EntityLiving entityliving = (EntityLiving) iterator.next();
+                for (Object o : list) {
+                    EntityLiving entityliving = (EntityLiving) o;
 
                     if (entityliving.getUniqueID().equals(uuid)) {
                         this.bp = entityliving;
@@ -935,17 +933,17 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public void k(boolean flag) {
-        this.datawatcher.watch(15, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.datawatcher.watch(15, (byte) (flag ? 1 : 0));
     }
 
     public boolean ce() {
         return this.datawatcher.getByte(15) != 0;
     }
 
-    public static enum EnumEntityPositionType {
+    public enum EnumEntityPositionType {
 
         ON_GROUND, IN_AIR, IN_WATER;
 
-        private EnumEntityPositionType() {}
+        EnumEntityPositionType() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityIronGolem.java b/src/main/java/net/minecraft/server/EntityIronGolem.java
index ba09cb2cc..969fa89ec 100644
--- a/src/main/java/net/minecraft/server/EntityIronGolem.java
+++ b/src/main/java/net/minecraft/server/EntityIronGolem.java
@@ -22,18 +22,18 @@ public class EntityIronGolem extends EntityGolem {
         this.goalSelector.a(7, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 6.0F));
         this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalDefendVillage(this));
-        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(3, new EntityIronGolem.PathfinderGoalNearestGolemTarget(this, EntityInsentient.class, 10, false, true, IMonster.e));
     }
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) 0));
+        this.datawatcher.a(16, (byte) 0);
     }
 
     protected void E() {
         if (--this.b <= 0) {
-            this.b = 70 + this.random.nextInt(50);
+            this.b = 70 + this.getRandom().nextInt(50);
             this.a = this.world.ae().getClosestVillage(new BlockPosition(this), 32);
             if (this.a == null) {
                 this.cj();
@@ -75,7 +75,7 @@ public class EntityIronGolem extends EntityGolem {
             --this.bm;
         }
 
-        if (this.motX * this.motX + this.motZ * this.motZ > 2.500000277905201E-7D && this.random.nextInt(5) == 0) {
+        if (this.motX * this.motX + this.motZ * this.motZ > 2.500000277905201E-7D && this.getRandom().nextInt(5) == 0) {
             int i = MathHelper.floor(this.locX);
             int j = MathHelper.floor(this.locY - 0.20000000298023224D);
             int k = MathHelper.floor(this.locZ);
@@ -83,7 +83,7 @@ public class EntityIronGolem extends EntityGolem {
             Block block = iblockdata.getBlock();
 
             if (block.getMaterial() != Material.AIR) {
-                this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, 4.0D * ((double) this.random.nextFloat() - 0.5D), 0.5D, ((double) this.random.nextFloat() - 0.5D) * 4.0D, new int[] { Block.getCombinedId(iblockdata)});
+                this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.getRandom().nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.getRandom().nextFloat() - 0.5D) * (double) this.width, 4.0D * ((double) this.getRandom().nextFloat() - 0.5D), 0.5D, ((double) this.getRandom().nextFloat() - 0.5D) * 4.0D, Block.getCombinedId(iblockdata));
             }
         }
 
@@ -106,11 +106,11 @@ public class EntityIronGolem extends EntityGolem {
     public boolean r(Entity entity) {
         this.c = 10;
         this.world.broadcastEntityEffect(this, (byte) 4);
-        boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) (7 + this.random.nextInt(15)));
+        boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) (7 + this.getRandom().nextInt(15)));
 
         if (flag) {
             entity.motY += 0.4000000059604645D;
-            this.a((EntityLiving) this, entity);
+            this.a(this, entity);
         }
 
         this.makeSound("mob.irongolem.throw", 1.0F, 1.0F);
@@ -139,7 +139,7 @@ public class EntityIronGolem extends EntityGolem {
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(3);
+        int j = this.getRandom().nextInt(3);
 
         int k;
 
@@ -147,7 +147,7 @@ public class EntityIronGolem extends EntityGolem {
             this.a(Item.getItemOf(Blocks.RED_FLOWER), 1, (float) BlockFlowers.EnumFlowerVarient.POPPY.b());
         }
 
-        k = 3 + this.random.nextInt(3);
+        k = 3 + this.getRandom().nextInt(3);
 
         for (int l = 0; l < k; ++l) {
             this.a(Items.IRON_INGOT, 1);
@@ -167,9 +167,9 @@ public class EntityIronGolem extends EntityGolem {
         byte b0 = this.datawatcher.getByte(16);
 
         if (flag) {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 | 1)));
+            this.datawatcher.watch(16, (byte) (b0 | 1));
         } else {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 & -2)));
+            this.datawatcher.watch(16, (byte) (b0 & -2));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 34a51a5dd..70ebf386b 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -85,9 +85,9 @@ public class EntityItem extends Entity implements HopperPusher {
             if (flag || this.ticksLived % 25 == 0) {
                 if (this.world.getType(new BlockPosition(this)).getBlock().getMaterial() == Material.LAVA) {
                     this.motY = 0.20000000298023224D;
-                    this.motX = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
-                    this.motZ = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
-                    this.makeSound("random.fizz", 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
+                    this.motX = (double) ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F);
+                    this.motZ = (double) ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F);
+                    this.makeSound("random.fizz", 0.4F, 2.0F + this.getRandom().nextFloat() * 0.4F);
                 }
 
                 if (!this.world.isClientSide) {
@@ -156,12 +156,9 @@ public class EntityItem extends Entity implements HopperPusher {
     private void w() {
         // Spigot start
         double radius = world.spigotConfig.itemMerge;
-        Iterator iterator = this.world.a(EntityItem.class, this.getBoundingBox().grow(radius, radius, radius)).iterator();
         // Spigot end
 
-        while (iterator.hasNext()) {
-            EntityItem entityitem = (EntityItem) iterator.next();
-
+        for (EntityItem entityitem : this.world.a(EntityItem.class, this.getBoundingBox().grow(radius, radius, radius))) {
             this.a(entityitem);
         }
 
@@ -217,7 +214,7 @@ public class EntityItem extends Entity implements HopperPusher {
     }
 
     public boolean W() {
-        if (this.world.a(this.getBoundingBox(), Material.WATER, (Entity) this)) {
+        if (this.world.a(this.getBoundingBox(), Material.WATER, this)) {
             if (!this.inWater && !this.justCreated) {
                 this.X();
             }
@@ -335,35 +332,35 @@ public class EntityItem extends Entity implements HopperPusher {
 
             if (this.pickupDelay == 0 && (this.g == null || 6000 - this.age <= 200 || this.g.equals(entityhuman.getName())) && entityhuman.inventory.pickup(itemstack)) {
                 if (itemstack.getItem() == Item.getItemOf(Blocks.LOG)) {
-                    entityhuman.b((Statistic) AchievementList.g);
+                    entityhuman.b(AchievementList.g);
                 }
 
                 if (itemstack.getItem() == Item.getItemOf(Blocks.LOG2)) {
-                    entityhuman.b((Statistic) AchievementList.g);
+                    entityhuman.b(AchievementList.g);
                 }
 
                 if (itemstack.getItem() == Items.LEATHER) {
-                    entityhuman.b((Statistic) AchievementList.t);
+                    entityhuman.b(AchievementList.t);
                 }
 
                 if (itemstack.getItem() == Items.DIAMOND) {
-                    entityhuman.b((Statistic) AchievementList.w);
+                    entityhuman.b(AchievementList.w);
                 }
 
                 if (itemstack.getItem() == Items.BLAZE_ROD) {
-                    entityhuman.b((Statistic) AchievementList.A);
+                    entityhuman.b(AchievementList.A);
                 }
 
                 if (itemstack.getItem() == Items.DIAMOND && this.n() != null) {
                     EntityHuman entityhuman1 = this.world.a(this.n());
 
                     if (entityhuman1 != null && entityhuman1 != entityhuman) {
-                        entityhuman1.b((Statistic) AchievementList.x);
+                        entityhuman1.b(AchievementList.x);
                     }
                 }
 
                 if (!this.R()) {
-                    this.world.makeSound(entityhuman, "random.pop", 0.2F, ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+                    this.world.makeSound(entityhuman, "random.pop", 0.2F, ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.7F + 1.0F) * 2.0F);
                 }
 
                 entityhuman.receive(this, i);
diff --git a/src/main/java/net/minecraft/server/EntityItemFrame.java b/src/main/java/net/minecraft/server/EntityItemFrame.java
index 10085675e..ec5f3c0fd 100644
--- a/src/main/java/net/minecraft/server/EntityItemFrame.java
+++ b/src/main/java/net/minecraft/server/EntityItemFrame.java
@@ -18,7 +18,7 @@ public class EntityItemFrame extends EntityHanging {
 
     protected void h() {
         this.getDataWatcher().add(8, 5);
-        this.getDataWatcher().a(9, Byte.valueOf((byte) 0));
+        this.getDataWatcher().a(9, (byte) 0);
     }
 
     public float ao() {
@@ -36,7 +36,7 @@ public class EntityItemFrame extends EntityHanging {
                 }
                 // CraftBukkit end
                 this.a(damagesource.getEntity(), false);
-                this.setItem((ItemStack) null);
+                this.setItem(null);
             }
 
             return true;
@@ -74,7 +74,7 @@ public class EntityItemFrame extends EntityHanging {
                 this.a(new ItemStack(Items.ITEM_FRAME), 0.0F);
             }
 
-            if (itemstack != null && this.random.nextFloat() < this.c) {
+            if (itemstack != null && this.getRandom().nextFloat() < this.c) {
                 itemstack = itemstack.cloneItemStack();
                 this.b(itemstack);
                 this.a(itemstack, 0.0F);
@@ -127,7 +127,7 @@ public class EntityItemFrame extends EntityHanging {
     }
 
     private void setRotation(int i, boolean flag) {
-        this.getDataWatcher().watch(9, Byte.valueOf((byte) (i % 8)));
+        this.getDataWatcher().watch(9, (byte) (i % 8));
         if (flag && this.blockPosition != null) {
             this.world.updateAdjacentComparators(this.blockPosition, Blocks.AIR);
         }
@@ -169,7 +169,7 @@ public class EntityItemFrame extends EntityHanging {
             if (itemstack != null && !this.world.isClientSide) {
                 this.setItem(itemstack);
                 if (!entityhuman.abilities.canInstantlyBuild && --itemstack.count <= 0) {
-                    entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                    entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                 }
             }
         } else if (!this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntityLeash.java b/src/main/java/net/minecraft/server/EntityLeash.java
index 492cd8674..20cf2d593 100644
--- a/src/main/java/net/minecraft/server/EntityLeash.java
+++ b/src/main/java/net/minecraft/server/EntityLeash.java
@@ -82,7 +82,7 @@ public class EntityLeash extends EntityHanging {
             // this.die();
             boolean die = true;
             // CraftBukkit end
-            if (true || entityhuman.abilities.canInstantlyBuild) { // CraftBukkit - Process for non-creative as well
+            if (true) { // CraftBukkit - Process for non-creative as well
                 d0 = 7.0D;
                 list = this.world.a(EntityInsentient.class, new AxisAlignedBB(this.locX - d0, this.locY - d0, this.locZ - d0, this.locX + d0, this.locY + d0, this.locZ + d0));
                 iterator = list.iterator();
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index 286fdef9a..68105baf4 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -28,8 +28,8 @@ public class EntityLightning extends EntityWeather {
 
         this.setPositionRotation(d0, d1, d2, 0.0F, 0.0F);
         this.lifeTicks = 2;
-        this.a = this.random.nextLong();
-        this.c = this.random.nextInt(3) + 1;
+        this.a = this.getRandom().nextLong();
+        this.c = this.getRandom().nextInt(3) + 1;
         BlockPosition blockposition = new BlockPosition(this);
 
         // CraftBukkit - add "!isEffect"
@@ -43,7 +43,7 @@ public class EntityLightning extends EntityWeather {
             }
 
             for (int i = 0; i < 4; ++i) {
-                BlockPosition blockposition1 = blockposition.a(this.random.nextInt(3) - 1, this.random.nextInt(3) - 1, this.random.nextInt(3) - 1);
+                BlockPosition blockposition1 = blockposition.a(this.getRandom().nextInt(3) - 1, this.getRandom().nextInt(3) - 1, this.getRandom().nextInt(3) - 1);
 
                 if (world.getType(blockposition1).getBlock().getMaterial() == Material.AIR && Blocks.FIRE.canPlace(world, blockposition1)) {
                     // CraftBukkit start
@@ -68,9 +68,9 @@ public class EntityLightning extends EntityWeather {
         super.t_();
         if (!isSilent && this.lifeTicks == 2) { // Spigot
             // CraftBukkit start - Use relative location for far away sounds
-            //this.world.makeSound(this.locX, this.locY, this.locZ, "ambient.weather.thunder", 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
-            float pitch = 0.8F + this.random.nextFloat() * 0.2F;
-            int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
+            //this.world.makeSound(this.locX, this.locY, this.locZ, "ambient.weather.thunder", 10000.0F, 0.8F + this.getRandom().nextFloat() * 0.2F);
+            float pitch = 0.8F + this.getRandom().nextFloat() * 0.2F;
+            int viewDistance = this.world.getServer().getViewDistance() * 16;
             for (EntityPlayer player : (List<EntityPlayer>) (List) this.world.players) {
                 double deltaX = this.locX - player.locX;
                 double deltaZ = this.locZ - player.locZ;
@@ -85,17 +85,17 @@ public class EntityLightning extends EntityWeather {
                 }
             }
             // CraftBukkit end
-            this.world.makeSound(this.locX, this.locY, this.locZ, "random.explode", 2.0F, 0.5F + this.random.nextFloat() * 0.2F);
+            this.world.makeSound(this.locX, this.locY, this.locZ, "random.explode", 2.0F, 0.5F + this.getRandom().nextFloat() * 0.2F);
         }
 
         --this.lifeTicks;
         if (this.lifeTicks < 0) {
             if (this.c == 0) {
                 this.die();
-            } else if (this.lifeTicks < -this.random.nextInt(10)) {
+            } else if (this.lifeTicks < -this.getRandom().nextInt(10)) {
                 --this.c;
                 this.lifeTicks = 1;
-                this.a = this.random.nextLong();
+                this.a = this.getRandom().nextLong();
                 BlockPosition blockposition = new BlockPosition(this);
 
                 // CraftBukkit - add "!isEffect"
@@ -116,8 +116,8 @@ public class EntityLightning extends EntityWeather {
                 double d0 = 3.0D;
                 List list = this.world.getEntities(this, new AxisAlignedBB(this.locX - d0, this.locY - d0, this.locZ - d0, this.locX + d0, this.locY + 6.0D + d0, this.locZ + d0));
 
-                for (int i = 0; i < list.size(); ++i) {
-                    Entity entity = (Entity) list.get(i);
+                for (Object o : list) {
+                    Entity entity = (Entity) o;
 
                     entity.onLightningStrike(this);
                 }
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 12257ad24..ac82840dd 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -1,19 +1,11 @@
 package net.minecraft.server;
 
+import com.google.common.base.Function;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
-import com.google.common.collect.Maps;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.UUID;
-
-// CraftBukkit start
-import java.util.ArrayList;
-import com.google.common.base.Function;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Vehicle;
@@ -21,13 +13,17 @@ import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
 import org.bukkit.event.entity.EntityRegainHealthEvent;
 import org.bukkit.event.vehicle.VehicleExitEvent;
-// CraftBukkit end
+import org.spigotmc.event.entity.EntityDismountEvent;
 
-import co.aikar.timings.SpigotTimings; // Spigot
+import java.util.*;
+
+// CraftBukkit start
+// CraftBukkit end
+// PaperSpigot start
 
+// CraftBukkit start
+// CraftBukkit end
 // PaperSpigot start
-import org.bukkit.Bukkit;
-import org.spigotmc.event.entity.EntityDismountEvent;
 // PaperSpigot end
 
 public abstract class EntityLiving extends Entity {
@@ -93,10 +89,10 @@ public abstract class EntityLiving extends Entity {
     public int expToDrop;
     public int maxAirTicks = 300;
     ArrayList<org.bukkit.inventory.ItemStack> drops = null;
+
     // CraftBukkit end
     // Spigot start
-    public void inactiveTick()
-    {
+    public void inactiveTick() {
         super.inactiveTick();
         ++this.ticksFarFromPlayer; // Above all the floats
     }
@@ -121,10 +117,10 @@ public abstract class EntityLiving extends Entity {
     }
 
     protected void h() {
-        this.datawatcher.a(7, Integer.valueOf(0));
-        this.datawatcher.a(8, Byte.valueOf((byte) 0));
-        this.datawatcher.a(9, Byte.valueOf((byte) 0));
-        this.datawatcher.a(6, Float.valueOf(1.0F));
+        this.datawatcher.a(7, 0);
+        this.datawatcher.a(8, (byte) 0);
+        this.datawatcher.a(9, (byte) 0);
+        this.datawatcher.a(6, 1.0F);
     }
 
     protected void initAttributes() {
@@ -154,9 +150,9 @@ public abstract class EntityLiving extends Entity {
 
                 // CraftBukkit start - visiblity api
                 if (this instanceof EntityPlayer) {
-                    ((WorldServer) this.world).sendParticles((EntityPlayer) this, EnumParticle.BLOCK_DUST, false, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
+                    ((WorldServer) this.world).sendParticles((EntityPlayer) this, EnumParticle.BLOCK_DUST, false, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, Block.getCombinedId(iblockdata));
                 } else {
-                    ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
+                    ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, Block.getCombinedId(iblockdata));
                 }
                 // CraftBukkit end
             }
@@ -179,7 +175,7 @@ public abstract class EntityLiving extends Entity {
             if (this.inBlock()) {
                 this.damageEntity(DamageSource.STUCK, 1.0F);
             } else if (flag && !this.world.getWorldBorder().a(this.getBoundingBox())) {
-                double d0 = this.world.getWorldBorder().a((Entity) this) + this.world.getWorldBorder().getDamageBuffer();
+                double d0 = this.world.getWorldBorder().a(this) + this.world.getWorldBorder().getDamageBuffer();
 
                 if (d0 < 0.0D) {
                     this.damageEntity(DamageSource.STUCK, (float) Math.max(1, MathHelper.floor(-d0 * this.world.getWorldBorder().getDamageAmount())));
@@ -201,11 +197,11 @@ public abstract class EntityLiving extends Entity {
                         this.setAirTicks(0);
 
                         for (int i = 0; i < 8; ++i) {
-                            float f = this.random.nextFloat() - this.random.nextFloat();
-                            float f1 = this.random.nextFloat() - this.random.nextFloat();
-                            float f2 = this.random.nextFloat() - this.random.nextFloat();
+                            float f = this.getRandom().nextFloat() - this.getRandom().nextFloat();
+                            float f1 = this.getRandom().nextFloat() - this.getRandom().nextFloat();
+                            float f2 = this.getRandom().nextFloat() - this.getRandom().nextFloat();
 
-                            this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f, this.locY + (double) f1, this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
+                            this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f, this.locY + (double) f1, this.locZ + (double) f2, this.motX, this.motY, this.motZ);
                         }
 
                         this.damageEntity(DamageSource.DROWN, 2.0F);
@@ -213,7 +209,7 @@ public abstract class EntityLiving extends Entity {
                 }
 
                 if (!this.world.isClientSide && this.au() && this.vehicle instanceof EntityLiving) {
-                    this.mount((Entity) null);
+                    this.mount(null);
                 }
             } else {
                 // CraftBukkit start - Only set if needed to work around a DataWatcher inefficiency
@@ -302,11 +298,11 @@ public abstract class EntityLiving extends Entity {
             this.die();
 
             for (i = 0; i < 20; ++i) {
-                double d0 = this.random.nextGaussian() * 0.02D;
-                double d1 = this.random.nextGaussian() * 0.02D;
-                double d2 = this.random.nextGaussian() * 0.02D;
+                double d0 = this.getRandom().nextGaussian() * 0.02D;
+                double d1 = this.getRandom().nextGaussian() * 0.02D;
+                double d2 = this.getRandom().nextGaussian() * 0.02D;
 
-                this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2, new int[0]);
+                this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + (double) (this.getRandom().nextFloat() * this.length), this.locZ + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2);
             }
         }
 
@@ -319,7 +315,7 @@ public abstract class EntityLiving extends Entity {
     protected int j(int i) {
         int j = EnchantmentManager.getOxygenEnchantmentLevel(this);
 
-        return j > 0 && this.random.nextInt(j + 1) > 0 ? i : i - 1;
+        return j > 0 && this.getRandom().nextInt(j + 1) > 0 ? i : i - 1;
     }
 
     protected int getExpValue(EntityHuman entityhuman) {
@@ -331,7 +327,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public Random bc() {
-        return this.random;
+        return this.getRandom();
     }
 
     public EntityLiving getLastDamager() {
@@ -402,11 +398,8 @@ public abstract class EntityLiving extends Entity {
 
         if (!this.effects.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
-            Iterator iterator = this.effects.values().iterator();
-
-            while (iterator.hasNext()) {
-                MobEffect mobeffect = (MobEffect) iterator.next();
 
+            for (MobEffect mobeffect : this.effects.values()) {
                 nbttaglist.add(mobeffect.a(new NBTTagCompound()));
             }
 
@@ -429,7 +422,7 @@ public abstract class EntityLiving extends Entity {
                 MobEffect mobeffect = MobEffect.b(nbttagcompound1);
 
                 if (mobeffect != null) {
-                    this.effects.put(Integer.valueOf(mobeffect.getEffectId()), mobeffect);
+                    this.effects.put(mobeffect.getEffectId(), mobeffect);
                 }
             }
         }
@@ -475,7 +468,7 @@ public abstract class EntityLiving extends Entity {
         isTickingEffects = true; // CraftBukkit
         while (iterator.hasNext()) {
             Integer integer = (Integer) iterator.next();
-            MobEffect mobeffect = (MobEffect) this.effects.get(integer);
+            MobEffect mobeffect = this.effects.get(integer);
 
             if (!mobeffect.tick(this)) {
                 if (!this.world.isClientSide) {
@@ -512,21 +505,21 @@ public abstract class EntityLiving extends Entity {
             boolean flag1 = false;
 
             if (!this.isInvisible()) {
-                flag1 = this.random.nextBoolean();
+                flag1 = this.getRandom().nextBoolean();
             } else {
-                flag1 = this.random.nextInt(15) == 0;
+                flag1 = this.getRandom().nextInt(15) == 0;
             }
 
             if (flag) {
-                flag1 &= this.random.nextInt(5) == 0;
+                flag1 &= this.getRandom().nextInt(5) == 0;
             }
 
             if (flag1 && i > 0) {
                 double d0 = (double) (i >> 16 & 255) / 255.0D;
                 double d1 = (double) (i >> 8 & 255) / 255.0D;
-                double d2 = (double) (i >> 0 & 255) / 255.0D;
+                double d2 = (double) (i & 255) / 255.0D;
 
-                this.world.addParticle(flag ? EnumParticle.SPELL_MOB_AMBIENT : EnumParticle.SPELL_MOB, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, d0, d1, d2, new int[0]);
+                this.world.addParticle(flag ? EnumParticle.SPELL_MOB_AMBIENT : EnumParticle.SPELL_MOB, this.locX + (this.getRandom().nextDouble() - 0.5D) * (double) this.width, this.locY + this.getRandom().nextDouble() * (double) this.length, this.locZ + (this.getRandom().nextDouble() - 0.5D) * (double) this.width, d0, d1, d2);
             }
         }
 
@@ -539,16 +532,16 @@ public abstract class EntityLiving extends Entity {
         } else {
             int i = PotionBrewer.a(this.effects.values());
 
-            this.datawatcher.watch(8, Byte.valueOf((byte) (PotionBrewer.b(this.effects.values()) ? 1 : 0)));
-            this.datawatcher.watch(7, Integer.valueOf(i));
+            this.datawatcher.watch(8, (byte) (PotionBrewer.b(this.effects.values()) ? 1 : 0));
+            this.datawatcher.watch(7, i);
             this.setInvisible(this.hasEffect(MobEffectList.INVISIBILITY.id));
         }
 
     }
 
     protected void bj() {
-        this.datawatcher.watch(8, Byte.valueOf((byte) 0));
-        this.datawatcher.watch(7, Integer.valueOf(0));
+        this.datawatcher.watch(8, (byte) 0);
+        this.datawatcher.watch(7, 0);
     }
 
     public void removeAllEffects() {
@@ -556,7 +549,7 @@ public abstract class EntityLiving extends Entity {
 
         while (iterator.hasNext()) {
             Integer integer = (Integer) iterator.next();
-            MobEffect mobeffect = (MobEffect) this.effects.get(integer);
+            MobEffect mobeffect = this.effects.get(integer);
 
             if (!this.world.isClientSide) {
                 iterator.remove();
@@ -572,19 +565,19 @@ public abstract class EntityLiving extends Entity {
 
     public boolean hasEffect(int i) {
         // CraftBukkit - Add size check for efficiency
-        return this.effects.size() != 0 && this.effects.containsKey(Integer.valueOf(i));
+        return this.effects.size() != 0 && this.effects.containsKey(i);
     }
 
     public boolean hasEffect(MobEffectList mobeffectlist) {
-        return this.effects.containsKey(Integer.valueOf(mobeffectlist.id));
+        return this.effects.containsKey(mobeffectlist.id);
     }
 
     public MobEffect getEffect(MobEffectList mobeffectlist) {
-        return (MobEffect) this.effects.get(Integer.valueOf(mobeffectlist.id));
+        return this.effects.get(mobeffectlist.id);
     }
 
     public void addEffect(MobEffect mobeffect) {
-        org.spigotmc.AsyncCatcher.catchOp( "effect add"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("effect add"); // Spigot
         // CraftBukkit start
         if (isTickingEffects) {
             effectsToProcess.add(mobeffect);
@@ -592,11 +585,11 @@ public abstract class EntityLiving extends Entity {
         }
         // CraftBukkit end
         if (this.d(mobeffect)) {
-            if (this.effects.containsKey(Integer.valueOf(mobeffect.getEffectId()))) {
-                ((MobEffect) this.effects.get(Integer.valueOf(mobeffect.getEffectId()))).a(mobeffect);
-                this.a((MobEffect) this.effects.get(Integer.valueOf(mobeffect.getEffectId())), true);
+            if (this.effects.containsKey(mobeffect.getEffectId())) {
+                this.effects.get(mobeffect.getEffectId()).a(mobeffect);
+                this.a(this.effects.get(mobeffect.getEffectId()), true);
             } else {
-                this.effects.put(Integer.valueOf(mobeffect.getEffectId()), mobeffect);
+                this.effects.put(mobeffect.getEffectId(), mobeffect);
                 this.a(mobeffect);
             }
 
@@ -607,9 +600,7 @@ public abstract class EntityLiving extends Entity {
         if (this.getMonsterType() == EnumMonsterType.UNDEAD) {
             int i = mobeffect.getEffectId();
 
-            if (i == MobEffectList.REGENERATION.id || i == MobEffectList.POISON.id) {
-                return false;
-            }
+            return i != MobEffectList.REGENERATION.id && i != MobEffectList.POISON.id;
         }
 
         return true;
@@ -626,7 +617,7 @@ public abstract class EntityLiving extends Entity {
             return;
         }
         // CraftBukkit end
-        MobEffect mobeffect = (MobEffect) this.effects.remove(Integer.valueOf(i));
+        MobEffect mobeffect = this.effects.remove(i);
 
         if (mobeffect != null) {
             this.b(mobeffect);
@@ -701,11 +692,11 @@ public abstract class EntityLiving extends Entity {
                 player.setRealHealth(f);
             }
 
-            this.datawatcher.watch(6, Float.valueOf(player.getScaledHealth()));
+            this.datawatcher.watch(6, player.getScaledHealth());
             return;
         }
         // CraftBukkit end
-        this.datawatcher.watch(6, Float.valueOf(MathHelper.a(f, 0.0F, this.getMaxHealth())));
+        this.datawatcher.watch(6, MathHelper.a(f, 0.0F, this.getMaxHealth()));
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
@@ -721,8 +712,8 @@ public abstract class EntityLiving extends Entity {
                 return false;
             } else {
                 // CraftBukkit - Moved into d(DamageSource, float)
-                if (false && (damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getEquipment(4) != null) {
-                    this.getEquipment(4).damage((int) (f * 4.0F + this.random.nextFloat() * f * 2.0F), this);
+                if (false) {
+                    this.getEquipment(4).damage((int) (f * 4.0F + this.getRandom().nextFloat() * f * 2.0F), this);
                     f *= 0.75F;
                 }
 
@@ -755,10 +746,10 @@ public abstract class EntityLiving extends Entity {
                 }
 
                 // CraftBukkit start
-                if(this instanceof EntityAnimal){
-                    ((EntityAnimal)this).cq();
-                    if(this instanceof EntityTameableAnimal){
-                        ((EntityTameableAnimal)this).getGoalSit().setSitting(false);
+                if (this instanceof EntityAnimal) {
+                    ((EntityAnimal) this).cq();
+                    if (this instanceof EntityTameableAnimal) {
+                        ((EntityTameableAnimal) this).getGoalSit().setSitting(false);
                     }
                 }
                 // CraftBukkit end
@@ -787,7 +778,7 @@ public abstract class EntityLiving extends Entity {
                 // PaperSpigot start - Disable explosion knockback
                 boolean knockbackCancelled = false;
                 if (flag && !(knockbackCancelled = world.paperSpigotConfig.disableExplosionKnockback && damagesource.isExplosion() && this instanceof EntityHuman)) {
-                // PaperSpigot end
+                    // PaperSpigot end
                     this.world.broadcastEntityEffect(this, (byte) 2);
                     if (damagesource != DamageSource.DROWN) {
                         this.ac();
@@ -836,17 +827,17 @@ public abstract class EntityLiving extends Entity {
         this.makeSound("random.break", 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
 
         for (int i = 0; i < 5; ++i) {
-            Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            Vec3D vec3d = new Vec3D(((double) this.getRandom().nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
 
             vec3d = vec3d.a(-this.pitch * 3.1415927F / 180.0F);
             vec3d = vec3d.b(-this.yaw * 3.1415927F / 180.0F);
-            double d0 = (double) (-this.random.nextFloat()) * 0.6D - 0.3D;
-            Vec3D vec3d1 = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+            double d0 = (double) (-this.getRandom().nextFloat()) * 0.6D - 0.3D;
+            Vec3D vec3d1 = new Vec3D(((double) this.getRandom().nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
 
             vec3d1 = vec3d1.a(-this.pitch * 3.1415927F / 180.0F);
             vec3d1 = vec3d1.b(-this.yaw * 3.1415927F / 180.0F);
             vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
-            this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, new int[] { Item.getId(itemstack.getItem())});
+            this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, Item.getId(itemstack.getItem()));
         }
 
     }
@@ -873,11 +864,11 @@ public abstract class EntityLiving extends Entity {
             }
 
             if (this.ba() && this.world.getGameRules().getBoolean("doMobLoot")) {
-                this.drops = new ArrayList<org.bukkit.inventory.ItemStack>(); // CraftBukkit - Setup drop capture
-                
+                this.drops = new ArrayList<>(); // CraftBukkit - Setup drop capture
+
                 this.dropDeathLoot(this.lastDamageByPlayerTime > 0, i);
                 this.dropEquipment(this.lastDamageByPlayerTime > 0, i);
-                if (this.lastDamageByPlayerTime > 0 && this.random.nextFloat() < 0.025F + (float) i * 0.01F) {
+                if (this.lastDamageByPlayerTime > 0 && this.getRandom().nextFloat() < 0.025F + (float) i * 0.01F) {
                     this.getRareDrop();
                 }
                 // CraftBukkit start - Call death event
@@ -892,10 +883,11 @@ public abstract class EntityLiving extends Entity {
         this.world.broadcastEntityEffect(this, (byte) 3);
     }
 
-    protected void dropEquipment(boolean flag, int i) {}
+    protected void dropEquipment(boolean flag, int i) {
+    }
 
     public void a(Entity entity, float f, double d0, double d1) {
-        if (this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue()) {
+        if (this.getRandom().nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue()) {
             this.ai = true;
             float f1 = MathHelper.sqrt(d0 * d0 + d1 * d1);
             float f2 = 0.4F;
@@ -921,9 +913,11 @@ public abstract class EntityLiving extends Entity {
         return "game.neutral.die";
     }
 
-    protected void getRareDrop() {}
+    protected void getRareDrop() {
+    }
 
-    protected void dropDeathLoot(boolean flag, int i) {}
+    protected void dropDeathLoot(boolean flag, int i) {
+    }
 
     public boolean k_() {
         int i = MathHelper.floor(this.locX);
@@ -975,9 +969,7 @@ public abstract class EntityLiving extends Entity {
         ItemStack[] aitemstack = this.getEquipment();
         int j = aitemstack.length;
 
-        for (int k = 0; k < j; ++k) {
-            ItemStack itemstack = aitemstack[k];
-
+        for (ItemStack itemstack : aitemstack) {
             if (itemstack != null && itemstack.getItem() instanceof ItemArmor) {
                 int l = ((ItemArmor) itemstack.getItem()).c;
 
@@ -988,7 +980,8 @@ public abstract class EntityLiving extends Entity {
         return i;
     }
 
-    protected void damageArmor(float f) {}
+    protected void damageArmor(float f) {
+    }
 
     protected float applyArmorModifier(DamageSource damagesource, float f) {
         if (!damagesource.ignoresArmor()) {
@@ -1009,9 +1002,9 @@ public abstract class EntityLiving extends Entity {
             int i;
             int j;
             float f1;
-            
+
             // CraftBukkit - Moved to d(DamageSource, float)
-            if (false && this.hasEffect(MobEffectList.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
+            if (false) {
                 i = (this.getEffect(MobEffectList.RESISTANCE).getAmplifier() + 1) * 5;
                 j = 25 - i;
                 f1 = f * (float) j;
@@ -1039,74 +1032,50 @@ public abstract class EntityLiving extends Entity {
 
     // CraftBukkit start
     protected boolean d(final DamageSource damagesource, float f) { // void -> boolean, add final
-       if (!this.isInvulnerable(damagesource)) {
+        if (!this.isInvulnerable(damagesource)) {
             final boolean human = this instanceof EntityHuman;
             float originalDamage = f;
-            Function<Double, Double> hardHat = new Function<Double, Double>() {
-                @Override
-                public Double apply(Double f) {
-                    if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && EntityLiving.this.getEquipment(4) != null) {
-                        return -(f - (f * 0.75F));
-                    }
-                    return -0.0;
+            Function<Double, Double> hardHat = f17 -> {
+                if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && EntityLiving.this.getEquipment(4) != null) {
+                    return -(f17 - (f17 * 0.75F));
                 }
+                return -0.0;
             };
             float hardHatModifier = hardHat.apply((double) f).floatValue();
             f += hardHatModifier;
 
-            Function<Double, Double> blocking = new Function<Double, Double>() {
-                @Override
-                public Double apply(Double f) {
-                    if (human) {
-                        if (!damagesource.ignoresArmor() && ((EntityHuman) EntityLiving.this).isBlocking() && f > 0.0F) {
-                            return -(f - ((1.0F + f) * 0.5F));
-                        }
+            Function<Double, Double> blocking = f16 -> {
+                if (human) {
+                    if (!damagesource.ignoresArmor() && ((EntityHuman) EntityLiving.this).isBlocking() && f16 > 0.0F) {
+                        return -(f16 - ((1.0F + f16) * 0.5F));
                     }
-                    return -0.0;
                 }
+                return -0.0;
             };
             float blockingModifier = blocking.apply((double) f).floatValue();
             f += blockingModifier;
 
-            Function<Double, Double> armor = new Function<Double, Double>() {
-                @Override
-                public Double apply(Double f) {
-                    return -(f - EntityLiving.this.applyArmorModifier(damagesource, f.floatValue()));
-                }
-            };
+            Function<Double, Double> armor = f15 -> -(f15 - EntityLiving.this.applyArmorModifier(damagesource, f15.floatValue()));
             float armorModifier = armor.apply((double) f).floatValue();
             f += armorModifier;
 
-            Function<Double, Double> resistance = new Function<Double, Double>() {
-                @Override
-                public Double apply(Double f) {
-                    if (!damagesource.isStarvation() && EntityLiving.this.hasEffect(MobEffectList.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
-                        int i = (EntityLiving.this.getEffect(MobEffectList.RESISTANCE).getAmplifier() + 1) * 5;
-                        int j = 25 - i;
-                        float f1 = f.floatValue() * (float) j;
-                        return -(f - (f1 / 25.0F));
-                    }
-                    return -0.0;
+            Function<Double, Double> resistance = f14 -> {
+                if (!damagesource.isStarvation() && EntityLiving.this.hasEffect(MobEffectList.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
+                    int i = (EntityLiving.this.getEffect(MobEffectList.RESISTANCE).getAmplifier() + 1) * 5;
+                    int j = 25 - i;
+                    float f1 = f14.floatValue() * (float) j;
+                    return -(f14 - (f1 / 25.0F));
                 }
+                return -0.0;
             };
             float resistanceModifier = resistance.apply((double) f).floatValue();
             f += resistanceModifier;
 
-            Function<Double, Double> magic = new Function<Double, Double>() {
-                @Override
-                public Double apply(Double f) {
-                    return -(f - EntityLiving.this.applyMagicModifier(damagesource, f.floatValue()));
-                }
-            };
+            Function<Double, Double> magic = f13 -> -(f13 - EntityLiving.this.applyMagicModifier(damagesource, f13.floatValue()));
             float magicModifier = magic.apply((double) f).floatValue();
             f += magicModifier;
 
-            Function<Double, Double> absorption = new Function<Double, Double>() {
-                @Override
-                public Double apply(Double f) {
-                    return -(Math.max(f - Math.max(f - EntityLiving.this.getAbsorptionHearts(), 0.0F), 0.0F));
-                }
-            };
+            Function<Double, Double> absorption = f12 -> -(Math.max(f12 - Math.max(f12 - EntityLiving.this.getAbsorptionHearts(), 0.0F), 0.0F));
             float absorptionModifier = absorption.apply((double) f).floatValue();
 
             EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
@@ -1118,7 +1087,7 @@ public abstract class EntityLiving extends Entity {
 
             // Apply damage to helmet
             if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getEquipment(4) != null) {
-                this.getEquipment(4).damage((int) (event.getDamage() * 4.0F + this.random.nextFloat() * event.getDamage() * 2.0F), this);
+                this.getEquipment(4).damage((int) (event.getDamage() * 4.0F + this.getRandom().nextFloat() * event.getDamage() * 2.0F), this);
             }
 
             // Apply damage to armor
@@ -1159,7 +1128,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public EntityLiving bt() {
-        return (EntityLiving) (this.combatTracker.c() != null ? this.combatTracker.c() : (this.killer != null ? this.killer : (this.lastDamager != null ? this.lastDamager : null)));
+        return this.combatTracker.c() != null ? this.combatTracker.c() : (this.killer != null ? this.killer : (this.lastDamager));
     }
 
     public final float getMaxHealth() {
@@ -1170,6 +1139,7 @@ public abstract class EntityLiving extends Entity {
     public int getArrowsStuck() {
         return this.bv();
     }
+
     // TacoSpigot end
     public final int bv() {
         return this.datawatcher.getByte(9);
@@ -1180,9 +1150,10 @@ public abstract class EntityLiving extends Entity {
     public void setArrowsStuck(int i) {
         this.o(i);
     }
+
     // TacoSpigot end
     public final void o(int i) {
-        this.datawatcher.watch(9, Byte.valueOf((byte) i));
+        this.datawatcher.watch(9, (byte) i);
     }
 
     private int n() {
@@ -1194,7 +1165,7 @@ public abstract class EntityLiving extends Entity {
             this.as = -1;
             this.ar = true;
             if (this.world instanceof WorldServer) {
-                ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAnimation(this, 0)));
+                ((WorldServer) this.world).getTracker().a(this, new PacketPlayOutAnimation(this, 0));
             }
         }
 
@@ -1263,7 +1234,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     protected float bC() {
-        return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.5F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
+        return this.isBaby() ? (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.5F : (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F;
     }
 
     protected boolean bD() {
@@ -1284,12 +1255,12 @@ public abstract class EntityLiving extends Entity {
                     AxisAlignedBB axisalignedbb = this.getBoundingBox().c((double) i, 1.0D, (double) j);
 
                     if (this.world.a(axisalignedbb).isEmpty()) {
-                        if (World.a((IBlockAccess) this.world, new BlockPosition(k, (int) this.locY, l))) {
+                        if (World.a(this.world, new BlockPosition(k, (int) this.locY, l))) {
                             this.enderTeleportTo(this.locX + (double) i, this.locY + 1.0D, this.locZ + (double) j);
                             return;
                         }
 
-                        if (World.a((IBlockAccess) this.world, new BlockPosition(k, (int) this.locY - 1, l)) || this.world.getType(new BlockPosition(k, (int) this.locY - 1, l)).getBlock().getMaterial() == Material.WATER) {
+                        if (World.a(this.world, new BlockPosition(k, (int) this.locY - 1, l)) || this.world.getType(new BlockPosition(k, (int) this.locY - 1, l)).getBlock().getMaterial() == Material.WATER) {
                             d0 = this.locX + (double) i;
                             d1 = this.locY + 1.0D;
                             d2 = this.locZ + (double) j;
@@ -1485,7 +1456,7 @@ public abstract class EntityLiving extends Entity {
                 ItemStack itemstack1 = this.getEquipment(j);
 
                 if (!ItemStack.matches(itemstack1, itemstack)) {
-                    ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutEntityEquipment(this.getId(), j, itemstack1)));
+                    ((WorldServer) this.world).getTracker().a(this, new PacketPlayOutEntityEquipment(this.getId(), j, itemstack1));
                     if (itemstack != null) {
                         this.c.a(itemstack.B());
                     }
@@ -1673,10 +1644,11 @@ public abstract class EntityLiving extends Entity {
         this.world.methodProfiler.b();
     }
 
-    protected void doTick() {}
+    protected void doTick() {
+    }
 
     protected void bL() {
-        List list = this.world.a((Entity) this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D), Predicates.and(IEntitySelector.d, new Predicate() {
+        List list = this.world.a(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D), Predicates.and(IEntitySelector.d, new Predicate() {
             public boolean a(Entity entity) {
                 return entity.ae();
             }
@@ -1688,9 +1660,11 @@ public abstract class EntityLiving extends Entity {
 
         if (this.ad() && !list.isEmpty()) { // Spigot: Add this.ad() condition
             numCollisions -= world.spigotConfig.maxCollisionsPerEntity; // Spigot
-            for (int i = 0; i < list.size(); ++i) {
-                if (numCollisions > world.spigotConfig.maxCollisionsPerEntity) { break; } // Spigot
-                Entity entity = (Entity) list.get(i);
+            for (Object o : list) {
+                if (numCollisions > world.spigotConfig.maxCollisionsPerEntity) {
+                    break;
+                } // Spigot
+                Entity entity = (Entity) o;
 
                 // TODO better check now?
                 // CraftBukkit start - Only handle mob (non-player) collisions every other tick
@@ -1761,15 +1735,15 @@ public abstract class EntityLiving extends Entity {
             EntityTracker entitytracker = ((WorldServer) this.world).getTracker();
 
             if (entity instanceof EntityItem) {
-                entitytracker.a(entity, (Packet) (new PacketPlayOutCollect(entity.getId(), this.getId())));
+                entitytracker.a(entity, new PacketPlayOutCollect(entity.getId(), this.getId()));
             }
 
             if (entity instanceof EntityArrow) {
-                entitytracker.a(entity, (Packet) (new PacketPlayOutCollect(entity.getId(), this.getId())));
+                entitytracker.a(entity, new PacketPlayOutCollect(entity.getId(), this.getId()));
             }
 
             if (entity instanceof EntityExperienceOrb) {
-                entitytracker.a(entity, (Packet) (new PacketPlayOutCollect(entity.getId(), this.getId())));
+                entitytracker.a(entity, new PacketPlayOutCollect(entity.getId(), this.getId()));
             }
         }
 
@@ -1807,7 +1781,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     protected void ac() {
-        this.velocityChanged = this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue();
+        this.velocityChanged = this.getRandom().nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue();
     }
 
     public float getHeadRotation() {
@@ -1835,7 +1809,8 @@ public abstract class EntityLiving extends Entity {
     }
 
     public ScoreboardTeamBase getScoreboardTeam() {
-        if (!this.world.tacoSpigotConfig.nonPlayerEntitiesOnScoreboards && !(this instanceof EntityHuman)) return null; // TacoSpigot
+        if (!this.world.tacoSpigotConfig.nonPlayerEntitiesOnScoreboards && !(this instanceof EntityHuman))
+            return null; // TacoSpigot
         return this.world.getScoreboard().getPlayerTeam(this.getUniqueID().toString());
     }
 
@@ -1844,12 +1819,14 @@ public abstract class EntityLiving extends Entity {
     }
 
     public boolean a(ScoreboardTeamBase scoreboardteambase) {
-        return this.getScoreboardTeam() != null ? this.getScoreboardTeam().isAlly(scoreboardteambase) : false;
+        return this.getScoreboardTeam() != null && this.getScoreboardTeam().isAlly(scoreboardteambase);
     }
 
-    public void enterCombat() {}
+    public void enterCombat() {
+    }
 
-    public void exitCombat() {}
+    public void exitCombat() {
+    }
 
     protected void bP() {
         this.updateEffects = true;
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 4bf790cdf..feefb6f97 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -72,12 +72,12 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     protected void h() {
-        this.datawatcher.a(17, new Integer(0));
-        this.datawatcher.a(18, new Integer(1));
-        this.datawatcher.a(19, new Float(0.0F));
-        this.datawatcher.a(20, new Integer(0));
-        this.datawatcher.a(21, new Integer(6));
-        this.datawatcher.a(22, Byte.valueOf((byte) 0));
+        this.datawatcher.a(17, 0);
+        this.datawatcher.a(18, 1);
+        this.datawatcher.a(19, 0.0F);
+        this.datawatcher.a(20, 0);
+        this.datawatcher.a(21, 6);
+        this.datawatcher.a(22, (byte) 0);
     }
 
     public AxisAlignedBB j(Entity entity) {
@@ -144,7 +144,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                     }
                     // CraftBukkit end
                     if (this.passenger != null) {
-                        this.passenger.mount((Entity) null);
+                        this.passenger.mount(null);
                     }
 
                     if (flag && !this.hasCustomName()) {
@@ -212,7 +212,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
 
             i = this.L();
             if (this.ak) {
-                if (true || minecraftserver.getAllowNether()) { // CraftBukkit - multi-world should still allow teleport even if default vanilla nether disabled
+                if (true) { // CraftBukkit - multi-world should still allow teleport even if default vanilla nether disabled
                     if (this.vehicle == null && this.al++ >= i) {
                         this.al = i;
                         this.portalCooldown = this.aq();
@@ -283,7 +283,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             if (BlockMinecartTrackAbstract.d(iblockdata)) {
                 this.a(blockposition, iblockdata);
                 if (iblockdata.getBlock() == Blocks.ACTIVATOR_RAIL) {
-                    this.a(j, i, k, ((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue());
+                    this.a(j, i, k, (Boolean) iblockdata.get(BlockPoweredRail.POWERED));
                 }
             } else {
                 this.n();
@@ -323,11 +323,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             }
             // CraftBukkit end
 
-            Iterator iterator = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D)).iterator();
-
-            while (iterator.hasNext()) {
-                Entity entity = (Entity) iterator.next();
-
+            for (Entity entity : this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D))) {
                 if (entity != this.passenger && entity.ae() && entity instanceof EntityMinecartAbstract) {
                     entity.collide(this);
                 }
@@ -385,12 +381,12 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         BlockMinecartTrackAbstract blockminecarttrackabstract = (BlockMinecartTrackAbstract) iblockdata.getBlock();
 
         if (blockminecarttrackabstract == Blocks.GOLDEN_RAIL) {
-            flag = ((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue();
+            flag = (Boolean) iblockdata.get(BlockPoweredRail.POWERED);
             flag1 = !flag;
         }
 
         double d0 = 0.0078125D;
-        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(blockminecarttrackabstract.n());
+        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(blockminecarttrackabstract.n());
 
         switch (EntityMinecartAbstract.SyntheticClass_1.b[blockminecarttrackabstract_enumtrackposition.ordinal()]) {
         case 1:
@@ -592,7 +588,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         IBlockData iblockdata = this.world.getType(new BlockPosition(i, j, k));
 
         if (BlockMinecartTrackAbstract.d(iblockdata)) {
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).n());
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).n());
             int[][] aint = EntityMinecartAbstract.matrix[blockminecarttrackabstract_enumtrackposition.a()];
             double d3 = 0.0D;
             double d4 = (double) i + 0.5D + (double) aint[0][0] * 0.5D;
@@ -669,7 +665,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         if (this.x()) {
             nbttagcompound.setBoolean("CustomDisplayTile", true);
             IBlockData iblockdata = this.getDisplayBlock();
-            MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(iblockdata.getBlock());
+            MinecraftKey minecraftkey = Block.REGISTRY.c(iblockdata.getBlock());
 
             nbttagcompound.setString("DisplayTile", minecraftkey == null ? "" : minecraftkey.toString());
             nbttagcompound.setInt("DisplayData", iblockdata.getBlock().toLegacyData(iblockdata));
@@ -772,7 +768,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public void setDamage(float f) {
-        this.datawatcher.watch(19, Float.valueOf(f));
+        this.datawatcher.watch(19, f);
     }
 
     public float getDamage() {
@@ -780,7 +776,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public void j(int i) {
-        this.datawatcher.watch(17, Integer.valueOf(i));
+        this.datawatcher.watch(17, i);
     }
 
     public int getType() {
@@ -788,7 +784,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public void k(int i) {
-        this.datawatcher.watch(18, Integer.valueOf(i));
+        this.datawatcher.watch(18, i);
     }
 
     public int r() {
@@ -814,12 +810,12 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public void setDisplayBlock(IBlockData iblockdata) {
-        this.getDataWatcher().watch(20, Integer.valueOf(Block.getCombinedId(iblockdata)));
+        this.getDataWatcher().watch(20, Block.getCombinedId(iblockdata));
         this.a(true);
     }
 
     public void SetDisplayBlockOffset(int i) {
-        this.getDataWatcher().watch(21, Integer.valueOf(i));
+        this.getDataWatcher().watch(21, i);
         this.a(true);
     }
 
@@ -828,7 +824,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public void a(boolean flag) {
-        this.getDataWatcher().watch(22, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.getDataWatcher().watch(22, (byte) (flag ? 1 : 0));
     }
 
     public void setCustomName(String s) {
@@ -855,7 +851,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             chatcomponenttext.getChatModifier().setInsertion(this.getUniqueID().toString());
             return chatcomponenttext;
         } else {
-            ChatMessage chatmessage = new ChatMessage(this.getName(), new Object[0]);
+            ChatMessage chatmessage = new ChatMessage(this.getName());
 
             chatmessage.getChatModifier().setChatHoverable(this.aQ());
             chatmessage.getChatModifier().setInsertion(this.getUniqueID().toString());
@@ -871,70 +867,60 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         static {
             try {
                 EntityMinecartAbstract.SyntheticClass_1.b[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.b[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.b[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.b[BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             a = new int[EntityMinecartAbstract.EnumMinecartType.values().length];
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.a[EntityMinecartAbstract.EnumMinecartType.CHEST.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.a[EntityMinecartAbstract.EnumMinecartType.FURNACE.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.a[EntityMinecartAbstract.EnumMinecartType.TNT.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror6) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.a[EntityMinecartAbstract.EnumMinecartType.SPAWNER.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror7) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.a[EntityMinecartAbstract.EnumMinecartType.HOPPER.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror8) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 EntityMinecartAbstract.SyntheticClass_1.a[EntityMinecartAbstract.EnumMinecartType.COMMAND_BLOCK.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror9) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
     }
 
-    public static enum EnumMinecartType {
+    public enum EnumMinecartType {
 
         RIDEABLE(0, "MinecartRideable"), CHEST(1, "MinecartChest"), FURNACE(2, "MinecartFurnace"), TNT(3, "MinecartTNT"), SPAWNER(4, "MinecartSpawner"), HOPPER(5, "MinecartHopper"), COMMAND_BLOCK(6, "MinecartCommandBlock");
 
@@ -942,7 +928,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         private final int i;
         private final String j;
 
-        private EnumMinecartType(int i, String s) {
+        EnumMinecartType(int i, String s) {
             this.i = i;
             this.j = s;
         }
@@ -956,7 +942,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         }
 
         public static EntityMinecartAbstract.EnumMinecartType a(int i) {
-            EntityMinecartAbstract.EnumMinecartType entityminecartabstract_enumminecarttype = (EntityMinecartAbstract.EnumMinecartType) EntityMinecartAbstract.EnumMinecartType.h.get(Integer.valueOf(i));
+            EntityMinecartAbstract.EnumMinecartType entityminecartabstract_enumminecarttype = EnumMinecartType.h.get(i);
 
             return entityminecartabstract_enumminecarttype == null ? EntityMinecartAbstract.EnumMinecartType.RIDEABLE : entityminecartabstract_enumminecarttype;
         }
@@ -965,10 +951,8 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             EntityMinecartAbstract.EnumMinecartType[] aentityminecartabstract_enumminecarttype = values();
             int i = aentityminecartabstract_enumminecarttype.length;
 
-            for (int j = 0; j < i; ++j) {
-                EntityMinecartAbstract.EnumMinecartType entityminecartabstract_enumminecarttype = aentityminecartabstract_enumminecarttype[j];
-
-                EntityMinecartAbstract.EnumMinecartType.h.put(Integer.valueOf(entityminecartabstract_enumminecarttype.a()), entityminecartabstract_enumminecarttype);
+            for (EnumMinecartType entityminecartabstract_enumminecarttype : aentityminecartabstract_enumminecarttype) {
+                EnumMinecartType.h.put(entityminecartabstract_enumminecarttype.a(), entityminecartabstract_enumminecarttype);
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java b/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
index 44ae15571..1bcb56c55 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
@@ -4,7 +4,7 @@ public class EntityMinecartCommandBlock extends EntityMinecartAbstract {
 
     private final CommandBlockListenerAbstract a = new CommandBlockListenerAbstract() {
         {
-            this.sender = (org.bukkit.craftbukkit.entity.CraftMinecartCommand) EntityMinecartCommandBlock.this.getBukkitEntity(); // CraftBukkit - Set the sender
+            this.sender = EntityMinecartCommandBlock.this.getBukkitEntity(); // CraftBukkit - Set the sender
         }
         public void h() {
             EntityMinecartCommandBlock.this.getDataWatcher().watch(23, this.getCommand());
@@ -85,8 +85,7 @@ public class EntityMinecartCommandBlock extends EntityMinecartAbstract {
         if (i == 24) {
             try {
                 this.a.b(IChatBaseComponent.ChatSerializer.a(this.getDataWatcher().getString(24)));
-            } catch (Throwable throwable) {
-                ;
+            } catch (Throwable ignored) {
             }
         } else if (i == 23) {
             this.a.setCommand(this.getDataWatcher().getString(23));
diff --git a/src/main/java/net/minecraft/server/EntityMinecartContainer.java b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
index 7368f16bb..f39fda22e 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
@@ -22,7 +22,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
     private boolean b = true;
 
     // CraftBukkit start
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private int maxStack = MAX_STACK;
 
     public ItemStack[] getContents() {
@@ -150,7 +150,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
 
     public void c(int i) {
         // Spigot Start
-        for ( HumanEntity human : new java.util.ArrayList<HumanEntity>( transaction ) )
+        for ( HumanEntity human : new java.util.ArrayList<>(transaction) )
         {
             human.closeInventory();
         }
@@ -210,7 +210,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
     }
 
     protected void o() {
-        int i = 15 - Container.b((IInventory) this);
+        int i = 15 - Container.b(this);
         float f = 0.98F + (float) i * 0.001F;
 
         this.motX *= (double) f;
diff --git a/src/main/java/net/minecraft/server/EntityMinecartFurnace.java b/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
index 908620d41..33dffc4dd 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartFurnace.java
@@ -20,7 +20,7 @@ public class EntityMinecartFurnace extends EntityMinecartAbstract {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Byte((byte) 0));
+        this.datawatcher.a(16, (byte) 0);
     }
 
     public void t_() {
@@ -34,8 +34,8 @@ public class EntityMinecartFurnace extends EntityMinecartAbstract {
         }
 
         this.i(this.c > 0);
-        if (this.j() && this.random.nextInt(4) == 0) {
-            this.world.addParticle(EnumParticle.SMOKE_LARGE, this.locX, this.locY + 0.8D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+        if (this.j() && this.getRandom().nextInt(4) == 0) {
+            this.world.addParticle(EnumParticle.SMOKE_LARGE, this.locX, this.locY + 0.8D, this.locZ, 0.0D, 0.0D, 0.0D);
         }
 
     }
@@ -96,7 +96,7 @@ public class EntityMinecartFurnace extends EntityMinecartAbstract {
 
         if (itemstack != null && itemstack.getItem() == Items.COAL) {
             if (!entityhuman.abilities.canInstantlyBuild && --itemstack.count == 0) {
-                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
             }
 
             this.c += 3600;
@@ -127,9 +127,9 @@ public class EntityMinecartFurnace extends EntityMinecartAbstract {
 
     protected void i(boolean flag) {
         if (flag) {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (this.datawatcher.getByte(16) | 1)));
+            this.datawatcher.watch(16, (byte) (this.datawatcher.getByte(16) | 1));
         } else {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (this.datawatcher.getByte(16) & -2)));
+            this.datawatcher.watch(16, (byte) (this.datawatcher.getByte(16) & -2));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityMonster.java b/src/main/java/net/minecraft/server/EntityMonster.java
index 9fefb867b..9ebe5ddb6 100644
--- a/src/main/java/net/minecraft/server/EntityMonster.java
+++ b/src/main/java/net/minecraft/server/EntityMonster.java
@@ -66,7 +66,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
         if (entity instanceof EntityLiving) {
             f += EnchantmentManager.a(this.bA(), ((EntityLiving) entity).getMonsterType());
-            i += EnchantmentManager.a((EntityLiving) this);
+            i += EnchantmentManager.a(this);
         }
 
         boolean flag = entity.damageEntity(DamageSource.mobAttack(this), f);
@@ -91,7 +91,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
                 // CraftBukkit end
             }
 
-            this.a((EntityLiving) this, entity);
+            this.a(this, entity);
         }
 
         return flag;
@@ -104,7 +104,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
     protected boolean n_() {
         BlockPosition blockposition = new BlockPosition(this.locX, this.getBoundingBox().b, this.locZ);
 
-        if (this.world.b(EnumSkyBlock.SKY, blockposition) > this.random.nextInt(32)) {
+        if (this.world.b(EnumSkyBlock.SKY, blockposition) > this.getRandom().nextInt(32)) {
             return false;
         } else {
             int i = this.world.getLightLevel(blockposition);
@@ -117,7 +117,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
                 this.world.c(j);
             }
 
-            return i <= this.random.nextInt(8);
+            return i <= this.getRandom().nextInt(8);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityMushroomCow.java b/src/main/java/net/minecraft/server/EntityMushroomCow.java
index fef767c24..d94c1e779 100644
--- a/src/main/java/net/minecraft/server/EntityMushroomCow.java
+++ b/src/main/java/net/minecraft/server/EntityMushroomCow.java
@@ -35,7 +35,7 @@ public class EntityMushroomCow extends EntityCow {
             }
             // CraftBukkit end
             this.die();
-            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D);
             if (!this.world.isClientSide) {
                 EntityCow entitycow = new EntityCow(this.world);
 
diff --git a/src/main/java/net/minecraft/server/EntityOcelot.java b/src/main/java/net/minecraft/server/EntityOcelot.java
index edcb30792..b75adc1d6 100644
--- a/src/main/java/net/minecraft/server/EntityOcelot.java
+++ b/src/main/java/net/minecraft/server/EntityOcelot.java
@@ -22,12 +22,12 @@ public class EntityOcelot extends EntityTameableAnimal {
         this.goalSelector.a(9, new PathfinderGoalBreed(this, 0.8D));
         this.goalSelector.a(10, new PathfinderGoalRandomStroll(this, 0.8D));
         this.goalSelector.a(11, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 10.0F));
-        this.targetSelector.a(1, new PathfinderGoalRandomTargetNonTamed(this, EntityChicken.class, false, (Predicate) null));
+        this.targetSelector.a(1, new PathfinderGoalRandomTargetNonTamed(this, EntityChicken.class, false, null));
     }
 
     protected void h() {
         super.h();
-        this.datawatcher.a(18, Byte.valueOf((byte) 0));
+        this.datawatcher.a(18, (byte) 0);
     }
 
     public void E() {
@@ -74,7 +74,7 @@ public class EntityOcelot extends EntityTameableAnimal {
     }
 
     protected String z() {
-        return this.isTamed() ? (this.isInLove() ? "mob.cat.purr" : (this.random.nextInt(4) == 0 ? "mob.cat.purreow" : "mob.cat.meow")) : "";
+        return this.isTamed() ? (this.isInLove() ? "mob.cat.purr" : (this.getRandom().nextInt(4) == 0 ? "mob.cat.purreow" : "mob.cat.meow")) : "";
     }
 
     protected String bo() {
@@ -125,12 +125,12 @@ public class EntityOcelot extends EntityTameableAnimal {
             }
 
             if (itemstack.count <= 0) {
-                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
             }
 
             if (!this.world.isClientSide) {
                 // CraftBukkit - added event call and isCancelled check
-                if (this.random.nextInt(3) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
+                if (this.getRandom().nextInt(3) == 0 && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                     this.setTamed(true);
                     this.setCatType(1 + this.world.random.nextInt(3));
                     this.setOwnerUUID(entityhuman.getUniqueID().toString());
@@ -184,7 +184,7 @@ public class EntityOcelot extends EntityTameableAnimal {
     }
 
     public void setCatType(int i) {
-        this.datawatcher.watch(18, Byte.valueOf((byte) i));
+        this.datawatcher.watch(18, (byte) i);
     }
 
     public boolean bR() {
@@ -192,7 +192,7 @@ public class EntityOcelot extends EntityTameableAnimal {
     }
 
     public boolean canSpawn() {
-        if (this.world.a(this.getBoundingBox(), (Entity) this) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && !this.world.containsLiquid(this.getBoundingBox())) {
+        if (this.world.a(this.getBoundingBox(), this) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && !this.world.containsLiquid(this.getBoundingBox())) {
             BlockPosition blockposition = new BlockPosition(this.locX, this.getBoundingBox().b, this.locZ);
 
             if (blockposition.getY() < this.world.F()) {
@@ -201,9 +201,7 @@ public class EntityOcelot extends EntityTameableAnimal {
 
             Block block = this.world.getType(blockposition.down()).getBlock();
 
-            if (block == Blocks.GRASS || block.getMaterial() == Material.LEAVES) {
-                return true;
-            }
+            return block == Blocks.GRASS || block.getMaterial() == Material.LEAVES;
         }
 
         return false;
@@ -222,7 +220,7 @@ public class EntityOcelot extends EntityTameableAnimal {
             this.bo = new PathfinderGoalAvoidTarget(this, EntityHuman.class, 16.0F, 0.8D, 1.33D);
         }
 
-        this.goalSelector.a((PathfinderGoal) this.bo);
+        this.goalSelector.a(this.bo);
         if (!this.isTamed()) {
             this.goalSelector.a(4, this.bo);
         }
diff --git a/src/main/java/net/minecraft/server/EntityPainting.java b/src/main/java/net/minecraft/server/EntityPainting.java
index ac941849d..cca3d9bed 100644
--- a/src/main/java/net/minecraft/server/EntityPainting.java
+++ b/src/main/java/net/minecraft/server/EntityPainting.java
@@ -9,18 +9,15 @@ public class EntityPainting extends EntityHanging {
 
     public EntityPainting(World world) {
         super(world);
-        this.art = EnumArt.values()[this.random.nextInt(EnumArt.values().length)]; // CraftBukkit - generate a non-null painting
+        this.art = EnumArt.values()[this.getRandom().nextInt(EnumArt.values().length)]; // CraftBukkit - generate a non-null painting
     }
 
     public EntityPainting(World world, BlockPosition blockposition, EnumDirection enumdirection) {
         super(world, blockposition);
         ArrayList arraylist = Lists.newArrayList();
         EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.values();
-        int i = aentitypainting_enumart.length;
-
-        for (int j = 0; j < i; ++j) {
-            EntityPainting.EnumArt entitypainting_enumart = aentitypainting_enumart[j];
 
+        for (EnumArt entitypainting_enumart : aentitypainting_enumart) {
             this.art = entitypainting_enumart;
             this.setDirection(enumdirection);
             if (this.survives()) {
@@ -29,7 +26,7 @@ public class EntityPainting extends EntityHanging {
         }
 
         if (!arraylist.isEmpty()) {
-            this.art = (EntityPainting.EnumArt) arraylist.get(this.random.nextInt(arraylist.size()));
+            this.art = (EntityPainting.EnumArt) arraylist.get(this.getRandom().nextInt(arraylist.size()));
         }
 
         this.setDirection(enumdirection);
@@ -45,9 +42,7 @@ public class EntityPainting extends EntityHanging {
         EntityPainting.EnumArt[] aentitypainting_enumart = EntityPainting.EnumArt.values();
         int i = aentitypainting_enumart.length;
 
-        for (int j = 0; j < i; ++j) {
-            EntityPainting.EnumArt entitypainting_enumart = aentitypainting_enumart[j];
-
+        for (EnumArt entitypainting_enumart : aentitypainting_enumart) {
             if (entitypainting_enumart.B.equals(s)) {
                 this.art = entitypainting_enumart;
             }
@@ -88,7 +83,7 @@ public class EntityPainting extends EntityHanging {
         this.setPosition((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
     }
 
-    public static enum EnumArt {
+    public enum EnumArt {
 
         KEBAB("Kebab", 16, 16, 0, 0), AZTEC("Aztec", 16, 16, 16, 0), ALBAN("Alban", 16, 16, 32, 0), AZTEC_2("Aztec2", 16, 16, 48, 0), BOMB("Bomb", 16, 16, 64, 0), PLANT("Plant", 16, 16, 80, 0), WASTELAND("Wasteland", 16, 16, 96, 0), POOL("Pool", 32, 16, 0, 32), COURBET("Courbet", 32, 16, 32, 32), SEA("Sea", 32, 16, 64, 32), SUNSET("Sunset", 32, 16, 96, 32), CREEBET("Creebet", 32, 16, 128, 32), WANDERER("Wanderer", 16, 32, 0, 64), GRAHAM("Graham", 16, 32, 16, 64), MATCH("Match", 32, 32, 0, 128), BUST("Bust", 32, 32, 32, 128), STAGE("Stage", 32, 32, 64, 128), VOID("Void", 32, 32, 96, 128), SKULL_AND_ROSES("SkullAndRoses", 32, 32, 128, 128), WITHER("Wither", 32, 32, 160, 128), FIGHTERS("Fighters", 64, 32, 0, 96), POINTER("Pointer", 64, 64, 0, 192), PIGSCENE("Pigscene", 64, 64, 64, 192), BURNING_SKULL("BurningSkull", 64, 64, 128, 192), SKELETON("Skeleton", 64, 48, 192, 64), DONKEY_KONG("DonkeyKong", 64, 48, 192, 112);
 
@@ -99,7 +94,7 @@ public class EntityPainting extends EntityHanging {
         public final int E;
         public final int F;
 
-        private EnumArt(String s, int i, int j, int k, int l) {
+        EnumArt(String s, int i, int j, int k, int l) {
             this.B = s;
             this.C = i;
             this.D = j;
diff --git a/src/main/java/net/minecraft/server/EntityPig.java b/src/main/java/net/minecraft/server/EntityPig.java
index 3f2ce15ff..a75772a72 100644
--- a/src/main/java/net/minecraft/server/EntityPig.java
+++ b/src/main/java/net/minecraft/server/EntityPig.java
@@ -36,7 +36,7 @@ public class EntityPig extends EntityAnimal {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) 0));
+        this.datawatcher.a(16, (byte) 0);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -81,7 +81,7 @@ public class EntityPig extends EntityAnimal {
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(3) + 1 + this.random.nextInt(1 + i);
+        int j = this.getRandom().nextInt(3) + 1 + this.getRandom().nextInt(1 + i);
 
         for (int k = 0; k < j; ++k) {
             if (this.isBurning()) {
@@ -103,9 +103,9 @@ public class EntityPig extends EntityAnimal {
 
     public void setSaddle(boolean flag) {
         if (flag) {
-            this.datawatcher.watch(16, Byte.valueOf((byte) 1));
+            this.datawatcher.watch(16, (byte) 1);
         } else {
-            this.datawatcher.watch(16, Byte.valueOf((byte) 0));
+            this.datawatcher.watch(16, (byte) 0);
         }
 
     }
@@ -137,7 +137,7 @@ public class EntityPig extends EntityAnimal {
     public void e(float f, float f1) {
         super.e(f, f1);
         if (f > 5.0F && this.passenger instanceof EntityHuman) {
-            ((EntityHuman) this.passenger).b((Statistic) AchievementList.u);
+            ((EntityHuman) this.passenger).b(AchievementList.u);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 0c49a256c..dd26218ee 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -99,7 +99,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 i = 1;
             }
 
-            blockposition = worldserver.r(blockposition.a(this.random.nextInt(i * 2) - i, 0, this.random.nextInt(i * 2) - i));
+            blockposition = worldserver.r(blockposition.a(this.getRandom().nextInt(i * 2) - i, 0, this.getRandom().nextInt(i * 2) - i));
         }
 
         this.server = minecraftserver;
@@ -205,7 +205,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             containerUpdateDelay = world.paperSpigotConfig.containerUpdateTickRate;
         }
         // PaperSpigot end
-        if (!this.world.isClientSide && !this.activeContainer.a((EntityHuman) this)) {
+        if (!this.world.isClientSide && !this.activeContainer.a(this)) {
             this.closeInventory();
             this.activeContainer = this.defaultContainer;
         }
@@ -217,7 +217,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             int j = 0;
 
             while (iterator.hasNext() && j < i) {
-                aint[j++] = ((Integer) iterator.next()).intValue();
+                aint[j++] = (Integer) iterator.next();
                 iterator.remove();
             }
 
@@ -315,12 +315,11 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             if (this.getHealth() + this.getAbsorptionHearts() != this.bL) {
                 this.bL = this.getHealth() + this.getAbsorptionHearts();
                 Collection collection = this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.g);
-                Iterator iterator = collection.iterator();
 
-                while (iterator.hasNext()) {
-                    ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+                for (Object o : collection) {
+                    ScoreboardObjective scoreboardobjective = (ScoreboardObjective) o;
 
-                    this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).updateForList(Arrays.asList(new EntityHuman[] { this}));
+                    this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).updateForList(Arrays.asList(new EntityHuman[]{this}));
                 }
                 // CraftBukkit - Update ALL the scores!
                 this.world.getServer().getScoreboardManager().updateAllScoresForList(IScoreboardCriteria.g, this.getName(), com.google.common.collect.ImmutableList.of(this));
@@ -346,7 +345,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             }
 
             if (this.oldLevel != this.expLevel) {
-                CraftEventFactory.callPlayerLevelChangeEvent(this.world.getServer().getPlayer((EntityPlayer) this), this.oldLevel, this.expLevel);
+                CraftEventFactory.callPlayerLevelChangeEvent(this.world.getServer().getPlayer(this), this.oldLevel, this.expLevel);
                 this.oldLevel = this.expLevel;
             }
             // CraftBukkit end
@@ -362,19 +361,17 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     protected void i_() {
         BiomeBase biomebase = this.world.getBiome(new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ)));
         String s = biomebase.ah;
-        AchievementSet achievementset = (AchievementSet) this.getStatisticManager().b((Statistic) AchievementList.L);
+        AchievementSet achievementset = this.getStatisticManager().b((Statistic) AchievementList.L);
 
         if (achievementset == null) {
-            achievementset = (AchievementSet) this.getStatisticManager().a(AchievementList.L, new AchievementSet());
+            achievementset = this.getStatisticManager().a(AchievementList.L, new AchievementSet());
         }
 
         achievementset.add(s);
         if (this.getStatisticManager().b(AchievementList.L) && achievementset.size() >= BiomeBase.n.size()) {
             HashSet hashset = Sets.newHashSet(BiomeBase.n);
-            Iterator iterator = achievementset.iterator();
 
-            while (iterator.hasNext()) {
-                String s1 = (String) iterator.next();
+            for (String s1 : achievementset) {
                 Iterator iterator1 = hashset.iterator();
 
                 while (iterator1.hasNext()) {
@@ -391,7 +388,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             }
 
             if (hashset.isEmpty()) {
-                this.b((Statistic) AchievementList.L);
+                this.b(AchievementList.L);
             }
         }
 
@@ -402,7 +399,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         if (this.dead) {
             return;
         }
-        java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
+        java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<>();
         boolean keepInventory = this.world.getGameRules().getBoolean("keepInventory");
 
         if (!keepInventory) {
@@ -450,11 +447,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         // CraftBukkit end
 
         // CraftBukkit - Get our scores instead
-        Collection collection = this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreboardCriteria.d, this.getName(), new java.util.ArrayList<ScoreboardScore>());
-        Iterator iterator = collection.iterator();
+        Collection collection = this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreboardCriteria.d, this.getName(), new java.util.ArrayList<>());
 
-        while (iterator.hasNext()) {
-            ScoreboardScore scoreboardscore = (ScoreboardScore) iterator.next(); // CraftBukkit - Use our scores instead
+        for (Object o : collection) {
+            ScoreboardScore scoreboardscore = (ScoreboardScore) o; // CraftBukkit - Use our scores instead
 
             scoreboardscore.incrementScore();
         }
@@ -462,7 +458,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         EntityLiving entityliving = this.bt();
 
         if (entityliving != null) {
-            EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(Integer.valueOf(EntityTypes.a(entityliving)));
+            EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = EntityTypes.eggInfo.get(EntityTypes.a(entityliving));
 
             if (entitytypes_monsteregginfo != null) {
                 this.b(entitytypes_monsteregginfo.e);
@@ -519,7 +515,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         // PaperSpigot start - Allow configurable end portal credits
         boolean endPortal = this.dimension == 1 && i == 1;
         if (endPortal) {
-            this.b((Statistic) AchievementList.D);
+            this.b(AchievementList.D);
             if (!world.paperSpigotConfig.disableEndCredits) {
                 this.world.kill(this);
                 this.viewingCredits = true;
@@ -528,7 +524,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         // PaperSpigot end
         } else {
             if (this.dimension == 0 && i == 1) {
-                this.b((Statistic) AchievementList.C);
+                this.b(AchievementList.C);
                 // CraftBukkit start - Rely on custom portal management
                 /*
                 BlockPosition blockposition = this.server.getWorldServer(i).getDimensionSpawn();
@@ -541,7 +537,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 */
                 // CraftBukkit end
             } else {
-                this.b((Statistic) AchievementList.y);
+                this.b(AchievementList.y);
             }
         }
 
@@ -585,7 +581,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.OK) {
             PacketPlayOutBed packetplayoutbed = new PacketPlayOutBed(this, blockposition);
 
-            this.u().getTracker().a((Entity) this, (Packet) packetplayoutbed);
+            this.u().getTracker().a(this, packetplayoutbed);
             this.playerConnection.a(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
             this.playerConnection.sendPacket(packetplayoutbed);
         }
@@ -639,7 +635,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public void openSign(TileEntitySign tileentitysign) {
-        tileentitysign.a((EntityHuman) this);
+        tileentitysign.a(this);
         this.playerConnection.sendPacket(new PacketPlayOutOpenSignEditor(tileentitysign.getPosition()));
     }
 
@@ -691,7 +687,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             ITileInventory itileinventory = (ITileInventory) iinventory;
 
             if (itileinventory.r_() && !this.a(itileinventory.i()) && !this.isSpectator() && container == null) { // CraftBukkit - allow plugins to uncancel the lock
-                this.playerConnection.sendPacket(new PacketPlayOutChat(new ChatMessage("container.isLocked", new Object[] { iinventory.getScoreboardDisplayName()}), (byte) 2));
+                this.playerConnection.sendPacket(new PacketPlayOutChat(new ChatMessage("container.isLocked", iinventory.getScoreboardDisplayName()), (byte) 2));
                 this.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("random.door_close", this.locX, this.locY, this.locZ, 1.0F, 1.0F));
 
                 iinventory.closeContainer(this); // CraftBukkit
@@ -813,7 +809,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public void p() {
-        this.activeContainer.b((EntityHuman) this);
+        this.activeContainer.b(this);
         this.activeContainer = this.defaultContainer;
     }
 
@@ -836,11 +832,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public void a(Statistic statistic, int i) {
         if (statistic != null) {
             this.bK.b(this, statistic, i);
-            Iterator iterator = this.getScoreboard().getObjectivesForCriteria(statistic.k()).iterator();
-
-            while (iterator.hasNext()) {
-                ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
 
+            for (ScoreboardObjective scoreboardobjective : this.getScoreboard().getObjectivesForCriteria(statistic.k())) {
                 this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).addScore(i);
             }
 
@@ -854,11 +847,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public void a(Statistic statistic) {
         if (statistic != null) {
             this.bK.setStatistic(this, statistic, 0);
-            Iterator iterator = this.getScoreboard().getObjectivesForCriteria(statistic.k()).iterator();
-
-            while (iterator.hasNext()) {
-                ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
 
+            for (ScoreboardObjective scoreboardobjective : this.getScoreboard().getObjectivesForCriteria(statistic.k())) {
                 this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).setScore(0);
             }
 
@@ -1021,7 +1011,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         // PaperSpigot end
         this.bR = packetplayinsettings.c();
         this.bS = packetplayinsettings.d();
-        this.getDataWatcher().watch(10, Byte.valueOf((byte) packetplayinsettings.e()));
+        this.getDataWatcher().watch(10, (byte) packetplayinsettings.e());
     }
 
     public EntityHuman.EnumChatVisibility getChatFlags() {
@@ -1046,9 +1036,9 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     public void d(Entity entity) {
         if (entity instanceof EntityHuman) {
-            this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(new int[] { entity.getId()}));
+            this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(entity.getId()));
         } else {
-            this.removeQueue.add(Integer.valueOf(entity.getId()));
+            this.removeQueue.add(entity.getId());
         }
 
     }
@@ -1065,13 +1055,13 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public Entity C() {
-        return (Entity) (this.bU == null ? this : this.bU);
+        return this.bU == null ? this : this.bU;
     }
 
     public void setSpectatorTarget(Entity entity) {
         Entity entity1 = this.C();
 
-        this.bU = (Entity) (entity == null ? this : entity);
+        this.bU = entity == null ? this : entity;
         if (entity1 != this.bU) {
             this.playerConnection.sendPacket(new PacketPlayOutCamera(this.bU));
             this.enderTeleportTo(this.bU.locX, this.bU.locY, this.bU.locZ);
diff --git a/src/main/java/net/minecraft/server/EntityProjectile.java b/src/main/java/net/minecraft/server/EntityProjectile.java
index e7cca3c6c..ab4b6a68c 100644
--- a/src/main/java/net/minecraft/server/EntityProjectile.java
+++ b/src/main/java/net/minecraft/server/EntityProjectile.java
@@ -62,9 +62,9 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         d0 /= (double) f2;
         d1 /= (double) f2;
         d2 /= (double) f2;
-        d0 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d1 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d2 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
+        d0 += this.getRandom().nextGaussian() * 0.007499999832361937D * (double) f1;
+        d1 += this.getRandom().nextGaussian() * 0.007499999832361937D * (double) f1;
+        d2 += this.getRandom().nextGaussian() * 0.007499999832361937D * (double) f1;
         d0 *= (double) f;
         d1 *= (double) f;
         d2 *= (double) f;
@@ -98,9 +98,9 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
             }
 
             this.inGround = false;
-            this.motX *= (double) (this.random.nextFloat() * 0.2F);
-            this.motY *= (double) (this.random.nextFloat() * 0.2F);
-            this.motZ *= (double) (this.random.nextFloat() * 0.2F);
+            this.motX *= (double) (this.getRandom().nextFloat() * 0.2F);
+            this.motY *= (double) (this.getRandom().nextFloat() * 0.2F);
+            this.motZ *= (double) (this.getRandom().nextFloat() * 0.2F);
             this.i = 0;
             this.ar = 0;
         } else {
@@ -123,8 +123,8 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
             double d0 = 0.0D;
             EntityLiving entityliving = this.getShooter();
 
-            for (int i = 0; i < list.size(); ++i) {
-                Entity entity1 = (Entity) list.get(i);
+            for (Object o : list) {
+                Entity entity1 = (Entity) o;
 
                 if (entity1.ad() && (entity1 != entityliving || this.ar >= 5)) {
                     float f = 0.3F;
@@ -176,7 +176,6 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         this.yaw = (float) (MathHelper.b(this.motX, this.motZ) * 180.0D / 3.1415927410125732D);
 
         for (this.pitch = (float) (MathHelper.b(this.motY, (double) f1) * 180.0D / 3.1415927410125732D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-            ;
         }
 
         while (this.pitch - this.lastPitch >= 180.0F) {
@@ -200,7 +199,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
             for (int j = 0; j < 4; ++j) {
                 float f4 = 0.25F;
 
-                this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * (double) f4, this.locY - this.motY * (double) f4, this.locZ - this.motZ * (double) f4, this.motX, this.motY, this.motZ, new int[0]);
+                this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * (double) f4, this.locY - this.motY * (double) f4, this.locZ - this.motZ * (double) f4, this.motX, this.motY, this.motZ);
             }
 
             f2 = 0.8F;
@@ -223,7 +222,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         nbttagcompound.setShort("xTile", (short) this.blockX);
         nbttagcompound.setShort("yTile", (short) this.blockY);
         nbttagcompound.setShort("zTile", (short) this.blockZ);
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(this.inBlockId);
+        MinecraftKey minecraftkey = Block.REGISTRY.c(this.inBlockId);
 
         nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
         nbttagcompound.setByte("shake", (byte) this.shake);
diff --git a/src/main/java/net/minecraft/server/EntityRabbit.java b/src/main/java/net/minecraft/server/EntityRabbit.java
index bb47e09ac..4580f1cd0 100644
--- a/src/main/java/net/minecraft/server/EntityRabbit.java
+++ b/src/main/java/net/minecraft/server/EntityRabbit.java
@@ -63,7 +63,7 @@ public class EntityRabbit extends EntityAnimal {
             }
         } else {
             this.b(1.5D * (double) entityrabbit_enumrabbitstate.a());
-            this.makeSound(this.cm(), this.bB(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) * 0.8F);
+            this.makeSound(this.cm(), this.bB(), ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F) * 0.8F);
         }
 
         this.bq = flag;
@@ -81,7 +81,7 @@ public class EntityRabbit extends EntityAnimal {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(18, Byte.valueOf((byte) 0));
+        this.datawatcher.a(18, (byte) 0);
     }
 
     public void E() {
@@ -96,7 +96,7 @@ public class EntityRabbit extends EntityAnimal {
         }
 
         if (this.bu > 0) {
-            this.bu -= this.random.nextInt(3);
+            this.bu -= this.getRandom().nextInt(3);
             if (this.bu < 0) {
                 this.bu = 0;
             }
@@ -127,7 +127,7 @@ public class EntityRabbit extends EntityAnimal {
                     Vec3D vec3d = new Vec3D(this.moveController.d(), this.moveController.e(), this.moveController.f());
 
                     if (pathentity != null && pathentity.e() < pathentity.d()) {
-                        vec3d = pathentity.a((Entity) this);
+                        vec3d = pathentity.a(this);
                     }
 
                     this.a(vec3d.a, vec3d.c);
@@ -215,7 +215,7 @@ public class EntityRabbit extends EntityAnimal {
 
     public boolean r(Entity entity) {
         if (this.getRabbitType() == 99) {
-            this.makeSound("mob.attack", 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            this.makeSound("mob.attack", 1.0F, (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F);
             return entity.damageEntity(DamageSource.mobAttack(this), 8.0F);
         } else {
             return entity.damageEntity(DamageSource.mobAttack(this), 3.0F);
@@ -235,7 +235,7 @@ public class EntityRabbit extends EntityAnimal {
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(2) + this.random.nextInt(1 + i);
+        int j = this.getRandom().nextInt(2) + this.getRandom().nextInt(1 + i);
 
         int k;
 
@@ -243,7 +243,7 @@ public class EntityRabbit extends EntityAnimal {
             this.a(Items.RABBIT_HIDE, 1);
         }
 
-        j = this.random.nextInt(2);
+        j = this.getRandom().nextInt(2);
 
         for (k = 0; k < j; ++k) {
             if (this.isBurning()) {
@@ -263,7 +263,7 @@ public class EntityRabbit extends EntityAnimal {
         EntityRabbit entityrabbit = new EntityRabbit(this.world);
 
         if (entityageable instanceof EntityRabbit) {
-            entityrabbit.setRabbitType(this.random.nextBoolean() ? this.getRabbitType() : ((EntityRabbit) entityageable).getRabbitType());
+            entityrabbit.setRabbitType(this.getRandom().nextBoolean() ? this.getRabbitType() : ((EntityRabbit) entityageable).getRabbitType());
         }
 
         return entityrabbit;
@@ -279,9 +279,9 @@ public class EntityRabbit extends EntityAnimal {
 
     public void setRabbitType(int i) {
         if (i == 99) {
-            this.goalSelector.a((PathfinderGoal) this.bm);
+            this.goalSelector.a(this.bm);
             this.goalSelector.a(4, new EntityRabbit.PathfinderGoalKillerRabbitMeleeAttack(this));
-            this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+            this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
             this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
             this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityWolf.class, true));
             if (!this.hasCustomName()) {
@@ -289,12 +289,12 @@ public class EntityRabbit extends EntityAnimal {
             }
         }
 
-        this.datawatcher.watch(18, Byte.valueOf((byte) i));
+        this.datawatcher.watch(18, (byte) i);
     }
 
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, GroupDataEntity groupdataentity) {
         Object object = super.prepare(difficultydamagescaler, groupdataentity);
-        int i = this.random.nextInt(6);
+        int i = this.getRandom().nextInt(6);
         boolean flag = false;
 
         if (object instanceof EntityRabbit.GroupDataRabbit) {
@@ -321,7 +321,7 @@ public class EntityRabbit extends EntityAnimal {
     }
 
     protected void cp() {
-        this.world.addParticle(EnumParticle.BLOCK_DUST, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[] { Block.getCombinedId(Blocks.CARROTS.fromLegacyData(7))});
+        this.world.addParticle(EnumParticle.BLOCK_DUST, this.locX + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.getRandom().nextFloat() * this.length), this.locZ + (double) (this.getRandom().nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, Block.getCombinedId(Blocks.CARROTS.fromLegacyData(7)));
         this.bu = 100;
     }
 
@@ -329,7 +329,7 @@ public class EntityRabbit extends EntityAnimal {
         return this.b(entityageable);
     }
 
-    static enum EnumRabbitState {
+    enum EnumRabbitState {
 
         NONE(0.0F, 0.0F, 30, 1), HOP(0.8F, 0.2F, 20, 10), STEP(1.0F, 0.45F, 14, 14), SPRINT(1.75F, 0.4F, 1, 8), ATTACK(2.0F, 0.7F, 7, 8);
 
@@ -338,7 +338,7 @@ public class EntityRabbit extends EntityAnimal {
         private final int h;
         private final int i;
 
-        private EnumRabbitState(float f, float f1, int i, int j) {
+        EnumRabbitState(float f, float f1, int i, int j) {
             this.f = f;
             this.g = f1;
             this.h = i;
@@ -433,7 +433,7 @@ public class EntityRabbit extends EntityAnimal {
                 IBlockData iblockdata = world.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
-                if (this.e && block instanceof BlockCarrots && ((Integer) iblockdata.get(BlockCarrots.AGE)).intValue() == 7) {
+                if (this.e && block instanceof BlockCarrots && (Integer) iblockdata.get(BlockCarrots.AGE) == 7) {
                     world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 2);
                     world.setAir(blockposition, true);
                     this.c.cp();
@@ -453,7 +453,7 @@ public class EntityRabbit extends EntityAnimal {
                 IBlockData iblockdata = world.getType(blockposition);
 
                 block = iblockdata.getBlock();
-                if (block instanceof BlockCarrots && ((Integer) iblockdata.get(BlockCarrots.AGE)).intValue() == 7 && this.d && !this.e) {
+                if (block instanceof BlockCarrots && (Integer) iblockdata.get(BlockCarrots.AGE) == 7 && this.d && !this.e) {
                     this.e = true;
                     return true;
                 }
diff --git a/src/main/java/net/minecraft/server/EntitySheep.java b/src/main/java/net/minecraft/server/EntitySheep.java
index 29611a194..8fa63f8ba 100644
--- a/src/main/java/net/minecraft/server/EntitySheep.java
+++ b/src/main/java/net/minecraft/server/EntitySheep.java
@@ -29,7 +29,7 @@ public class EntitySheep extends EntityAnimal {
     private PathfinderGoalEatTile bq = new PathfinderGoalEatTile(this);
 
     public static float[] a(EnumColor enumcolor) {
-        return (float[]) EntitySheep.bo.get(enumcolor);
+        return EntitySheep.bo.get(enumcolor);
     }
 
     public EntitySheep(World world) {
@@ -71,7 +71,7 @@ public class EntitySheep extends EntityAnimal {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Byte((byte) 0));
+        this.datawatcher.a(16, (byte) 0);
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
@@ -79,7 +79,7 @@ public class EntitySheep extends EntityAnimal {
             this.a(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, this.getColor().getColorIndex()), 0.0F);
         }
 
-        int j = this.random.nextInt(2) + 1 + this.random.nextInt(1 + i);
+        int j = this.getRandom().nextInt(2) + 1 + this.getRandom().nextInt(1 + i);
 
         for (int k = 0; k < j; ++k) {
             if (this.isBurning()) {
@@ -110,14 +110,14 @@ public class EntitySheep extends EntityAnimal {
                 // CraftBukkit end
 
                 this.setSheared(true);
-                int i = 1 + this.random.nextInt(3);
+                int i = 1 + this.getRandom().nextInt(3);
 
                 for (int j = 0; j < i; ++j) {
                     EntityItem entityitem = this.a(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, this.getColor().getColorIndex()), 1.0F);
 
-                    entityitem.motY += (double) (this.random.nextFloat() * 0.05F);
-                    entityitem.motX += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
-                    entityitem.motZ += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
+                    entityitem.motY += (double) (this.getRandom().nextFloat() * 0.05F);
+                    entityitem.motX += (double) ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.1F);
+                    entityitem.motZ += (double) ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.1F);
                 }
             }
 
@@ -163,7 +163,7 @@ public class EntitySheep extends EntityAnimal {
     public void setColor(EnumColor enumcolor) {
         byte b0 = this.datawatcher.getByte(16);
 
-        this.datawatcher.watch(16, Byte.valueOf((byte) (b0 & 240 | enumcolor.getColorIndex() & 15)));
+        this.datawatcher.watch(16, (byte) (b0 & 240 | enumcolor.getColorIndex() & 15));
     }
 
     public boolean isSheared() {
@@ -174,9 +174,9 @@ public class EntitySheep extends EntityAnimal {
         byte b0 = this.datawatcher.getByte(16);
 
         if (flag) {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 | 16)));
+            this.datawatcher.watch(16, (byte) (b0 | 16));
         } else {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 & -17)));
+            this.datawatcher.watch(16, (byte) (b0 & -17));
         }
 
     }
@@ -191,7 +191,7 @@ public class EntitySheep extends EntityAnimal {
         EntitySheep entitysheep = (EntitySheep) entityageable;
         EntitySheep entitysheep1 = new EntitySheep(this.world);
 
-        entitysheep1.setColor(this.a((EntityAnimal) this, (EntityAnimal) entitysheep));
+        entitysheep1.setColor(this.a(this, entitysheep));
         return entitysheep1;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySilverfish.java b/src/main/java/net/minecraft/server/EntitySilverfish.java
index b9821540f..f8b729641 100644
--- a/src/main/java/net/minecraft/server/EntitySilverfish.java
+++ b/src/main/java/net/minecraft/server/EntitySilverfish.java
@@ -13,7 +13,7 @@ public class EntitySilverfish extends EntityMonster {
         this.goalSelector.a(3, this.a = new EntitySilverfish.PathfinderGoalSilverfishWakeOthers(this));
         this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityHuman.class, 1.0D, false));
         this.goalSelector.a(5, new EntitySilverfish.PathfinderGoalSilverfishHideInBlock(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
     }
 
@@ -200,7 +200,7 @@ public class EntitySilverfish extends EntityMonster {
                                 if (world.getGameRules().getBoolean("mobGriefing")) {
                                     world.setAir(blockposition1, true);
                                 } else {
-                                    world.setTypeAndData(blockposition1, ((BlockMonsterEggs.EnumMonsterEggVarient) iblockdata.get(BlockMonsterEggs.VARIANT)).d(), 3);
+                                    world.setTypeAndData(blockposition1, iblockdata.get(BlockMonsterEggs.VARIANT).d(), 3);
                                 }
 
                                 if (random.nextBoolean()) {
diff --git a/src/main/java/net/minecraft/server/EntitySkeleton.java b/src/main/java/net/minecraft/server/EntitySkeleton.java
index 46bff95d8..91a57d8ee 100644
--- a/src/main/java/net/minecraft/server/EntitySkeleton.java
+++ b/src/main/java/net/minecraft/server/EntitySkeleton.java
@@ -18,7 +18,7 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
         this.goalSelector.a(4, new PathfinderGoalRandomStroll(this, 1.0D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityIronGolem.class, true));
         if (world != null && !world.isClientSide) {
@@ -34,7 +34,7 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(13, new Byte((byte) 0));
+        this.datawatcher.a(13, (byte) 0);
     }
 
     protected String z() {
@@ -74,16 +74,16 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
             float f = this.c(1.0F);
             BlockPosition blockposition = new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ);
 
-            if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.i(blockposition)) {
+            if (f > 0.5F && this.getRandom().nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.i(blockposition)) {
                 boolean flag = true;
                 ItemStack itemstack = this.getEquipment(4);
 
                 if (itemstack != null) {
                     if (itemstack.e()) {
-                        itemstack.setData(itemstack.h() + this.random.nextInt(2));
+                        itemstack.setData(itemstack.h() + this.getRandom().nextInt(2));
                         if (itemstack.h() >= itemstack.j()) {
                             this.b(itemstack);
-                            this.setEquipment(4, (ItemStack) null);
+                            this.setEquipment(4, null);
                         }
                     }
 
@@ -128,7 +128,7 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
             double d1 = entityhuman.locZ - this.locZ;
 
             if (d0 * d0 + d1 * d1 >= 2500.0D) {
-                entityhuman.b((Statistic) AchievementList.v);
+                entityhuman.b(AchievementList.v);
             }
         } else if (damagesource.getEntity() instanceof EntityCreeper && ((EntityCreeper) damagesource.getEntity()).isPowered() && ((EntityCreeper) damagesource.getEntity()).cp()) {
             ((EntityCreeper) damagesource.getEntity()).cq();
@@ -155,20 +155,20 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
         int k;
 
         if (this.getSkeletonType() == 1) {
-            j = this.random.nextInt(3 + i) - 1;
+            j = this.getRandom().nextInt(3 + i) - 1;
 
             for (k = 0; k < j; ++k) {
                 this.a(Items.COAL, 1);
             }
         } else {
-            j = this.random.nextInt(3 + i);
+            j = this.getRandom().nextInt(3 + i);
 
             for (k = 0; k < j; ++k) {
                 this.a(Items.ARROW, 1);
             }
         }
 
-        j = this.random.nextInt(3 + i);
+        j = this.getRandom().nextInt(3 + i);
 
         for (k = 0; k < j; ++k) {
             this.a(Items.BONE, 1);
@@ -201,12 +201,12 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
             this.b(difficultydamagescaler);
         }
 
-        this.j(this.random.nextFloat() < 0.55F * difficultydamagescaler.c());
+        this.j(this.getRandom().nextFloat() < 0.55F * difficultydamagescaler.c());
         if (this.getEquipment(4) == null) {
             Calendar calendar = this.world.Y();
 
-            if (calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.random.nextFloat() < 0.25F) {
-                this.setEquipment(4, new ItemStack(this.random.nextFloat() < 0.1F ? Blocks.LIT_PUMPKIN : Blocks.PUMPKIN));
+            if (calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.getRandom().nextFloat() < 0.25F) {
+                this.setEquipment(4, new ItemStack(this.getRandom().nextFloat() < 0.1F ? Blocks.LIT_PUMPKIN : Blocks.PUMPKIN));
                 this.dropChances[4] = 0.0F;
             }
         }
@@ -215,8 +215,8 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
     }
 
     public void n() {
-        this.goalSelector.a((PathfinderGoal) this.b);
-        this.goalSelector.a((PathfinderGoal) this.a);
+        this.goalSelector.a(this.b);
+        this.goalSelector.a(this.a);
         ItemStack itemstack = this.bA();
 
         if (itemstack != null && itemstack.getItem() == Items.BOW) {
@@ -232,7 +232,7 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
         int i = EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_DAMAGE.id, this.bA());
         int j = EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_KNOCKBACK.id, this.bA());
 
-        entityarrow.b((double) (f * 2.0F) + this.random.nextGaussian() * 0.25D + (double) ((float) this.world.getDifficulty().a() * 0.11F));
+        entityarrow.b((double) (f * 2.0F) + this.getRandom().nextGaussian() * 0.25D + (double) ((float) this.world.getDifficulty().a() * 0.11F));
         if (i > 0) {
             entityarrow.b(entityarrow.j() + (double) i * 0.5D + 0.5D);
         }
@@ -273,7 +273,7 @@ public class EntitySkeleton extends EntityMonster implements IRangedEntity {
     }
 
     public void setSkeletonType(int i) {
-        this.datawatcher.watch(13, Byte.valueOf((byte) i));
+        this.datawatcher.watch(13, (byte) i);
         this.fireProof = i == 1;
         if (i == 1) {
             this.setSize(0.72F, 2.535F);
diff --git a/src/main/java/net/minecraft/server/EntitySlice.java b/src/main/java/net/minecraft/server/EntitySlice.java
index ae6c52f2c..5e40d0c9a 100644
--- a/src/main/java/net/minecraft/server/EntitySlice.java
+++ b/src/main/java/net/minecraft/server/EntitySlice.java
@@ -22,10 +22,9 @@ public class EntitySlice<T> extends AbstractSet<T> {
         this.d = oclass;
         this.c.add(oclass);
         this.b.put(oclass, this.e);
-        Iterator iterator = EntitySlice.a.iterator();
 
-        while (iterator.hasNext()) {
-            Class oclass1 = (Class) iterator.next();
+        for (Class<?> aClass : EntitySlice.a) {
+            Class oclass1 = (Class) aClass;
 
             this.a(oclass1);
         }
@@ -34,11 +33,8 @@ public class EntitySlice<T> extends AbstractSet<T> {
 
     protected void a(Class<?> oclass) {
         EntitySlice.a.add(oclass);
-        Iterator iterator = this.e.iterator();
-
-        while (iterator.hasNext()) {
-            Object object = iterator.next();
 
+        for (Object object : this.e) {
             if (oclass.isAssignableFrom(object.getClass())) {
                 this.a((T) object, oclass);
             }
@@ -60,10 +56,9 @@ public class EntitySlice<T> extends AbstractSet<T> {
     }
 
     public boolean add(T t0) {
-        Iterator iterator = this.c.iterator();
 
-        while (iterator.hasNext()) {
-            Class oclass = (Class) iterator.next();
+        for (Class<?> aClass : this.c) {
+            Class oclass = (Class) aClass;
 
             if (oclass.isAssignableFrom(t0.getClass())) {
                 this.a(t0, oclass);
@@ -74,7 +69,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
     }
 
     private void a(T t0, Class<?> oclass) {
-        List list = (List) this.b.get(oclass);
+        List list = this.b.get(oclass);
 
         if (list == null) {
             this.b.put(oclass, Lists.newArrayList(t0));
@@ -85,17 +80,15 @@ public class EntitySlice<T> extends AbstractSet<T> {
     }
 
     public boolean remove(Object object) {
-        Object object1 = object;
         boolean flag = false;
-        Iterator iterator = this.c.iterator();
 
-        while (iterator.hasNext()) {
-            Class oclass = (Class) iterator.next();
+        for (Class<?> aClass : this.c) {
+            Class oclass = (Class) aClass;
 
-            if (oclass.isAssignableFrom(object1.getClass())) {
-                List list = (List) this.b.get(oclass);
+            if (oclass.isAssignableFrom(object.getClass())) {
+                List list = this.b.get(oclass);
 
-                if (list != null && list.remove(object1)) {
+                if (list != null && list.remove(object)) {
                     flag = true;
                 }
             }
@@ -109,17 +102,15 @@ public class EntitySlice<T> extends AbstractSet<T> {
     }
 
     public <S> Iterable<S> c(final Class<S> oclass) {
-        return new Iterable() {
-            public Iterator<S> iterator() {
-                List list = (List) EntitySlice.this.b.get(EntitySlice.this.b(oclass));
+        return () -> {
+            List list = (List) EntitySlice.this.b.get(EntitySlice.this.b(oclass));
 
-                if (list == null) {
-                    return Iterators.emptyIterator();
-                } else {
-                    Iterator iterator = list.iterator();
+            if (list == null) {
+                return Iterators.emptyIterator();
+            } else {
+                Iterator iterator = list.iterator();
 
-                    return Iterators.filter(iterator, oclass);
-                }
+                return Iterators.filter(iterator, oclass);
             }
         };
     }
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index c927832b6..4c0bcf1ae 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -24,11 +24,11 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) 1));
+        this.datawatcher.a(16, (byte) 1);
     }
 
     public void setSize(int i) {
-        this.datawatcher.watch(16, Byte.valueOf((byte) i));
+        this.datawatcher.watch(16, (byte) i);
         this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
         this.setPosition(this.locX, this.locY, this.locZ);
         this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) (i * i));
@@ -79,8 +79,8 @@ public class EntitySlime extends EntityInsentient implements IMonster {
             int i = this.getSize();
 
             for (int j = 0; j < i * 8; ++j) {
-                float f = this.random.nextFloat() * 3.1415927F * 2.0F;
-                float f1 = this.random.nextFloat() * 0.5F + 0.5F;
+                float f = this.getRandom().nextFloat() * 3.1415927F * 2.0F;
+                float f1 = this.getRandom().nextFloat() * 0.5F + 0.5F;
                 float f2 = MathHelper.sin(f) * (float) i * 0.5F * f1;
                 float f3 = MathHelper.cos(f) * (float) i * 0.5F * f1;
                 World world = this.world;
@@ -88,11 +88,11 @@ public class EntitySlime extends EntityInsentient implements IMonster {
                 double d0 = this.locX + (double) f2;
                 double d1 = this.locZ + (double) f3;
 
-                world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D, new int[0]);
+                world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D);
             }
 
             if (this.cl()) {
-                this.makeSound(this.ck(), this.bB(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
+                this.makeSound(this.ck(), this.bB(), ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F) / 0.8F);
             }
 
             this.a = -0.5F;
@@ -109,7 +109,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     }
 
     protected int cg() {
-        return this.random.nextInt(20) + 10;
+        return this.getRandom().nextInt(20) + 10;
     }
 
     protected EntitySlime cf() {
@@ -123,7 +123,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
             this.setSize(0.51000005F * (float) j, 0.51000005F * (float) j);
             this.yaw = this.aK;
             this.aI = this.aK;
-            if (this.V() && this.random.nextInt(20) == 0) {
+            if (this.V() && this.getRandom().nextInt(20) == 0) {
                 this.X();
             }
         }
@@ -135,7 +135,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         int i = this.getSize();
 
         if (!this.world.isClientSide && i > 1 && this.getHealth() <= 0.0F) {
-            int j = 2 + this.random.nextInt(3);
+            int j = 2 + this.getRandom().nextInt(3);
 
             // CraftBukkit start
             SlimeSplitEvent event = new SlimeSplitEvent((org.bukkit.entity.Slime) this.getBukkitEntity(), j);
@@ -163,7 +163,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
                 }
 
                 entityslime.setSize(i / 2);
-                entityslime.setPositionRotation(this.locX + (double) f, this.locY + 0.5D, this.locZ + (double) f1, this.random.nextFloat() * 360.0F, 0.0F);
+                entityslime.setPositionRotation(this.locX + (double) f, this.locY + 0.5D, this.locZ + (double) f1, this.getRandom().nextFloat() * 360.0F, 0.0F);
                 this.world.addEntity(entityslime, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SLIME_SPLIT); // CraftBukkit - SpawnReason
             }
         }
@@ -190,8 +190,8 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         int i = this.getSize();
 
         if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.cj())) {
-            this.makeSound("mob.attack", 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
-            this.a((EntityLiving) this, (Entity) entityliving);
+            this.makeSound("mob.attack", 1.0F, (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F);
+            this.a(this, entityliving);
         }
 
     }
@@ -224,19 +224,19 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         BlockPosition blockposition = new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ));
         Chunk chunk = this.world.getChunkAtWorldCoords(blockposition);
 
-        if (this.world.getWorldData().getType() == WorldType.FLAT && this.random.nextInt(4) != 1) {
+        if (this.world.getWorldData().getType() == WorldType.FLAT && this.getRandom().nextInt(4) != 1) {
             return false;
         } else {
             if (this.world.getDifficulty() != EnumDifficulty.PEACEFUL) {
                 BiomeBase biomebase = this.world.getBiome(blockposition);
 
-                if (biomebase == BiomeBase.SWAMPLAND && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.y() && this.world.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
+                if (biomebase == BiomeBase.SWAMPLAND && this.locY > 50.0D && this.locY < 70.0D && this.getRandom().nextFloat() < 0.5F && this.getRandom().nextFloat() < this.world.y() && this.world.getLightLevel(new BlockPosition(this)) <= this.getRandom().nextInt(8)) {
                     return super.bR();
                 }
 
                 // PaperSpigot - Toggle to make all chunks spawn chunks
                 boolean isSlimeChunk = world.paperSpigotConfig.allChunksAreSlimeChunks || chunk.a(987234911L).nextInt(10) == 0;
-                if (this.random.nextInt(10) == 0 && isSlimeChunk && this.locY < 40.0D) {
+                if (this.getRandom().nextInt(10) == 0 && isSlimeChunk && this.locY < 40.0D) {
                     return super.bR();
                 }
             }
@@ -267,9 +267,9 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     }
 
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, GroupDataEntity groupdataentity) {
-        int i = this.random.nextInt(3);
+        int i = this.getRandom().nextInt(3);
 
-        if (i < 2 && this.random.nextFloat() < 0.5F * difficultydamagescaler.c()) {
+        if (i < 2 && this.getRandom().nextFloat() < 0.5F * difficultydamagescaler.c()) {
             ++i;
         }
 
diff --git a/src/main/java/net/minecraft/server/EntitySmallFireball.java b/src/main/java/net/minecraft/server/EntitySmallFireball.java
index f769de551..0be6cd5cb 100644
--- a/src/main/java/net/minecraft/server/EntitySmallFireball.java
+++ b/src/main/java/net/minecraft/server/EntitySmallFireball.java
@@ -29,7 +29,7 @@ public class EntitySmallFireball extends EntityFireball {
                     this.a(this.shooter, movingobjectposition.entity);
                     if (!movingobjectposition.entity.isFireProof()) {
                         // CraftBukkit start - Entity damage by entity event + combust event
-                        EntityCombustByEntityEvent event = new EntityCombustByEntityEvent((org.bukkit.entity.Projectile) this.getBukkitEntity(), movingobjectposition.entity.getBukkitEntity(), 5);
+                        EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), movingobjectposition.entity.getBukkitEntity(), 5);
                         movingobjectposition.entity.world.getServer().getPluginManager().callEvent(event);
 
                         if (!event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/server/EntitySnowman.java b/src/main/java/net/minecraft/server/EntitySnowman.java
index cb875c75d..02f1c99f0 100644
--- a/src/main/java/net/minecraft/server/EntitySnowman.java
+++ b/src/main/java/net/minecraft/server/EntitySnowman.java
@@ -69,7 +69,7 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(16);
+        int j = this.getRandom().nextInt(16);
 
         for (int k = 0; k < j; ++k) {
             this.a(Items.SNOWBALL, 1);
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index 68a253c96..40b40883b 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -14,7 +14,7 @@ public class EntitySpider extends EntityMonster {
         this.goalSelector.a(5, new PathfinderGoalRandomStroll(this, 0.8D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(2, new EntitySpider.PathfinderGoalSpiderNearestAttackableTarget(this, EntityHuman.class));
         this.targetSelector.a(3, new EntitySpider.PathfinderGoalSpiderNearestAttackableTarget(this, EntityIronGolem.class));
     }
@@ -29,7 +29,7 @@ public class EntitySpider extends EntityMonster {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, new Byte((byte) 0));
+        this.datawatcher.a(16, (byte) 0);
     }
 
     public void t_() {
@@ -68,7 +68,7 @@ public class EntitySpider extends EntityMonster {
 
     protected void dropDeathLoot(boolean flag, int i) {
         super.dropDeathLoot(flag, i);
-        if (flag && (this.random.nextInt(3) == 0 || this.random.nextInt(1 + i) > 0)) {
+        if (flag && (this.getRandom().nextInt(3) == 0 || this.getRandom().nextInt(1 + i) > 0)) {
             this.a(Items.SPIDER_EYE, 1);
         }
 
@@ -101,7 +101,7 @@ public class EntitySpider extends EntityMonster {
             b0 &= -2;
         }
 
-        this.datawatcher.watch(16, Byte.valueOf(b0));
+        this.datawatcher.watch(16, b0);
     }
 
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, GroupDataEntity groupdataentity) {
@@ -111,7 +111,7 @@ public class EntitySpider extends EntityMonster {
             EntitySkeleton entityskeleton = new EntitySkeleton(this.world);
 
             entityskeleton.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, 0.0F);
-            entityskeleton.prepare(difficultydamagescaler, (GroupDataEntity) null);
+            entityskeleton.prepare(difficultydamagescaler, null);
             this.world.addEntity(entityskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.JOCKEY); // CraftBukkit - add SpawnReason
             entityskeleton.mount(this);
         }
@@ -161,7 +161,7 @@ public class EntitySpider extends EntityMonster {
             float f = this.b.c(1.0F);
 
             if (f >= 0.5F && this.b.bc().nextInt(100) == 0) {
-                this.b.setGoalTarget((EntityLiving) null);
+                this.b.setGoalTarget(null);
                 return false;
             } else {
                 return super.b();
diff --git a/src/main/java/net/minecraft/server/EntitySquid.java b/src/main/java/net/minecraft/server/EntitySquid.java
index 31996b462..98143f68d 100644
--- a/src/main/java/net/minecraft/server/EntitySquid.java
+++ b/src/main/java/net/minecraft/server/EntitySquid.java
@@ -20,8 +20,8 @@ public class EntitySquid extends EntityWaterAnimal {
     public EntitySquid(World world) {
         super(world);
         this.setSize(0.95F, 0.95F);
-        this.random.setSeed((long) (1 + this.getId()));
-        this.bq = 1.0F / (this.random.nextFloat() + 1.0F) * 0.2F;
+        this.getRandom().setSeed((long) (1 + this.getId()));
+        this.bq = 1.0F / (this.getRandom().nextFloat() + 1.0F) * 0.2F;
         this.goalSelector.a(0, new EntitySquid.PathfinderGoalSquid(this));
     }
 
@@ -59,7 +59,7 @@ public class EntitySquid extends EntityWaterAnimal {
     }
 
     protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(3 + i) + 1;
+        int j = this.getRandom().nextInt(3 + i) + 1;
 
         for (int k = 0; k < j; ++k) {
             this.a(new ItemStack(Items.DYE, 1, EnumColor.BLACK.getInvColorIndex()), 0.0F);
@@ -85,8 +85,8 @@ public class EntitySquid extends EntityWaterAnimal {
                 this.bl = 6.2831855F;
             } else {
                 this.bl = (float) ((double) this.bl - 6.283185307179586D);
-                if (this.random.nextInt(10) == 0) {
-                    this.bq = 1.0F / (this.random.nextFloat() + 1.0F) * 0.2F;
+                if (this.getRandom().nextInt(10) == 0) {
+                    this.bq = 1.0F / (this.getRandom().nextFloat() + 1.0F) * 0.2F;
                 }
 
                 this.world.broadcastEntityEffect(this, (byte) 19);
@@ -142,7 +142,7 @@ public class EntitySquid extends EntityWaterAnimal {
 
     public boolean bR() {
         // PaperSpigot - Configurable squid spawn range
-        return this.locY > this.world.paperSpigotConfig.squidMinSpawnHeight && this.locY < (double) this.world.paperSpigotConfig.squidMaxSpawnHeight && super.bR();
+        return this.locY > this.world.paperSpigotConfig.squidMinSpawnHeight && this.locY < this.world.paperSpigotConfig.squidMaxSpawnHeight && super.bR();
     }
 
     public void b(float f, float f1, float f2) {
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index 211864c14..dbd42cf4b 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -27,11 +27,8 @@ public class EntityTracker {
         if (entity instanceof EntityPlayer) {
             this.addEntity(entity, 512, 2);
             EntityPlayer entityplayer = (EntityPlayer) entity;
-            Iterator iterator = this.c.iterator();
-
-            while (iterator.hasNext()) {
-                EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+            for (EntityTrackerEntry entitytrackerentry : this.c) {
                 if (entitytrackerentry.tracker != entityplayer) {
                     entitytrackerentry.updatePlayer(entityplayer);
                 }
@@ -118,7 +115,7 @@ public class EntityTracker {
             crashreportsystemdetails.a("Tracking range", i + " blocks");
             final int finalI = i; // CraftBukkit - fix decompile error
             crashreportsystemdetails.a("Update interval", new Callable() {
-                public String a() throws Exception {
+                public String a() {
                     String s = "Once per " + finalI + " ticks"; // CraftBukkit
 
                     if (finalI == Integer.MAX_VALUE) { // CraftBukkit
@@ -150,11 +147,8 @@ public class EntityTracker {
         org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
         if (entity instanceof EntityPlayer) {
             EntityPlayer entityplayer = (EntityPlayer) entity;
-            Iterator iterator = this.c.iterator();
-
-            while (iterator.hasNext()) {
-                EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+            for (EntityTrackerEntry entitytrackerentry : this.c) {
                 entitytrackerentry.a(entityplayer);
             }
         }
@@ -191,11 +185,8 @@ public class EntityTracker {
     }
 
     public void a(EntityPlayer entityplayer) {
-        Iterator iterator = this.c.iterator();
-
-        while (iterator.hasNext()) {
-            EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+        for (EntityTrackerEntry entitytrackerentry : this.c) {
             if (entitytrackerentry.tracker == entityplayer) {
                 entitytrackerentry.scanPlayers(this.world.players);
             } else {
@@ -224,22 +215,16 @@ public class EntityTracker {
     }
 
     public void untrackPlayer(EntityPlayer entityplayer) {
-        Iterator iterator = this.c.iterator();
-
-        while (iterator.hasNext()) {
-            EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+        for (EntityTrackerEntry entitytrackerentry : this.c) {
             entitytrackerentry.clear(entityplayer);
         }
 
     }
 
     public void a(EntityPlayer entityplayer, Chunk chunk) {
-        Iterator iterator = this.c.iterator();
-
-        while (iterator.hasNext()) {
-            EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+        for (EntityTrackerEntry entitytrackerentry : this.c) {
             if (entitytrackerentry.tracker != entityplayer && entitytrackerentry.tracker.ae == chunk.locX && entitytrackerentry.tracker.ag == chunk.locZ) {
                 entitytrackerentry.updatePlayer(entityplayer);
             }
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 1fc2388ea..3d3fc3df5 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Sets;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -42,7 +41,7 @@ public class EntityTrackerEntry {
     // PaperSpigot start
     // Replace trackedPlayers Set with a Map. The value is true until the player receives
     // their first update (which is forced to have absolute coordinates), false afterward.
-    public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new java.util.HashMap<EntityPlayer, Boolean>();
+    public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new java.util.HashMap<>();
     public Set<EntityPlayer> trackedPlayers = trackedPlayerMap.keySet();
     // PaperSpigot end
 
@@ -90,10 +89,9 @@ public class EntityTrackerEntry {
 
             if (this.m % 10 == 0 && itemstack != null && itemstack.getItem() instanceof ItemWorldMap) { // CraftBukkit - Moved this.m % 10 logic here so item frames do not enter the other blocks
                 WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, this.tracker.world);
-                Iterator iterator = this.trackedPlayers.iterator(); // CraftBukkit
 
-                while (iterator.hasNext()) {
-                    EntityHuman entityhuman = (EntityHuman) iterator.next();
+                for (EntityPlayer trackedPlayer : this.trackedPlayers) {
+                    EntityHuman entityhuman = (EntityHuman) trackedPlayer;
                     EntityPlayer entityplayer = (EntityPlayer) entityhuman;
 
                     worldmap.a(entityplayer, itemstack);
@@ -296,11 +294,8 @@ public class EntityTrackerEntry {
     }
 
     public void broadcast(Packet packet) {
-        Iterator iterator = this.trackedPlayers.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : this.trackedPlayers) {
             entityplayer.playerConnection.sendPacket(packet);
         }
 
@@ -315,11 +310,8 @@ public class EntityTrackerEntry {
     }
 
     public void a() {
-        Iterator iterator = this.trackedPlayers.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : this.trackedPlayers) {
             entityplayer.d(this.tracker);
         }
 
@@ -417,11 +409,8 @@ public class EntityTrackerEntry {
 
                     if (this.tracker instanceof EntityLiving) {
                         EntityLiving entityliving = (EntityLiving) this.tracker;
-                        Iterator iterator = entityliving.getEffects().iterator();
-
-                        while (iterator.hasNext()) {
-                            MobEffect mobeffect = (MobEffect) iterator.next();
 
+                        for (MobEffect mobeffect : entityliving.getEffects()) {
                             entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityEffect(this.tracker.getId(), mobeffect));
                         }
                     }
@@ -448,8 +437,8 @@ public class EntityTrackerEntry {
     }
 
     public void scanPlayers(List<EntityHuman> list) {
-        for (int i = 0; i < list.size(); ++i) {
-            this.updatePlayer((EntityPlayer) list.get(i));
+        for (EntityHuman entityHuman : list) {
+            this.updatePlayer((EntityPlayer) entityHuman);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index f1c905aa0..d2df11cd8 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -82,7 +82,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
             BlockPosition blockposition = new BlockPosition(this);
 
             this.world.ae().a(blockposition);
-            this.profession = 70 + this.random.nextInt(50);
+            this.profession = 70 + this.getRandom().nextInt(50);
             this.village = this.world.ae().getClosestVillage(blockposition, 32);
             if (this.village == null) {
                 this.cj();
@@ -101,13 +101,10 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
             --this.bs;
             if (this.bs <= 0) {
                 if (this.bt) {
-                    Iterator iterator = this.br.iterator();
-
-                    while (iterator.hasNext()) {
-                        MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
 
+                    for (MerchantRecipe merchantrecipe : this.br) {
                         if (merchantrecipe.h()) {
-                            merchantrecipe.a(this.random.nextInt(6) + this.random.nextInt(6) + 2);
+                            merchantrecipe.a(this.getRandom().nextInt(6) + this.getRandom().nextInt(6) + 2);
                         }
                     }
 
@@ -145,7 +142,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
 
     protected void h() {
         super.h();
-        this.datawatcher.a(16, Integer.valueOf(0));
+        this.datawatcher.a(16, 0);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -216,7 +213,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
     }
 
     public void setProfession(int i) {
-        this.datawatcher.watch(16, Integer.valueOf(i));
+        this.datawatcher.watch(16, i);
     }
 
     public int getProfession() {
@@ -329,9 +326,9 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
         merchantrecipe.g();
         this.a_ = -this.w();
         this.makeSound("mob.villager.yes", this.bB(), this.bC());
-        int i = 3 + this.random.nextInt(4);
+        int i = 3 + this.getRandom().nextInt(4);
 
-        if (merchantrecipe.e() == 1 || this.random.nextInt(5) == 0) {
+        if (merchantrecipe.e() == 1 || this.getRandom().nextInt(5) == 0) {
             this.bs = 40;
             this.bt = true;
             this.bu = true;
@@ -380,7 +377,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
         if (this.bx != 0 && this.by != 0) {
             ++this.by;
         } else {
-            this.bx = this.random.nextInt(aentityvillager_imerchantrecipeoption.length) + 1;
+            this.bx = this.getRandom().nextInt(aentityvillager_imerchantrecipeoption.length) + 1;
             this.by = 1;
         }
 
@@ -394,13 +391,12 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
 
         if (j >= 0 && j < aentityvillager_imerchantrecipeoption1.length) {
             EntityVillager.IMerchantRecipeOption[] aentityvillager_imerchantrecipeoption2 = aentityvillager_imerchantrecipeoption1[j];
-            EntityVillager.IMerchantRecipeOption[] aentityvillager_imerchantrecipeoption3 = aentityvillager_imerchantrecipeoption2;
             int k = aentityvillager_imerchantrecipeoption2.length;
 
             for (int l = 0; l < k; ++l) {
-                EntityVillager.IMerchantRecipeOption entityvillager_imerchantrecipeoption = aentityvillager_imerchantrecipeoption3[l];
+                EntityVillager.IMerchantRecipeOption entityvillager_imerchantrecipeoption = aentityvillager_imerchantrecipeoption2[l];
 
-                entityvillager_imerchantrecipeoption.a(this.br, this.random);
+                entityvillager_imerchantrecipeoption.a(this.br, this.getRandom());
             }
         }
 
@@ -462,7 +458,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
             }
 
             if (s1 != null) {
-                ChatMessage chatmessage = new ChatMessage("entity.Villager." + s1, new Object[0]);
+                ChatMessage chatmessage = new ChatMessage("entity.Villager." + s1);
 
                 chatmessage.getChatModifier().setChatHoverable(this.aQ());
                 chatmessage.getChatModifier().setInsertion(this.getUniqueID().toString());
@@ -497,7 +493,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
     public EntityVillager b(EntityAgeable entityageable) {
         EntityVillager entityvillager = new EntityVillager(this.world);
 
-        entityvillager.prepare(this.world.E(new BlockPosition(entityvillager)), (GroupDataEntity) null);
+        entityvillager.prepare(this.world.E(new BlockPosition(entityvillager)), null);
         return entityvillager;
     }
 
@@ -510,7 +506,7 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
             EntityWitch entitywitch = new EntityWitch(this.world);
 
             entitywitch.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
-            entitywitch.prepare(this.world.E(new BlockPosition(entitywitch)), (GroupDataEntity) null);
+            entitywitch.prepare(this.world.E(new BlockPosition(entitywitch)), null);
             entitywitch.k(this.ce());
             if (this.hasCustomName()) {
                 entitywitch.setCustomName(this.getCustomName());
@@ -751,11 +747,11 @@ public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
     static class MerchantOptionRandomRange extends Tuple<Integer, Integer> {
 
         public MerchantOptionRandomRange(int i, int j) {
-            super(Integer.valueOf(i), Integer.valueOf(j));
+            super(i, j);
         }
 
         public int a(Random random) {
-            return ((Integer) this.a()).intValue() >= ((Integer) this.b()).intValue() ? ((Integer) this.a()).intValue() : ((Integer) this.a()).intValue() + random.nextInt(((Integer) this.b()).intValue() - ((Integer) this.a()).intValue() + 1);
+            return (Integer) this.a() >= (Integer) this.b() ? (Integer) this.a() : (Integer) this.a() + random.nextInt((Integer) this.b() - (Integer) this.a() + 1);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index fb19bad3c..dfd0daab6 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -41,17 +41,17 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         this.goalSelector.a(5, new PathfinderGoalRandomStroll(this, 1.0D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(7, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityInsentient.class, 0, false, false, EntityWither.bq));
         this.b_ = 50;
     }
 
     protected void h() {
         super.h();
-        this.datawatcher.a(17, new Integer(0));
-        this.datawatcher.a(18, new Integer(0));
-        this.datawatcher.a(19, new Integer(0));
-        this.datawatcher.a(20, new Integer(0));
+        this.datawatcher.a(17, 0);
+        this.datawatcher.a(18, 0);
+        this.datawatcher.a(19, 0);
+        this.datawatcher.a(20, 0);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -154,15 +154,15 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
             double d9 = this.u(j);
             double d10 = this.v(j);
 
-            this.world.addParticle(EnumParticle.SMOKE_NORMAL, d8 + this.random.nextGaussian() * 0.30000001192092896D, d9 + this.random.nextGaussian() * 0.30000001192092896D, d10 + this.random.nextGaussian() * 0.30000001192092896D, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.SMOKE_NORMAL, d8 + this.getRandom().nextGaussian() * 0.30000001192092896D, d9 + this.getRandom().nextGaussian() * 0.30000001192092896D, d10 + this.getRandom().nextGaussian() * 0.30000001192092896D, 0.0D, 0.0D, 0.0D);
             if (flag && this.world.random.nextInt(4) == 0) {
-                this.world.addParticle(EnumParticle.SPELL_MOB, d8 + this.random.nextGaussian() * 0.30000001192092896D, d9 + this.random.nextGaussian() * 0.30000001192092896D, d10 + this.random.nextGaussian() * 0.30000001192092896D, 0.699999988079071D, 0.699999988079071D, 0.5D, new int[0]);
+                this.world.addParticle(EnumParticle.SPELL_MOB, d8 + this.getRandom().nextGaussian() * 0.30000001192092896D, d9 + this.getRandom().nextGaussian() * 0.30000001192092896D, d10 + this.getRandom().nextGaussian() * 0.30000001192092896D, 0.699999988079071D, 0.699999988079071D, 0.5D);
             }
         }
 
         if (this.cl() > 0) {
             for (j = 0; j < 3; ++j) {
-                this.world.addParticle(EnumParticle.SPELL_MOB, this.locX + this.random.nextGaussian() * 1.0D, this.locY + (double) (this.random.nextFloat() * 3.3F), this.locZ + this.random.nextGaussian() * 1.0D, 0.699999988079071D, 0.699999988079071D, 0.8999999761581421D, new int[0]);
+                this.world.addParticle(EnumParticle.SPELL_MOB, this.locX + this.getRandom().nextGaussian() * 1.0D, this.locY + (double) (this.getRandom().nextFloat() * 3.3F), this.locZ + this.getRandom().nextGaussian() * 1.0D, 0.699999988079071D, 0.699999988079071D, 0.8999999761581421D);
             }
         }
 
@@ -186,8 +186,8 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
 
                 // CraftBukkit start - Use relative location for far away sounds
                 // this.world.a(1013, new BlockPosition(this), 0);
-                int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
-                for (EntityPlayer player : (List<EntityPlayer>) MinecraftServer.getServer().getPlayerList().players) {
+                int viewDistance = this.world.getServer().getViewDistance() * 16;
+                for (EntityPlayer player : MinecraftServer.getServer().getPlayerList().players) {
                     double deltaX = this.locX - player.locX;
                     double deltaZ = this.locZ - player.locZ;
                     double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
@@ -216,7 +216,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
 
             for (i = 1; i < 3; ++i) {
                 if (this.ticksLived >= this.bn[i - 1]) {
-                    this.bn[i - 1] = this.ticksLived + 10 + this.random.nextInt(10);
+                    this.bn[i - 1] = this.ticksLived + 10 + this.getRandom().nextInt(10);
                     if (this.world.getDifficulty() == EnumDifficulty.NORMAL || this.world.getDifficulty() == EnumDifficulty.HARD) {
                         int k = i - 1;
                         int l = this.bo[i - 1];
@@ -225,9 +225,9 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                         if (l > 15) {
                             float f = 10.0F;
                             float f1 = 5.0F;
-                            double d0 = MathHelper.a(this.random, this.locX - (double) f, this.locX + (double) f);
-                            double d1 = MathHelper.a(this.random, this.locY - (double) f1, this.locY + (double) f1);
-                            double d2 = MathHelper.a(this.random, this.locZ - (double) f, this.locZ + (double) f);
+                            double d0 = MathHelper.a(this.getRandom(), this.locX - (double) f, this.locX + (double) f);
+                            double d1 = MathHelper.a(this.getRandom(), this.locY - (double) f1, this.locY + (double) f1);
+                            double d2 = MathHelper.a(this.getRandom(), this.locZ - (double) f, this.locZ + (double) f);
 
                             this.a(i + 1, d0, d1, d2, true);
                             this.bo[i - 1] = 0;
@@ -243,7 +243,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                                 this.b(i, 0);
                             } else {
                                 this.a(i + 1, (EntityLiving) entity);
-                                this.bn[i - 1] = this.ticksLived + 40 + this.random.nextInt(20);
+                                this.bn[i - 1] = this.ticksLived + 40 + this.getRandom().nextInt(20);
                                 this.bo[i - 1] = 0;
                             }
                         } else {
@@ -253,7 +253,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                         List list = this.world.a(EntityLiving.class, this.getBoundingBox().grow(20.0D, 8.0D, 20.0D), Predicates.and(EntityWither.bq, IEntitySelector.d));
 
                         for (int i1 = 0; i1 < 10 && !list.isEmpty(); ++i1) {
-                            EntityLiving entityliving = (EntityLiving) list.get(this.random.nextInt(list.size()));
+                            EntityLiving entityliving = (EntityLiving) list.get(this.getRandom().nextInt(list.size()));
 
                             if (entityliving != this && entityliving.isAlive() && this.hasLineOfSight(entityliving)) {
                                 if (entityliving instanceof EntityHuman) {
@@ -308,7 +308,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                     }
 
                     if (flag) {
-                        this.world.a((EntityHuman) null, 1012, new BlockPosition(this), 0);
+                        this.world.a(null, 1012, new BlockPosition(this), 0);
                     }
                 }
             }
@@ -376,11 +376,11 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     private void a(int i, EntityLiving entityliving) {
-        this.a(i, entityliving.locX, entityliving.locY + (double) entityliving.getHeadHeight() * 0.5D, entityliving.locZ, i == 0 && this.random.nextFloat() < 0.001F);
+        this.a(i, entityliving.locX, entityliving.locY + (double) entityliving.getHeadHeight() * 0.5D, entityliving.locZ, i == 0 && this.getRandom().nextFloat() < 0.001F);
     }
 
     private void a(int i, double d0, double d1, double d2, boolean flag) {
-        this.world.a((EntityHuman) null, 1014, new BlockPosition(this), 0);
+        this.world.a(null, 1014, new BlockPosition(this), 0);
         double d3 = this.t(i);
         double d4 = this.u(i);
         double d5 = this.v(i);
@@ -447,12 +447,9 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         }
 
         if (!this.world.isClientSide) {
-            Iterator iterator = this.world.a(EntityHuman.class, this.getBoundingBox().grow(50.0D, 100.0D, 50.0D)).iterator();
 
-            while (iterator.hasNext()) {
-                EntityHuman entityhuman = (EntityHuman) iterator.next();
-
-                entityhuman.b((Statistic) AchievementList.J);
+            for (EntityHuman entityhuman : this.world.a(EntityHuman.class, this.getBoundingBox().grow(50.0D, 100.0D, 50.0D))) {
+                entityhuman.b(AchievementList.J);
             }
         }
 
@@ -478,7 +475,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     public void r(int i) {
-        this.datawatcher.watch(20, Integer.valueOf(i));
+        this.datawatcher.watch(20, i);
     }
 
     public int s(int i) {
@@ -486,7 +483,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     public void b(int i, int j) {
-        this.datawatcher.watch(17 + i, Integer.valueOf(j));
+        this.datawatcher.watch(17 + i, j);
     }
 
     public boolean cm() {
diff --git a/src/main/java/net/minecraft/server/EntityWitherSkull.java b/src/main/java/net/minecraft/server/EntityWitherSkull.java
index f0e627bac..61b12084e 100644
--- a/src/main/java/net/minecraft/server/EntityWitherSkull.java
+++ b/src/main/java/net/minecraft/server/EntityWitherSkull.java
@@ -90,7 +90,7 @@ public class EntityWitherSkull extends EntityFireball {
     }
 
     protected void h() {
-        this.datawatcher.a(10, Byte.valueOf((byte) 0));
+        this.datawatcher.a(10, (byte) 0);
     }
 
     public boolean isCharged() {
@@ -98,6 +98,6 @@ public class EntityWitherSkull extends EntityFireball {
     }
 
     public void setCharged(boolean flag) {
-        this.datawatcher.watch(10, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.datawatcher.watch(10, (byte) (flag ? 1 : 0));
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index 469c87a17..0301a2d01 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -32,7 +32,7 @@ public class EntityWolf extends EntityTameableAnimal {
         this.goalSelector.a(9, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalOwnerHurtByTarget(this));
         this.targetSelector.a(2, new PathfinderGoalOwnerHurtTarget(this));
-        this.targetSelector.a(3, new PathfinderGoalHurtByTarget(this, true, new Class[0]));
+        this.targetSelector.a(3, new PathfinderGoalHurtByTarget(this, true));
         this.targetSelector.a(4, new PathfinderGoalRandomTargetNonTamed(this, EntityAnimal.class, false, new Predicate() {
             public boolean a(Entity entity) {
                 return entity instanceof EntitySheep || entity instanceof EntityRabbit;
@@ -82,14 +82,14 @@ public class EntityWolf extends EntityTameableAnimal {
     // CraftBukkit end
 
     protected void E() {
-        this.datawatcher.watch(18, Float.valueOf(this.getHealth()));
+        this.datawatcher.watch(18, this.getHealth());
     }
 
     protected void h() {
         super.h();
-        this.datawatcher.a(18, new Float(this.getHealth()));
-        this.datawatcher.a(19, new Byte((byte) 0));
-        this.datawatcher.a(20, new Byte((byte) EnumColor.RED.getColorIndex()));
+        this.datawatcher.a(18, this.getHealth());
+        this.datawatcher.a(19, (byte) 0);
+        this.datawatcher.a(20, (byte) EnumColor.RED.getColorIndex());
     }
 
     protected void a(BlockPosition blockposition, Block block) {
@@ -113,7 +113,7 @@ public class EntityWolf extends EntityTameableAnimal {
 
     protected String z() {
         // CraftBukkit - (getFloat(18) < 10) -> (getFloat(18) < this.getMaxHealth() / 2)
-        return this.isAngry() ? "mob.wolf.growl" : (this.random.nextInt(3) == 0 ? (this.isTamed() && this.datawatcher.getFloat(18) < this.getMaxHealth() / 2 ? "mob.wolf.whine" : "mob.wolf.panting") : "mob.wolf.bark");
+        return this.isAngry() ? "mob.wolf.growl" : (this.getRandom().nextInt(3) == 0 ? (this.isTamed() && this.datawatcher.getFloat(18) < this.getMaxHealth() / 2 ? "mob.wolf.whine" : "mob.wolf.panting") : "mob.wolf.bark");
     }
 
     protected String bo() {
@@ -163,7 +163,7 @@ public class EntityWolf extends EntityTameableAnimal {
             this.bt = 0.0F;
         } else if ((this.bq || this.br) && this.br) {
             if (this.bs == 0.0F) {
-                this.makeSound("mob.wolf.shake", this.bB(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+                this.makeSound("mob.wolf.shake", this.bB(), (this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.2F + 1.0F);
             }
 
             this.bt = this.bs;
@@ -180,10 +180,10 @@ public class EntityWolf extends EntityTameableAnimal {
                 int i = (int) (MathHelper.sin((this.bs - 0.4F) * 3.1415927F) * 7.0F);
 
                 for (int j = 0; j < i; ++j) {
-                    float f1 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
-                    float f2 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
+                    float f1 = (this.getRandom().nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
+                    float f2 = (this.getRandom().nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
 
-                    this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f1, (double) (f + 0.8F), this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f1, (double) (f + 0.8F), this.locZ + (double) f2, this.motX, this.motY, this.motZ);
                 }
             }
         }
@@ -218,7 +218,7 @@ public class EntityWolf extends EntityTameableAnimal {
         boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) ((int) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue()));
 
         if (flag) {
-            this.a((EntityLiving) this, entity);
+            this.a(this, entity);
         }
 
         return flag;
@@ -250,7 +250,7 @@ public class EntityWolf extends EntityTameableAnimal {
 
                         this.heal((float) itemfood.getNutrition(itemstack), org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
                         if (itemstack.count <= 0) {
-                            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                         }
 
                         return true;
@@ -261,7 +261,7 @@ public class EntityWolf extends EntityTameableAnimal {
                     if (enumcolor != this.getCollarColor()) {
                         this.setCollarColor(enumcolor);
                         if (!entityhuman.abilities.canInstantlyBuild && --itemstack.count <= 0) {
-                            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                         }
 
                         return true;
@@ -273,7 +273,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 this.bm.setSitting(!this.isSitting());
                 this.aY = false;
                 this.navigation.n();
-                this.setGoalTarget((EntityLiving) null, TargetReason.FORGOT_TARGET, true); // CraftBukkit - reason
+                this.setGoalTarget(null, TargetReason.FORGOT_TARGET, true); // CraftBukkit - reason
             }
         } else if (itemstack != null && itemstack.getItem() == Items.BONE && !this.isAngry()) {
             if (!entityhuman.abilities.canInstantlyBuild) {
@@ -281,15 +281,15 @@ public class EntityWolf extends EntityTameableAnimal {
             }
 
             if (itemstack.count <= 0) {
-                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
             }
 
             if (!this.world.isClientSide) {
                 // CraftBukkit - added event call and isCancelled check.
-                if (this.random.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
+                if (this.getRandom().nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                     this.setTamed(true);
                     this.navigation.n();
-                    this.setGoalTarget((EntityLiving) null, TargetReason.FORGOT_TARGET, true);
+                    this.setGoalTarget(null, TargetReason.FORGOT_TARGET, true);
                     this.bm.setSitting(true);
                     this.setHealth(this.getMaxHealth()); // CraftBukkit - 20.0 -> getMaxHealth()
                     this.setOwnerUUID(entityhuman.getUniqueID().toString());
@@ -323,9 +323,9 @@ public class EntityWolf extends EntityTameableAnimal {
         byte b0 = this.datawatcher.getByte(16);
 
         if (flag) {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 | 2)));
+            this.datawatcher.watch(16, (byte) (b0 | 2));
         } else {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 & -3)));
+            this.datawatcher.watch(16, (byte) (b0 & -3));
         }
 
     }
@@ -335,7 +335,7 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     public void setCollarColor(EnumColor enumcolor) {
-        this.datawatcher.watch(20, Byte.valueOf((byte) (enumcolor.getInvColorIndex() & 15)));
+        this.datawatcher.watch(20, (byte) (enumcolor.getInvColorIndex() & 15));
     }
 
     public EntityWolf b(EntityAgeable entityageable) {
@@ -352,9 +352,9 @@ public class EntityWolf extends EntityTameableAnimal {
 
     public void p(boolean flag) {
         if (flag) {
-            this.datawatcher.watch(19, Byte.valueOf((byte) 1));
+            this.datawatcher.watch(19, (byte) 1);
         } else {
-            this.datawatcher.watch(19, Byte.valueOf((byte) 0));
+            this.datawatcher.watch(19, (byte) 0);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index 6d3b002bc..70681c793 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -5,7 +5,6 @@ import java.util.List;
 import java.util.UUID;
 
 //CraftBukkit start
-import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityCombustEvent;
@@ -14,7 +13,7 @@ import org.bukkit.event.entity.EntityTargetEvent;
 
 public class EntityZombie extends EntityMonster {
 
-    protected static final IAttribute a = (new AttributeRanged((IAttribute) null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
+    protected static final IAttribute a = (new AttributeRanged(null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
     private static final UUID b = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
     private static final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", org.github.paperspigot.PaperSpigotConfig.babyZombieMovementSpeed, 1); // PaperSpigot - Configurable baby zombie movement speed
     private final PathfinderGoalBreakDoor bm = new PathfinderGoalBreakDoor(this);
@@ -41,7 +40,7 @@ public class EntityZombie extends EntityMonster {
         if ( world.spigotConfig.zombieAggressiveTowardsVillager ) this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityVillager.class, 1.0D, true)); // Spigot
         this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, EntityIronGolem.class, 1.0D, true));
         this.goalSelector.a(6, new PathfinderGoalMoveThroughVillage(this, 1.0D, false));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[] { EntityPigZombie.class}));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, EntityPigZombie.class));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
         if ( world.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityVillager.class, false)); // Spigot
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityIronGolem.class, true));
@@ -52,14 +51,14 @@ public class EntityZombie extends EntityMonster {
         this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).setValue(35.0D);
         this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.23000000417232513D);
         this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).setValue(3.0D);
-        this.getAttributeMap().b(EntityZombie.a).setValue(this.random.nextDouble() * 0.10000000149011612D);
+        this.getAttributeMap().b(EntityZombie.a).setValue(this.getRandom().nextDouble() * 0.10000000149011612D);
     }
 
     protected void h() {
         super.h();
-        this.getDataWatcher().a(12, Byte.valueOf((byte) 0));
-        this.getDataWatcher().a(13, Byte.valueOf((byte) 0));
-        this.getDataWatcher().a(14, Byte.valueOf((byte) 0));
+        this.getDataWatcher().a(12, (byte) 0);
+        this.getDataWatcher().a(13, (byte) 0);
+        this.getDataWatcher().a(14, (byte) 0);
     }
 
     public int br() {
@@ -82,7 +81,7 @@ public class EntityZombie extends EntityMonster {
             if (flag) {
                 this.goalSelector.a(1, this.bm);
             } else {
-                this.goalSelector.a((PathfinderGoal) this.bm);
+                this.goalSelector.a(this.bm);
             }
         }
 
@@ -101,7 +100,7 @@ public class EntityZombie extends EntityMonster {
     }
 
     public void setBaby(boolean flag) {
-        this.getDataWatcher().watch(12, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.getDataWatcher().watch(12, (byte) (flag ? 1 : 0));
         if (this.world != null && !this.world.isClientSide) {
             AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
@@ -119,7 +118,7 @@ public class EntityZombie extends EntityMonster {
     }
 
     public void setVillager(boolean flag) {
-        this.getDataWatcher().watch(13, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.getDataWatcher().watch(13, (byte) (flag ? 1 : 0));
     }
 
     public void m() {
@@ -127,16 +126,16 @@ public class EntityZombie extends EntityMonster {
             float f = this.c(1.0F);
             BlockPosition blockposition = new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ);
 
-            if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.i(blockposition)) {
+            if (f > 0.5F && this.getRandom().nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.i(blockposition)) {
                 boolean flag = true;
                 ItemStack itemstack = this.getEquipment(4);
 
                 if (itemstack != null) {
                     if (itemstack.e()) {
-                        itemstack.setData(itemstack.h() + this.random.nextInt(2));
+                        itemstack.setData(itemstack.h() + this.getRandom().nextInt(2));
                         if (itemstack.h() >= itemstack.j()) {
                             this.b(itemstack);
-                            this.setEquipment(4, (ItemStack) null);
+                            this.setEquipment(4, null);
                         }
                     }
 
@@ -171,23 +170,23 @@ public class EntityZombie extends EntityMonster {
                 entityliving = (EntityLiving) damagesource.getEntity();
             }
 
-            if (entityliving != null && this.world.getDifficulty() == EnumDifficulty.HARD && (double) this.random.nextFloat() < this.getAttributeInstance(EntityZombie.a).getValue()) {
+            if (entityliving != null && this.world.getDifficulty() == EnumDifficulty.HARD && (double) this.getRandom().nextFloat() < this.getAttributeInstance(EntityZombie.a).getValue()) {
                 int i = MathHelper.floor(this.locX);
                 int j = MathHelper.floor(this.locY);
                 int k = MathHelper.floor(this.locZ);
                 EntityZombie entityzombie = new EntityZombie(this.world);
 
                 for (int l = 0; l < 50; ++l) {
-                    int i1 = i + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
-                    int j1 = j + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
-                    int k1 = k + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
+                    int i1 = i + MathHelper.nextInt(this.getRandom(), 7, 40) * MathHelper.nextInt(this.getRandom(), -1, 1);
+                    int j1 = j + MathHelper.nextInt(this.getRandom(), 7, 40) * MathHelper.nextInt(this.getRandom(), -1, 1);
+                    int k1 = k + MathHelper.nextInt(this.getRandom(), 7, 40) * MathHelper.nextInt(this.getRandom(), -1, 1);
 
-                    if (World.a((IBlockAccess) this.world, new BlockPosition(i1, j1 - 1, k1)) && this.world.getLightLevel(new BlockPosition(i1, j1, k1)) < 10) {
+                    if (World.a(this.world, new BlockPosition(i1, j1 - 1, k1)) && this.world.getLightLevel(new BlockPosition(i1, j1, k1)) < 10) {
                         entityzombie.setPosition((double) i1, (double) j1, (double) k1);
-                        if (!this.world.isPlayerNearby((double) i1, (double) j1, (double) k1, 7.0D) && this.world.a(entityzombie.getBoundingBox(), (Entity) entityzombie) && this.world.getCubes(entityzombie, entityzombie.getBoundingBox()).isEmpty() && !this.world.containsLiquid(entityzombie.getBoundingBox())) {
+                        if (!this.world.isPlayerNearby((double) i1, (double) j1, (double) k1, 7.0D) && this.world.a(entityzombie.getBoundingBox(), entityzombie) && this.world.getCubes(entityzombie, entityzombie.getBoundingBox()).isEmpty() && !this.world.containsLiquid(entityzombie.getBoundingBox())) {
                             this.world.addEntity(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
                             entityzombie.setGoalTarget(entityliving, EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true);
-                            entityzombie.prepare(this.world.E(new BlockPosition(entityzombie)), (GroupDataEntity) null);
+                            entityzombie.prepare(this.world.E(new BlockPosition(entityzombie)), null);
                             this.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, 0));
                             entityzombie.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, 0));
                             break;
@@ -227,7 +226,7 @@ public class EntityZombie extends EntityMonster {
         if (flag) {
             int i = this.world.getDifficulty().a();
 
-            if (this.bA() == null && this.isBurning() && this.random.nextFloat() < (float) i * 0.3F) {
+            if (this.bA() == null && this.isBurning() && this.getRandom().nextFloat() < (float) i * 0.3F) {
                 // CraftBukkit start
                 EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 2 * i);
                 this.world.getServer().getPluginManager().callEvent(event);
@@ -267,7 +266,7 @@ public class EntityZombie extends EntityMonster {
     }
 
     protected void getRareDrop() {
-        switch (this.random.nextInt(3)) {
+        switch (this.getRandom().nextInt(3)) {
         case 0:
             this.a(Items.IRON_INGOT, 1);
             break;
@@ -284,8 +283,8 @@ public class EntityZombie extends EntityMonster {
 
     protected void a(DifficultyDamageScaler difficultydamagescaler) {
         super.a(difficultydamagescaler);
-        if (this.random.nextFloat() < (this.world.getDifficulty() == EnumDifficulty.HARD ? 0.05F : 0.01F)) {
-            int i = this.random.nextInt(3);
+        if (this.getRandom().nextFloat() < (this.world.getDifficulty() == EnumDifficulty.HARD ? 0.05F : 0.01F)) {
+            int i = this.getRandom().nextInt(3);
 
             if (i == 0) {
                 this.setEquipment(0, new ItemStack(Items.IRON_SWORD));
@@ -330,7 +329,7 @@ public class EntityZombie extends EntityMonster {
     public void a(EntityLiving entityliving) {
         super.a(entityliving);
         if ((this.world.getDifficulty() == EnumDifficulty.NORMAL || this.world.getDifficulty() == EnumDifficulty.HARD) && entityliving instanceof EntityVillager) {
-            if (this.world.getDifficulty() != EnumDifficulty.HARD && this.random.nextBoolean()) {
+            if (this.world.getDifficulty() != EnumDifficulty.HARD && this.getRandom().nextBoolean()) {
                 return;
             }
 
@@ -339,7 +338,7 @@ public class EntityZombie extends EntityMonster {
 
             entityzombie.m(entityliving);
             this.world.kill(entityliving);
-            entityzombie.prepare(this.world.E(new BlockPosition(entityzombie)), (GroupDataEntity) null);
+            entityzombie.prepare(this.world.E(new BlockPosition(entityzombie)), null);
             entityzombie.setVillager(true);
             if (entityliving.isBaby()) {
                 entityzombie.setBaby(true);
@@ -352,7 +351,7 @@ public class EntityZombie extends EntityMonster {
             }
 
             this.world.addEntity(entityzombie, CreatureSpawnEvent.SpawnReason.INFECTION); // CraftBukkit - add SpawnReason
-            this.world.a((EntityHuman) null, 1016, new BlockPosition((int) this.locX, (int) this.locY, (int) this.locZ), 0);
+            this.world.a(null, 1016, new BlockPosition((int) this.locX, (int) this.locY, (int) this.locZ), 0);
         }
 
     }
@@ -375,9 +374,9 @@ public class EntityZombie extends EntityMonster {
         Object object = super.prepare(difficultydamagescaler, groupdataentity);
         float f = difficultydamagescaler.c();
 
-        this.j(this.random.nextFloat() < 0.55F * f);
+        this.j(this.getRandom().nextFloat() < 0.55F * f);
         if (object == null) {
-            object = new EntityZombie.GroupDataZombie(this.world.random.nextFloat() < 0.05F, this.world.random.nextFloat() < 0.05F, (EntityZombie.SyntheticClass_1) null);
+            object = new EntityZombie.GroupDataZombie(this.world.random.nextFloat() < 0.05F, this.world.random.nextFloat() < 0.05F, null);
         }
 
         if (object instanceof EntityZombie.GroupDataZombie) {
@@ -402,7 +401,7 @@ public class EntityZombie extends EntityMonster {
                     EntityChicken entitychicken1 = new EntityChicken(this.world);
 
                     entitychicken1.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, 0.0F);
-                    entitychicken1.prepare(difficultydamagescaler, (GroupDataEntity) null);
+                    entitychicken1.prepare(difficultydamagescaler, null);
                     entitychicken1.l(true);
                     this.world.addEntity(entitychicken1, CreatureSpawnEvent.SpawnReason.MOUNT);
                     this.mount(entitychicken1);
@@ -410,28 +409,28 @@ public class EntityZombie extends EntityMonster {
             }
         }
 
-        this.a(this.random.nextFloat() < f * 0.1F);
+        this.a(this.getRandom().nextFloat() < f * 0.1F);
         this.a(difficultydamagescaler);
         this.b(difficultydamagescaler);
         if (this.getEquipment(4) == null) {
             Calendar calendar = this.world.Y();
 
-            if (calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.random.nextFloat() < 0.25F) {
-                this.setEquipment(4, new ItemStack(this.random.nextFloat() < 0.1F ? Blocks.LIT_PUMPKIN : Blocks.PUMPKIN));
+            if (calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.getRandom().nextFloat() < 0.25F) {
+                this.setEquipment(4, new ItemStack(this.getRandom().nextFloat() < 0.1F ? Blocks.LIT_PUMPKIN : Blocks.PUMPKIN));
                 this.dropChances[4] = 0.0F;
             }
         }
 
-        this.getAttributeInstance(GenericAttributes.c).b(new AttributeModifier("Random spawn bonus", this.random.nextDouble() * 0.05000000074505806D, 0));
-        double d0 = this.random.nextDouble() * 1.5D * (double) f;
+        this.getAttributeInstance(GenericAttributes.c).b(new AttributeModifier("Random spawn bonus", this.getRandom().nextDouble() * 0.05000000074505806D, 0));
+        double d0 = this.getRandom().nextDouble() * 1.5D * (double) f;
 
         if (d0 > 1.0D) {
             this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).b(new AttributeModifier("Random zombie-spawn bonus", d0, 2));
         }
 
-        if (this.random.nextFloat() < f * 0.05F) {
-            this.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 0.25D + 0.5D, 0));
-            this.getAttributeInstance(GenericAttributes.maxHealth).b(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 3.0D + 1.0D, 2));
+        if (this.getRandom().nextFloat() < f * 0.05F) {
+            this.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Leader zombie bonus", this.getRandom().nextDouble() * 0.25D + 0.5D, 0));
+            this.getAttributeInstance(GenericAttributes.maxHealth).b(new AttributeModifier("Leader zombie bonus", this.getRandom().nextDouble() * 3.0D + 1.0D, 2));
             this.a(true);
         }
 
@@ -447,11 +446,11 @@ public class EntityZombie extends EntityMonster {
             }
 
             if (itemstack.count <= 0) {
-                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
+                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
             }
 
             if (!this.world.isClientSide) {
-                this.a(this.random.nextInt(2401) + 3600);
+                this.a(this.getRandom().nextInt(2401) + 3600);
             }
 
             return true;
@@ -462,7 +461,7 @@ public class EntityZombie extends EntityMonster {
 
     protected void a(int i) {
         this.bn = i;
-        this.getDataWatcher().watch(14, Byte.valueOf((byte) 1));
+        this.getDataWatcher().watch(14, (byte) 1);
         this.removeEffect(MobEffectList.WEAKNESS.id);
         this.addEffect(new MobEffect(MobEffectList.INCREASE_DAMAGE.id, i, Math.min(this.world.getDifficulty().a() - 1, 0)));
         this.world.broadcastEntityEffect(this, (byte) 16);
@@ -480,7 +479,7 @@ public class EntityZombie extends EntityMonster {
         EntityVillager entityvillager = new EntityVillager(this.world);
 
         entityvillager.m(this);
-        entityvillager.prepare(this.world.E(new BlockPosition(entityvillager)), (GroupDataEntity) null);
+        entityvillager.prepare(this.world.E(new BlockPosition(entityvillager)), null);
         entityvillager.cp();
         if (this.isBaby()) {
             entityvillager.setAgeRaw(-24000);
@@ -495,13 +494,13 @@ public class EntityZombie extends EntityMonster {
 
         this.world.addEntity(entityvillager, CreatureSpawnEvent.SpawnReason.CURED); // CraftBukkit - add SpawnReason
         entityvillager.addEffect(new MobEffect(MobEffectList.CONFUSION.id, 200, 0));
-        this.world.a((EntityHuman) null, 1017, new BlockPosition((int) this.locX, (int) this.locY, (int) this.locZ), 0);
+        this.world.a(null, 1017, new BlockPosition((int) this.locX, (int) this.locY, (int) this.locZ), 0);
     }
 
     protected int cr() {
         int i = 1;
 
-        if (this.random.nextFloat() < 0.01F) {
+        if (this.getRandom().nextFloat() < 0.01F) {
             int j = 0;
             BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
 
@@ -511,7 +510,7 @@ public class EntityZombie extends EntityMonster {
                         Block block = this.world.getType(blockposition_mutableblockposition.c(k, l, i1)).getBlock();
 
                         if (block == Blocks.IRON_BARS || block == Blocks.BED) {
-                            if (this.random.nextFloat() < 0.3F) {
+                            if (this.getRandom().nextFloat() < 0.3F) {
                                 ++i;
                             }
 
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index f4ccd8d4d..ff5d650b0 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -108,17 +108,12 @@ public class Explosion {
         int j1 = MathHelper.floor(this.posZ - (double) f3 - 1.0D);
         int k1 = MathHelper.floor(this.posZ + (double) f3 + 1.0D);
         // PaperSpigot start - Fix lag from explosions processing dead entities
-        List list = this.world.a(this.source, new AxisAlignedBB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1), new com.google.common.base.Predicate<Entity>() {
-            @Override
-            public boolean apply(Entity entity) {
-                return IEntitySelector.d.apply(entity) && !entity.dead;
-            }
-        });
+        List list = this.world.a(this.source, new AxisAlignedBB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1), entity -> IEntitySelector.d.apply(entity) && !entity.dead);
         // PaperSpigot end
         Vec3D vec3d = new Vec3D(this.posX, this.posY, this.posZ);
 
-        for (int l1 = 0; l1 < list.size(); ++l1) {
-            Entity entity = (Entity) list.get(l1);
+        for (Object o : list) {
+            Entity entity = (Entity) o;
 
             if (!entity.aW()) {
                 double d7 = entity.f(this.posX, this.posY, this.posZ) / (double) f3;
@@ -173,9 +168,9 @@ public class Explosion {
         this.world.makeSound(this.posX, this.posY, this.posZ, "random.explode", volume, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
         // PaperSpigot end
         if (this.size >= 2.0F && this.b) {
-            this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D);
         } else {
-            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D);
         }
 
         Iterator iterator;
@@ -189,7 +184,7 @@ public class Explosion {
 
             List<org.bukkit.block.Block> blockList = Lists.newArrayList();
             for (int i1 = this.blocks.size() - 1; i1 >= 0; i1--) {
-                BlockPosition cpos = (BlockPosition) this.blocks.get(i1);
+                BlockPosition cpos = this.blocks.get(i1);
                 org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
                 if (bblock.getType() != org.bukkit.Material.AIR) {
                     blockList.add(bblock);
@@ -251,8 +246,8 @@ public class Explosion {
                     d3 *= d7;
                     d4 *= d7;
                     d5 *= d7;
-                    this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, (d0 + this.posX * 1.0D) / 2.0D, (d1 + this.posY * 1.0D) / 2.0D, (d2 + this.posZ * 1.0D) / 2.0D, d3, d4, d5, new int[0]);
-                    this.world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, d3, d4, d5, new int[0]);
+                    this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, (d0 + this.posX * 1.0D) / 2.0D, (d1 + this.posY * 1.0D) / 2.0D, (d2 + this.posZ * 1.0D) / 2.0D, d3, d4, d5);
+                    this.world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, d3, d4, d5);
                 }
 
                 if (block.getMaterial() != Material.AIR) {
diff --git a/src/main/java/net/minecraft/server/FileIOThread.java b/src/main/java/net/minecraft/server/FileIOThread.java
index c9b3bf45c..dcc17dbeb 100644
--- a/src/main/java/net/minecraft/server/FileIOThread.java
+++ b/src/main/java/net/minecraft/server/FileIOThread.java
@@ -31,7 +31,7 @@ public class FileIOThread implements Runnable {
 
     private void c() {
         for (int i = 0; i < this.b.size(); ++i) {
-            IAsyncChunkSaver iasyncchunksaver = (IAsyncChunkSaver) this.b.get(i);
+            IAsyncChunkSaver iasyncchunksaver = this.b.get(i);
             boolean flag = iasyncchunksaver.c();
 
             if (!flag) {
diff --git a/src/main/java/net/minecraft/server/GameProfileBanEntry.java b/src/main/java/net/minecraft/server/GameProfileBanEntry.java
index 16fe48193..daa1bc323 100644
--- a/src/main/java/net/minecraft/server/GameProfileBanEntry.java
+++ b/src/main/java/net/minecraft/server/GameProfileBanEntry.java
@@ -8,7 +8,7 @@ import java.util.UUID;
 public class GameProfileBanEntry extends ExpirableListEntry<GameProfile> {
 
     public GameProfileBanEntry(GameProfile gameprofile) {
-        this(gameprofile, (Date) null, (String) null, (Date) null, (String) null);
+        this(gameprofile, null, null, null, null);
     }
 
     public GameProfileBanEntry(GameProfile gameprofile, Date date, String s, Date date1, String s1) {
@@ -21,8 +21,8 @@ public class GameProfileBanEntry extends ExpirableListEntry<GameProfile> {
 
     protected void a(JsonObject jsonobject) {
         if (this.getKey() != null) {
-            jsonobject.addProperty("uuid", ((GameProfile) this.getKey()).getId() == null ? "" : ((GameProfile) this.getKey()).getId().toString());
-            jsonobject.addProperty("name", ((GameProfile) this.getKey()).getName());
+            jsonobject.addProperty("uuid", this.getKey().getId() == null ? "" : this.getKey().getId().toString());
+            jsonobject.addProperty("name", this.getKey().getName());
             super.a(jsonobject);
         }
     }
@@ -37,7 +37,7 @@ public class GameProfileBanEntry extends ExpirableListEntry<GameProfile> {
 
             try {
                 uuid = UUID.fromString(s);
-            } catch (Throwable throwable) {
+            } catch (Throwable ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 0cc3e2fb6..d0476fe3c 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -10,20 +10,17 @@ public class GenericAttributes {
 
     private static final Logger f = LogManager.getLogger();
     // Spigot start
-    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.1D,  org.spigotmc.SpigotConfig.maxHealth)).a("Max Health").a(true);
-    public static final IAttribute FOLLOW_RANGE = (new AttributeRanged((IAttribute) null, "generic.followRange", 32.0D, 0.0D, 2048.0D)).a("Follow Range");
-    public static final IAttribute c = (new AttributeRanged((IAttribute) null, "generic.knockbackResistance", 0.0D, 0.0D, 1.0D)).a("Knockback Resistance");
-    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, org.spigotmc.SpigotConfig.movementSpeed)).a("Movement Speed").a(true);
-    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, org.spigotmc.SpigotConfig.attackDamage);
+    public static final IAttribute maxHealth = (new AttributeRanged(null, "generic.maxHealth", 20.0D, 0.1D,  org.spigotmc.SpigotConfig.maxHealth)).a("Max Health").a(true);
+    public static final IAttribute FOLLOW_RANGE = (new AttributeRanged(null, "generic.followRange", 32.0D, 0.0D, 2048.0D)).a("Follow Range");
+    public static final IAttribute c = (new AttributeRanged(null, "generic.knockbackResistance", 0.0D, 0.0D, 1.0D)).a("Knockback Resistance");
+    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged(null, "generic.movementSpeed", 0.699999988079071D, 0.0D, org.spigotmc.SpigotConfig.movementSpeed)).a("Movement Speed").a(true);
+    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged(null, "generic.attackDamage", 2.0D, 0.0D, org.spigotmc.SpigotConfig.attackDamage);
     // Spigot end
 
     public static NBTTagList a(AttributeMapBase attributemapbase) {
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = attributemapbase.a().iterator();
-
-        while (iterator.hasNext()) {
-            AttributeInstance attributeinstance = (AttributeInstance) iterator.next();
 
+        for (AttributeInstance attributeinstance : attributemapbase.a()) {
             nbttaglist.add(a(attributeinstance));
         }
 
@@ -40,10 +37,9 @@ public class GenericAttributes {
 
         if (collection != null && !collection.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
-            Iterator iterator = collection.iterator();
 
-            while (iterator.hasNext()) {
-                AttributeModifier attributemodifier = (AttributeModifier) iterator.next();
+            for (Object o : collection) {
+                AttributeModifier attributemodifier = (AttributeModifier) o;
 
                 if (attributemodifier.e()) {
                     nbttaglist.add(a(attributemodifier));
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 64f6a9b27..7ff8caea0 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -9,7 +9,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
 
     private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot
     // CraftBukkit start - add fields
-    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<>();
     private static int throttleCounter = 0;
     // CraftBukkit end
 
@@ -71,7 +71,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 this.b.handle(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
             } else {
-                this.b.a((PacketListener) (new LoginListener(this.a, this.b)));
+                this.b.a(new LoginListener(this.a, this.b));
                 // Spigot Start
                 if (org.spigotmc.SpigotConfig.bungee) {
                     String[] split = packethandshakinginsetprotocol.hostname.split("\00");
@@ -98,7 +98,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
 
         case 2:
             this.b.a(EnumProtocol.STATUS);
-            this.b.a((PacketListener) (new PacketStatusListener(this.a, this.b)));
+            this.b.a(new PacketStatusListener(this.a, this.b));
             break;
 
         default:
@@ -116,14 +116,12 @@ public class HandshakeListener implements PacketHandshakingInListener {
         static {
             try {
                 HandshakeListener.SyntheticClass_1.a[EnumProtocol.LOGIN.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 HandshakeListener.SyntheticClass_1.a[EnumProtocol.STATUS.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/IBlockState.java b/src/main/java/net/minecraft/server/IBlockState.java
index fdb0cf85e..b47b95d8b 100644
--- a/src/main/java/net/minecraft/server/IBlockState.java
+++ b/src/main/java/net/minecraft/server/IBlockState.java
@@ -18,12 +18,7 @@ public interface IBlockState<T extends Comparable<T>> {
 
     // TacoSpigot start
     @SuppressWarnings("Convert2Lambda") // We have to use anon for performance reasons :/
-    public static final Indexer<IBlockState> INDEXER = new Indexer<IBlockState>() {
-        @Override
-        public int getId(IBlockState state) {
-            return state.getId();
-        }
-    };
+    public static final Indexer<IBlockState> INDEXER = IBlockState::getId;
 
     public default void tryInitId() {}
 
diff --git a/src/main/java/net/minecraft/server/IntCache.java b/src/main/java/net/minecraft/server/IntCache.java
index 95060a4e6..dc676c017 100644
--- a/src/main/java/net/minecraft/server/IntCache.java
+++ b/src/main/java/net/minecraft/server/IntCache.java
@@ -20,7 +20,7 @@ public class IntCache {
                 if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
                 return aint;
             } else {
-                aint = (int[]) IntCache.b.remove(IntCache.b.size() - 1);
+                aint = IntCache.b.remove(IntCache.b.size() - 1);
                 if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
                 return aint;
             }
@@ -36,7 +36,7 @@ public class IntCache {
             if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
             return aint;
         } else {
-            aint = (int[]) IntCache.d.remove(IntCache.d.size() - 1);
+            aint = IntCache.d.remove(IntCache.d.size() - 1);
             if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
             return aint;
         }
diff --git a/src/main/java/net/minecraft/server/InventoryCraftResult.java b/src/main/java/net/minecraft/server/InventoryCraftResult.java
index 78025030d..b035406cb 100644
--- a/src/main/java/net/minecraft/server/InventoryCraftResult.java
+++ b/src/main/java/net/minecraft/server/InventoryCraftResult.java
@@ -24,7 +24,7 @@ public class InventoryCraftResult implements IInventory {
     public void onOpen(CraftHumanEntity who) {}
     public void onClose(CraftHumanEntity who) {}
     public java.util.List<HumanEntity> getViewers() {
-        return new java.util.ArrayList<HumanEntity>();
+        return new java.util.ArrayList<>();
     }
 
     public void setMaxStackSize(int size) {
@@ -51,7 +51,7 @@ public class InventoryCraftResult implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public ItemStack splitStack(int i, int j) {
diff --git a/src/main/java/net/minecraft/server/InventoryCrafting.java b/src/main/java/net/minecraft/server/InventoryCrafting.java
index 933d39c82..3220d8c3b 100644
--- a/src/main/java/net/minecraft/server/InventoryCrafting.java
+++ b/src/main/java/net/minecraft/server/InventoryCrafting.java
@@ -16,7 +16,7 @@ public class InventoryCrafting implements IInventory {
     private final Container d;
 
     // CraftBukkit start - add fields
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     public IRecipe currentRecipe;
     public IInventory resultInventory;
     private EntityHuman owner;
@@ -87,7 +87,7 @@ public class InventoryCrafting implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public ItemStack splitWithoutUpdate(int i) {
@@ -108,7 +108,7 @@ public class InventoryCrafting implements IInventory {
             if (this.items[i].count <= j) {
                 itemstack = this.items[i];
                 this.items[i] = null;
-                this.d.a((IInventory) this);
+                this.d.a(this);
                 return itemstack;
             } else {
                 itemstack = this.items[i].cloneAndSubtract(j);
@@ -116,7 +116,7 @@ public class InventoryCrafting implements IInventory {
                     this.items[i] = null;
                 }
 
-                this.d.a((IInventory) this);
+                this.d.a(this);
                 return itemstack;
             }
         } else {
@@ -126,7 +126,7 @@ public class InventoryCrafting implements IInventory {
 
     public void setItem(int i, ItemStack itemstack) {
         this.items[i] = itemstack;
-        this.d.a((IInventory) this);
+        this.d.a(this);
     }
 
     public int getMaxStackSize() {
diff --git a/src/main/java/net/minecraft/server/InventoryEnderChest.java b/src/main/java/net/minecraft/server/InventoryEnderChest.java
index 22c9b0b79..60e931ae5 100644
--- a/src/main/java/net/minecraft/server/InventoryEnderChest.java
+++ b/src/main/java/net/minecraft/server/InventoryEnderChest.java
@@ -11,7 +11,7 @@ public class InventoryEnderChest extends InventorySubcontainer {
     private TileEntityEnderChest a;
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     public org.bukkit.entity.Player player;
     private int maxStack = MAX_STACK;
 
@@ -56,7 +56,7 @@ public class InventoryEnderChest extends InventorySubcontainer {
         int i;
 
         for (i = 0; i < this.getSize(); ++i) {
-            this.setItem(i, (ItemStack) null);
+            this.setItem(i, null);
         }
 
         for (i = 0; i < nbttaglist.size(); ++i) {
diff --git a/src/main/java/net/minecraft/server/InventoryHorseChest.java b/src/main/java/net/minecraft/server/InventoryHorseChest.java
index 5e913a53b..dd1069ba8 100644
--- a/src/main/java/net/minecraft/server/InventoryHorseChest.java
+++ b/src/main/java/net/minecraft/server/InventoryHorseChest.java
@@ -13,7 +13,7 @@ public class InventoryHorseChest extends InventorySubcontainer {
     }
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private EntityHorse horse;
     private int maxStack = MAX_STACK;
 
diff --git a/src/main/java/net/minecraft/server/InventoryLargeChest.java b/src/main/java/net/minecraft/server/InventoryLargeChest.java
index 7e83ce3e0..58d92e790 100644
--- a/src/main/java/net/minecraft/server/InventoryLargeChest.java
+++ b/src/main/java/net/minecraft/server/InventoryLargeChest.java
@@ -14,7 +14,7 @@ public class InventoryLargeChest implements ITileInventory {
     public ITileInventory right;
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
 
     public ItemStack[] getContents() {
         ItemStack[] result = new ItemStack[this.getSize()];
@@ -87,7 +87,7 @@ public class InventoryLargeChest implements ITileInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public ItemStack getItem(int i) {
diff --git a/src/main/java/net/minecraft/server/InventoryMerchant.java b/src/main/java/net/minecraft/server/InventoryMerchant.java
index 66a3babcc..ceb653c07 100644
--- a/src/main/java/net/minecraft/server/InventoryMerchant.java
+++ b/src/main/java/net/minecraft/server/InventoryMerchant.java
@@ -16,7 +16,7 @@ public class InventoryMerchant implements IInventory {
     private int e;
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private int maxStack = MAX_STACK;
 
     public ItemStack[] getContents() {
@@ -126,7 +126,7 @@ public class InventoryMerchant implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public int getMaxStackSize() {
@@ -160,7 +160,7 @@ public class InventoryMerchant implements IInventory {
         }
 
         if (itemstack == null) {
-            this.setItem(2, (ItemStack) null);
+            this.setItem(2, null);
         } else {
             MerchantRecipeList merchantrecipelist = this.merchant.getOffers(this.player);
 
@@ -176,10 +176,10 @@ public class InventoryMerchant implements IInventory {
                         this.recipe = merchantrecipe;
                         this.setItem(2, merchantrecipe.getBuyItem3().cloneItemStack());
                     } else {
-                        this.setItem(2, (ItemStack) null);
+                        this.setItem(2, null);
                     }
                 } else {
-                    this.setItem(2, (ItemStack) null);
+                    this.setItem(2, null);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/InventorySubcontainer.java b/src/main/java/net/minecraft/server/InventorySubcontainer.java
index 0e4514835..51fac3f05 100644
--- a/src/main/java/net/minecraft/server/InventorySubcontainer.java
+++ b/src/main/java/net/minecraft/server/InventorySubcontainer.java
@@ -1,7 +1,6 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import java.util.List;
 
 // CraftBukkit start
 import java.util.List;
@@ -18,7 +17,7 @@ public class InventorySubcontainer implements IInventory {
     private boolean e;
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private int maxStack = MAX_STACK;
     protected org.bukkit.inventory.InventoryHolder bukkitOwner;
 
@@ -170,7 +169,7 @@ public class InventorySubcontainer implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public int getMaxStackSize() {
@@ -179,8 +178,8 @@ public class InventorySubcontainer implements IInventory {
 
     public void update() {
         if (this.d != null) {
-            for (int i = 0; i < this.d.size(); ++i) {
-                ((IInventoryListener) this.d.get(i)).a(this);
+            for (IInventoryListener iInventoryListener : this.d) {
+                ((IInventoryListener) iInventoryListener).a(this);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ItemArmor.java b/src/main/java/net/minecraft/server/ItemArmor.java
index cd77ba5fb..1683970ea 100644
--- a/src/main/java/net/minecraft/server/ItemArmor.java
+++ b/src/main/java/net/minecraft/server/ItemArmor.java
@@ -46,7 +46,7 @@ public class ItemArmor extends Item {
                     itemstack.count++;
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
@@ -165,7 +165,7 @@ public class ItemArmor extends Item {
         return itemstack;
     }
 
-    public static enum EnumArmorMaterial {
+    public enum EnumArmorMaterial {
 
         LEATHER("leather", 5, new int[] { 1, 3, 2, 1}, 15), CHAIN("chainmail", 15, new int[] { 2, 5, 4, 1}, 12), IRON("iron", 15, new int[] { 2, 6, 5, 2}, 9), GOLD("gold", 7, new int[] { 2, 5, 3, 1}, 25), DIAMOND("diamond", 33, new int[] { 3, 8, 6, 3}, 10);
 
@@ -174,7 +174,7 @@ public class ItemArmor extends Item {
         private final int[] h;
         private final int i;
 
-        private EnumArmorMaterial(String s, int i, int[] aint, int j) {
+        EnumArmorMaterial(String s, int i, int[] aint, int j) {
             this.f = s;
             this.g = i;
             this.h = aint;
diff --git a/src/main/java/net/minecraft/server/ItemBoat.java b/src/main/java/net/minecraft/server/ItemBoat.java
index eb62bbb68..b9a33e100 100644
--- a/src/main/java/net/minecraft/server/ItemBoat.java
+++ b/src/main/java/net/minecraft/server/ItemBoat.java
@@ -35,8 +35,8 @@ public class ItemBoat extends Item {
             float f9 = 1.0F;
             List list = world.getEntities(entityhuman, entityhuman.getBoundingBox().a(vec3d2.a * d3, vec3d2.b * d3, vec3d2.c * d3).grow((double) f9, (double) f9, (double) f9));
 
-            for (int i = 0; i < list.size(); ++i) {
-                Entity entity = (Entity) list.get(i);
+            for (Object o : list) {
+                Entity entity = (Entity) o;
 
                 if (entity.ad()) {
                     float f10 = entity.ao();
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index b62ea42fc..0d353af63 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -41,7 +41,7 @@ public class ItemBucket extends Item {
                     IBlockData iblockdata = world.getType(blockposition);
                     Material material = iblockdata.getBlock().getMaterial();
 
-                    if (material == Material.WATER && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
+                    if (material == Material.WATER && (Integer) iblockdata.get(BlockFluids.LEVEL) == 0) {
                         // CraftBukkit start
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, Items.WATER_BUCKET);
 
@@ -54,7 +54,7 @@ public class ItemBucket extends Item {
                         return this.a(itemstack, entityhuman, Items.WATER_BUCKET, event.getItemStack()); // CraftBukkit - added Event stack
                     }
 
-                    if (material == Material.LAVA && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
+                    if (material == Material.LAVA && (Integer) iblockdata.get(BlockFluids.LEVEL) == 0) {
                         // CraftBukkit start
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, Items.LAVA_BUCKET);
 
@@ -149,7 +149,7 @@ public class ItemBucket extends Item {
                     world.makeSound((double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F), "random.fizz", 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
                     for (int l = 0; l < 8; ++l) {
-                        world.addParticle(EnumParticle.SMOKE_LARGE, (double) i + Math.random(), (double) j + Math.random(), (double) k + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
+                        world.addParticle(EnumParticle.SMOKE_LARGE, (double) i + Math.random(), (double) j + Math.random(), (double) k + Math.random(), 0.0D, 0.0D, 0.0D);
                     }
                 } else {
                     if (!world.isClientSide && flag && !material.isLiquid()) {
diff --git a/src/main/java/net/minecraft/server/ItemDye.java b/src/main/java/net/minecraft/server/ItemDye.java
index 81fde59d7..d0b0f530d 100644
--- a/src/main/java/net/minecraft/server/ItemDye.java
+++ b/src/main/java/net/minecraft/server/ItemDye.java
@@ -100,7 +100,7 @@ public class ItemDye extends Item {
                     return false;
                 }
 
-                enumcolor = EnumColor.fromColorIndex((byte) event.getColor().getWoolData());
+                enumcolor = EnumColor.fromColorIndex(event.getColor().getWoolData());
                 // CraftBukkit end
                 entitysheep.setColor(enumcolor);
                 --itemstack.count;
diff --git a/src/main/java/net/minecraft/server/ItemHanging.java b/src/main/java/net/minecraft/server/ItemHanging.java
index 946a3a739..9bac60d89 100644
--- a/src/main/java/net/minecraft/server/ItemHanging.java
+++ b/src/main/java/net/minecraft/server/ItemHanging.java
@@ -62,6 +62,6 @@ public class ItemHanging extends Item {
     }
 
     private EntityHanging a(World world, BlockPosition blockposition, EnumDirection enumdirection) {
-        return (EntityHanging) (this.a == EntityPainting.class ? new EntityPainting(world, blockposition, enumdirection) : (this.a == EntityItemFrame.class ? new EntityItemFrame(world, blockposition, enumdirection) : null));
+        return this.a == EntityPainting.class ? new EntityPainting(world, blockposition, enumdirection) : (this.a == EntityItemFrame.class ? new EntityItemFrame(world, blockposition, enumdirection) : null);
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemLeash.java b/src/main/java/net/minecraft/server/ItemLeash.java
index 346cd18d6..d7be0ef14 100644
--- a/src/main/java/net/minecraft/server/ItemLeash.java
+++ b/src/main/java/net/minecraft/server/ItemLeash.java
@@ -3,6 +3,10 @@ package net.minecraft.server;
 import java.util.Iterator;
 import java.util.List;
 
+import org.bukkit.block.BlockFace;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.Player;
 import org.bukkit.event.hanging.HangingPlaceEvent; // CraftBukkit
 
 public class ItemLeash extends Item {
@@ -34,17 +38,16 @@ public class ItemLeash extends Item {
         int j = blockposition.getY();
         int k = blockposition.getZ();
         List list = world.a(EntityInsentient.class, new AxisAlignedBB((double) i - d0, (double) j - d0, (double) k - d0, (double) i + d0, (double) j + d0, (double) k + d0));
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            EntityInsentient entityinsentient = (EntityInsentient) iterator.next();
+        for (Object o : list) {
+            EntityInsentient entityinsentient = (EntityInsentient) o;
 
             if (entityinsentient.cc() && entityinsentient.getLeashHolder() == entityhuman) {
                 if (entityleash == null) {
                     entityleash = EntityLeash.a(world, blockposition);
 
                     // CraftBukkit start - fire HangingPlaceEvent
-                    HangingPlaceEvent event = new HangingPlaceEvent((org.bukkit.entity.Hanging) entityleash.getBukkitEntity(), entityhuman != null ? (org.bukkit.entity.Player) entityhuman.getBukkitEntity() : null, world.getWorld().getBlockAt(i, j, k), org.bukkit.block.BlockFace.SELF);
+                    HangingPlaceEvent event = new HangingPlaceEvent((Hanging) entityleash.getBukkitEntity(), entityhuman != null ? (Player) entityhuman.getBukkitEntity() : null, world.getWorld().getBlockAt(i, j, k), BlockFace.SELF);
                     world.getServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
@@ -55,7 +58,7 @@ public class ItemLeash extends Item {
                 }
 
                 // CraftBukkit start
-                if (org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerLeashEntityEvent(entityinsentient, entityleash, entityhuman).isCancelled()) {
+                if (CraftEventFactory.callPlayerLeashEntityEvent(entityinsentient, entityleash, entityhuman).isCancelled()) {
                     continue;
                 }
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/ItemMapEmpty.java b/src/main/java/net/minecraft/server/ItemMapEmpty.java
index 6bf90c473..27f10e281 100644
--- a/src/main/java/net/minecraft/server/ItemMapEmpty.java
+++ b/src/main/java/net/minecraft/server/ItemMapEmpty.java
@@ -12,7 +12,7 @@ public class ItemMapEmpty extends ItemWorldMapBase {
         String s = "map_" + itemstack1.getData();
         WorldMap worldmap = new WorldMap(s);
 
-        worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit
+        worldMain.a(s, worldmap); // CraftBukkit
         worldmap.scale = 0;
         worldmap.a(entityhuman.locX, entityhuman.locZ, worldmap.scale);
         worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - use bukkit dimension
diff --git a/src/main/java/net/minecraft/server/ItemMinecart.java b/src/main/java/net/minecraft/server/ItemMinecart.java
index e9fc40e93..8734faf41 100644
--- a/src/main/java/net/minecraft/server/ItemMinecart.java
+++ b/src/main/java/net/minecraft/server/ItemMinecart.java
@@ -18,7 +18,7 @@ public class ItemMinecart extends Item {
             double d2 = isourceblock.getZ() + (double) enumdirection.getAdjacentZ() * 1.125D;
             BlockPosition blockposition = isourceblock.getBlockPosition().shift(enumdirection);
             IBlockData iblockdata = world.getType(blockposition);
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).n()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).n()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
             double d3;
 
             if (BlockMinecartTrackAbstract.d(iblockdata)) {
@@ -33,7 +33,7 @@ public class ItemMinecart extends Item {
                 }
 
                 IBlockData iblockdata1 = world.getType(blockposition.down());
-                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition1 = iblockdata1.getBlock() instanceof BlockMinecartTrackAbstract ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata1.get(((BlockMinecartTrackAbstract) iblockdata1.getBlock()).n()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
+                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition1 = iblockdata1.getBlock() instanceof BlockMinecartTrackAbstract ? iblockdata1.get(((BlockMinecartTrackAbstract) iblockdata1.getBlock()).n()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
 
                 if (enumdirection != EnumDirection.DOWN && blockminecarttrackabstract_enumtrackposition1.c()) {
                     d3 = -0.4D;
@@ -62,7 +62,7 @@ public class ItemMinecart extends Item {
                 itemstack.count++;
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                 if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                     idispensebehavior.a(isourceblock, eventStack);
                     return itemstack;
@@ -100,7 +100,7 @@ public class ItemMinecart extends Item {
 
         if (BlockMinecartTrackAbstract.d(iblockdata)) {
             if (!world.isClientSide) {
-                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).n()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
+                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).n()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
                 double d0 = 0.0D;
 
                 if (blockminecarttrackabstract_enumtrackposition.c()) {
diff --git a/src/main/java/net/minecraft/server/ItemMonsterEgg.java b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
index 84f5da5bf..443b161db 100644
--- a/src/main/java/net/minecraft/server/ItemMonsterEgg.java
+++ b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
@@ -91,7 +91,7 @@ public class ItemMonsterEgg extends Item {
 
                         if (entity != null) {
                             if (entity instanceof EntityLiving && itemstack.hasName()) {
-                                ((EntityInsentient) entity).setCustomName(itemstack.getName());
+                                entity.setCustomName(itemstack.getName());
                             }
 
                             if (!entityhuman.abilities.canInstantlyBuild) {
@@ -115,7 +115,7 @@ public class ItemMonsterEgg extends Item {
 
     public static Entity spawnCreature(World world, int i, double d0, double d1, double d2, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
         // CraftBukkit end
-        if (!EntityTypes.eggInfo.containsKey(Integer.valueOf(i))) {
+        if (!EntityTypes.eggInfo.containsKey(i)) {
             return null;
         } else {
             Entity entity = null;
@@ -128,7 +128,7 @@ public class ItemMonsterEgg extends Item {
                     entity.setPositionRotation(d0, d1, d2, MathHelper.g(world.random.nextFloat() * 360.0F), 0.0F);
                     entityinsentient.aK = entityinsentient.yaw;
                     entityinsentient.aI = entityinsentient.yaw;
-                    entityinsentient.prepare(world.E(new BlockPosition(entityinsentient)), (GroupDataEntity) null);
+                    entityinsentient.prepare(world.E(new BlockPosition(entityinsentient)), null);
                     // CraftBukkit start - don't return an entity when CreatureSpawnEvent is canceled
                     if (!world.addEntity(entity, spawnReason)) {
                         entity = null;
diff --git a/src/main/java/net/minecraft/server/ItemRecord.java b/src/main/java/net/minecraft/server/ItemRecord.java
index 7b943fd9d..2cd8fe8aa 100644
--- a/src/main/java/net/minecraft/server/ItemRecord.java
+++ b/src/main/java/net/minecraft/server/ItemRecord.java
@@ -18,7 +18,7 @@ public class ItemRecord extends Item {
     public boolean interactWith(ItemStack itemstack, EntityHuman entityhuman, World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData iblockdata = world.getType(blockposition);
 
-        if (iblockdata.getBlock() == Blocks.JUKEBOX && !((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue()) {
+        if (iblockdata.getBlock() == Blocks.JUKEBOX && !(Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)) {
             if (world.isClientSide) {
                 return true;
             } else {
diff --git a/src/main/java/net/minecraft/server/ItemSkull.java b/src/main/java/net/minecraft/server/ItemSkull.java
index 519574bcb..2a1d738a7 100644
--- a/src/main/java/net/minecraft/server/ItemSkull.java
+++ b/src/main/java/net/minecraft/server/ItemSkull.java
@@ -62,7 +62,7 @@ public class ItemSkull extends Item {
                                 if (nbttagcompound.hasKeyOfType("SkullOwner", 10)) {
                                     gameprofile = GameProfileSerializer.deserialize(nbttagcompound.getCompound("SkullOwner"));
                                 } else if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && nbttagcompound.getString("SkullOwner").length() > 0) {
-                                    gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
+                                    gameprofile = new GameProfile(null, nbttagcompound.getString("SkullOwner"));
                                 }
                             }
 
@@ -100,14 +100,14 @@ public class ItemSkull extends Item {
     public String a(ItemStack itemstack) {
         if (itemstack.getData() == 3 && itemstack.hasTag()) {
             if (itemstack.getTag().hasKeyOfType("SkullOwner", 8)) {
-                return LocaleI18n.a("item.skull.player.name", new Object[] { itemstack.getTag().getString("SkullOwner")});
+                return LocaleI18n.a("item.skull.player.name", itemstack.getTag().getString("SkullOwner"));
             }
 
             if (itemstack.getTag().hasKeyOfType("SkullOwner", 10)) {
                 NBTTagCompound nbttagcompound = itemstack.getTag().getCompound("SkullOwner");
 
                 if (nbttagcompound.hasKeyOfType("Name", 8)) {
-                    return LocaleI18n.a("item.skull.player.name", new Object[] { nbttagcompound.getString("Name")});
+                    return LocaleI18n.a("item.skull.player.name", nbttagcompound.getString("Name"));
                 }
             }
         }
@@ -118,16 +118,12 @@ public class ItemSkull extends Item {
     public boolean a(final NBTTagCompound nbttagcompound) { // Spigot - make final
         super.a(nbttagcompound);
         if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && nbttagcompound.getString("SkullOwner").length() > 0) {
-            GameProfile gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
+            GameProfile gameprofile = new GameProfile(null, nbttagcompound.getString("SkullOwner"));
 
             // Spigot start
-            TileEntitySkull.b(gameprofile, new com.google.common.base.Predicate<GameProfile>() {
-
-                @Override
-                public boolean apply(GameProfile gameprofile) {
-                    nbttagcompound.set("SkullOwner", GameProfileSerializer.serialize(new NBTTagCompound(), gameprofile));                    
-                    return false;
-                }
+            TileEntitySkull.b(gameprofile, gameprofile1 -> {
+                nbttagcompound.set("SkullOwner", GameProfileSerializer.serialize(new NBTTagCompound(), gameprofile1));
+                return false;
             });
             // Spigot end
             return true;
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index 015ce2834..706e86bd1 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -196,7 +196,7 @@ public final class ItemStack {
                 // Special case juke boxes as they update their tile entity. Copied from ItemRecord.
                 if (this.getItem() instanceof ItemRecord) {
                     ((BlockJukeBox) Blocks.JUKEBOX).a(world, blockposition, world.getType(blockposition), this);
-                    world.a((EntityHuman) null, 1005, blockposition, Item.getId(this.getItem()));
+                    world.a(null, 1005, blockposition, Item.getId(this.getItem()));
                     --this.count;
                     entityhuman.b(StatisticList.X);
                 }
@@ -241,7 +241,7 @@ public final class ItemStack {
     }
 
     public NBTTagCompound save(NBTTagCompound nbttagcompound) {
-        MinecraftKey minecraftkey = (MinecraftKey) Item.REGISTRY.c(this.item);
+        MinecraftKey minecraftkey = Item.REGISTRY.c(this.item);
 
         nbttagcompound.setString("id", minecraftkey == null ? "minecraft:air" : minecraftkey.toString());
         nbttagcompound.setByte("Count", (byte) this.count);
@@ -422,7 +422,7 @@ public final class ItemStack {
     }
 
     public void a(EntityLiving entityliving, EntityHuman entityhuman) {
-        boolean flag = this.item.a(this, entityliving, (EntityLiving) entityhuman);
+        boolean flag = this.item.a(this, entityliving, entityhuman);
 
         if (flag) {
             entityhuman.b(StatisticList.USE_ITEM_COUNT[Item.getId(this.item)]);
@@ -540,7 +540,7 @@ public final class ItemStack {
         } else if (flag) {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
-            this.a(s, (NBTBase) nbttagcompound);
+            this.a(s, nbttagcompound);
             return nbttagcompound;
         } else {
             return null;
@@ -591,7 +591,7 @@ public final class ItemStack {
                 if (nbttagcompound.isEmpty()) {
                     this.tag.remove("display");
                     if (this.tag.isEmpty()) {
-                        this.setTag((NBTTagCompound) null);
+                        this.setTag(null);
                     }
                 }
 
@@ -699,7 +699,7 @@ public final class ItemStack {
         ChatComponentText chatcomponenttext = new ChatComponentText(this.getName());
 
         if (this.hasName()) {
-            chatcomponenttext.getChatModifier().setItalic(Boolean.valueOf(true));
+            chatcomponenttext.getChatModifier().setItalic(Boolean.TRUE);
         }
 
         IChatBaseComponent ichatbasecomponent = (new ChatComponentText("[")).addSibling(chatcomponenttext).a("]");
diff --git a/src/main/java/net/minecraft/server/ItemWaterLily.java b/src/main/java/net/minecraft/server/ItemWaterLily.java
index e8cbf1663..7e5c26c4f 100644
--- a/src/main/java/net/minecraft/server/ItemWaterLily.java
+++ b/src/main/java/net/minecraft/server/ItemWaterLily.java
@@ -26,7 +26,7 @@ public class ItemWaterLily extends ItemWithAuxData {
                 BlockPosition blockposition1 = blockposition.up();
                 IBlockData iblockdata = world.getType(blockposition);
 
-                if (iblockdata.getBlock().getMaterial() == Material.WATER && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0 && world.isEmpty(blockposition1)) {
+                if (iblockdata.getBlock().getMaterial() == Material.WATER && (Integer) iblockdata.get(BlockFluids.LEVEL) == 0 && world.isEmpty(blockposition1)) {
                     // CraftBukkit start - special case for handling block placement with water lilies
                     org.bukkit.block.BlockState blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
                     world.setTypeUpdate(blockposition1, Blocks.WATERLILY.getBlockData());
diff --git a/src/main/java/net/minecraft/server/ItemWorldMap.java b/src/main/java/net/minecraft/server/ItemWorldMap.java
index 6473ee5b7..231d0bd00 100644
--- a/src/main/java/net/minecraft/server/ItemWorldMap.java
+++ b/src/main/java/net/minecraft/server/ItemWorldMap.java
@@ -28,7 +28,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
             worldmap.a((double) world.getWorldData().c(), (double) world.getWorldData().e(), worldmap.scale);
             worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - fixes Bukkit multiworld maps
             worldmap.c();
-            worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit - use primary world for maps
+            worldMain.a(s, worldmap); // CraftBukkit - use primary world for maps
 
             // CraftBukkit start
             MapInitializeEvent event = new MapInitializeEvent(worldmap.mapView);
@@ -134,7 +134,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
                                     b0 = 0;
                                 }
 
-                                MaterialMapColor materialmapcolor = (MaterialMapColor) Iterables.getFirst(Multisets.copyHighestCountFirst(hashmultiset), MaterialMapColor.b);
+                                MaterialMapColor materialmapcolor = Iterables.getFirst(Multisets.copyHighestCountFirst(hashmultiset), MaterialMapColor.b);
 
                                 if (materialmapcolor == MaterialMapColor.n) {
                                     d2 = (double) k3 * 0.1D + (double) (k1 + l1 & 1) * 0.2D;
@@ -206,7 +206,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
             worldmap1.a((double) worldmap.centerX, (double) worldmap.centerZ, worldmap1.scale);
             worldmap1.map = worldmap.map;
             worldmap1.c();
-            world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
+            world.a("map_" + itemstack.getData(), worldmap1);
 
             // CraftBukkit start
             MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index 8e4ecfd64..ec0b03087 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -4,30 +4,18 @@ import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.io.Files;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
+import com.google.gson.*;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import org.apache.commons.io.IOUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import java.util.*;
 
 public class JsonList<K, V extends JsonListEntry<K>> {
 
@@ -38,7 +26,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     private boolean e = true;
     private static final ParameterizedType f = new ParameterizedType() {
         public Type[] getActualTypeArguments() {
-            return new Type[] { JsonListEntry.class};
+            return new Type[]{JsonListEntry.class};
         }
 
         public Type getRawType() {
@@ -83,7 +71,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
 
     public V get(K k0) {
         this.h();
-        return (V) this.d.get(this.a(k0)); // CraftBukkit - fix decompile error
+        return this.d.get(this.a(k0)); // CraftBukkit - fix decompile error
     }
 
     public void remove(K k0) {
@@ -98,7 +86,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     }
 
     public String[] getEntries() {
-        return (String[]) this.d.keySet().toArray(new String[this.d.size()]);
+        return this.d.keySet().toArray(new String[0]);
     }
 
     // CraftBukkit start
@@ -142,7 +130,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     }
 
     protected JsonListEntry<K> a(JsonObject jsonobject) {
-        return new JsonListEntry((Object) null, jsonobject);
+        return new JsonListEntry<>(null, jsonobject);
     }
 
     protected Map<String, V> e() {
@@ -150,7 +138,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     }
 
     public void save() throws IOException {
-        Collection collection = this.d.values();
+        Collection<V> collection = this.d.values();
         String s = this.b.toJson(collection);
         BufferedWriter bufferedwriter = null;
 
@@ -163,34 +151,31 @@ public class JsonList<K, V extends JsonListEntry<K>> {
 
     }
 
-    public void load() throws FileNotFoundException {
+    public void load() {
         Collection collection = null;
         BufferedReader bufferedreader = null;
 
         try {
             bufferedreader = Files.newReader(this.c, Charsets.UTF_8);
-            collection = (Collection) this.b.fromJson(bufferedreader, JsonList.f);
-        // Spigot Start
-        } catch ( java.io.FileNotFoundException ex )
-        {
-            org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.INFO, "Unable to find file {0}, creating it.", this.c );
-        } catch ( com.google.gson.JsonSyntaxException ex )
-        {
-            org.bukkit.Bukkit.getLogger().log( java.util.logging.Level.WARNING, "Unable to read file {0}, backing it up to {0}.backup and creating new copy.", this.c );
-            File backup = new File( this.c + ".backup" );
-            this.c.renameTo( backup );
+            collection = this.b.fromJson(bufferedreader, JsonList.f);
+            // Spigot Start
+        } catch (java.io.FileNotFoundException ex) {
+            org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.INFO, "Unable to find file {0}, creating it.", this.c);
+        } catch (com.google.gson.JsonSyntaxException ex) {
+            org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Unable to read file {0}, backing it up to {0}.backup and creating new copy.", this.c);
+            File backup = new File(this.c + ".backup");
+            this.c.renameTo(backup);
             this.c.delete();
-        // Spigot End
+            // Spigot End
         } finally {
             IOUtils.closeQuietly(bufferedreader);
         }
 
         if (collection != null) {
             this.d.clear();
-            Iterator iterator = collection.iterator();
 
-            while (iterator.hasNext()) {
-                JsonListEntry jsonlistentry = (JsonListEntry) iterator.next();
+            for (Object o : collection) {
+                JsonListEntry jsonlistentry = (JsonListEntry) o;
 
                 if (jsonlistentry.getKey() != null) {
                     this.d.put(this.a((K) jsonlistentry.getKey()), (V) jsonlistentry); // CraftBukkit - fix decompile error
@@ -202,7 +187,8 @@ public class JsonList<K, V extends JsonListEntry<K>> {
 
     class JsonListEntrySerializer implements JsonDeserializer<JsonListEntry<K>>, JsonSerializer<JsonListEntry<K>> {
 
-        private JsonListEntrySerializer() {}
+        private JsonListEntrySerializer() {
+        }
 
         public JsonElement a(JsonListEntry<K> jsonlistentry, Type type, JsonSerializationContext jsonserializationcontext) {
             JsonObject jsonobject = new JsonObject();
@@ -214,16 +200,15 @@ public class JsonList<K, V extends JsonListEntry<K>> {
         public JsonListEntry<K> a(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
             if (jsonelement.isJsonObject()) {
                 JsonObject jsonobject = jsonelement.getAsJsonObject();
-                JsonListEntry jsonlistentry = JsonList.this.a(jsonobject);
 
-                return jsonlistentry;
+                return JsonList.this.a(jsonobject);
             } else {
                 return null;
             }
         }
 
         public JsonElement serialize(JsonListEntry<K> object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - fix decompile error
-            return this.a((JsonListEntry) object, type, jsonserializationcontext);
+            return this.a(object, type, jsonserializationcontext);
         }
 
         public JsonListEntry<K> deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - fix decompile error
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 541cec7cf..731eddf3a 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -5,7 +5,6 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
-import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.math.BigInteger;
 import java.security.PrivateKey;
@@ -13,7 +12,6 @@ import java.util.Arrays;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.logging.Level;
 import javax.crypto.SecretKey;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
@@ -124,14 +122,14 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
             this.g = LoginListener.EnumProtocolState.ACCEPTED;
             if (this.server.aK() >= 0 && !this.networkManager.c()) {
                 this.networkManager.a(new PacketLoginOutSetCompression(this.server.aK()), new ChannelFutureListener() {
-                    public void a(ChannelFuture channelfuture) throws Exception {
+                    public void a(ChannelFuture channelfuture) {
                         LoginListener.this.networkManager.a(LoginListener.this.server.aK());
                     }
 
                     public void operationComplete(ChannelFuture future) throws Exception { // CraftBukkit - fix decompile error
-                        this.a((ChannelFuture) future);
+                        this.a(future);
                     }
-                }, new GenericFutureListener[0]);
+                });
             }
 
             this.networkManager.handle(new PacketLoginOutSuccess(this.i));
@@ -156,7 +154,7 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
     }
 
     public void a(PacketLoginInStart packetlogininstart) {
-        Validate.validState(this.g == LoginListener.EnumProtocolState.HELLO, "Unexpected hello packet", new Object[0]);
+        Validate.validState(this.g == LoginListener.EnumProtocolState.HELLO, "Unexpected hello packet");
         this.i = packetlogininstart.a();
         if (this.server.getOnlineMode() && !this.networkManager.c()) {
             this.g = LoginListener.EnumProtocolState.KEY;
@@ -164,16 +162,12 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
         } else {
             // Spigot start
             initUUID();
-            new Thread(new Runnable() {
-
-                @Override
-                public void run() {
-                    try{
-                        new LoginHandler().fireEvents();
-                    } catch (Exception ex) {
-                        disconnect("Failed to verify username!");
-                        server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + i.getName(), ex);
-                    }
+            new Thread(() -> {
+                try{
+                    new LoginHandler().fireEvents();
+                } catch (Exception ex) {
+                    disconnect("Failed to verify username!");
+                    server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + i.getName(), ex);
                 }
             }).start();
             // Spigot end
@@ -182,7 +176,7 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
     }
 
     public void a(PacketLoginInEncryptionBegin packetlogininencryptionbegin) {
-        Validate.validState(this.g == LoginListener.EnumProtocolState.KEY, "Unexpected key packet", new Object[0]);
+        Validate.validState(this.g == LoginListener.EnumProtocolState.KEY, "Unexpected key packet");
         PrivateKey privatekey = this.server.Q().getPrivate();
 
         if (!Arrays.equals(this.e, packetlogininencryptionbegin.b(privatekey))) {
@@ -198,7 +192,7 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
                     try {
                         String s = (new BigInteger(MinecraftEncryption.a(LoginListener.this.j, LoginListener.this.server.Q().getPublic(), LoginListener.this.loginKey))).toString(16);
 
-                        LoginListener.this.i = LoginListener.this.server.aD().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s);
+                        LoginListener.this.i = LoginListener.this.server.aD().hasJoinedServer(new GameProfile(null, gameprofile.getName()), s);
                         if (LoginListener.this.i != null) {
                             // CraftBukkit start - fire PlayerPreLoginEvent
                             if (!networkManager.g()) {
@@ -283,10 +277,10 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
         return new GameProfile(uuid, gameprofile.getName());
     }
 
-    static enum EnumProtocolState {
+    enum EnumProtocolState {
 
         HELLO, KEY, AUTHENTICATING, READY_TO_ACCEPT, e, ACCEPTED;
 
-        private EnumProtocolState() {}
+        EnumProtocolState() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/MethodProfiler.java b/src/main/java/net/minecraft/server/MethodProfiler.java
index 2aea31b60..3f8b1d231 100644
--- a/src/main/java/net/minecraft/server/MethodProfiler.java
+++ b/src/main/java/net/minecraft/server/MethodProfiler.java
@@ -1,14 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start - Strip down to empty methods, performance cost
 public class MethodProfiler {
@@ -53,7 +45,7 @@ public class MethodProfiler {
         }
 
         public int compareTo(MethodProfiler.ProfilerInfo object) {
-            return this.a((MethodProfiler.ProfilerInfo) object);
+            return this.a(object);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e9b6ed0d1..11316d00c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -91,12 +91,12 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     private long X = 0L;
     private final GameProfileRepository Y;
     private final UserCache Z;
-    protected final Queue<FutureTask<?>> j = new java.util.concurrent.ConcurrentLinkedQueue<FutureTask<?>>(); // Spigot, PAIL: Rename
+    protected final Queue<FutureTask<?>> j = new java.util.concurrent.ConcurrentLinkedQueue<>(); // Spigot, PAIL: Rename
     private Thread serverThread;
     private long ab = az();
 
     // CraftBukkit start
-    public List<WorldServer> worlds = new ArrayList<WorldServer>();
+    public List<WorldServer> worlds = new ArrayList<>();
     public org.bukkit.craftbukkit.CraftServer server;
     public OptionSet options;
     public org.bukkit.command.ConsoleCommandSender console;
@@ -312,7 +312,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             }
 
             worlds.add(world);
-            getPlayerList().setPlayerFileData(worlds.toArray(new WorldServer[worlds.size()]));
+            getPlayerList().setPlayerFileData(worlds.toArray(new WorldServer[0]));
         }
 
         // CraftBukkit end
@@ -432,7 +432,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     private final Object stopLock = new Object();
     // CraftBukkit end
 
-    public void stop() throws ExceptionWorldConflict { // CraftBukkit - added throws
+    public void stop() { // CraftBukkit - added throws
         // CraftBukkit start - prevent double stopping on multiple threads
         synchronized (stopLock) {
             if (hasStopped) return;
@@ -706,7 +706,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     protected void z() {
     }
 
-    protected void A() throws ExceptionWorldConflict { // CraftBukkit - added throws
+    protected void A() { // CraftBukkit - added throws
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Spigot
         long i = System.nanoTime();
 
@@ -771,7 +771,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     }
 
     public void B() {
-        this.offTick = !offTick;
+        offTick = !offTick;
         SpigotTimings.minecraftSchedulerTimer.startTiming(); // Spigot
         this.methodProfiler.a("jobs");
 
@@ -1119,7 +1119,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
     public CrashReport b(CrashReport crashreport) {
         crashreport.g().a("Profiler Position", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return MinecraftServer.this.methodProfiler.a ? MinecraftServer.this.methodProfiler.c() : "N/A (disabled)";
             }
 
@@ -1133,7 +1133,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                     return MinecraftServer.this.v.getPlayerCount() + " / " + MinecraftServer.this.v.getMaxPlayers() + "; " + MinecraftServer.this.v.v();
                 }
 
-                public Object call() throws Exception {
+                public Object call() {
                     return this.a();
                 }
             });
@@ -1249,8 +1249,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
     public void a(EnumDifficulty enumdifficulty) {
         // CraftBukkit start
-        for (int i = 0; i < this.worlds.size(); ++i) {
-            WorldServer worldserver = this.worlds.get(i);
+        for (WorldServer worldserver : this.worlds) {
             // CraftBukkit end
 
             if (worldserver != null) {
@@ -1294,8 +1293,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.getConvertable().d();
 
         // CraftBukkit start
-        for (int i = 0; i < this.worlds.size(); ++i) {
-            WorldServer worldserver = this.worlds.get(i);
+        for (WorldServer worldserver : this.worlds) {
             // CraftBukkit end
 
             if (worldserver != null) {
@@ -1321,49 +1319,48 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     }
 
     public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(false));
-        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(0));
+        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.FALSE);
+        mojangstatisticsgenerator.a("whitelist_count", 0);
         if (this.v != null) {
-            mojangstatisticsgenerator.a("players_current", Integer.valueOf(this.I()));
-            mojangstatisticsgenerator.a("players_max", Integer.valueOf(this.J()));
-            mojangstatisticsgenerator.a("players_seen", Integer.valueOf(this.v.getSeenPlayers().length));
+            mojangstatisticsgenerator.a("players_current", this.I());
+            mojangstatisticsgenerator.a("players_max", this.J());
+            mojangstatisticsgenerator.a("players_seen", this.v.getSeenPlayers().length);
         }
 
-        mojangstatisticsgenerator.a("uses_auth", Boolean.valueOf(this.onlineMode));
+        mojangstatisticsgenerator.a("uses_auth", this.onlineMode);
         mojangstatisticsgenerator.a("gui_state", this.as() ? "enabled" : "disabled");
-        mojangstatisticsgenerator.a("run_time", Long.valueOf((az() - mojangstatisticsgenerator.g()) / 60L * 1000L));
-        mojangstatisticsgenerator.a("avg_tick_ms", Integer.valueOf((int) (MathHelper.a(this.h) * 1.0E-6D)));
+        mojangstatisticsgenerator.a("run_time", (az() - mojangstatisticsgenerator.g()) / 60L * 1000L);
+        mojangstatisticsgenerator.a("avg_tick_ms", (int) (MathHelper.a(this.h) * 1.0E-6D));
         int i = 0;
 
         if (this.worldServer != null) {
             // CraftBukkit start
-            for (int j = 0; j < this.worlds.size(); ++j) {
-                WorldServer worldserver = this.worlds.get(j);
+            for (WorldServer worldserver : this.worlds) {
                 if (worldserver != null) {
                     // CraftBukkit end
                     WorldData worlddata = worldserver.getWorldData();
 
-                    mojangstatisticsgenerator.a("world[" + i + "][dimension]", Integer.valueOf(worldserver.worldProvider.getDimension()));
+                    mojangstatisticsgenerator.a("world[" + i + "][dimension]", worldserver.worldProvider.getDimension());
                     mojangstatisticsgenerator.a("world[" + i + "][mode]", worlddata.getGameType());
                     mojangstatisticsgenerator.a("world[" + i + "][difficulty]", worldserver.getDifficulty());
-                    mojangstatisticsgenerator.a("world[" + i + "][hardcore]", Boolean.valueOf(worlddata.isHardcore()));
+                    mojangstatisticsgenerator.a("world[" + i + "][hardcore]", worlddata.isHardcore());
                     mojangstatisticsgenerator.a("world[" + i + "][generator_name]", worlddata.getType().name());
-                    mojangstatisticsgenerator.a("world[" + i + "][generator_version]", Integer.valueOf(worlddata.getType().getVersion()));
-                    mojangstatisticsgenerator.a("world[" + i + "][height]", Integer.valueOf(this.F));
-                    mojangstatisticsgenerator.a("world[" + i + "][chunks_loaded]", Integer.valueOf(worldserver.N().getLoadedChunks()));
+                    mojangstatisticsgenerator.a("world[" + i + "][generator_version]", worlddata.getType().getVersion());
+                    mojangstatisticsgenerator.a("world[" + i + "][height]", this.F);
+                    mojangstatisticsgenerator.a("world[" + i + "][chunks_loaded]", worldserver.N().getLoadedChunks());
                     ++i;
                 }
             }
         }
 
-        mojangstatisticsgenerator.a("worlds", Integer.valueOf(i));
+        mojangstatisticsgenerator.a("worlds", i);
     }
 
     public void b(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.b("singleplayer", Boolean.valueOf(this.T()));
+        mojangstatisticsgenerator.b("singleplayer", this.T());
         mojangstatisticsgenerator.b("server_brand", this.getServerModName());
         mojangstatisticsgenerator.b("gui_supported", GraphicsEnvironment.isHeadless() ? "headless" : "supported");
-        mojangstatisticsgenerator.b("dedicated", Boolean.valueOf(this.ae()));
+        mojangstatisticsgenerator.b("dedicated", this.ae());
     }
 
     public boolean getSnooperEnabled() {
@@ -1557,8 +1554,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         int i = aworldserver.length;
 
         // CraftBukkit start
-        for (int j = 0; j < worlds.size(); ++j) {
-            WorldServer worldserver = worlds.get(j);
+        for (WorldServer worldserver : worlds) {
             // CraftBukkit end
 
             if (worldserver != null) {
diff --git a/src/main/java/net/minecraft/server/MobEffectAttackDamage.java b/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
index 175503bdb..6f13509fa 100644
--- a/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
+++ b/src/main/java/net/minecraft/server/MobEffectAttackDamage.java
@@ -8,6 +8,6 @@ public class MobEffectAttackDamage extends MobEffectList {
 
     public double a(int i, AttributeModifier attributemodifier) {
         // PaperSpigot - Configurable modifiers for strength and weakness effects
-        return this.id == MobEffectList.WEAKNESS.id ? (double) (org.github.paperspigot.PaperSpigotConfig.weaknessEffectModifier * (float) (i + 1)) : org.github.paperspigot.PaperSpigotConfig.strengthEffectModifier * (double) (i + 1);
+        return this.id == MobEffectList.WEAKNESS.id ? (org.github.paperspigot.PaperSpigotConfig.weaknessEffectModifier * (float) (i + 1)) : org.github.paperspigot.PaperSpigotConfig.strengthEffectModifier * (double) (i + 1);
     }
 }
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index 863e9d8e9..b50cdcc59 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -73,7 +73,7 @@ public class MobEffectList {
     }
 
     public static MobEffectList b(String s) {
-        return (MobEffectList) MobEffectList.I.get(new MinecraftKey(s));
+        return MobEffectList.I.get(new MinecraftKey(s));
     }
 
     public static Set<MinecraftKey> c() {
@@ -201,10 +201,9 @@ public class MobEffectList {
     }
 
     public void a(EntityLiving entityliving, AttributeMapBase attributemapbase, int i) {
-        Iterator iterator = this.J.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
+        for (Entry<IAttribute, AttributeModifier> iAttributeAttributeModifierEntry : this.J.entrySet()) {
+            Entry entry = (Entry) iAttributeAttributeModifierEntry;
             AttributeInstance attributeinstance = attributemapbase.a((IAttribute) entry.getKey());
 
             if (attributeinstance != null) {
@@ -215,10 +214,9 @@ public class MobEffectList {
     }
 
     public void b(EntityLiving entityliving, AttributeMapBase attributemapbase, int i) {
-        Iterator iterator = this.J.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
+        for (Entry<IAttribute, AttributeModifier> iAttributeAttributeModifierEntry : this.J.entrySet()) {
+            Entry entry = (Entry) iAttributeAttributeModifierEntry;
             AttributeInstance attributeinstance = attributemapbase.a((IAttribute) entry.getKey());
 
             if (attributeinstance != null) {
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index 897f8f15a..38aedc46f 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -74,8 +74,8 @@ public abstract class MobSpawnerAbstract {
                 double d2 = (double) ((float) blockposition.getY() + this.a().random.nextFloat());
 
                 d0 = (double) ((float) blockposition.getZ() + this.a().random.nextFloat());
-                this.a().addParticle(EnumParticle.SMOKE_NORMAL, d1, d2, d0, 0.0D, 0.0D, 0.0D, new int[0]);
-                this.a().addParticle(EnumParticle.FLAME, d1, d2, d0, 0.0D, 0.0D, 0.0D, new int[0]);
+                this.a().addParticle(EnumParticle.SMOKE_NORMAL, d1, d2, d0, 0.0D, 0.0D, 0.0D);
+                this.a().addParticle(EnumParticle.FLAME, d1, d2, d0, 0.0D, 0.0D, 0.0D);
                 if (this.spawnDelay > 0) {
                     this.spawnDelay -= tickDelay; // PaperSpigot
                 }
@@ -148,10 +148,8 @@ public abstract class MobSpawnerAbstract {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
             entity.d(nbttagcompound);
-            Iterator iterator = this.i().c.c().iterator();
 
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
+            for (String s : this.i().c.c()) {
                 NBTBase nbtbase = this.i().c.get(s);
 
                 nbttagcompound.set(s, nbtbase.clone());
@@ -183,10 +181,8 @@ public abstract class MobSpawnerAbstract {
                     NBTTagCompound nbttagcompound2 = new NBTTagCompound();
 
                     entity2.d(nbttagcompound2);
-                    Iterator iterator1 = nbttagcompound1.c().iterator();
 
-                    while (iterator1.hasNext()) {
-                        String s1 = (String) iterator1.next();
+                    for (String s1 : nbttagcompound1.c()) {
                         NBTBase nbtbase1 = nbttagcompound1.get(s1);
 
                         nbttagcompound2.set(s1, nbtbase1.clone());
@@ -210,7 +206,7 @@ public abstract class MobSpawnerAbstract {
             }
         } else if (entity instanceof EntityLiving && entity.world != null && flag) {
             if (entity instanceof EntityInsentient) {
-                ((EntityInsentient) entity).prepare(entity.world.E(new BlockPosition(entity)), (GroupDataEntity) null);
+                ((EntityInsentient) entity).prepare(entity.world.E(new BlockPosition(entity)), null);
             }
             // Spigot start - call SpawnerSpawnEvent, abort if cancelled
             SpawnerSpawnEvent event = CraftEventFactory.callSpawnerSpawnEvent(entity, this.b().getX(), this.b().getY(), this.b().getZ());
@@ -239,7 +235,7 @@ public abstract class MobSpawnerAbstract {
         }
 
         if (this.mobs.size() > 0) {
-            this.a((MobSpawnerAbstract.a) WeightedRandom.a(this.a().random, this.mobs));
+            this.a(WeightedRandom.a(this.a().random, this.mobs));
         }
 
         this.a(1);
@@ -304,11 +300,8 @@ public abstract class MobSpawnerAbstract {
                 NBTTagList nbttaglist = new NBTTagList();
 
                 if (this.mobs.size() > 0) {
-                    Iterator iterator = this.mobs.iterator();
-
-                    while (iterator.hasNext()) {
-                        MobSpawnerAbstract.a mobspawnerabstract_a = (MobSpawnerAbstract.a) iterator.next();
 
+                    for (a mobspawnerabstract_a : this.mobs) {
                         nbttaglist.add(mobspawnerabstract_a.a());
                     }
                 } else {
diff --git a/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java b/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
index b2d52540d..99c01f342 100644
--- a/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
+++ b/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
@@ -1,52 +1,35 @@
 package net.minecraft.server;
 
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.DataInput;
-import java.io.DataInputStream;
-import java.io.DataOutput;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
+import java.io.*;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 
 public class NBTCompressedStreamTools {
 
     public static NBTTagCompound a(InputStream inputstream) throws IOException {
-        DataInputStream datainputstream = new DataInputStream(new BufferedInputStream(new GZIPInputStream(inputstream)));
-
         NBTTagCompound nbttagcompound;
-
-        try {
-            nbttagcompound = a((DataInput) datainputstream, NBTReadLimiter.a);
-        } finally {
-            datainputstream.close();
+        try (DataInputStream datainputstream = new DataInputStream(new BufferedInputStream(new GZIPInputStream(inputstream)))) {
+            nbttagcompound = a(datainputstream, NBTReadLimiter.a);
         }
 
         return nbttagcompound;
     }
 
     public static void a(NBTTagCompound nbttagcompound, OutputStream outputstream) throws IOException {
-        DataOutputStream dataoutputstream = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(outputstream)));
 
-        try {
+        try (DataOutputStream dataoutputstream = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(outputstream)))) {
             a(nbttagcompound, (DataOutput) dataoutputstream);
-        } finally {
-            dataoutputstream.close();
         }
 
     }
 
     public static NBTTagCompound a(DataInputStream datainputstream) throws IOException {
-        return a((DataInput) datainputstream, NBTReadLimiter.a);
+        return a(datainputstream, NBTReadLimiter.a);
     }
 
     public static NBTTagCompound a(DataInput datainput, NBTReadLimiter nbtreadlimiter) throws IOException {
         // Spigot start
-        if ( datainput instanceof io.netty.buffer.ByteBufInputStream )
-        {
+        if (datainput instanceof io.netty.buffer.ByteBufInputStream) {
             datainput = new DataInputStream(new org.spigotmc.LimitStream((InputStream) datainput, nbtreadlimiter));
         }
         // Spigot end
@@ -87,8 +70,8 @@ public class NBTCompressedStreamTools {
                 CrashReport crashreport = CrashReport.a(ioexception, "Loading NBT data");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("NBT Tag");
 
-                crashreportsystemdetails.a("Tag name", (Object) "[UNNAMED TAG]");
-                crashreportsystemdetails.a("Tag type", (Object) Byte.valueOf(b0));
+                crashreportsystemdetails.a("Tag name", "[UNNAMED TAG]");
+                crashreportsystemdetails.a("Tag type", b0);
                 throw new ReportedException(crashreport);
             }
         }
diff --git a/src/main/java/net/minecraft/server/NBTTagIntArray.java b/src/main/java/net/minecraft/server/NBTTagIntArray.java
index e206e509b..ae9494513 100644
--- a/src/main/java/net/minecraft/server/NBTTagIntArray.java
+++ b/src/main/java/net/minecraft/server/NBTTagIntArray.java
@@ -18,8 +18,8 @@ public class NBTTagIntArray extends NBTBase {
     void write(DataOutput dataoutput) throws IOException {
         dataoutput.writeInt(this.data.length);
 
-        for (int i = 0; i < this.data.length; ++i) {
-            dataoutput.writeInt(this.data[i]);
+        for (int datum : this.data) {
+            dataoutput.writeInt(datum);
         }
 
     }
@@ -43,14 +43,12 @@ public class NBTTagIntArray extends NBTBase {
     }
 
     public String toString() {
-        String s = "[";
+        StringBuilder s = new StringBuilder("[");
         int[] aint = this.data;
         int i = aint.length;
 
-        for (int j = 0; j < i; ++j) {
-            int k = aint[j];
-
-            s = s + k + ",";
+        for (int k : aint) {
+            s.append(k).append(",");
         }
 
         return s + "]";
diff --git a/src/main/java/net/minecraft/server/NBTTagList.java b/src/main/java/net/minecraft/server/NBTTagList.java
index a0e6b0ff5..c17927335 100644
--- a/src/main/java/net/minecraft/server/NBTTagList.java
+++ b/src/main/java/net/minecraft/server/NBTTagList.java
@@ -19,7 +19,7 @@ public class NBTTagList extends NBTBase {
 
     void write(DataOutput dataoutput) throws IOException {
         if (!this.list.isEmpty()) {
-            this.type = ((NBTBase) this.list.get(0)).getTypeId();
+            this.type = this.list.get(0).getTypeId();
         } else {
             this.type = 0;
         }
@@ -27,8 +27,8 @@ public class NBTTagList extends NBTBase {
         dataoutput.writeByte(this.type);
         dataoutput.writeInt(this.list.size());
 
-        for (int i = 0; i < this.list.size(); ++i) {
-            ((NBTBase) this.list.get(i)).write(dataoutput);
+        for (NBTBase nbtBase : this.list) {
+            ((NBTBase) nbtBase).write(dataoutput);
         }
 
     }
@@ -110,7 +110,7 @@ public class NBTTagList extends NBTBase {
     }
 
     public NBTBase a(int i) {
-        return (NBTBase) this.list.remove(i);
+        return this.list.remove(i);
     }
 
     public boolean isEmpty() {
@@ -119,7 +119,7 @@ public class NBTTagList extends NBTBase {
 
     public NBTTagCompound get(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             return nbtbase.getTypeId() == 10 ? (NBTTagCompound) nbtbase : new NBTTagCompound();
         } else {
@@ -129,7 +129,7 @@ public class NBTTagList extends NBTBase {
 
     public int[] c(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             return nbtbase.getTypeId() == 11 ? ((NBTTagIntArray) nbtbase).c() : new int[0];
         } else {
@@ -139,7 +139,7 @@ public class NBTTagList extends NBTBase {
 
     public double d(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             return nbtbase.getTypeId() == 6 ? ((NBTTagDouble) nbtbase).g() : 0.0D;
         } else {
@@ -149,7 +149,7 @@ public class NBTTagList extends NBTBase {
 
     public float e(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             return nbtbase.getTypeId() == 5 ? ((NBTTagFloat) nbtbase).h() : 0.0F;
         } else {
@@ -159,7 +159,7 @@ public class NBTTagList extends NBTBase {
 
     public String getString(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             return nbtbase.getTypeId() == 8 ? nbtbase.a_() : nbtbase.toString();
         } else {
@@ -168,7 +168,7 @@ public class NBTTagList extends NBTBase {
     }
 
     public NBTBase g(int i) {
-        return (NBTBase) (i >= 0 && i < this.list.size() ? (NBTBase) this.list.get(i) : new NBTTagEnd());
+        return i >= 0 && i < this.list.size() ? this.list.get(i) : new NBTTagEnd();
     }
 
     public int size() {
@@ -179,10 +179,8 @@ public class NBTTagList extends NBTBase {
         NBTTagList nbttaglist = new NBTTagList();
 
         nbttaglist.type = this.type;
-        Iterator iterator = this.list.iterator();
 
-        while (iterator.hasNext()) {
-            NBTBase nbtbase = (NBTBase) iterator.next();
+        for (NBTBase nbtbase : this.list) {
             NBTBase nbtbase1 = nbtbase.clone();
 
             nbttaglist.list.add(nbtbase1);
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index d67539c76..20a720def 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -11,7 +11,6 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.ProfileLookupCallback;
 import com.mojang.authlib.yggdrasil.ProfileNotFoundException;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.text.ParseException;
 import java.util.ArrayList;
@@ -36,10 +35,9 @@ public class NameReferencingFileConverter {
 
     static List<String> a(File file, Map<String, String[]> map) throws IOException {
         List list = Files.readLines(file, Charsets.UTF_8);
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
+        for (Object o : list) {
+            String s = (String) o;
 
             s = s.trim();
             if (!s.startsWith("#") && s.length() >= 1) {
@@ -53,7 +51,7 @@ public class NameReferencingFileConverter {
     }
 
     private static void a(MinecraftServer minecraftserver, Collection<String> collection, ProfileLookupCallback profilelookupcallback) {
-        String[] astring = (String[]) Iterators.toArray(Iterators.filter(collection.iterator(), new Predicate() {
+        String[] astring = Iterators.toArray(Iterators.filter(collection.iterator(), new Predicate() {
             public boolean a(String s) {
                 return !UtilColor.b(s);
             }
@@ -66,12 +64,11 @@ public class NameReferencingFileConverter {
         if (minecraftserver.getOnlineMode() || org.spigotmc.SpigotConfig.bungee) { // Spigot: bungee = online mode, for now.
             minecraftserver.getGameProfileRepository().findProfilesByNames(astring, Agent.MINECRAFT, profilelookupcallback);
         } else {
-            String[] astring1 = astring;
             int i = astring.length;
 
             for (int j = 0; j < i; ++j) {
-                String s = astring1[j];
-                UUID uuid = EntityHuman.a(new GameProfile((UUID) null, s));
+                String s = astring[j];
+                UUID uuid = EntityHuman.a(new GameProfile(null, s));
                 GameProfile gameprofile = new GameProfile(uuid, s);
 
                 profilelookupcallback.onProfileLookupSucceeded(gameprofile);
@@ -85,18 +82,14 @@ public class NameReferencingFileConverter {
 
         if (NameReferencingFileConverter.b.exists() && NameReferencingFileConverter.b.isFile()) {
             if (gameprofilebanlist.c().exists()) {
-                try {
-                    gameprofilebanlist.load();
+                gameprofilebanlist.load();
                 // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
-                } catch (IOException filenotfoundexception) {
-                    NameReferencingFileConverter.e.warn("Could not load existing file " + gameprofilebanlist.c().getName());
-                }
             }
 
             try {
                 final HashMap hashmap = Maps.newHashMap();
 
-                a(NameReferencingFileConverter.b, (Map) hashmap);
+                a(NameReferencingFileConverter.b, hashmap);
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         minecraftserver.getUserCache().a(gameprofile);
@@ -106,9 +99,9 @@ public class NameReferencingFileConverter {
                             NameReferencingFileConverter.e.warn("Could not convert user banlist entry for " + gameprofile.getName());
                             throw new NameReferencingFileConverter.FileConversionException("Profile not in the conversionlist", null);
                         } else {
-                            Date date = astring.length > 1 ? NameReferencingFileConverter.b(astring[1], (Date) null) : null;
+                            Date date = astring.length > 1 ? NameReferencingFileConverter.b(astring[1], null) : null;
                             String s = astring.length > 2 ? astring[2] : null;
-                            Date date1 = astring.length > 3 ? NameReferencingFileConverter.b(astring[3], (Date) null) : null;
+                            Date date1 = astring.length > 3 ? NameReferencingFileConverter.b(astring[3], null) : null;
                             String s1 = astring.length > 4 ? astring[4] : null;
 
                             gameprofilebanlist.add(new GameProfileBanEntry(gameprofile, date, s, date1, s1));
@@ -144,26 +137,21 @@ public class NameReferencingFileConverter {
 
         if (NameReferencingFileConverter.a.exists() && NameReferencingFileConverter.a.isFile()) {
             if (ipbanlist.c().exists()) {
-                try {
-                    ipbanlist.load();
+                ipbanlist.load();
                 // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
-                } catch (IOException filenotfoundexception) {
-                    NameReferencingFileConverter.e.warn("Could not load existing file " + ipbanlist.c().getName());
-                }
             }
 
             try {
                 HashMap hashmap = Maps.newHashMap();
 
-                a(NameReferencingFileConverter.a, (Map) hashmap);
-                Iterator iterator = hashmap.keySet().iterator();
+                a(NameReferencingFileConverter.a, hashmap);
 
-                while (iterator.hasNext()) {
-                    String s = (String) iterator.next();
+                for (Object o : hashmap.keySet()) {
+                    String s = (String) o;
                     String[] astring = (String[]) hashmap.get(s);
-                    Date date = astring.length > 1 ? b(astring[1], (Date) null) : null;
+                    Date date = astring.length > 1 ? b(astring[1], null) : null;
                     String s1 = astring.length > 2 ? astring[2] : null;
-                    Date date1 = astring.length > 3 ? b(astring[3], (Date) null) : null;
+                    Date date1 = astring.length > 3 ? b(astring[3], null) : null;
                     String s2 = astring.length > 4 ? astring[4] : null;
 
                     ipbanlist.add(new IpBanEntry(s, date, s1, date1, s2));
@@ -186,12 +174,8 @@ public class NameReferencingFileConverter {
 
         if (NameReferencingFileConverter.c.exists() && NameReferencingFileConverter.c.isFile()) {
             if (oplist.c().exists()) {
-                try {
-                    oplist.load();
+                oplist.load();
                 // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
-                } catch (IOException filenotfoundexception) {
-                    NameReferencingFileConverter.e.warn("Could not load existing file " + oplist.c().getName());
-                }
             }
 
             try {
@@ -231,12 +215,8 @@ public class NameReferencingFileConverter {
 
         if (NameReferencingFileConverter.d.exists() && NameReferencingFileConverter.d.isFile()) {
             if (whitelist.c().exists()) {
-                try {
-                    whitelist.load();
+                whitelist.load();
                 // CraftBukkit start - FileNotFoundException -> IOException, don't print stacetrace
-                } catch (IOException filenotfoundexception) {
-                    NameReferencingFileConverter.e.warn("Could not load existing file " + whitelist.c().getName());
-                }
             }
 
             try {
@@ -291,10 +271,10 @@ public class NameReferencingFileConverter {
                     }
                 };
 
-                a(minecraftserver, Lists.newArrayList(new String[] { s}), profilelookupcallback);
+                a(minecraftserver, Lists.newArrayList(s), profilelookupcallback);
                 return arraylist.size() > 0 && ((GameProfile) arraylist.get(0)).getId() != null ? ((GameProfile) arraylist.get(0)).getId().toString() : "";
             } else {
-                return EntityHuman.a(new GameProfile((UUID) null, s)).toString();
+                return EntityHuman.a(new GameProfile(null, s)).toString();
             }
         } else {
             return s;
@@ -309,11 +289,10 @@ public class NameReferencingFileConverter {
         if (file.exists() && file.isDirectory()) {
             File[] afile = file.listFiles();
             ArrayList arraylist = Lists.newArrayList();
-            File[] afile1 = afile;
             int i = afile.length;
 
             for (int j = 0; j < i; ++j) {
-                File file3 = afile1[j];
+                File file3 = afile[j];
                 String s = file3.getName();
 
                 if (s.toLowerCase(Locale.ROOT).endsWith(".dat")) {
@@ -326,7 +305,7 @@ public class NameReferencingFileConverter {
             }
 
             try {
-                final String[] astring = (String[]) arraylist.toArray(new String[arraylist.size()]);
+                final String[] astring = (String[]) arraylist.toArray(new String[0]);
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         dedicatedserver.getUserCache().a(gameprofile);
@@ -387,9 +366,9 @@ public class NameReferencingFileConverter {
                     private String a(GameProfile gameprofile) {
                         String s = null;
 
-                        for (int i = 0; i < astring.length; ++i) {
-                            if (astring[i] != null && astring[i].equalsIgnoreCase(gameprofile.getName())) {
-                                s = astring[i];
+                        for (String value : astring) {
+                            if (value != null && value.equalsIgnoreCase(gameprofile.getName())) {
+                                s = value;
                                 break;
                             }
                         }
@@ -486,7 +465,7 @@ public class NameReferencingFileConverter {
         if (file.exists() && file.isDirectory() && (file.list().length > 0 || !file.delete())) {
             NameReferencingFileConverter.e.warn("**** DETECTED OLD PLAYER DIRECTORY IN THE WORLD SAVE");
             NameReferencingFileConverter.e.warn("**** THIS USUALLY HAPPENS WHEN THE AUTOMATIC CONVERSION FAILED IN SOME WAY");
-            NameReferencingFileConverter.e.warn("** please restart the server and if the problem persists, remove the directory \'{}\'", new Object[] { file.getPath()});
+            NameReferencingFileConverter.e.warn("** please restart the server and if the problem persists, remove the directory \'{}\'", file.getPath());
             return false;
         } else {
             return true;
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 8ebe58495..1f5259879 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -47,7 +47,7 @@ public abstract class NavigationAbstract {
             BlockPosition blockposition1 = new BlockPosition(this.b);
             int i = (int) (f + 8.0F);
             ChunkCache chunkcache = new ChunkCache(this.c, blockposition1.a(-i, -i, -i), blockposition1.a(i, i, i), 0);
-            PathEntity pathentity = this.j.a((IBlockAccess) chunkcache, (Entity) this.b, blockposition, f);
+            PathEntity pathentity = this.j.a(chunkcache, this.b, blockposition, f);
 
             this.c.methodProfiler.b();
             return pathentity;
@@ -74,7 +74,7 @@ public abstract class NavigationAbstract {
             BlockPosition blockposition = (new BlockPosition(this.b)).up();
             int i = (int) (f + 16.0F);
             ChunkCache chunkcache = new ChunkCache(this.c, blockposition.a(-i, -i, -i), blockposition.a(i, i, i), 0);
-            PathEntity pathentity = this.j.a((IBlockAccess) chunkcache, (Entity) this.b, entity, f);
+            PathEntity pathentity = this.j.a(chunkcache, this.b, entity, f);
 
             this.c.methodProfiler.b();
             return pathentity;
@@ -146,7 +146,7 @@ public abstract class NavigationAbstract {
             }
 
             if (!this.m()) {
-                vec3d = this.d.a((Entity) this.b);
+                vec3d = this.d.a(this.b);
                 if (vec3d != null) {
                     AxisAlignedBB axisalignedbb = (new AxisAlignedBB(vec3d.a, vec3d.b, vec3d.c, vec3d.a, vec3d.b, vec3d.c)).grow(0.5D, 0.5D, 0.5D);
                     List list = this.c.getCubes(this.b, axisalignedbb.a(0.0D, -1.0D, 0.0D));
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 9d23c6c0c..32db94245 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -101,44 +101,43 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
         NetworkManager.g.debug("Enabled auto read");
     }
 
-    public void channelInactive(ChannelHandlerContext channelhandlercontext) throws Exception {
-        this.close(new ChatMessage("disconnect.endOfStream", new Object[0]));
+    public void channelInactive(ChannelHandlerContext channelhandlercontext) {
+        this.close(new ChatMessage("disconnect.endOfStream"));
     }
 
-    public void exceptionCaught(ChannelHandlerContext channelhandlercontext, Throwable throwable) throws Exception {
+    public void exceptionCaught(ChannelHandlerContext channelhandlercontext, Throwable throwable) {
         ChatMessage chatmessage;
 
         if (throwable instanceof TimeoutException) {
-            chatmessage = new ChatMessage("disconnect.timeout", new Object[0]);
+            chatmessage = new ChatMessage("disconnect.timeout");
         } else {
-            chatmessage = new ChatMessage("disconnect.genericReason", new Object[] { "Internal Exception: " + throwable});
+            chatmessage = new ChatMessage("disconnect.genericReason", "Internal Exception: " + throwable);
         }
 
         this.close(chatmessage);
         if (MinecraftServer.getServer().isDebugging()) throwable.printStackTrace(); // Spigot
     }
 
-    protected void a(ChannelHandlerContext channelhandlercontext, Packet packet) throws Exception {
+    protected void a(ChannelHandlerContext channelhandlercontext, Packet packet) {
         if (this.channel.isOpen()) {
             try {
                 packet.a(this.m);
-            } catch (CancelledPacketHandleException cancelledpackethandleexception) {
-                ;
+            } catch (CancelledPacketHandleException ignored) {
             }
         }
 
     }
 
     public void a(PacketListener packetlistener) {
-        Validate.notNull(packetlistener, "packetListener", new Object[0]);
-        NetworkManager.g.debug("Set listener of {} to {}", new Object[] { this, packetlistener});
+        Validate.notNull(packetlistener, "packetListener");
+        NetworkManager.g.debug("Set listener of {} to {}", this, packetlistener);
         this.m = packetlistener;
     }
 
     public void handle(Packet packet) {
         if (this.g()) {
             this.m();
-            this.a(packet, (GenericFutureListener[]) null);
+            this.a(packet, null);
         } else {
             this.j.writeLock().lock();
 
@@ -154,7 +153,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     public void a(Packet packet, GenericFutureListener<? extends Future<? super Void>> genericfuturelistener, GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
         if (this.g()) {
             this.m();
-            this.a(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener));
+            this.a(packet, ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener));
         } else {
             this.j.writeLock().lock();
 
@@ -169,7 +168,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
     private void a(final Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {
         final EnumProtocol enumprotocol = EnumProtocol.a(packet);
-        final EnumProtocol enumprotocol1 = (EnumProtocol) this.channel.attr(NetworkManager.c).get();
+        final EnumProtocol enumprotocol1 = this.channel.attr(NetworkManager.c).get();
 
         if (enumprotocol1 != enumprotocol) {
             NetworkManager.g.debug("Disabled auto read");
@@ -189,20 +188,18 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
             channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         } else {
-            this.channel.eventLoop().execute(new Runnable() {
-                public void run() {
-                    if (enumprotocol != enumprotocol1) {
-                        NetworkManager.this.a(enumprotocol);
-                    }
-
-                    ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
+            this.channel.eventLoop().execute(() -> {
+                if (enumprotocol != enumprotocol1) {
+                    NetworkManager.this.a(enumprotocol);
+                }
 
-                    if (agenericfuturelistener != null) {
-                        channelfuture.addListeners(agenericfuturelistener);
-                    }
+                ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
 
-                    channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                if (agenericfuturelistener != null) {
+                    channelfuture.addListeners(agenericfuturelistener);
                 }
+
+                channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
             });
         }
 
@@ -214,7 +211,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
             try {
                 while (!this.i.isEmpty()) {
-                    NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket) this.i.poll();
+                    NetworkManager.QueuedPacket networkmanager_queuedpacket = this.i.poll();
 
                     this.a(networkmanager_queuedpacket.a, networkmanager_queuedpacket.b);
                 }
@@ -322,7 +319,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     }
 
     protected void channelRead0(ChannelHandlerContext channelhandlercontext, Packet object) throws Exception { // CraftBukkit - fix decompile error
-        this.a(channelhandlercontext, (Packet) object);
+        this.a(channelhandlercontext, object);
     }
 
     static class QueuedPacket {
diff --git a/src/main/java/net/minecraft/server/NextTickListEntry.java b/src/main/java/net/minecraft/server/NextTickListEntry.java
index 648d25534..d1ea3c700 100644
--- a/src/main/java/net/minecraft/server/NextTickListEntry.java
+++ b/src/main/java/net/minecraft/server/NextTickListEntry.java
@@ -10,7 +10,7 @@ public class NextTickListEntry implements Comparable<NextTickListEntry> {
     private long f;
 
     public NextTickListEntry(BlockPosition blockposition, Block block) {
-        this.f = (long) (NextTickListEntry.d++);
+        this.f = NextTickListEntry.d++;
         this.a = blockposition;
         this.e = block;
     }
@@ -39,7 +39,7 @@ public class NextTickListEntry implements Comparable<NextTickListEntry> {
     }
 
     public int a(NextTickListEntry nextticklistentry) {
-        return this.b < nextticklistentry.b ? -1 : (this.b > nextticklistentry.b ? 1 : (this.c != nextticklistentry.c ? this.c - nextticklistentry.c : (this.f < nextticklistentry.f ? -1 : (this.f > nextticklistentry.f ? 1 : 0))));
+        return this.b < nextticklistentry.b ? -1 : (this.b > nextticklistentry.b ? 1 : (this.c != nextticklistentry.c ? this.c - nextticklistentry.c : (Long.compare(this.f, nextticklistentry.f))));
     }
 
     public String toString() {
@@ -51,6 +51,6 @@ public class NextTickListEntry implements Comparable<NextTickListEntry> {
     }
 
     public int compareTo(NextTickListEntry object) {
-        return this.a((NextTickListEntry) object);
+        return this.a(object);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index 21ab829a6..d679a738f 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -8,7 +8,7 @@ import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.ByteBufProcessor;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
-import io.netty.util.ReferenceCounted;
+
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
@@ -87,16 +87,16 @@ public class PacketDataSerializer extends ByteBuf {
         this.writeLong(blockposition.asLong());
     }
 
-    public IChatBaseComponent d() throws IOException {
+    public IChatBaseComponent d() {
         return IChatBaseComponent.ChatSerializer.a(this.c(32767));
     }
 
-    public void a(IChatBaseComponent ichatbasecomponent) throws IOException {
+    public void a(IChatBaseComponent ichatbasecomponent) {
         this.a(IChatBaseComponent.ChatSerializer.a(ichatbasecomponent));
     }
 
     public <T extends Enum<T>> T a(Class<T> oclass) {
-        return ((T[]) oclass.getEnumConstants())[this.e()]; // CraftBukkit - fix decompile error
+        return oclass.getEnumConstants()[this.e()]; // CraftBukkit - fix decompile error
     }
 
     public void a(Enum<?> oenum) {
@@ -185,7 +185,7 @@ public class PacketDataSerializer extends ByteBuf {
             return null;
         } else {
             this.readerIndex(i);
-            return NBTCompressedStreamTools.a((DataInput) (new ByteBufInputStream(this)), new NBTReadLimiter(2097152L));
+            return NBTCompressedStreamTools.a(new ByteBufInputStream(this), new NBTReadLimiter(2097152L));
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java b/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
index fba8bbad1..4440bc6b7 100644
--- a/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
+++ b/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
@@ -11,14 +11,14 @@ public class PacketHandshakingInSetProtocol implements Packet<PacketHandshakingI
 
     public PacketHandshakingInSetProtocol() {}
 
-    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+    public void a(PacketDataSerializer packetdataserializer) {
         this.a = packetdataserializer.e();
         this.hostname = packetdataserializer.c(Short.MAX_VALUE); // Spigot
         this.port = packetdataserializer.readUnsignedShort();
         this.d = EnumProtocol.a(packetdataserializer.e());
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+    public void b(PacketDataSerializer packetdataserializer) {
         packetdataserializer.b(this.a);
         packetdataserializer.a(this.hostname);
         packetdataserializer.writeShort(this.port);
diff --git a/src/main/java/net/minecraft/server/PacketLoginInEncryptionBegin.java b/src/main/java/net/minecraft/server/PacketLoginInEncryptionBegin.java
index 2d408b543..8e0f6c658 100644
--- a/src/main/java/net/minecraft/server/PacketLoginInEncryptionBegin.java
+++ b/src/main/java/net/minecraft/server/PacketLoginInEncryptionBegin.java
@@ -11,14 +11,14 @@ public class PacketLoginInEncryptionBegin implements Packet<PacketLoginInListene
 
     public PacketLoginInEncryptionBegin() {}
 
-    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+    public void a(PacketDataSerializer packetdataserializer) {
         // TacoSpigot start - limit to 256 bytes
         this.a = packetdataserializer.readByteArray(256);
         this.b = packetdataserializer.readByteArray(256);
         // TacoSpigot end
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+    public void b(PacketDataSerializer packetdataserializer) {
         packetdataserializer.a(this.a);
         packetdataserializer.a(this.b);
     }
diff --git a/src/main/java/net/minecraft/server/PacketPlayInArmAnimation.java b/src/main/java/net/minecraft/server/PacketPlayInArmAnimation.java
index 28cb5e3f3..38a5dd861 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInArmAnimation.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInArmAnimation.java
@@ -8,11 +8,11 @@ public class PacketPlayInArmAnimation implements Packet<PacketListenerPlayIn> {
 
     public PacketPlayInArmAnimation() {}
 
-    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+    public void a(PacketDataSerializer packetdataserializer) {
         timestamp = System.currentTimeMillis(); // Spigot
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {}
+    public void b(PacketDataSerializer packetdataserializer) {}
 
     public void a(PacketListenerPlayIn packetlistenerplayin) {
         packetlistenerplayin.a(this);
diff --git a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
index 02d8e07f8..6771c4305 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
@@ -39,7 +39,7 @@ public class PacketPlayInBlockPlace implements Packet<PacketListenerPlayIn> {
         this.g = (float) packetdataserializer.readUnsignedByte() / 16.0F;
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+    public void b(PacketDataSerializer packetdataserializer) {
         packetdataserializer.a(this.b);
         packetdataserializer.writeByte(this.c);
         packetdataserializer.a(this.d);
diff --git a/src/main/java/net/minecraft/server/PacketPlayInChat.java b/src/main/java/net/minecraft/server/PacketPlayInChat.java
index 18358b432..d2a5432ba 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInChat.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInChat.java
@@ -16,11 +16,11 @@ public class PacketPlayInChat implements Packet<PacketListenerPlayIn> {
         this.a = s;
     }
 
-    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+    public void a(PacketDataSerializer packetdataserializer) {
         this.a = packetdataserializer.c(100);
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+    public void b(PacketDataSerializer packetdataserializer) {
         packetdataserializer.a(this.a);
     }
 
@@ -30,15 +30,7 @@ public class PacketPlayInChat implements Packet<PacketListenerPlayIn> {
     public void a(final PacketListenerPlayIn packetlistenerplayin) {
         if ( !a.startsWith("/") )
         {
-            executors.submit( new Runnable()
-            {
-
-                @Override
-                public void run()
-                {
-                    packetlistenerplayin.a( PacketPlayInChat.this );
-                }
-            } );
+            executors.submit(() -> packetlistenerplayin.a( PacketPlayInChat.this ));
             return;
         }
         // Spigot End
diff --git a/src/main/java/net/minecraft/server/PacketPlayInCloseWindow.java b/src/main/java/net/minecraft/server/PacketPlayInCloseWindow.java
index 4dfb6c021..0e81d0bdc 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInCloseWindow.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInCloseWindow.java
@@ -18,11 +18,11 @@ public class PacketPlayInCloseWindow implements Packet<PacketListenerPlayIn> {
         packetlistenerplayin.a(this);
     }
 
-    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+    public void a(PacketDataSerializer packetdataserializer) {
         this.id = packetdataserializer.readByte();
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+    public void b(PacketDataSerializer packetdataserializer) {
         packetdataserializer.writeByte(this.id);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
index c5e5aa7be..749684d75 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
@@ -9,24 +9,24 @@ public class PacketPlayInResourcePackStatus implements Packet<PacketListenerPlay
 
     public PacketPlayInResourcePackStatus() {}
 
-    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+    public void a(PacketDataSerializer packetdataserializer) {
         this.a = packetdataserializer.c(40);
-        this.b = (PacketPlayInResourcePackStatus.EnumResourcePackStatus) packetdataserializer.a(PacketPlayInResourcePackStatus.EnumResourcePackStatus.class);
+        this.b = packetdataserializer.a(EnumResourcePackStatus.class);
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+    public void b(PacketDataSerializer packetdataserializer) {
         packetdataserializer.a(this.a);
-        packetdataserializer.a((Enum) this.b);
+        packetdataserializer.a(this.b);
     }
 
     public void a(PacketListenerPlayIn packetlistenerplayin) {
         packetlistenerplayin.a(this);
     }
 
-    public static enum EnumResourcePackStatus {
+    public enum EnumResourcePackStatus {
 
         SUCCESSFULLY_LOADED, DECLINED, FAILED_DOWNLOAD, ACCEPTED;
 
-        private EnumResourcePackStatus() {}
+        EnumResourcePackStatus() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index a0021fb96..417306f66 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -22,7 +22,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         chunk.world.spigotConfig.antiXrayInstance.obfuscateSync(chunk.locX, chunk.locZ, c.b, c.a, chunk.world);
     }
 
-    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+    public void a(PacketDataSerializer packetdataserializer) {
         this.a = packetdataserializer.readInt();
         this.b = packetdataserializer.readInt();
         this.d = packetdataserializer.readBoolean();
@@ -31,7 +31,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         this.c.a = packetdataserializer.a();
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+    public void b(PacketDataSerializer packetdataserializer) {
         packetdataserializer.writeInt(this.a);
         packetdataserializer.writeInt(this.b);
         packetdataserializer.writeBoolean(this.d);
@@ -77,11 +77,10 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         while (iterator.hasNext()) {
             chunksection1 = (ChunkSection) iterator.next();
             char[] achar = chunksection1.getIdArray();
-            char[] achar1 = achar;
             int k = achar.length;
 
             for (int l = 0; l < k; ++l) {
-                char c0 = achar1[l];
+                char c0 = achar[l];
 
                 packetplayoutmapchunk_chunkmap.a[j++] = (byte) (c0 & 255);
                 packetplayoutmapchunk_chunkmap.a[j++] = (byte) (c0 >> 8 & 255);
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
index 00c053850..b012ed5b0 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
@@ -19,10 +19,10 @@ public class PacketPlayOutMapChunkBulk implements Packet<PacketListenerPlayOut>
         this.a = new int[i];
         this.b = new int[i];
         this.c = new PacketPlayOutMapChunk.ChunkMap[i];
-        this.d = !((Chunk) list.get(0)).getWorld().worldProvider.o();
+        this.d = !list.get(0).getWorld().worldProvider.o();
 
         for (int j = 0; j < i; ++j) {
-            Chunk chunk = (Chunk) list.get(j);
+            Chunk chunk = list.get(j);
             PacketPlayOutMapChunk.ChunkMap packetplayoutmapchunk_chunkmap = chunk.getChunkMap(true, '\uffff'); // PaperSpigot
 
             this.a[j] = chunk.locX;
@@ -30,10 +30,10 @@ public class PacketPlayOutMapChunkBulk implements Packet<PacketListenerPlayOut>
             this.c[j] = packetplayoutmapchunk_chunkmap;
         }
         
-        world = ((Chunk) list.get(0)).getWorld(); // Spigot
+        world = list.get(0).getWorld(); // Spigot
     }
 
-    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+    public void a(PacketDataSerializer packetdataserializer) {
         this.d = packetdataserializer.readBoolean();
         int i = packetdataserializer.e();
 
@@ -57,7 +57,7 @@ public class PacketPlayOutMapChunkBulk implements Packet<PacketListenerPlayOut>
 
     }
 
-    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+    public void b(PacketDataSerializer packetdataserializer) {
         packetdataserializer.writeBoolean(this.d);
         packetdataserializer.b(this.c.length);
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
index 20016b5c4..895da246e 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
@@ -41,7 +41,7 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.a = (EnumTitleAction) packetdataserializer.a(EnumTitleAction.class);
+        this.a = packetdataserializer.a(EnumTitleAction.class);
         if (this.a == EnumTitleAction.TITLE || this.a == EnumTitleAction.SUBTITLE) {
             this.b = packetdataserializer.d();
         }
@@ -55,7 +55,7 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.a(this.a);
         if (this.a == EnumTitleAction.TITLE || this.a == EnumTitleAction.SUBTITLE) {
             // Paper start
             if (this.components != null) {
@@ -86,19 +86,17 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     */
     // PaperSpigot end
 
-    public static enum EnumTitleAction {
+    public enum EnumTitleAction {
 
         TITLE, SUBTITLE, TIMES, CLEAR, RESET;
 
-        private EnumTitleAction() {}
+        EnumTitleAction() {}
 
         public static EnumTitleAction a(String s) {
             EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
             int i = apacketplayouttitle_enumtitleaction.length;
 
-            for (int j = 0; j < i; ++j) {
-                EnumTitleAction packetplayouttitle_enumtitleaction = apacketplayouttitle_enumtitleaction[j];
-
+            for (EnumTitleAction packetplayouttitle_enumtitleaction : apacketplayouttitle_enumtitleaction) {
                 if (packetplayouttitle_enumtitleaction.name().equalsIgnoreCase(s)) {
                     return packetplayouttitle_enumtitleaction;
                 }
@@ -113,9 +111,7 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
             EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
             int j = apacketplayouttitle_enumtitleaction.length;
 
-            for (int k = 0; k < j; ++k) {
-                EnumTitleAction packetplayouttitle_enumtitleaction = apacketplayouttitle_enumtitleaction[k];
-
+            for (EnumTitleAction packetplayouttitle_enumtitleaction : apacketplayouttitle_enumtitleaction) {
                 astring[i++] = packetplayouttitle_enumtitleaction.name().toLowerCase();
             }
 
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index e4bff04ac..5e6a1ae6e 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -2,7 +2,7 @@ package net.minecraft.server;
 
 // CraftBukkit start
 import com.mojang.authlib.GameProfile;
-import io.netty.channel.ChannelFutureListener;
+
 import java.net.InetSocketAddress;
 import java.util.Iterator;
 
@@ -61,9 +61,8 @@ public class PacketStatusListener implements PacketStatusInListener {
                         if (player != null) {
                             return true;
                         }
-                        final Object[] currentPlayers = players;
-                        for (int length = currentPlayers.length, i = this.i; i < length; i++) {
-                            final EntityPlayer player = (EntityPlayer) currentPlayers[i];
+                        for (int length = players.length, i = this.i; i < length; i++) {
+                            final EntityPlayer player = (EntityPlayer) players[i];
                             if (player != null) {
                                 this.i = i + 1;
                                 this.player = player;
@@ -86,12 +85,11 @@ public class PacketStatusListener implements PacketStatusInListener {
 
                     @Override
                     public void remove() {
-                        final Object[] currentPlayers = players;
                         final int i = this.ret;
-                        if (i < 0 || currentPlayers[i] == null) {
+                        if (i < 0 || players[i] == null) {
                             throw new IllegalStateException();
                         }
-                        currentPlayers[i] = null;
+                        players[i] = null;
                     }
                 };
             }
@@ -100,7 +98,7 @@ public class PacketStatusListener implements PacketStatusInListener {
         ServerListPingEvent event = new ServerListPingEvent();
         this.minecraftServer.server.getPluginManager().callEvent(event);
 
-        java.util.List<GameProfile> profiles = new java.util.ArrayList<GameProfile>(players.length);
+        java.util.List<GameProfile> profiles = new java.util.ArrayList<>(players.length);
         for (Object player : players) {
             if (player != null) {
                 profiles.add(((EntityPlayer) player).getProfile());
@@ -115,7 +113,7 @@ public class PacketStatusListener implements PacketStatusInListener {
             profiles = profiles.subList( 0, Math.min( profiles.size(), org.spigotmc.SpigotConfig.playerSample ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
         }
         // Spigot End
-        playerSample.a(profiles.toArray(new GameProfile[profiles.size()]));
+        playerSample.a(profiles.toArray(new GameProfile[0]));
 
         ServerPing ping = new ServerPing();
         ping.setFavicon(event.icon.value);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
index cdff6d2ad..2a202bc3d 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
@@ -39,7 +39,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
 
     public void e() {
         this.d.getControllerLook().a(this.e, 10.0F, (float) this.d.bQ());
-        this.d.getNavigation().a((Entity) this.e, this.c);
+        this.d.getNavigation().a(this.e, this.c);
         ++this.b;
         if (this.b >= 60 && this.d.h(this.e) < 9.0D) {
             this.g();
@@ -52,10 +52,9 @@ public class PathfinderGoalBreed extends PathfinderGoal {
         List list = this.a.a(this.d.getClass(), this.d.getBoundingBox().grow((double) f, (double) f, (double) f));
         double d0 = Double.MAX_VALUE;
         EntityAnimal entityanimal = null;
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            EntityAnimal entityanimal1 = (EntityAnimal) iterator.next();
+        for (Object o : list) {
+            EntityAnimal entityanimal1 = (EntityAnimal) o;
 
             if (this.d.mate(entityanimal1) && this.d.h(entityanimal1) < d0) {
                 entityanimal = entityanimal1;
@@ -84,7 +83,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
             if (entityhuman != null) {
                 entityhuman.b(StatisticList.A);
                 if (this.d instanceof EntityCow) {
-                    entityhuman.b((Statistic) AchievementList.H);
+                    entityhuman.b(AchievementList.H);
                 }
             }
 
@@ -105,7 +104,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
                 double d4 = 0.5D + random.nextDouble() * (double) this.d.length;
                 double d5 = random.nextDouble() * (double) this.d.width * 2.0D - (double) this.d.width;
 
-                this.a.addParticle(EnumParticle.HEART, this.d.locX + d3, this.d.locY + d4, this.d.locZ + d5, d0, d1, d2, new int[0]);
+                this.a.addParticle(EnumParticle.HEART, this.d.locX + d3, this.d.locY + d4, this.d.locZ + d5, d0, d1, d2);
             }
 
             if (this.a.getGameRules().getBoolean("doMobLoot")) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java b/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
index df627d34b..d5b875967 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
@@ -17,12 +17,12 @@ public class PathfinderGoalDefendVillage extends PathfinderGoalTarget {
         if (village == null) {
             return false;
         } else {
-            this.b = village.b((EntityLiving) this.a);
+            this.b = village.b(this.a);
             if (this.b instanceof EntityCreeper) {
                 return false;
             } else if (!this.a(this.b, false)) {
                 if (this.e.bc().nextInt(20) == 0) {
-                    this.b = village.c((EntityLiving) this.a);
+                    this.b = village.c(this.a);
                     return this.a(this.b, false);
                 } else {
                     return false;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java b/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
index 0582519cc..f850b1ae8 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
@@ -10,7 +10,7 @@ import org.bukkit.Material;
 
 public class PathfinderGoalEatTile extends PathfinderGoal {
 
-    private static final Predicate<IBlockData> b = BlockStatePredicate.a((Block) Blocks.TALLGRASS).a(BlockLongGrass.TYPE, Predicates.equalTo(BlockLongGrass.EnumTallGrassType.GRASS));
+    private static final Predicate<IBlockData> b = BlockStatePredicate.a(Blocks.TALLGRASS).a(BlockLongGrass.TYPE, Predicates.equalTo(BlockLongGrass.EnumTallGrassType.GRASS));
     private EntityInsentient c;
     private World d;
     int a;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
index bf9eda895..9ceb5875a 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
@@ -28,19 +28,16 @@ public class PathfinderGoalHurtByTarget extends PathfinderGoalTarget {
         if (this.a) {
             double d0 = this.f();
             List list = this.e.world.a(this.e.getClass(), (new AxisAlignedBB(this.e.locX, this.e.locY, this.e.locZ, this.e.locX + 1.0D, this.e.locY + 1.0D, this.e.locZ + 1.0D)).grow(d0, 10.0D, d0));
-            Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                EntityCreature entitycreature = (EntityCreature) iterator.next();
+            for (Object o : list) {
+                EntityCreature entitycreature = (EntityCreature) o;
 
                 if (this.e != entitycreature && entitycreature.getGoalTarget() == null && !entitycreature.c(this.e.getLastDamager())) {
                     boolean flag = false;
                     Class[] aclass = this.c;
                     int i = aclass.length;
 
-                    for (int j = 0; j < i; ++j) {
-                        Class oclass = aclass[j];
-
+                    for (Class oclass : aclass) {
                         if (entitycreature.getClass() == oclass) {
                             flag = true;
                             break;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java b/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
index d8a020480..a3f268177 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
@@ -57,7 +57,7 @@ public class PathfinderGoalMakeLove extends PathfinderGoal {
         --this.e;
         this.b.getControllerLook().a(this.c, 10.0F, 30.0F);
         if (this.b.h(this.c) > 2.25D) {
-            this.b.getNavigation().a((Entity) this.c, 0.25D);
+            this.b.getNavigation().a(this.c, 0.25D);
         } else if (this.e == 0 && this.c.cm()) {
             this.g();
         }
@@ -79,7 +79,7 @@ public class PathfinderGoalMakeLove extends PathfinderGoal {
     }
 
     private void g() {
-        EntityVillager entityvillager = this.b.b((EntityAgeable) this.c);
+        EntityVillager entityvillager = this.b.b(this.c);
 
         this.c.setAgeRaw(6000);
         this.b.setAgeRaw(6000);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
index 5cdc2638b..982f20ff3 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
@@ -19,7 +19,7 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
     }
 
     public PathfinderGoalNearestAttackableTarget(EntityCreature entitycreature, Class<T> oclass, boolean flag, boolean flag1) {
-        this(entitycreature, oclass, 10, flag, flag1, (Predicate) null);
+        this(entitycreature, oclass, 10, flag, flag1, null);
     }
 
     public PathfinderGoalNearestAttackableTarget(EntityCreature entitycreature, Class<T> oclass, int i, boolean flag, boolean flag1, final Predicate<? super T> predicate) {
@@ -70,9 +70,9 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
             return false;
         } else {
             double d0 = this.f();
-            List list = this.e.world.a(this.a, this.e.getBoundingBox().grow(d0, 4.0D, d0), Predicates.and((Predicate) this.c, (Predicate) IEntitySelector.d)); // TacoSpigot - the eclipse compiler can't understand this, so make it generic
+            List list = this.e.world.a(this.a, this.e.getBoundingBox().grow(d0, 4.0D, d0), Predicates.and(this.c, IEntitySelector.d)); // TacoSpigot - the eclipse compiler can't understand this, so make it generic
 
-            Collections.sort(list, this.b);
+            list.sort(this.b);
             if (list.isEmpty()) {
                 return false;
             } else {
@@ -99,11 +99,11 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
             double d0 = this.a.h(entity);
             double d1 = this.a.h(entity1);
 
-            return d0 < d1 ? -1 : (d0 > d1 ? 1 : 0);
+            return Double.compare(d0, d1);
         }
 
         public int compare(Entity object, Entity object1) { // CraftBukkit - fix decompile error
-            return this.a((Entity) object, (Entity) object1);
+            return this.a(object, object1);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
index b0b95bdb8..41cce089e 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
@@ -44,7 +44,7 @@ public class PathfinderGoalNearestAttackableTargetInsentient extends PathfinderG
         double d0 = this.f();
         List list = this.b.world.a(this.f, this.b.getBoundingBox().grow(d0, 4.0D, d0), this.c);
 
-        Collections.sort(list, this.d);
+        list.sort(this.d);
         if (list.isEmpty()) {
             return false;
         } else {
@@ -73,7 +73,7 @@ public class PathfinderGoalNearestAttackableTargetInsentient extends PathfinderG
     }
 
     public void d() {
-        this.b.setGoalTarget((EntityLiving) null);
+        this.b.setGoalTarget(null);
         super.c();
     }
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index b03ba8575..f0018af75 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
 import org.apache.logging.log4j.LogManager;
@@ -11,8 +10,8 @@ import org.bukkit.craftbukkit.util.UnsafeList; // CraftBukkit
 public class PathfinderGoalSelector {
 
     private static final Logger a = LogManager.getLogger();
-    private List<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = new UnsafeList<PathfinderGoalSelector.PathfinderGoalSelectorItem>();
-    private List<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = new UnsafeList<PathfinderGoalSelector.PathfinderGoalSelectorItem>();
+    private List<PathfinderGoalSelector.PathfinderGoalSelectorItem> b = new UnsafeList<>();
+    private List<PathfinderGoalSelector.PathfinderGoalSelectorItem> c = new UnsafeList<>();
     private final MethodProfiler d;
     private int e;
     private int f = 3;
@@ -95,17 +94,13 @@ public class PathfinderGoalSelector {
     }
 
     private boolean a(PathfinderGoalSelector.PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem) {
-        boolean flag = pathfindergoalselector_pathfindergoalselectoritem.a.b();
 
-        return flag;
+        return pathfindergoalselector_pathfindergoalselectoritem.a.b();
     }
 
     private boolean b(PathfinderGoalSelector.PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem) {
-        Iterator iterator = this.b.iterator();
-
-        while (iterator.hasNext()) {
-            PathfinderGoalSelector.PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem1 = (PathfinderGoalSelector.PathfinderGoalSelectorItem) iterator.next();
 
+        for (PathfinderGoalSelectorItem pathfindergoalselector_pathfindergoalselectoritem1 : this.b) {
             if (pathfindergoalselector_pathfindergoalselectoritem1 != pathfindergoalselector_pathfindergoalselectoritem) {
                 if (pathfindergoalselector_pathfindergoalselectoritem.b >= pathfindergoalselector_pathfindergoalselectoritem1.b) {
                     if (!this.a(pathfindergoalselector_pathfindergoalselectoritem, pathfindergoalselector_pathfindergoalselectoritem1) && this.c.contains(pathfindergoalselector_pathfindergoalselectoritem1)) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTame.java b/src/main/java/net/minecraft/server/PathfinderGoalTame.java
index 123e65748..80c494fbe 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTame.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTame.java
@@ -57,7 +57,7 @@ public class PathfinderGoalTame extends PathfinderGoal {
 
             // CraftBukkit start - Handle dismounting to account for VehicleExitEvent being fired.
             if (this.entity.passenger != null) {
-                this.entity.passenger.mount((Entity) null);
+                this.entity.passenger.mount(null);
                 // If the entity still has a passenger, then a plugin cancelled the event.
                 if (this.entity.passenger != null) {
                     return;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java b/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
index 4c1f16856..42b26894a 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
@@ -58,7 +58,7 @@ public class PathfinderGoalTargetNearestPlayer extends PathfinderGoal {
         double d0 = this.f();
         List list = this.b.world.a(EntityHuman.class, this.b.getBoundingBox().grow(d0, 4.0D, d0), this.c);
 
-        Collections.sort(list, this.d);
+        list.sort(this.d);
         if (list.isEmpty()) {
             return false;
         } else {
@@ -96,7 +96,7 @@ public class PathfinderGoalTargetNearestPlayer extends PathfinderGoal {
     }
 
     public void d() {
-        this.b.setGoalTarget((EntityLiving) null);
+        this.b.setGoalTarget(null);
         super.c();
     }
 
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 451f4810f..68ac0cbae 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -27,7 +27,7 @@ public class PersistentCollection {
     }
 
     public PersistentBase get(Class<? extends PersistentBase> oclass, String s) {
-        PersistentBase persistentbase = (PersistentBase) this.a.get(s);
+        PersistentBase persistentbase = this.a.get(s);
 
         if (persistentbase != null) {
             return persistentbase;
@@ -38,13 +38,13 @@ public class PersistentCollection {
 
                     if (file != null && file.exists()) {
                         try {
-                            persistentbase = (PersistentBase) oclass.getConstructor(new Class[] { String.class}).newInstance(new Object[] { s});
+                            persistentbase = oclass.getConstructor(new Class[] { String.class}).newInstance(new Object[] { s});
                         } catch (Exception exception) {
                             throw new RuntimeException("Failed to instantiate " + oclass.toString(), exception);
                         }
 
                         FileInputStream fileinputstream = new FileInputStream(file);
-                        NBTTagCompound nbttagcompound = NBTCompressedStreamTools.a((InputStream) fileinputstream);
+                        NBTTagCompound nbttagcompound = NBTCompressedStreamTools.a(fileinputstream);
 
                         fileinputstream.close();
                         persistentbase.a(nbttagcompound.getCompound("data"));
@@ -73,8 +73,8 @@ public class PersistentCollection {
     }
 
     public void a() {
-        for (int i = 0; i < this.c.size(); ++i) {
-            PersistentBase persistentbase = (PersistentBase) this.c.get(i);
+        for (PersistentBase persistentBase : this.c) {
+            PersistentBase persistentbase = (PersistentBase) persistentBase;
 
             if (persistentbase.d()) {
                 this.a(persistentbase);
@@ -98,7 +98,7 @@ public class PersistentCollection {
                     nbttagcompound1.set("data", nbttagcompound);
                     FileOutputStream fileoutputstream = new FileOutputStream(file);
 
-                    NBTCompressedStreamTools.a(nbttagcompound1, (OutputStream) fileoutputstream);
+                    NBTCompressedStreamTools.a(nbttagcompound1, fileoutputstream);
                     fileoutputstream.close();
                 }
             } catch (Exception exception) {
@@ -122,17 +122,15 @@ public class PersistentCollection {
                 NBTTagCompound nbttagcompound = NBTCompressedStreamTools.a(datainputstream);
 
                 datainputstream.close();
-                Iterator iterator = nbttagcompound.c().iterator();
 
-                while (iterator.hasNext()) {
-                    String s = (String) iterator.next();
+                for (String s : nbttagcompound.c()) {
                     NBTBase nbtbase = nbttagcompound.get(s);
 
                     if (nbtbase instanceof NBTTagShort) {
                         NBTTagShort nbttagshort = (NBTTagShort) nbtbase;
                         short short0 = nbttagshort.e();
 
-                        this.d.put(s, Short.valueOf(short0));
+                        this.d.put(s, short0);
                     }
                 }
             }
@@ -143,28 +141,26 @@ public class PersistentCollection {
     }
 
     public int a(String s) {
-        Short oshort = (Short) this.d.get(s);
+        Short oshort = this.d.get(s);
 
         if (oshort == null) {
-            oshort = Short.valueOf((short) 0);
+            oshort = (short) 0;
         } else {
-            oshort = Short.valueOf((short) (oshort.shortValue() + 1));
+            oshort = (short) (oshort.shortValue() + 1);
         }
 
         this.d.put(s, oshort);
         if (this.b == null) {
-            return oshort.shortValue();
+            return oshort;
         } else {
             try {
                 File file = this.b.getDataFile("idcounts");
 
                 if (file != null) {
                     NBTTagCompound nbttagcompound = new NBTTagCompound();
-                    Iterator iterator = this.d.keySet().iterator();
 
-                    while (iterator.hasNext()) {
-                        String s1 = (String) iterator.next();
-                        short short0 = ((Short) this.d.get(s1)).shortValue();
+                    for (String s1 : this.d.keySet()) {
+                        short short0 = (Short) this.d.get(s1);
 
                         nbttagcompound.setShort(s1, short0);
                     }
@@ -178,7 +174,7 @@ public class PersistentCollection {
                 exception.printStackTrace();
             }
 
-            return oshort.shortValue();
+            return oshort;
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 38586aad7..9d9fd2418 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -21,8 +21,8 @@ public class PlayerChunkMap {
     private final WorldServer world;
     private final List<EntityPlayer> managedPlayers = Lists.newArrayList();
     private final LongHashMap<PlayerChunkMap.PlayerChunk> d = new LongHashMap();
-    private final Queue<PlayerChunkMap.PlayerChunk> e = new java.util.concurrent.ConcurrentLinkedQueue<PlayerChunkMap.PlayerChunk>(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
-    private final Queue<PlayerChunkMap.PlayerChunk> f = new java.util.concurrent.ConcurrentLinkedQueue<PlayerChunkMap.PlayerChunk>(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
+    private final Queue<PlayerChunkMap.PlayerChunk> e = new java.util.concurrent.ConcurrentLinkedQueue<>(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
+    private final Queue<PlayerChunkMap.PlayerChunk> f = new java.util.concurrent.ConcurrentLinkedQueue<>(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
     private int g;
     private long h;
     private final int[][] i = new int[][] { { 1, 0}, { 0, 1}, { -1, 0}, { 0, -1}};
@@ -46,9 +46,8 @@ public class PlayerChunkMap {
             this.h = i;
 
             // CraftBukkit start - Use iterator
-            java.util.Iterator iterator = this.f.iterator();
-            while (iterator.hasNext()) {
-                playerchunkmap_playerchunk = (PlayerChunk) iterator.next();
+            for (PlayerChunk playerChunk : this.f) {
+                playerchunkmap_playerchunk = playerChunk;
                 playerchunkmap_playerchunk.b();
                 playerchunkmap_playerchunk.a();
             }
@@ -87,7 +86,7 @@ public class PlayerChunkMap {
 
     private PlayerChunkMap.PlayerChunk a(int i, int j, boolean flag) {
         long k = (long) i + 2147483647L | (long) j + 2147483647L << 32;
-        PlayerChunkMap.PlayerChunk playerchunkmap_playerchunk = (PlayerChunkMap.PlayerChunk) this.d.getEntry(k);
+        PlayerChunkMap.PlayerChunk playerchunkmap_playerchunk = this.d.getEntry(k);
 
         if (playerchunkmap_playerchunk == null && flag) {
             playerchunkmap_playerchunk = new PlayerChunkMap.PlayerChunk(i, j);
@@ -127,7 +126,7 @@ public class PlayerChunkMap {
         entityplayer.e = entityplayer.locZ;
 
         // CraftBukkit start - Load nearby chunks first
-        List<ChunkCoordIntPair> chunkList = new LinkedList<ChunkCoordIntPair>();
+        List<ChunkCoordIntPair> chunkList = new LinkedList<>();
 
         // PaperSpigot start - Player view distance API
         for (int k = i - entityplayer.viewDistance; k <= i + entityplayer.viewDistance; ++k) {
@@ -137,7 +136,7 @@ public class PlayerChunkMap {
             }
         }
         
-        Collections.sort(chunkList, new ChunkCoordComparator(entityplayer));
+        chunkList.sort(new ChunkCoordComparator(entityplayer));
         for (ChunkCoordIntPair pair : chunkList) {
             this.a(pair.x, pair.z, true).a(entityplayer);
         }
@@ -231,7 +230,7 @@ public class PlayerChunkMap {
             int i1 = entityplayer.viewDistance; // PaperSpigot - Player view distance API
             int j1 = i - k;
             int k1 = j - l;
-            List<ChunkCoordIntPair> chunksToLoad = new LinkedList<ChunkCoordIntPair>(); // CraftBukkit
+            List<ChunkCoordIntPair> chunksToLoad = new LinkedList<>(); // CraftBukkit
 
             if (j1 != 0 || k1 != 0) {
                 for (int l1 = i - i1; l1 <= i + i1; ++l1) {
@@ -255,13 +254,13 @@ public class PlayerChunkMap {
                 entityplayer.e = entityplayer.locZ;
 
                 // CraftBukkit start - send nearest chunks first
-                Collections.sort(chunksToLoad, new ChunkCoordComparator(entityplayer));
+                chunksToLoad.sort(new ChunkCoordComparator(entityplayer));
                 for (ChunkCoordIntPair pair : chunksToLoad) {
                     this.a(pair.x, pair.z, true).a(entityplayer);
                 }
 
                 if (j1 > 1 || j1 < -1 || k1 > 1 || k1 < -1) {
-                    Collections.sort(entityplayer.chunkCoordIntPairQueue, new ChunkCoordComparator(entityplayer));
+                    entityplayer.chunkCoordIntPairQueue.sort(new ChunkCoordComparator(entityplayer));
                 }
                 // CraftBukkit end
             }
@@ -279,10 +278,9 @@ public class PlayerChunkMap {
         if (i != this.g) {
             int j = i - this.g;
             ArrayList arraylist = Lists.newArrayList(this.managedPlayers);
-            Iterator iterator = arraylist.iterator();
 
-            while (iterator.hasNext()) {
-                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+            for (Object o : arraylist) {
+                EntityPlayer entityplayer = (EntityPlayer) o;
                 int k = (int) entityplayer.locX >> 4;
                 int l = (int) entityplayer.locZ >> 4;
                 int i1;
@@ -291,7 +289,7 @@ public class PlayerChunkMap {
                 if (j > 0) {
                     for (i1 = k - i; i1 <= k + i; ++i1) {
                         for (j1 = l - i; j1 <= l + i; ++j1) {
-                            PlayerChunkMap.PlayerChunk playerchunkmap_playerchunk = this.a(i1, j1, true);
+                            PlayerChunk playerchunkmap_playerchunk = this.a(i1, j1, true);
 
                             if (!playerchunkmap_playerchunk.b.contains(entityplayer)) {
                                 playerchunkmap_playerchunk.a(entityplayer);
@@ -359,13 +357,9 @@ public class PlayerChunkMap {
         private long g;
 
         // CraftBukkit start - add fields
-        private final HashMap<EntityPlayer, Runnable> players = new HashMap<EntityPlayer, Runnable>();
+        private final HashMap<EntityPlayer, Runnable> players = new HashMap<>();
         private boolean loaded = false;
-        private Runnable loadedRunnable = new Runnable() {
-            public void run() {
-                PlayerChunk.this.loaded = true;
-            }
-        };
+        private Runnable loadedRunnable = () -> PlayerChunk.this.loaded = true;
         // CraftBukkit end
 
         public PlayerChunk(int i, int j) {
@@ -375,7 +369,7 @@ public class PlayerChunkMap {
 
         public void a(final EntityPlayer entityplayer) {  // CraftBukkit - added final to argument
             if (this.b.contains(entityplayer)) {
-                PlayerChunkMap.a.debug("Failed to add player. {} already is in chunk {}, {}", new Object[] { entityplayer, Integer.valueOf(this.location.x), Integer.valueOf(this.location.z)});
+                PlayerChunkMap.a.debug("Failed to add player. {} already is in chunk {}, {}", entityplayer, this.location.x, this.location.z);
             } else {
                 if (this.b.isEmpty()) {
                     this.g = PlayerChunkMap.this.world.getTime();
@@ -388,11 +382,7 @@ public class PlayerChunkMap {
                     playerRunnable = null;
                     entityplayer.chunkCoordIntPairQueue.add(this.location);
                 } else {
-                    playerRunnable = new Runnable() {
-                        public void run() {
-                            entityplayer.chunkCoordIntPairQueue.add(PlayerChunk.this.location);
-                        }
-                    };
+                    playerRunnable = () -> entityplayer.chunkCoordIntPairQueue.add(PlayerChunk.this.location);
                     PlayerChunkMap.this.a().chunkProviderServer.getChunkAt(this.location.x, this.location.z, playerRunnable);
                 }
 
@@ -474,8 +464,8 @@ public class PlayerChunkMap {
         }
 
         public void a(Packet packet) {
-            for (int i = 0; i < this.b.size(); ++i) {
-                EntityPlayer entityplayer = (EntityPlayer) this.b.get(i);
+            for (EntityPlayer entityPlayer : this.b) {
+                EntityPlayer entityplayer = (EntityPlayer) entityPlayer;
 
                 if (!entityplayer.chunkCoordIntPairQueue.contains(this.location)) {
                     entityplayer.playerConnection.sendPacket(packet);
@@ -496,7 +486,7 @@ public class PlayerChunkMap {
                     k = (this.dirtyBlocks[0] >> 8 & 15) + this.location.z * 16;
                     BlockPosition blockposition = new BlockPosition(i, j, k);
 
-                    this.a((Packet) (new PacketPlayOutBlockChange(PlayerChunkMap.this.world, blockposition)));
+                    this.a(new PacketPlayOutBlockChange(PlayerChunkMap.this.world, blockposition));
                     if (PlayerChunkMap.this.world.getType(blockposition).getBlock().isTileEntity()) {
                         this.a(PlayerChunkMap.this.world.getTileEntity(blockposition));
                     }
@@ -506,20 +496,20 @@ public class PlayerChunkMap {
                     if (this.dirtyCount == 64) {
                         i = this.location.x * 16;
                         j = this.location.z * 16;
-                        this.a((Packet) (new PacketPlayOutMapChunk(PlayerChunkMap.this.world.getChunkAt(this.location.x, this.location.z), false, this.f)));
+                        this.a(new PacketPlayOutMapChunk(PlayerChunkMap.this.world.getChunkAt(this.location.x, this.location.z), false, this.f));
 
                         for (k = 0; k < 16; ++k) {
                             if ((this.f & 1 << k) != 0) {
                                 l = k << 4;
                                 List list = PlayerChunkMap.this.world.getTileEntities(i, l, j, i + 16, l + 16, j + 16);
 
-                                for (int i1 = 0; i1 < list.size(); ++i1) {
-                                    this.a((TileEntity) list.get(i1));
+                                for (Object o : list) {
+                                    this.a((TileEntity) o);
                                 }
                             }
                         }
                     } else {
-                        this.a((Packet) (new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, PlayerChunkMap.this.world.getChunkAt(this.location.x, this.location.z))));
+                        this.a(new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, PlayerChunkMap.this.world.getChunkAt(this.location.x, this.location.z)));
 
                         for (i = 0; i < this.dirtyCount; ++i) {
                             j = (this.dirtyBlocks[i] >> 12 & 15) + this.location.x * 16;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 2aa3efcda..5e1e67496 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -3,7 +3,6 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
-import com.google.common.util.concurrent.Futures;
 import io.netty.buffer.Unpooled;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
@@ -93,7 +92,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
         this.networkManager = networkmanager;
-        networkmanager.a((PacketListener) this);
+        networkmanager.a(this);
         this.player = entityplayer;
         entityplayer.playerConnection = this;
 
@@ -118,9 +117,9 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     private boolean hasMoved; // Spigot
 
     public CraftPlayer getPlayer() {
-        return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
+        return (this.player == null) ? null : this.player.getBukkitEntity();
     }
-    private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
+    private final static HashSet<Integer> invalidItems = new HashSet<>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
     // CraftBukkit end
 
     public void c() {
@@ -178,19 +177,13 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         // CraftBukkit end
         final ChatComponentText chatcomponenttext = new ChatComponentText(s);
 
-        this.networkManager.a(new PacketPlayOutKickDisconnect(chatcomponenttext), new GenericFutureListener() {
-            public void operationComplete(Future future) throws Exception { // CraftBukkit - fix decompile error
-                PlayerConnection.this.networkManager.close(chatcomponenttext);
-            }
-        }, new GenericFutureListener[0]);
+        this.networkManager.a(new PacketPlayOutKickDisconnect(chatcomponenttext), (GenericFutureListener) future -> { // CraftBukkit - fix decompile error
+            PlayerConnection.this.networkManager.close(chatcomponenttext);
+        });
         this.a(chatcomponenttext); // CraftBukkit - fire quit instantly
         this.networkManager.k();
         // CraftBukkit - Don't wait
-        this.minecraftServer.postToMainThread(new Runnable() {
-             public void run() {
-                 PlayerConnection.this.networkManager.l();
-            }
-        });
+        this.minecraftServer.postToMainThread(() -> PlayerConnection.this.networkManager.l());
     }
 
     public void a(PacketPlayInSteerVehicle packetplayinsteervehicle) {
@@ -586,7 +579,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     // Else we increment the drop count and check the amount.
                     this.dropCount++;
                     if (this.dropCount >= 20) {
-                        this.c.warn(this.player.getName() + " dropped their items too quickly!");
+                        c.warn(this.player.getName() + " dropped their items too quickly!");
                         this.disconnect("You dropped your items too quickly (Hacking?)");
                         return;
                     }
@@ -742,7 +735,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             always = (itemstack.count != itemstackAmount) || itemstack.getItem() == Item.getItemOf(Blocks.WATERLILY);
             // CraftBukkit end
         } else if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight() - 1 && (enumdirection == EnumDirection.UP || blockposition.getY() >= this.minecraftServer.getMaxBuildHeight())) {
-            ChatMessage chatmessage = new ChatMessage("build.tooHigh", new Object[] { Integer.valueOf(this.minecraftServer.getMaxBuildHeight())});
+            ChatMessage chatmessage = new ChatMessage("build.tooHigh", this.minecraftServer.getMaxBuildHeight());
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
             this.player.playerConnection.sendPacket(new PacketPlayOutChat(chatmessage));
@@ -812,7 +805,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             if (entity != null) {
                 this.player.setSpectatorTarget(this.player);
-                this.player.mount((Entity) null);
+                this.player.mount(null);
 
                 /* CraftBukkit start - replace with bukkit handling for multi-world
                 if (entity.world != this.player.world) {
@@ -919,7 +912,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Packet being sent");
 
             crashreportsystemdetails.a("Packet class", new Callable() {
-                public String a() throws Exception {
+                public String a() {
                     return packet.getClass().getCanonicalName();
                 }
 
@@ -960,7 +953,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         }
         // CraftBukkit end
         if (this.player.dead || this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) { // CraftBukkit - dead men tell no tales
-            ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
+            ChatMessage chatmessage = new ChatMessage("chat.cannotSend");
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
             this.sendPacket(new PacketPlayOutChat(chatmessage));
@@ -1023,7 +1016,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 } );
                 // Spigot end
             } else if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
-                ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
+                ChatMessage chatmessage = new ChatMessage("chat.cannotSend");
 
                 chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                 this.sendPacket(new PacketPlayOutChat(chatmessage));
@@ -1031,7 +1024,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 this.chat(s, true);
                 // CraftBukkit end - the below is for reference. :)
             } else {
-                ChatMessage chatmessage1 = new ChatMessage("chat.type.text", new Object[] { this.player.getScoreboardDisplayName(), s});
+                ChatMessage chatmessage1 = new ChatMessage("chat.type.text", this.player.getScoreboardDisplayName(), s);
 
                 this.minecraftServer.getPlayerList().sendMessage(chatmessage1, false);
             }
@@ -1178,7 +1171,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         SpigotTimings.playerCommandTimer.startTiming(); // Spigot
        // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        this.c.info(this.player.getName() + " issued server command: " + s);
+        c.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
 
@@ -1297,7 +1290,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
         case 7:
             if (this.player.vehicle instanceof EntityHorse) {
-                ((EntityHorse) this.player.vehicle).g((EntityHuman) this.player);
+                ((EntityHorse) this.player.vehicle).g(this.player);
             }
             break;
 
@@ -1311,7 +1304,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         if (this.player.dead) return; // CraftBukkit
         PlayerConnectionUtils.ensureMainThread(packetplayinuseentity, this, this.player.u());
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
-        Entity entity = packetplayinuseentity.a((World) worldserver);
+        Entity entity = packetplayinuseentity.a(worldserver);
         // Spigot Start
         if ( entity == player && !player.isSpectator() )
         {
@@ -1339,10 +1332,10 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
                     PlayerInteractEntityEvent event;
                     if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
-                        event = new PlayerInteractEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity());
+                        event = new PlayerInteractEntityEvent(this.getPlayer(), entity.getBukkitEntity());
                     } else {
                         Vec3D target = packetplayinuseentity.b();
-                        event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.a, target.b, target.c));
+                        event = new PlayerInteractAtEntityEvent(this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.a, target.b, target.c));
                     }
                     this.server.getPluginManager().callEvent(event);
 
@@ -1370,7 +1363,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     }
                     // CraftBukkit end
                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-                    entity.a((EntityHuman) this.player, packetplayinuseentity.b());
+                    entity.a(this.player, packetplayinuseentity.b());
 
                     // CraftBukkit start
                     if (itemInHand != null && itemInHand.count <= -1) {
@@ -1412,7 +1405,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
                     this.minecraftServer.aa();
                 } else {
-                    GameProfileBanEntry gameprofilebanentry = new GameProfileBanEntry(this.player.getProfile(), (Date) null, "(You just lost the game)", (Date) null, "Death in Hardcore");
+                    GameProfileBanEntry gameprofilebanentry = new GameProfileBanEntry(this.player.getProfile(), null, "(You just lost the game)", null, "Death in Hardcore");
 
                     this.minecraftServer.getPlayerList().getProfileBans().add(gameprofilebanentry);
                     this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
@@ -1431,7 +1424,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             break;
 
         case 3:
-            this.player.b((Statistic) AchievementList.f);
+            this.player.b(AchievementList.f);
         }
 
     }
@@ -1455,10 +1448,10 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 ArrayList arraylist = Lists.newArrayList();
 
                 for (int i = 0; i < this.player.activeContainer.c.size(); ++i) {
-                    arraylist.add(((Slot) this.player.activeContainer.c.get(i)).getItem());
+                    arraylist.add(this.player.activeContainer.c.get(i).getItem());
                 }
 
-                this.player.a(this.player.activeContainer, (List) arraylist);
+                this.player.a(this.player.activeContainer, arraylist);
             } else {
                 // ItemStack itemstack = this.player.activeContainer.clickItem(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
                 // CraftBukkit start - Call InventoryClickEvent
@@ -1745,16 +1738,16 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     this.player.broadcastCarriedItem();
                     this.player.g = false;
                 } else {
-                    this.n.a(this.player.activeContainer.windowId, Short.valueOf(packetplayinwindowclick.d()));
+                    this.n.a(this.player.activeContainer.windowId, packetplayinwindowclick.d());
                     this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.a(), packetplayinwindowclick.d(), false));
                     this.player.activeContainer.a(this.player, false);
                     ArrayList arraylist1 = Lists.newArrayList();
 
                     for (int j = 0; j < this.player.activeContainer.c.size(); ++j) {
-                        arraylist1.add(((Slot) this.player.activeContainer.c.get(j)).getItem());
+                        arraylist1.add(this.player.activeContainer.c.get(j).getItem());
                     }
 
-                    this.player.a(this.player.activeContainer, (List) arraylist1);
+                    this.player.a(this.player.activeContainer, arraylist1);
                 }
             }
         }
@@ -1791,7 +1784,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                         nbttagcompound1.remove("x");
                         nbttagcompound1.remove("y");
                         nbttagcompound1.remove("z");
-                        itemstack.a("BlockEntityTag", (NBTBase) nbttagcompound1);
+                        itemstack.a("BlockEntityTag", nbttagcompound1);
                     }
                 }
             }
@@ -1842,7 +1835,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             if (flag1 && flag2 && flag3) {
                 if (itemstack == null) {
-                    this.player.defaultContainer.setItem(packetplayinsetcreativeslot.a(), (ItemStack) null);
+                    this.player.defaultContainer.setItem(packetplayinsetcreativeslot.a(), null);
                 } else {
                     this.player.defaultContainer.setItem(packetplayinsetcreativeslot.a(), itemstack);
                 }
@@ -1863,9 +1856,9 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public void a(PacketPlayInTransaction packetplayintransaction) {
         if (this.player.dead) return; // CraftBukkit
         PlayerConnectionUtils.ensureMainThread(packetplayintransaction, this, this.player.u());
-        Short oshort = (Short) this.n.get(this.player.activeContainer.windowId);
+        Short oshort = this.n.get(this.player.activeContainer.windowId);
 
-        if (oshort != null && packetplayintransaction.b() == oshort.shortValue() && this.player.activeContainer.windowId == packetplayintransaction.a() && !this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
+        if (oshort != null && packetplayintransaction.b() == oshort && this.player.activeContainer.windowId == packetplayintransaction.a() && !this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
             this.player.activeContainer.a(this.player, true);
         }
 
@@ -1905,7 +1898,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             for (int i = 0; i < aichatbasecomponent.length; ++i) {
                 lines[i] = EnumChatFormat.a(aichatbasecomponent[i].c());
             }
-            SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
+            SignChangeEvent event = new SignChangeEvent(player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
             this.server.getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
@@ -1957,15 +1950,12 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         }
         // CraftBukkit end
         ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.minecraftServer.tabCompleteCommand(this.player, packetplayintabcomplete.a(), packetplayintabcomplete.b()).iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : this.minecraftServer.tabCompleteCommand(this.player, packetplayintabcomplete.a(), packetplayintabcomplete.b())) {
             arraylist.add(s);
         }
 
-        this.player.playerConnection.sendPacket(new PacketPlayOutTabComplete((String[]) arraylist.toArray(new String[arraylist.size()])));
+        this.player.playerConnection.sendPacket(new PacketPlayOutTabComplete((String[]) arraylist.toArray(new String[0])));
     }
 
     public void a(PacketPlayInSettings packetplayinsettings) {
@@ -1997,7 +1987,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 if (itemstack1 != null) {
                     if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
                         itemstack1 = new ItemStack(Items.WRITABLE_BOOK); // CraftBukkit
-                        itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
+                        itemstack1.a("pages", itemstack.getTag().getList("pages", 8));
                         CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
                     }
 
@@ -2030,9 +2020,9 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     if (itemstack.getItem() == Items.WRITTEN_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
                         // CraftBukkit start
                         itemstack1 = new ItemStack(Items.WRITTEN_BOOK);
-                        itemstack1.a("author", (NBTBase) (new NBTTagString(this.player.getName())));
-                        itemstack1.a("title", (NBTBase) (new NBTTagString(itemstack.getTag().getString("title"))));
-                        itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
+                        itemstack1.a("author", new NBTTagString(this.player.getName()));
+                        itemstack1.a("title", new NBTTagString(itemstack.getTag().getString("title")));
+                        itemstack1.a("pages", itemstack.getTag().getList("pages", 8));
                         itemstack1.setItem(Items.WRITTEN_BOOK);
                         CraftEventFactory.handleEditBookEvent(player, itemstack1);
                         // CraftBukkit end
@@ -2063,7 +2053,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             }
         } else if ("MC|AdvCdm".equals(packetplayincustompayload.a())) {
             if (!this.minecraftServer.getEnableCommandBlock()) {
-                this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
+                this.player.sendMessage(new ChatMessage("advMode.notEnabled"));
             } else if (this.player.getBukkitEntity().isOp() && this.player.abilities.canInstantlyBuild) { // CraftBukkit - Change to Bukkit OP versus Vanilla OP
                 packetdataserializer = packetplayincustompayload.b();
 
@@ -2096,7 +2086,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                         }
 
                         commandblocklistenerabstract.h();
-                        this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[] { s}));
+                        this.player.sendMessage(new ChatMessage("advMode.setCommand.success", s));
                     }
                 } catch (Exception exception3) {
                     PlayerConnection.c.error("Couldn\'t set command block", exception3);
@@ -2105,7 +2095,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     packetdataserializer.release();
                 }
             } else {
-                this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
+                this.player.sendMessage(new ChatMessage("advMode.notAllowed"));
             }
         } else if ("MC|Beacon".equals(packetplayincustompayload.a())) {
             if (this.player.activeContainer instanceof ContainerBeacon) {
@@ -2182,102 +2172,86 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         static {
             try {
                 PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.PERFORM_RESPAWN.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.REQUEST_STATS.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.OPEN_INVENTORY_ACHIEVEMENT.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             b = new int[PacketPlayInEntityAction.EnumPlayerAction.values().length];
 
             try {
                 PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.START_SNEAKING.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SNEAKING.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.START_SPRINTING.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SPRINTING.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror6) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SLEEPING.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror7) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.RIDING_JUMP.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror8) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.OPEN_INVENTORY.ordinal()] = 7;
-            } catch (NoSuchFieldError nosuchfielderror9) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             a = new int[PacketPlayInBlockDig.EnumPlayerDigType.values().length];
 
             try {
                 PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.DROP_ITEM.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror10) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.DROP_ALL_ITEMS.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror11) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.RELEASE_USE_ITEM.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror12) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror13) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK.ordinal()] = 5;
-            } catch (NoSuchFieldError nosuchfielderror14) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK.ordinal()] = 6;
-            } catch (NoSuchFieldError nosuchfielderror15) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 33a0a095f..7be4f9e2e 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -34,7 +34,7 @@ public class PlayerInteractManager {
         this.gamemode = worldsettings_enumgamemode;
         worldsettings_enumgamemode.a(this.player.abilities);
         this.player.updateAbilities();
-        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[] { this.player}), this.player); // CraftBukkit
+        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, this.player), this.player); // CraftBukkit
     }
 
     public WorldSettings.EnumGamemode getGameMode() {
@@ -107,7 +107,7 @@ public class PlayerInteractManager {
         PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand());
         if (event.isCancelled()) {
             // Let the client know the block still exists
-            ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
             // Update any tile entity data for this block
             TileEntity tileentity = this.world.getTileEntity(blockposition);
             if (tileentity != null) {
@@ -117,7 +117,7 @@ public class PlayerInteractManager {
         }
         // CraftBukkit end
         if (this.isCreative()) {
-            if (!this.world.douseFire((EntityHuman) null, blockposition, enumdirection)) {
+            if (!this.world.douseFire(null, blockposition, enumdirection)) {
                 this.breakBlock(blockposition);
             }
 
@@ -153,22 +153,22 @@ public class PlayerInteractManager {
                 if (block == Blocks.WOODEN_DOOR) {
                     // For some reason *BOTH* the bottom/top part have to be marked updated.
                     boolean bottom = data.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
                 } else if (block == Blocks.TRAPDOOR) {
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 }
             } else if (block.getMaterial() != Material.AIR) {
                 block.attack(this.world, blockposition, this.player);
                 f = block.getDamage(this.player, this.player.world, blockposition);
                 // Allow fire punching to be blocked
-                this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
+                this.world.douseFire(null, blockposition, enumdirection);
             }
 
             if (event.useItemInHand() == Event.Result.DENY) {
                 // If we 'insta destroyed' then the client needs to be informed.
                 if (f > 1.0f) {
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 }
                 return;
             }
@@ -176,7 +176,7 @@ public class PlayerInteractManager {
 
             if (blockEvent.isCancelled()) {
                 // Let the client know the block still exists
-                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 return;
             }
 
@@ -236,7 +236,7 @@ public class PlayerInteractManager {
     private boolean c(BlockPosition blockposition) {
         IBlockData iblockdata = this.world.getType(blockposition);
 
-        iblockdata.getBlock().a(this.world, blockposition, iblockdata, (EntityHuman) this.player);
+        iblockdata.getBlock().a(this.world, blockposition, iblockdata, this.player);
         boolean flag = this.world.setAir(blockposition);
 
         if (flag) {
@@ -261,7 +261,7 @@ public class PlayerInteractManager {
             if (world.getTileEntity(blockposition) == null && !isSwordNoBreak) {
                 PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
                 packet.block = Blocks.AIR.getBlockData();
-                ((EntityPlayer) this.player).playerConnection.sendPacket(packet);
+                this.player.playerConnection.sendPacket(packet);
             }
 
             event = new BlockBreakEvent(block, this.player.getBukkitEntity());
@@ -290,7 +290,7 @@ public class PlayerInteractManager {
                     return false;
                 }
                 // Let the client know the block still exists
-                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 // Update any tile entity data for this block
                 TileEntity tileentity = this.world.getTileEntity(blockposition);
                 if (tileentity != null) {
@@ -299,7 +299,7 @@ public class PlayerInteractManager {
                 return false;
             }
         }
-        if (false && this.gamemode.d() && this.player.bA() != null && this.player.bA().getItem() instanceof ItemSword) {
+        if (false) {
             return false;
         } else {
             IBlockData iblockdata = this.world.getType(blockposition);
diff --git a/src/main/java/net/minecraft/server/PlayerInventory.java b/src/main/java/net/minecraft/server/PlayerInventory.java
index 76fa51d97..d3b9192cc 100644
--- a/src/main/java/net/minecraft/server/PlayerInventory.java
+++ b/src/main/java/net/minecraft/server/PlayerInventory.java
@@ -19,7 +19,7 @@ public class PlayerInventory implements IInventory {
     public boolean e;
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private int maxStack = MAX_STACK;
 
     public ItemStack[] getContents() {
@@ -86,12 +86,12 @@ public class PlayerInventory implements IInventory {
     // CraftBukkit start - Watch method above! :D
     public int canHold(ItemStack itemstack) {
         int remains = itemstack.count;
-        for (int i = 0; i < this.items.length; ++i) {
-            if (this.items[i] == null) return itemstack.count;
+        for (ItemStack item : this.items) {
+            if (item == null) return itemstack.count;
 
             // Taken from firstPartial(ItemStack)
-            if (this.items[i] != null && this.items[i].getItem() == itemstack.getItem() && this.items[i].isStackable() && this.items[i].count < this.items[i].getMaxStackSize() && this.items[i].count < this.getMaxStackSize() && (!this.items[i].usesData() || this.items[i].getData() == itemstack.getData()) && ItemStack.equals(this.items[i], itemstack)) {
-                remains -= (this.items[i].getMaxStackSize() < this.getMaxStackSize() ? this.items[i].getMaxStackSize() : this.getMaxStackSize()) - this.items[i].count;
+            if (item != null && item.getItem() == itemstack.getItem() && item.isStackable() && item.count < item.getMaxStackSize() && item.count < this.getMaxStackSize() && (!item.usesData() || item.getData() == itemstack.getData()) && ItemStack.equals(item, itemstack)) {
+                remains -= (item.getMaxStackSize() < this.getMaxStackSize() ? item.getMaxStackSize() : this.getMaxStackSize()) - item.count;
             }
             if (remains <= 0) return itemstack.count;
         }
@@ -286,10 +286,10 @@ public class PlayerInventory implements IInventory {
                 CrashReport crashreport = CrashReport.a(throwable, "Adding item to inventory");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Item being added");
 
-                crashreportsystemdetails.a("Item ID", (Object) Integer.valueOf(Item.getId(itemstack.getItem())));
-                crashreportsystemdetails.a("Item data", (Object) Integer.valueOf(itemstack.getData()));
+                crashreportsystemdetails.a("Item ID", Item.getId(itemstack.getItem()));
+                crashreportsystemdetails.a("Item data", itemstack.getData());
                 crashreportsystemdetails.a("Item name", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         return itemstack.getName();
                     }
 
@@ -442,7 +442,7 @@ public class PlayerInventory implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public int getMaxStackSize() {
@@ -466,9 +466,9 @@ public class PlayerInventory implements IInventory {
     public int m() {
         int i = 0;
 
-        for (int j = 0; j < this.armor.length; ++j) {
-            if (this.armor[j] != null && this.armor[j].getItem() instanceof ItemArmor) {
-                int k = ((ItemArmor) this.armor[j].getItem()).c;
+        for (ItemStack itemStack : this.armor) {
+            if (itemStack != null && itemStack.getItem() instanceof ItemArmor) {
+                int k = ((ItemArmor) itemStack.getItem()).c;
 
                 i += k;
             }
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 3c2d3197f..f77d82543 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -65,7 +65,7 @@ public abstract class PlayerList {
 
     // CraftBukkit start
     private CraftServer cserver;
-    private final Map<String,EntityPlayer> playersByName = new org.spigotmc.CaseInsensitiveMap<EntityPlayer>();
+    private final Map<String,EntityPlayer> playersByName = new org.spigotmc.CaseInsensitiveMap<>();
 
     public PlayerList(MinecraftServer minecraftserver) {
         this.cserver = minecraftserver.server = new CraftServer(minecraftserver, this);
@@ -142,7 +142,7 @@ public abstract class PlayerList {
         WorldData worlddata = worldserver.getWorldData();
         BlockPosition blockposition = worldserver.getSpawn();
 
-        this.a(entityplayer, (EntityPlayer) null, worldserver);
+        this.a(entityplayer, null, worldserver);
         PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
 
         playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimension(), worldserver.getDifficulty(), Math.min(this.getMaxPlayers(), 60), worlddata.getType(), worldserver.getGameRules().getBoolean("reducedDebugInfo"))); // CraftBukkit - cap player list to 60
@@ -179,17 +179,13 @@ public abstract class PlayerList {
             entityplayer.setResourcePack(this.server.getResourcePack(), this.server.getResourcePackHash());
         }
 
-        Iterator iterator = entityplayer.getEffects().iterator();
-
-        while (iterator.hasNext()) {
-            MobEffect mobeffect = (MobEffect) iterator.next();
-
+        for (MobEffect mobeffect : entityplayer.getEffects()) {
             playerconnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer.getId(), mobeffect));
         }
 
         entityplayer.syncInventory();
         if (nbttagcompound != null && nbttagcompound.hasKeyOfType("Riding", 10)) {
-            Entity entity = EntityTypes.a(nbttagcompound.getCompound("Riding"), (World) worldserver);
+            Entity entity = EntityTypes.a(nbttagcompound.getCompound("Riding"), worldserver);
 
             if (entity != null) {
                 entity.attachedToPlayer = true;
@@ -205,11 +201,8 @@ public abstract class PlayerList {
 
     public void sendScoreboard(ScoreboardServer scoreboardserver, EntityPlayer entityplayer) {
         HashSet hashset = Sets.newHashSet();
-        Iterator iterator = scoreboardserver.getTeams().iterator();
-
-        while (iterator.hasNext()) {
-            ScoreboardTeam scoreboardteam = (ScoreboardTeam) iterator.next();
 
+        for (ScoreboardTeam scoreboardteam : scoreboardserver.getTeams()) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutScoreboardTeam(scoreboardteam, 0));
         }
 
@@ -218,10 +211,9 @@ public abstract class PlayerList {
 
             if (scoreboardobjective != null && !hashset.contains(scoreboardobjective)) {
                 List list = scoreboardserver.getScoreboardScorePacketsForObjective(scoreboardobjective);
-                Iterator iterator1 = list.iterator();
 
-                while (iterator1.hasNext()) {
-                    Packet packet = (Packet) iterator1.next();
+                for (Object value : list) {
+                    Packet packet = (Packet) value;
 
                     entityplayer.playerConnection.sendPacket(packet);
                 }
@@ -294,7 +286,7 @@ public abstract class PlayerList {
 
     protected void savePlayerFile(EntityPlayer entityplayer) {
         this.playerFileData.save(entityplayer);
-        ServerStatisticManager serverstatisticmanager = (ServerStatisticManager) this.o.get(entityplayer.getUniqueID());
+        ServerStatisticManager serverstatisticmanager = this.o.get(entityplayer.getUniqueID());
 
         if (serverstatisticmanager != null) {
             serverstatisticmanager.b();
@@ -327,8 +319,8 @@ public abstract class PlayerList {
         // CraftBukkit start - sendAll above replaced with this loop
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer);
 
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
+        for (EntityPlayer player : this.players) {
+            EntityPlayer entityplayer1 = (EntityPlayer) player;
 
             if (entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
                 entityplayer1.playerConnection.sendPacket(packet);
@@ -338,7 +330,7 @@ public abstract class PlayerList {
                 continue;
             }
 
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer1}));
+            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer1));
         }
         // CraftBukkit end
 
@@ -378,7 +370,7 @@ public abstract class PlayerList {
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getName()); // Spigot
         UUID uuid = entityplayer.getUniqueID();
-        EntityPlayer entityplayer1 = (EntityPlayer) this.j.get(uuid);
+        EntityPlayer entityplayer1 = this.j.get(uuid);
 
         if (entityplayer1 == entityplayer) {
             this.j.remove(uuid);
@@ -388,8 +380,8 @@ public abstract class PlayerList {
         // CraftBukkit start
         //  this.sendAll(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER, new EntityPlayer[] { entityplayer}));
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, entityplayer);
-        for (int i = 0; i < players.size(); i++) {
-            EntityPlayer entityplayer2 = (EntityPlayer) this.players.get(i);
+        for (EntityPlayer player : players) {
+            EntityPlayer entityplayer2 = (EntityPlayer) player;
 
             if (entityplayer2.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
                 entityplayer2.playerConnection.sendPacket(packet);
@@ -414,17 +406,15 @@ public abstract class PlayerList {
 
         EntityPlayer entityplayer;
 
-        for (int i = 0; i < this.players.size(); ++i) {
-            entityplayer = (EntityPlayer) this.players.get(i);
+        for (EntityPlayer entityPlayer : this.players) {
+            entityplayer = (EntityPlayer) entityPlayer;
             if (entityplayer.getUniqueID().equals(uuid)) {
                 arraylist.add(entityplayer);
             }
         }
 
-        Iterator iterator = arraylist.iterator();
-
-        while (iterator.hasNext()) {
-            entityplayer = (EntityPlayer) iterator.next();
+        for (Object value : arraylist) {
+            entityplayer = (EntityPlayer) value;
             savePlayerFile(entityplayer); // CraftBukkit - Force the player's inventory to be saved
             entityplayer.playerConnection.disconnect("You logged in from another location");
         }
@@ -440,7 +430,7 @@ public abstract class PlayerList {
         String s;
 
         if (getProfileBans().isBanned(gameprofile) && !getProfileBans().get(gameprofile).hasExpired()) {
-            GameProfileBanEntry gameprofilebanentry = (GameProfileBanEntry) this.k.get(gameprofile);
+            GameProfileBanEntry gameprofilebanentry = this.k.get(gameprofile);
 
             s = "You are banned from this server!\nReason: " + gameprofilebanentry.getReason();
             if (gameprofilebanentry.getExpires() != null) {
@@ -544,15 +534,14 @@ public abstract class PlayerList {
 
         EntityPlayer entityplayer1 = new EntityPlayer(this.server, this.server.getWorldServer(entityplayer.dimension), entityplayer.getProfile(), (PlayerInteractManager) object);
         // */
-        EntityPlayer entityplayer1 = entityplayer;
         org.bukkit.World fromWorld = entityplayer.getBukkitEntity().getWorld();
         entityplayer.viewingCredits = false;
         // CraftBukkit end
         
-        entityplayer1.playerConnection = entityplayer.playerConnection;
-        entityplayer1.copyTo(entityplayer, flag);
-        entityplayer1.d(entityplayer.getId());
-        entityplayer1.o(entityplayer);
+        entityplayer.playerConnection = entityplayer.playerConnection;
+        entityplayer.copyTo(entityplayer, flag);
+        entityplayer.d(entityplayer.getId());
+        entityplayer.o(entityplayer);
         // WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);  // CraftBukkit - handled later
 
         // this.a(entityplayer1, entityplayer, worldserver); // CraftBukkit - removed
@@ -568,8 +557,8 @@ public abstract class PlayerList {
                     isBedSpawn = true;
                     location = new Location(cworld, blockposition1.getX() + 0.5, blockposition1.getY(), blockposition1.getZ() + 0.5);
                 } else {
-                    entityplayer1.setRespawnPosition(null, true);
-                    entityplayer1.playerConnection.sendPacket(new PacketPlayOutGameStateChange(0, 0.0F));
+                    entityplayer.setRespawnPosition(null, true);
+                    entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(0, 0.0F));
                 }
             }
 
@@ -579,7 +568,7 @@ public abstract class PlayerList {
                 location = new Location(cworld, blockposition.getX() + 0.5, blockposition.getY(), blockposition.getZ() + 0.5);
             }
 
-            Player respawnPlayer = cserver.getPlayer(entityplayer1);
+            Player respawnPlayer = cserver.getPlayer(entityplayer);
             PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn);
             cserver.getPluginManager().callEvent(respawnEvent);
             // Spigot Start
@@ -594,37 +583,37 @@ public abstract class PlayerList {
             location.setWorld(server.getWorldServer(i).getWorld());
         }
         WorldServer worldserver = ((CraftWorld) location.getWorld()).getHandle();
-        entityplayer1.setLocation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+        entityplayer.setLocation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         // CraftBukkit end
 
-        worldserver.chunkProviderServer.getChunkAt((int) entityplayer1.locX >> 4, (int) entityplayer1.locZ >> 4);
+        worldserver.chunkProviderServer.getChunkAt((int) entityplayer.locX >> 4, (int) entityplayer.locZ >> 4);
 
-        while (avoidSuffocation && !worldserver.getCubes(entityplayer1, entityplayer1.getBoundingBox()).isEmpty() && entityplayer1.locY < 256.0D) {
-            entityplayer1.setPosition(entityplayer1.locX, entityplayer1.locY + 1.0D, entityplayer1.locZ);
+        while (avoidSuffocation && !worldserver.getCubes(entityplayer, entityplayer.getBoundingBox()).isEmpty() && entityplayer.locY < 256.0D) {
+            entityplayer.setPosition(entityplayer.locX, entityplayer.locY + 1.0D, entityplayer.locZ);
         }
         // CraftBukkit start
         byte actualDimension = (byte) (worldserver.getWorld().getEnvironment().getId());
         // Force the client to refresh their chunk cache
         if (fromWorld.getEnvironment() == worldserver.getWorld().getEnvironment()) {
-            entityplayer1.playerConnection.sendPacket(new PacketPlayOutRespawn((byte) (actualDimension >= 0 ? -1 : 0), worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer.playerInteractManager.getGameMode()));
+            entityplayer.playerConnection.sendPacket(new PacketPlayOutRespawn((byte) (actualDimension >= 0 ? -1 : 0), worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer.playerInteractManager.getGameMode()));
         }
-        entityplayer1.playerConnection.sendPacket(new PacketPlayOutRespawn(actualDimension, worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer1.playerInteractManager.getGameMode()));
-        entityplayer1.spawnIn(worldserver);
-        entityplayer1.dead = false;
-        entityplayer1.playerConnection.teleport(new Location(worldserver.getWorld(), entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch));
-        entityplayer1.setSneaking(false);
+        entityplayer.playerConnection.sendPacket(new PacketPlayOutRespawn(actualDimension, worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer.playerInteractManager.getGameMode()));
+        entityplayer.spawnIn(worldserver);
+        entityplayer.dead = false;
+        entityplayer.playerConnection.teleport(new Location(worldserver.getWorld(), entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch));
+        entityplayer.setSneaking(false);
         blockposition1 = worldserver.getSpawn();
         // entityplayer1.playerConnection.a(entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch);
-        entityplayer1.playerConnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition1));
-        entityplayer1.playerConnection.sendPacket(new PacketPlayOutExperience(entityplayer1.exp, entityplayer1.expTotal, entityplayer1.expLevel));
-        this.b(entityplayer1, worldserver);
+        entityplayer.playerConnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition1));
+        entityplayer.playerConnection.sendPacket(new PacketPlayOutExperience(entityplayer.exp, entityplayer.expTotal, entityplayer.expLevel));
+        this.b(entityplayer, worldserver);
 
         if (!entityplayer.playerConnection.isDisconnected()) {
-            worldserver.getPlayerChunkMap().addPlayer(entityplayer1);
-            worldserver.addEntity(entityplayer1);
-            this.players.add(entityplayer1);
-            this.playersByName.put(entityplayer1.getName(), entityplayer1); // Spigot
-            this.j.put(entityplayer1.getUniqueID(), entityplayer1);
+            worldserver.getPlayerChunkMap().addPlayer(entityplayer);
+            worldserver.addEntity(entityplayer);
+            this.players.add(entityplayer);
+            this.playersByName.put(entityplayer.getName(), entityplayer); // Spigot
+            this.j.put(entityplayer.getUniqueID(), entityplayer);
         }
         // Added from changeDimension
         updateClient(entityplayer); // Update health, etc...
@@ -635,7 +624,7 @@ public abstract class PlayerList {
         }
         // entityplayer1.syncInventory();
         // CraftBukkit end
-        entityplayer1.setHealth(entityplayer1.getHealth());
+        entityplayer.setHealth(entityplayer.getHealth());
 
         // CraftBukkit start
         // Don't fire on respawn
@@ -649,7 +638,7 @@ public abstract class PlayerList {
             this.savePlayerFile(entityplayer);
         }
         // CraftBukkit end
-        return entityplayer1;
+        return entityplayer;
     }
 
     // CraftBukkit start - Replaced the standard handling of portals with a more customised method.
@@ -670,7 +659,7 @@ public abstract class PlayerList {
         if (exitWorld != null) {
             if ((cause == TeleportCause.END_PORTAL) && (i == 0)) {
                 // THE_END -> NORMAL; use bed if available, otherwise default spawn
-                exit = ((org.bukkit.craftbukkit.entity.CraftPlayer) entityplayer.getBukkitEntity()).getBedSpawnLocation();
+                exit = entityplayer.getBukkitEntity().getBedSpawnLocation();
                 if (exit == null || ((CraftWorld) exit.getWorld()).getHandle().dimension != 0) {
                     exit = exitWorld.getWorld().getSpawnLocation();
                 }
@@ -725,7 +714,7 @@ public abstract class PlayerList {
     // Copy of original changeWorld(Entity, int, WorldServer, WorldServer) method with only location calculation logic
     public Location calculateTarget(Location enter, World target) {
         WorldServer worldserver = ((CraftWorld) enter.getWorld()).getHandle();
-        WorldServer worldserver1 = ((CraftWorld) target.getWorld()).getHandle();
+        WorldServer worldserver1 = target.getWorld().getHandle();
         int i = worldserver.dimension;
 
         double y = enter.getY();
@@ -895,20 +884,19 @@ public abstract class PlayerList {
     }
 
     public void sendAll(Packet packet) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
+        for (EntityPlayer player : this.players) {
+            ((EntityPlayer) player).playerConnection.sendPacket(packet);
         }
 
     }
 
     // CraftBukkit start - add a world/entity limited version
     public void sendAll(Packet packet, EntityHuman entityhuman) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer =  this.players.get(i);
+        for (EntityPlayer entityplayer : this.players) {
             if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
                 continue;
             }
-            ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
+            ((EntityPlayer) entityplayer).playerConnection.sendPacket(packet);
         }
     }
 
@@ -921,8 +909,8 @@ public abstract class PlayerList {
     // CraftBukkit end
 
     public void a(Packet packet, int i) {
-        for (int j = 0; j < this.players.size(); ++j) {
-            EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
+        for (EntityPlayer player : this.players) {
+            EntityPlayer entityplayer = (EntityPlayer) player;
 
             if (entityplayer.dimension == i) {
                 entityplayer.playerConnection.sendPacket(packet);
@@ -936,10 +924,9 @@ public abstract class PlayerList {
 
         if (scoreboardteambase != null) {
             Collection collection = scoreboardteambase.getPlayerNameSet();
-            Iterator iterator = collection.iterator();
 
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
+            for (Object value : collection) {
+                String s = (String) value;
                 EntityPlayer entityplayer = this.getPlayer(s);
 
                 if (entityplayer != null && entityplayer != entityhuman) {
@@ -956,8 +943,8 @@ public abstract class PlayerList {
         if (scoreboardteambase == null) {
             this.sendMessage(ichatbasecomponent);
         } else {
-            for (int i = 0; i < this.players.size(); ++i) {
-                EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
+            for (EntityPlayer player : this.players) {
+                EntityPlayer entityplayer = (EntityPlayer) player;
 
                 if (entityplayer.getScoreboardTeam() != scoreboardteambase) {
                     entityplayer.sendMessage(ichatbasecomponent);
@@ -968,28 +955,28 @@ public abstract class PlayerList {
     }
 
     public String b(boolean flag) {
-        String s = "";
+        StringBuilder s = new StringBuilder();
         ArrayList arraylist = Lists.newArrayList(this.players);
 
         for (int i = 0; i < arraylist.size(); ++i) {
             if (i > 0) {
-                s = s + ", ";
+                s.append(", ");
             }
 
-            s = s + ((EntityPlayer) arraylist.get(i)).getName();
+            s.append(((EntityPlayer) arraylist.get(i)).getName());
             if (flag) {
-                s = s + " (" + ((EntityPlayer) arraylist.get(i)).getUniqueID().toString() + ")";
+                s.append(" (").append(((EntityPlayer) arraylist.get(i)).getUniqueID().toString()).append(")");
             }
         }
 
-        return s;
+        return s.toString();
     }
 
     public String[] f() {
         String[] astring = new String[this.players.size()];
 
         for (int i = 0; i < this.players.size(); ++i) {
-            astring[i] = ((EntityPlayer) this.players.get(i)).getName();
+            astring[i] = this.players.get(i).getName();
         }
 
         return astring;
@@ -999,7 +986,7 @@ public abstract class PlayerList {
         GameProfile[] agameprofile = new GameProfile[this.players.size()];
 
         for (int i = 0; i < this.players.size(); ++i) {
-            agameprofile[i] = ((EntityPlayer) this.players.get(i)).getProfile();
+            agameprofile[i] = this.players.get(i).getProfile();
         }
 
         return agameprofile;
@@ -1048,16 +1035,16 @@ public abstract class PlayerList {
     }
 
     public void sendPacketNearby(double d0, double d1, double d2, double d3, int i, Packet packet) {
-        this.sendPacketNearby((EntityHuman) null, d0, d1, d2, d3, i, packet);
+        this.sendPacketNearby(null, d0, d1, d2, d3, i, packet);
     }
 
     public void sendPacketNearby(EntityHuman entityhuman, double d0, double d1, double d2, double d3, int i, Packet packet) {
-        for (int j = 0; j < this.players.size(); ++j) {
-            EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
+        for (EntityPlayer player : this.players) {
+            EntityPlayer entityplayer = (EntityPlayer) player;
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
             if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
-               continue;
+                continue;
             }
             // CraftBukkit end
 
@@ -1075,8 +1062,8 @@ public abstract class PlayerList {
     }
 
     public void savePlayers() {
-        for (int i = 0; i < this.players.size(); ++i) {
-            this.savePlayerFile((EntityPlayer) this.players.get(i));
+        for (EntityPlayer player : this.players) {
+            this.savePlayerFile((EntityPlayer) player);
         }
 
     }
@@ -1153,11 +1140,8 @@ public abstract class PlayerList {
 
     public List<EntityPlayer> b(String s) {
         ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
+        for (EntityPlayer entityplayer : this.players) {
             if (entityplayer.w().equals(s)) {
                 arraylist.add(entityplayer);
             }
@@ -1189,8 +1173,8 @@ public abstract class PlayerList {
     }
 
     public void u() {
-        for (int i = 0; i < this.players.size(); ++i) {
-            ((EntityPlayer) this.players.get(i)).playerConnection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
+        for (EntityPlayer player : this.players) {
+            ((EntityPlayer) player).playerConnection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
         }
 
     }
@@ -1218,7 +1202,7 @@ public abstract class PlayerList {
 
     public ServerStatisticManager a(EntityHuman entityhuman) {
         UUID uuid = entityhuman.getUniqueID();
-        ServerStatisticManager serverstatisticmanager = uuid == null ? null : (ServerStatisticManager) this.o.get(uuid);
+        ServerStatisticManager serverstatisticmanager = uuid == null ? null : this.o.get(uuid);
 
         if (serverstatisticmanager == null) {
             File file = new File(this.server.getWorldServer(0).getDataManager().getDirectory(), "stats");
@@ -1264,7 +1248,7 @@ public abstract class PlayerList {
     }
 
     public EntityPlayer a(UUID uuid) {
-        return (EntityPlayer) this.j.get(uuid);
+        return this.j.get(uuid);
     }
 
     public boolean f(GameProfile gameprofile) {
diff --git a/src/main/java/net/minecraft/server/PortalTravelAgent.java b/src/main/java/net/minecraft/server/PortalTravelAgent.java
index 72f3735b1..cca34b34d 100644
--- a/src/main/java/net/minecraft/server/PortalTravelAgent.java
+++ b/src/main/java/net/minecraft/server/PortalTravelAgent.java
@@ -124,7 +124,7 @@ public class PortalTravelAgent {
         long k = ChunkCoordIntPair.a(i, j);
 
         if (this.c.contains(k)) {
-            PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = (PortalTravelAgent.ChunkCoordinatesPortal) this.c.getEntry(k);
+            PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = this.c.getEntry(k);
 
             d0 = 0.0D;
             object = portaltravelagent_chunkcoordinatesportal;
@@ -159,7 +159,7 @@ public class PortalTravelAgent {
         if (d0 >= 0.0D) {
             if (flag1) {
                 this.c.put(k, new PortalTravelAgent.ChunkCoordinatesPortal((BlockPosition) object, this.a.getTime()));
-                this.d.add(Long.valueOf(k));
+                this.d.add(k);
             }
             // CraftBukkit start - Move entity teleportation logic into exit
             return (BlockPosition) object;
@@ -185,10 +185,10 @@ public class PortalTravelAgent {
         } else {
             // CraftBukkit end
 
-            double d2 = (double) ((BlockPosition) object).getX() + 0.5D;
-            double d3 = (double) ((BlockPosition) object).getY() + 0.5D;
-            double d4 = (double) ((BlockPosition) object).getZ() + 0.5D;
-            ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = Blocks.PORTAL.f(this.a, (BlockPosition) object);
+            double d2 = (double) object.getX() + 0.5D;
+            double d3 = (double) object.getY() + 0.5D;
+            double d4 = (double) object.getZ() + 0.5D;
+            ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = Blocks.PORTAL.f(this.a, object);
             boolean flag2 = shapedetector_shapedetectorcollection.b().e().c() == EnumDirection.EnumAxisDirection.NEGATIVE;
             double d5 = shapedetector_shapedetectorcollection.b().k() == EnumDirection.EnumAxis.X ? (double) shapedetector_shapedetectorcollection.a().getZ() : (double) shapedetector_shapedetectorcollection.a().getX();
 
@@ -461,11 +461,11 @@ public class PortalTravelAgent {
 
             while (iterator.hasNext()) {
                 Long olong = (Long) iterator.next();
-                PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = (PortalTravelAgent.ChunkCoordinatesPortal) this.c.getEntry(olong.longValue());
+                PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = this.c.getEntry(olong);
 
                 if (portaltravelagent_chunkcoordinatesportal == null || portaltravelagent_chunkcoordinatesportal.c < j) {
                     iterator.remove();
-                    this.c.remove(olong.longValue());
+                    this.c.remove(olong);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/PropertyManager.java b/src/main/java/net/minecraft/server/PropertyManager.java
index 0ee7fe8a6..57b5ac629 100644
--- a/src/main/java/net/minecraft/server/PropertyManager.java
+++ b/src/main/java/net/minecraft/server/PropertyManager.java
@@ -31,8 +31,7 @@ public class PropertyManager {
                 if (fileinputstream != null) {
                     try {
                         fileinputstream.close();
-                    } catch (IOException ioexception) {
-                        ;
+                    } catch (IOException ignored) {
                     }
                 }
 
@@ -86,8 +85,7 @@ public class PropertyManager {
             if (fileoutputstream != null) {
                 try {
                     fileoutputstream.close();
-                } catch (IOException ioexception) {
-                    ;
+                } catch (IOException ignored) {
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/RecipeArmorDye.java b/src/main/java/net/minecraft/server/RecipeArmorDye.java
index 43a1cf8dd..1fb6f0076 100644
--- a/src/main/java/net/minecraft/server/RecipeArmorDye.java
+++ b/src/main/java/net/minecraft/server/RecipeArmorDye.java
@@ -2,12 +2,13 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
+import java.util.Collections;
 
 public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
     // CraftBukkit start - Delegate to new parent class with bogus info
     public RecipeArmorDye() {
-        super(new ItemStack(Items.LEATHER_HELMET, 0, 0), java.util.Arrays.asList(new ItemStack(Items.DYE, 0, 5)));
+        super(new ItemStack(Items.LEATHER_HELMET, 0, 0), Collections.singletonList(new ItemStack(Items.DYE, 0, 5)));
     }
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/RecipeBookClone.java b/src/main/java/net/minecraft/server/RecipeBookClone.java
index 264019d9d..5dd69ff81 100644
--- a/src/main/java/net/minecraft/server/RecipeBookClone.java
+++ b/src/main/java/net/minecraft/server/RecipeBookClone.java
@@ -1,10 +1,12 @@
 package net.minecraft.server;
 
+import java.util.Collections;
+
 public class RecipeBookClone extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
     // CraftBukkit start - Delegate to new parent class
     public RecipeBookClone() {
-        super(new ItemStack(Items.WRITTEN_BOOK, 0, -1), java.util.Arrays.asList(new ItemStack(Items.WRITABLE_BOOK, 0, 0)));
+        super(new ItemStack(Items.WRITTEN_BOOK, 0, -1), Collections.singletonList(new ItemStack(Items.WRITABLE_BOOK, 0, 0)));
     }
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/RecipeFireworks.java b/src/main/java/net/minecraft/server/RecipeFireworks.java
index ba9ce61bf..fb77bd80d 100644
--- a/src/main/java/net/minecraft/server/RecipeFireworks.java
+++ b/src/main/java/net/minecraft/server/RecipeFireworks.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
+import java.util.Collections;
 
 public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
@@ -9,7 +10,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
 
     // CraftBukkit start - Delegate to new parent class with bogus info
     public RecipeFireworks() {
-        super(new ItemStack(Items.FIREWORKS, 0, 0), java.util.Arrays.asList(new ItemStack(Items.GUNPOWDER, 0, 5)));
+        super(new ItemStack(Items.FIREWORKS, 0, 0), Collections.singletonList(new ItemStack(Items.GUNPOWDER, 0, 5)));
     }
     // CraftBukkit end
 
@@ -93,7 +94,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
 
                     if (itemstack2 != null) {
                         if (itemstack2.getItem() == Items.DYE) {
-                            arraylist.add(Integer.valueOf(ItemDye.a[itemstack2.getData() & 15]));
+                            arraylist.add(ItemDye.a[itemstack2.getData() & 15]);
                         } else if (itemstack2.getItem() == Items.GLOWSTONE_DUST) {
                             nbttagcompound1.setBoolean("Flicker", true);
                         } else if (itemstack2.getItem() == Items.DIAMOND) {
@@ -113,7 +114,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 int[] aint = new int[arraylist.size()];
 
                 for (int j2 = 0; j2 < aint.length; ++j2) {
-                    aint[j2] = ((Integer) arraylist.get(j2)).intValue();
+                    aint[j2] = (Integer) arraylist.get(j2);
                 }
 
                 nbttagcompound1.setIntArray("Colors", aint);
@@ -129,7 +130,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
 
                     if (itemstack3 != null) {
                         if (itemstack3.getItem() == Items.DYE) {
-                            arraylist1.add(Integer.valueOf(ItemDye.a[itemstack3.getData() & 15]));
+                            arraylist1.add(ItemDye.a[itemstack3.getData() & 15]);
                         } else if (itemstack3.getItem() == Items.FIREWORK_CHARGE) {
                             this.a = itemstack3.cloneItemStack();
                             this.a.count = 1;
@@ -140,7 +141,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
                 int[] aint1 = new int[arraylist1.size()];
 
                 for (int l2 = 0; l2 < aint1.length; ++l2) {
-                    aint1[l2] = ((Integer) arraylist1.get(l2)).intValue();
+                    aint1[l2] = (Integer) arraylist1.get(l2);
                 }
 
                 if (this.a != null && this.a.hasTag()) {
diff --git a/src/main/java/net/minecraft/server/RecipeMapClone.java b/src/main/java/net/minecraft/server/RecipeMapClone.java
index 579f6d1d2..6020635da 100644
--- a/src/main/java/net/minecraft/server/RecipeMapClone.java
+++ b/src/main/java/net/minecraft/server/RecipeMapClone.java
@@ -1,10 +1,12 @@
 package net.minecraft.server;
 
+import java.util.Collections;
+
 public class RecipeMapClone extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
     // CraftBukkit start - Delegate to new parent class
     public RecipeMapClone() {
-        super(new ItemStack(Items.MAP, 0, -1), java.util.Arrays.asList(new ItemStack(Items.MAP, 0, 0)));
+        super(new ItemStack(Items.MAP, 0, -1), Collections.singletonList(new ItemStack(Items.MAP, 0, 0)));
     }
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/RecipeRepair.java b/src/main/java/net/minecraft/server/RecipeRepair.java
index 187e59aef..7cb581734 100644
--- a/src/main/java/net/minecraft/server/RecipeRepair.java
+++ b/src/main/java/net/minecraft/server/RecipeRepair.java
@@ -2,12 +2,13 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
+import java.util.Collections;
 
 public class RecipeRepair extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
 
     // CraftBukkit start - Delegate to new parent class
     public RecipeRepair() {
-        super(new ItemStack(Items.LEATHER_HELMET), java.util.Arrays.asList(new ItemStack(Items.LEATHER_HELMET)));
+        super(new ItemStack(Items.LEATHER_HELMET), Collections.singletonList(new ItemStack(Items.LEATHER_HELMET)));
     }
     // CraftBukkit end
 
@@ -68,11 +69,10 @@ public class RecipeRepair extends ShapelessRecipes implements IRecipe { // Craft
 
                 // CraftBukkit start - Construct a dummy repair recipe
                 ItemStack result = new ItemStack(itemstack.getItem(), 1, i1);
-                java.util.List<ItemStack> ingredients = new ArrayList<ItemStack>();
+                java.util.List<ItemStack> ingredients = new ArrayList<>();
                 ingredients.add(itemstack2.cloneItemStack());
                 ingredients.add(itemstack.cloneItemStack());
-                ShapelessRecipes recipe = new ShapelessRecipes(result.cloneItemStack(), ingredients);
-                inventorycrafting.currentRecipe = recipe;
+                inventorycrafting.currentRecipe = new ShapelessRecipes(result.cloneItemStack(), ingredients);
                 result = org.bukkit.craftbukkit.event.CraftEventFactory.callPreCraftEvent(inventorycrafting, result, CraftingManager.getInstance().lastCraftView, true);
                 return result;
                 // return new ItemStack(itemstack2.getItem(), 1, i1);
diff --git a/src/main/java/net/minecraft/server/RecipesBanner.java b/src/main/java/net/minecraft/server/RecipesBanner.java
index 4a77c77d1..5434b79bc 100644
--- a/src/main/java/net/minecraft/server/RecipesBanner.java
+++ b/src/main/java/net/minecraft/server/RecipesBanner.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import java.util.Collections;
+
 public class RecipesBanner {
 
     public RecipesBanner() {}
@@ -8,14 +10,12 @@ public class RecipesBanner {
         EnumColor[] aenumcolor = EnumColor.values();
         int i = aenumcolor.length;
 
-        for (int j = 0; j < i; ++j) {
-            EnumColor enumcolor = aenumcolor[j];
-
-            craftingmanager.registerShapedRecipe(new ItemStack(Items.BANNER, 1, enumcolor.getInvColorIndex()), new Object[] { "###", "###", " | ", Character.valueOf('#'), new ItemStack(Blocks.WOOL, 1, enumcolor.getColorIndex()), Character.valueOf('|'), Items.STICK});
+        for (EnumColor enumcolor : aenumcolor) {
+            craftingmanager.registerShapedRecipe(new ItemStack(Items.BANNER, 1, enumcolor.getInvColorIndex()), "###", "###", " | ", '#', new ItemStack(Blocks.WOOL, 1, enumcolor.getColorIndex()), '|', Items.STICK);
         }
 
-        craftingmanager.a(new RecipesBanner.DuplicateRecipe((RecipesBanner.SyntheticClass_1) null));
-        craftingmanager.a(new RecipesBanner.AddRecipe((RecipesBanner.SyntheticClass_1) null));
+        craftingmanager.a(new RecipesBanner.DuplicateRecipe(null));
+        craftingmanager.a(new RecipesBanner.AddRecipe(null));
     }
 
     static class SyntheticClass_1 {    }
@@ -24,7 +24,7 @@ public class RecipesBanner {
 
         // CraftBukkit start - Delegate to new parent class with bogus info
         private AddRecipe() {
-            super(new ItemStack(Items.BANNER, 0, 0), java.util.Arrays.asList(new ItemStack(Items.BANNER)));
+            super(new ItemStack(Items.BANNER, 0, 0), Collections.singletonList(new ItemStack(Items.BANNER)));
         }
         // CraftBukkit end
 
@@ -130,9 +130,7 @@ public class RecipesBanner {
             TileEntityBanner.EnumBannerPatternType[] atileentitybanner_enumbannerpatterntype = TileEntityBanner.EnumBannerPatternType.values();
             int i = atileentitybanner_enumbannerpatterntype.length;
 
-            for (int j = 0; j < i; ++j) {
-                TileEntityBanner.EnumBannerPatternType tileentitybanner_enumbannerpatterntype = atileentitybanner_enumbannerpatterntype[j];
-
+            for (TileEntityBanner.EnumBannerPatternType tileentitybanner_enumbannerpatterntype : atileentitybanner_enumbannerpatterntype) {
                 if (tileentitybanner_enumbannerpatterntype.d()) {
                     boolean flag = true;
                     int k;
@@ -218,7 +216,7 @@ public class RecipesBanner {
 
         // CraftBukkit start - Delegate to new parent class with bogus info
         private DuplicateRecipe() {
-            super(new ItemStack(Items.BANNER, 0, 0), java.util.Arrays.asList(new ItemStack(Items.DYE, 0, 5)));
+            super(new ItemStack(Items.BANNER, 0, 0), Collections.singletonList(new ItemStack(Items.DYE, 0, 5)));
         }
         // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/RecipesFurnace.java b/src/main/java/net/minecraft/server/RecipesFurnace.java
index d16fa9ec7..0a61bab6b 100644
--- a/src/main/java/net/minecraft/server/RecipesFurnace.java
+++ b/src/main/java/net/minecraft/server/RecipesFurnace.java
@@ -40,9 +40,7 @@ public class RecipesFurnace {
         ItemFish.EnumFish[] aitemfish_enumfish = ItemFish.EnumFish.values();
         int i = aitemfish_enumfish.length;
 
-        for (int j = 0; j < i; ++j) {
-            ItemFish.EnumFish itemfish_enumfish = aitemfish_enumfish[j];
-
+        for (ItemFish.EnumFish itemfish_enumfish : aitemfish_enumfish) {
             if (itemfish_enumfish.g()) {
                 this.a(new ItemStack(Items.FISH, 1, itemfish_enumfish.a()), new ItemStack(Items.COOKED_FISH, 1, itemfish_enumfish.a()), 0.35F);
             }
@@ -70,7 +68,7 @@ public class RecipesFurnace {
 
     public void a(ItemStack itemstack, ItemStack itemstack1, float f) {
         this.recipes.put(itemstack, itemstack1);
-        this.c.put(itemstack1, Float.valueOf(f));
+        this.c.put(itemstack1, f);
     }
 
     public ItemStack getResult(ItemStack itemstack) {
@@ -120,6 +118,6 @@ public class RecipesFurnace {
             entry = (Entry) iterator.next();
         } while (!this.a(itemstack, (ItemStack) entry.getKey()));
 
-        return ((Float) entry.getValue()).floatValue();
+        return (Float) entry.getValue();
     }
 }
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 348706f74..d6aacf5b3 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -57,11 +57,11 @@ public class RegionFile {
             int j;
 
             for (j = 0; j < i; ++j) {
-                this.f.add(Boolean.valueOf(true));
+                this.f.add(Boolean.TRUE);
             }
 
-            this.f.set(0, Boolean.valueOf(false));
-            this.f.set(1, Boolean.valueOf(false));
+            this.f.set(0, Boolean.FALSE);
+            this.f.set(1, Boolean.FALSE);
             this.c.seek(0L);
 
             int k;
@@ -71,7 +71,7 @@ public class RegionFile {
                 this.d[j] = k;
                 if (k != 0 && (k >> 8) + (k & 255) <= this.f.size()) {
                     for (int l = 0; l < (k & 255); ++l) {
-                        this.f.set((k >> 8) + l, Boolean.valueOf(false));
+                        this.f.set((k >> 8) + l, Boolean.FALSE);
                     }
                 }
             }
@@ -194,22 +194,22 @@ public class RegionFile {
                 int l1;
 
                 for (l1 = 0; l1 < j1; ++l1) {
-                    this.f.set(i1 + l1, Boolean.valueOf(true));
+                    this.f.set(i1 + l1, Boolean.TRUE);
                 }
 
-                l1 = this.f.indexOf(Boolean.valueOf(true));
+                l1 = this.f.indexOf(Boolean.TRUE);
                 int i2 = 0;
                 int j2;
 
                 if (l1 != -1) {
                     for (j2 = l1; j2 < this.f.size(); ++j2) {
                         if (i2 != 0) {
-                            if (((Boolean) this.f.get(j2)).booleanValue()) {
+                            if ((Boolean) this.f.get(j2)) {
                                 ++i2;
                             } else {
                                 i2 = 0;
                             }
-                        } else if (((Boolean) this.f.get(j2)).booleanValue()) {
+                        } else if ((Boolean) this.f.get(j2)) {
                             l1 = j2;
                             i2 = 1;
                         }
@@ -225,7 +225,7 @@ public class RegionFile {
                     this.a(i, j, l1 << 8 | k1);
 
                     for (j2 = 0; j2 < k1; ++j2) {
-                        this.f.set(i1 + j2, Boolean.valueOf(false));
+                        this.f.set(i1 + j2, Boolean.FALSE);
                     }
 
                     this.a(i1, abyte, k);
@@ -235,7 +235,7 @@ public class RegionFile {
 
                     for (j2 = 0; j2 < k1; ++j2) {
                         this.c.write(RegionFile.a);
-                        this.f.add(Boolean.valueOf(false));
+                        this.f.add(Boolean.FALSE);
                     }
 
                     this.g += 4096 * k1;
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index 5b000c47c..1ea3ba173 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -20,7 +20,7 @@ public class RegionFileCache {
         // PaperSpigot end
         File file1 = new File(file, "region");
         File file2 = new File(file1, "r." + (i >> 5) + "." + (j >> 5) + ".mca");
-        RegionFile regionfile = (RegionFile) RegionFileCache.a.get(file2);
+        RegionFile regionfile = RegionFileCache.a.get(file2);
 
         if (regionfile != null) {
             return regionfile;
@@ -42,11 +42,8 @@ public class RegionFileCache {
     }
 
     public static synchronized void a() {
-        Iterator iterator = RegionFileCache.a.values().iterator();
-
-        while (iterator.hasNext()) {
-            RegionFile regionfile = (RegionFile) iterator.next();
 
+        for (RegionFile regionfile : RegionFileCache.a.values()) {
             try {
                 if (regionfile != null) {
                     regionfile.c();
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index c26feead3..403fb61db 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -66,7 +66,7 @@ public class ScoreboardServer extends Scoreboard {
         if (super.addPlayerToTeam(s, s1)) {
             ScoreboardTeam scoreboardteam = this.getTeam(s1);
 
-            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 3));
+            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(s), 3));
             this.b();
             return true;
         }
@@ -75,7 +75,7 @@ public class ScoreboardServer extends Scoreboard {
 
     public void removePlayerFromTeam(String s, ScoreboardTeam scoreboardteam) {
         super.removePlayerFromTeam(s, scoreboardteam);
-        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 4));
+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(s), 4));
         this.b();
     }
 
@@ -142,11 +142,7 @@ public class ScoreboardServer extends Scoreboard {
             }
         }
 
-        Iterator iterator = this.getScoresForObjective(scoreboardobjective).iterator();
-
-        while (iterator.hasNext()) {
-            ScoreboardScore scoreboardscore = (ScoreboardScore) iterator.next();
-
+        for (ScoreboardScore scoreboardscore : this.getScoresForObjective(scoreboardobjective)) {
             arraylist.add(new PacketPlayOutScoreboardScore(scoreboardscore));
         }
 
@@ -155,15 +151,13 @@ public class ScoreboardServer extends Scoreboard {
 
     public void e(ScoreboardObjective scoreboardobjective) {
         List list = this.getScoreboardScorePacketsForObjective(scoreboardobjective);
-        Iterator iterator = this.a.getPlayerList().v().iterator();
 
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this) continue; // CraftBukkit - Only players on this board
-            Iterator iterator1 = list.iterator();
+        for (EntityPlayer entityplayer : this.a.getPlayerList().v()) {
+            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this)
+                continue; // CraftBukkit - Only players on this board
 
-            while (iterator1.hasNext()) {
-                Packet packet = (Packet) iterator1.next();
+            for (Object o : list) {
+                Packet packet = (Packet) o;
 
                 entityplayer.playerConnection.sendPacket(packet);
             }
@@ -188,15 +182,13 @@ public class ScoreboardServer extends Scoreboard {
 
     public void g(ScoreboardObjective scoreboardobjective) {
         List list = this.f(scoreboardobjective);
-        Iterator iterator = this.a.getPlayerList().v().iterator();
 
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this) continue; // CraftBukkit - Only players on this board
-            Iterator iterator1 = list.iterator();
+        for (EntityPlayer entityplayer : this.a.getPlayerList().v()) {
+            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() != this)
+                continue; // CraftBukkit - Only players on this board
 
-            while (iterator1.hasNext()) {
-                Packet packet = (Packet) iterator1.next();
+            for (Object o : list) {
+                Packet packet = (Packet) o;
 
                 entityplayer.playerConnection.sendPacket(packet);
             }
@@ -219,7 +211,7 @@ public class ScoreboardServer extends Scoreboard {
 
     // CraftBukkit start - Send to players
     private void sendAll(Packet packet) {
-        for (EntityPlayer entityplayer : (List<EntityPlayer>) this.a.getPlayerList().players) {
+        for (EntityPlayer entityplayer : this.a.getPlayerList().players) {
             if (entityplayer.getBukkitEntity().getScoreboard().getHandle() == this) {
                 entityplayer.playerConnection.sendPacket(packet);
             }
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index ac9fb4cf4..6e5151a54 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -48,7 +48,7 @@ public class ServerConnection {
         this.d = true;
     }
 
-    public void a(InetAddress inetaddress, int i) throws IOException {
+    public void a(InetAddress inetaddress, int i) {
 
         synchronized (this.g) {
             Class oclass;
@@ -65,10 +65,10 @@ public class ServerConnection {
             }
 
             this.g.add((new ServerBootstrap()).channel(oclass).childHandler(new ChannelInitializer() {
-                protected void initChannel(Channel channel) throws Exception {
+                protected void initChannel(Channel channel) {
                     try {
                         channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.TRUE);
-                    } catch (ChannelException channelexception) {
+                    } catch (ChannelException ignored) {
                     }
 
                     channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(ServerConnection.this)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index 76c07137b..5978b3d5a 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -101,16 +101,15 @@ public class ServerStatisticManager extends StatisticManager {
             HashMap hashmap = Maps.newHashMap();
 
             for (Entry<String, JsonElement> stringJsonElementEntry : jsonobject.entrySet()) {
-                Entry entry = stringJsonElementEntry;
-                Statistic statistic = StatisticList.getStatistic((String) entry.getKey());
+                Statistic statistic = StatisticList.getStatistic((String) ((Entry) stringJsonElementEntry).getKey());
 
                 if (statistic != null) {
                     StatisticWrapper statisticwrapper = new StatisticWrapper();
 
-                    if (((JsonElement) entry.getValue()).isJsonPrimitive() && ((JsonElement) entry.getValue()).getAsJsonPrimitive().isNumber()) {
-                        statisticwrapper.a(((JsonElement) entry.getValue()).getAsInt());
-                    } else if (((JsonElement) entry.getValue()).isJsonObject()) {
-                        JsonObject jsonobject1 = ((JsonElement) entry.getValue()).getAsJsonObject();
+                    if (((JsonElement) ((Entry) stringJsonElementEntry).getValue()).isJsonPrimitive() && ((JsonElement) ((Entry) stringJsonElementEntry).getValue()).getAsJsonPrimitive().isNumber()) {
+                        statisticwrapper.a(((JsonElement) ((Entry) stringJsonElementEntry).getValue()).getAsInt());
+                    } else if (((JsonElement) ((Entry) stringJsonElementEntry).getValue()).isJsonObject()) {
+                        JsonObject jsonobject1 = ((JsonElement) ((Entry) stringJsonElementEntry).getValue()).getAsJsonObject();
 
                         if (jsonobject1.has("value") && jsonobject1.get("value").isJsonPrimitive() && jsonobject1.get("value").getAsJsonPrimitive().isNumber()) {
                             statisticwrapper.a(jsonobject1.getAsJsonPrimitive("value").getAsInt());
@@ -131,7 +130,7 @@ public class ServerStatisticManager extends StatisticManager {
 
                     hashmap.put(statistic, statisticwrapper);
                 } else {
-                    ServerStatisticManager.b.warn("Invalid statistic in " + this.d + ": Don\'t know what " + entry.getKey() + " is");
+                    ServerStatisticManager.b.warn("Invalid statistic in " + this.d + ": Don\'t know what " + ((Entry) stringJsonElementEntry).getKey() + " is");
                 }
             }
 
@@ -143,22 +142,21 @@ public class ServerStatisticManager extends StatisticManager {
         JsonObject jsonobject = new JsonObject();
 
         for (Entry<Statistic, StatisticWrapper> statisticStatisticWrapperEntry : map.entrySet()) {
-            Entry entry = statisticStatisticWrapperEntry;
 
-            if (((StatisticWrapper) entry.getValue()).b() != null) {
+            if (((StatisticWrapper) ((Entry) statisticStatisticWrapperEntry).getValue()).b() != null) {
                 JsonObject jsonobject1 = new JsonObject();
 
-                jsonobject1.addProperty("value", ((StatisticWrapper) entry.getValue()).a());
+                jsonobject1.addProperty("value", ((StatisticWrapper) ((Entry) statisticStatisticWrapperEntry).getValue()).a());
 
                 try {
-                    jsonobject1.add("progress", ((StatisticWrapper) entry.getValue()).b().a());
+                    jsonobject1.add("progress", ((StatisticWrapper) ((Entry) statisticStatisticWrapperEntry).getValue()).b().a());
                 } catch (Throwable throwable) {
-                    ServerStatisticManager.b.warn("Couldn\'t save statistic " + ((Statistic) entry.getKey()).e() + ": error serializing progress", throwable);
+                    ServerStatisticManager.b.warn("Couldn\'t save statistic " + ((Statistic) ((Entry) statisticStatisticWrapperEntry).getKey()).e() + ": error serializing progress", throwable);
                 }
 
-                jsonobject.add(((Statistic) entry.getKey()).name, jsonobject1);
+                jsonobject.add(((Statistic) ((Entry) statisticStatisticWrapperEntry).getKey()).name, jsonobject1);
             } else {
-                jsonobject.addProperty(((Statistic) entry.getKey()).name, ((StatisticWrapper) entry.getValue()).a());
+                jsonobject.addProperty(((Statistic) ((Entry) statisticStatisticWrapperEntry).getKey()).name, ((StatisticWrapper) ((Entry) statisticStatisticWrapperEntry).getValue()).a());
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ShapelessRecipes.java b/src/main/java/net/minecraft/server/ShapelessRecipes.java
index e9934f904..6ddbcb641 100644
--- a/src/main/java/net/minecraft/server/ShapelessRecipes.java
+++ b/src/main/java/net/minecraft/server/ShapelessRecipes.java
@@ -25,7 +25,7 @@ public class ShapelessRecipes implements IRecipe {
     public org.bukkit.inventory.ShapelessRecipe toBukkitRecipe() {
         CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
         CraftShapelessRecipe recipe = new CraftShapelessRecipe(result, this);
-        for (ItemStack stack : (List<ItemStack>) this.ingredients) {
+        for (ItemStack stack : this.ingredients) {
             if (stack != null) {
                 recipe.addIngredient(org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(stack.getItem()), stack.getData());
             }
@@ -61,10 +61,9 @@ public class ShapelessRecipes implements IRecipe {
 
                 if (itemstack != null) {
                     boolean flag = false;
-                    Iterator iterator = arraylist.iterator();
 
-                    while (iterator.hasNext()) {
-                        ItemStack itemstack1 = (ItemStack) iterator.next();
+                    for (Object o : arraylist) {
+                        ItemStack itemstack1 = (ItemStack) o;
 
                         if (itemstack.getItem() == itemstack1.getItem() && (itemstack1.getData() == 32767 || itemstack.getData() == itemstack1.getData())) {
                             flag = true;
diff --git a/src/main/java/net/minecraft/server/SlotFurnaceResult.java b/src/main/java/net/minecraft/server/SlotFurnaceResult.java
index 914be4e8d..20d965d45 100644
--- a/src/main/java/net/minecraft/server/SlotFurnaceResult.java
+++ b/src/main/java/net/minecraft/server/SlotFurnaceResult.java
@@ -76,11 +76,11 @@ public class SlotFurnaceResult extends Slot {
 
         this.b = 0;
         if (itemstack.getItem() == Items.IRON_INGOT) {
-            this.a.b((Statistic) AchievementList.k);
+            this.a.b(AchievementList.k);
         }
 
         if (itemstack.getItem() == Items.COOKED_FISH) {
-            this.a.b((Statistic) AchievementList.p);
+            this.a.b(AchievementList.p);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 8a899921d..8de0904dd 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -119,7 +119,7 @@ public final class SpawnerCreature {
                     label115:
                     while (iterator1.hasNext() && (moblimit > 0)) { // Spigot - while more allowed
                         // CraftBukkit start = use LongHash and LongObjectHashMap
-                        long key = ((Long) iterator1.next()).longValue();
+                        long key = (Long) iterator1.next();
                         BlockPosition blockposition1 = getRandomPosition(worldserver, LongHash.msw(key), LongHash.lsw(key));
                         // CraftBukkit
                         int i2 = blockposition1.getX();
@@ -163,7 +163,7 @@ public final class SpawnerCreature {
                                                     EntityInsentient entityinsentient;
 
                                                     try {
-                                                        entityinsentient = biomebase_biomemeta.b.getConstructor(new Class[]{World.class}).newInstance(new Object[]{worldserver});
+                                                        entityinsentient = biomebase_biomemeta.b.getConstructor(new Class[]{World.class}).newInstance(worldserver);
                                                     } catch (Exception exception) {
                                                         exception.printStackTrace();
                                                         return j1;
@@ -263,7 +263,7 @@ public final class SpawnerCreature {
                             EntityInsentient entityinsentient;
 
                             try {
-                                entityinsentient = biomebase_biomemeta.b.getConstructor(new Class[]{World.class}).newInstance(new Object[]{world});
+                                entityinsentient = biomebase_biomemeta.b.getConstructor(new Class[]{World.class}).newInstance(world);
                             } catch (Exception exception) {
                                 exception.printStackTrace();
                                 continue;
diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java
index e76acfc4f..0a3b71247 100644
--- a/src/main/java/net/minecraft/server/StructureGenerator.java
+++ b/src/main/java/net/minecraft/server/StructureGenerator.java
@@ -18,14 +18,14 @@ public abstract class StructureGenerator extends WorldGenBase {
 
     protected final void a(World world, final int i, final int j, int k, int l, ChunkSnapshot chunksnapshot) {
         this.a(world);
-        if (!this.e.containsKey(Long.valueOf(ChunkCoordIntPair.a(i, j)))) {
+        if (!this.e.containsKey(ChunkCoordIntPair.a(i, j))) {
             this.b.nextInt();
 
             try {
                 if (this.a(i, j)) {
                     StructureStart structurestart = this.b(i, j);
 
-                    this.e.put(Long.valueOf(ChunkCoordIntPair.a(i, j)), structurestart);
+                    this.e.put(ChunkCoordIntPair.a(i, j), structurestart);
                     this.a(i, j, structurestart);
                 }
 
@@ -34,7 +34,7 @@ public abstract class StructureGenerator extends WorldGenBase {
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Feature being prepared");
 
                 crashreportsystemdetails.a("Is feature chunk", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         return StructureGenerator.this.a(i, j) ? "True" : "False";
                     }
 
@@ -42,9 +42,9 @@ public abstract class StructureGenerator extends WorldGenBase {
                         return this.a();
                     }
                 });
-                crashreportsystemdetails.a("Chunk location", (Object) String.format("%d,%d", new Object[] { Integer.valueOf(i), Integer.valueOf(j)}));
+                crashreportsystemdetails.a("Chunk location", String.format("%d,%d", new Object[] {i, j}));
                 crashreportsystemdetails.a("Chunk pos hash", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         return String.valueOf(ChunkCoordIntPair.a(i, j));
                     }
 
@@ -53,7 +53,7 @@ public abstract class StructureGenerator extends WorldGenBase {
                     }
                 });
                 crashreportsystemdetails.a("Structure type", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         return StructureGenerator.this.getClass().getCanonicalName();
                     }
 
@@ -71,11 +71,8 @@ public abstract class StructureGenerator extends WorldGenBase {
         int i = (chunkcoordintpair.x << 4) + 8;
         int j = (chunkcoordintpair.z << 4) + 8;
         boolean flag = false;
-        Iterator iterator = this.e.values().iterator();
-
-        while (iterator.hasNext()) {
-            StructureStart structurestart = (StructureStart) iterator.next();
 
+        for (StructureStart structurestart : this.e.values()) {
             if (structurestart.d() && structurestart.a(chunkcoordintpair) && structurestart.a().a(i, j, i + 15, j + 15)) {
                 structurestart.a(world, random, new StructureBoundingBox(i, j, i + 15, j + 15));
                 structurestart.b(chunkcoordintpair);
@@ -94,18 +91,12 @@ public abstract class StructureGenerator extends WorldGenBase {
     }
 
     protected StructureStart c(BlockPosition blockposition) {
-        Iterator iterator = this.e.values().iterator();
-
-        while (iterator.hasNext()) {
-            StructureStart structurestart = (StructureStart) iterator.next();
-
-            if (structurestart.d() && structurestart.a().b((BaseBlockPosition) blockposition)) {
-                Iterator iterator1 = structurestart.b().iterator();
 
-                while (iterator1.hasNext()) {
-                    StructurePiece structurepiece = (StructurePiece) iterator1.next();
+        for (StructureStart structurestart : this.e.values()) {
+            if (structurestart.d() && structurestart.a().b(blockposition)) {
 
-                    if (structurepiece.c().b((BaseBlockPosition) blockposition)) {
+                for (StructurePiece structurepiece : structurestart.b()) {
+                    if (structurepiece.c().b(blockposition)) {
                         return structurestart;
                     }
                 }
@@ -128,7 +119,7 @@ public abstract class StructureGenerator extends WorldGenBase {
             }
 
             structurestart = (StructureStart) iterator.next();
-        } while (!structurestart.d() || !structurestart.a().b((BaseBlockPosition) blockposition));
+        } while (!structurestart.d() || !structurestart.a().b(blockposition));
 
         return true;
     }
@@ -143,7 +134,7 @@ public abstract class StructureGenerator extends WorldGenBase {
         long l = (long) (blockposition.getZ() >> 4) * j;
 
         this.b.setSeed(k ^ l ^ world.getSeed());
-        this.a(world, blockposition.getX() >> 4, blockposition.getZ() >> 4, 0, 0, (ChunkSnapshot) null);
+        this.a(world, blockposition.getX() >> 4, blockposition.getZ() >> 4, 0, 0, null);
         double d0 = Double.MAX_VALUE;
         BlockPosition blockposition1 = null;
         Iterator iterator = this.e.values().iterator();
@@ -155,7 +146,7 @@ public abstract class StructureGenerator extends WorldGenBase {
             StructureStart structurestart = (StructureStart) iterator.next();
 
             if (structurestart.d()) {
-                StructurePiece structurepiece = (StructurePiece) structurestart.b().get(0);
+                StructurePiece structurepiece = structurestart.b().get(0);
 
                 blockposition2 = structurepiece.a();
                 d1 = blockposition2.i(blockposition);
@@ -173,10 +164,9 @@ public abstract class StructureGenerator extends WorldGenBase {
 
             if (list != null) {
                 BlockPosition blockposition3 = null;
-                Iterator iterator1 = list.iterator();
 
-                while (iterator1.hasNext()) {
-                    blockposition2 = (BlockPosition) iterator1.next();
+                for (Object o : list) {
+                    blockposition2 = (BlockPosition) o;
                     d1 = blockposition2.i(blockposition);
                     if (d1 < d0) {
                         d0 = d1;
@@ -208,13 +198,11 @@ public abstract class StructureGenerator extends WorldGenBase {
             // Spigot End
             if (this.d == null) {
                 this.d = new PersistentStructure(this.a());
-                world.a(this.a(), (PersistentBase) this.d);
+                world.a(this.a(), this.d);
             } else {
                 NBTTagCompound nbttagcompound = this.d.a();
-                Iterator iterator = nbttagcompound.c().iterator();
 
-                while (iterator.hasNext()) {
-                    String s = (String) iterator.next();
+                for (String s : nbttagcompound.c()) {
                     NBTBase nbtbase = nbttagcompound.get(s);
 
                     if (nbtbase.getTypeId() == 10) {
@@ -226,7 +214,7 @@ public abstract class StructureGenerator extends WorldGenBase {
                             StructureStart structurestart = WorldGenFactory.a(nbttagcompound1, world);
 
                             if (structurestart != null) {
-                                this.e.put(Long.valueOf(ChunkCoordIntPair.a(i, j)), structurestart);
+                                this.e.put(ChunkCoordIntPair.a(i, j), structurestart);
                             }
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index fdcbf4434..79519450d 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -53,7 +53,7 @@ public abstract class TileEntity {
     }
 
     public void b(NBTTagCompound nbttagcompound) {
-        String s = (String) TileEntity.g.get(this.getClass());
+        String s = TileEntity.g.get(this.getClass());
 
         if (s == null) {
             throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
@@ -69,7 +69,7 @@ public abstract class TileEntity {
         TileEntity tileentity = null;
 
         try {
-            Class oclass = (Class) TileEntity.f.get(nbttagcompound.getString("id"));
+            Class oclass = TileEntity.f.get(nbttagcompound.getString("id"));
 
             if (oclass != null) {
                 tileentity = (TileEntity) oclass.newInstance();
@@ -149,8 +149,8 @@ public abstract class TileEntity {
 
     public void a(CrashReportSystemDetails crashreportsystemdetails) {
         crashreportsystemdetails.a("Name", new Callable() {
-            public String a() throws Exception {
-                return (String) TileEntity.g.get(TileEntity.this.getClass()) + " // " + TileEntity.this.getClass().getCanonicalName();
+            public String a() {
+                return TileEntity.g.get(TileEntity.this.getClass()) + " // " + TileEntity.this.getClass().getCanonicalName();
             }
 
             public Object call() throws Exception {
@@ -165,11 +165,11 @@ public abstract class TileEntity {
             }
             // PaperSpigot end
             crashreportsystemdetails.a("Actual block type", new Callable() {
-                public String a() throws Exception {
+                public String a() {
                     int i = Block.getId(TileEntity.this.world.getType(TileEntity.this.position).getBlock());
 
                     try {
-                        return String.format("ID #%d (%s // %s)", new Object[] { Integer.valueOf(i), Block.getById(i).a(), Block.getById(i).getClass().getCanonicalName()});
+                        return String.format("ID #%d (%s // %s)", i, Block.getById(i).a(), Block.getById(i).getClass().getCanonicalName());
                     } catch (Throwable throwable) {
                         return "ID #" + i;
                     }
@@ -180,7 +180,7 @@ public abstract class TileEntity {
                 }
             });
             crashreportsystemdetails.a("Actual block data value", new Callable() {
-                public String a() throws Exception {
+                public String a() {
                     IBlockData iblockdata = TileEntity.this.world.getType(TileEntity.this.position);
                     int i = iblockdata.getBlock().toLegacyData(iblockdata);
 
@@ -189,7 +189,7 @@ public abstract class TileEntity {
                     } else {
                         String s = String.format("%4s", new Object[] { Integer.toBinaryString(i)}).replace(" ", "0");
 
-                        return String.format("%1$d / 0x%1$X / 0b%2$s", new Object[] { Integer.valueOf(i), s});
+                        return String.format("%1$d / 0x%1$X / 0b%2$s", i, s);
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index 89b63b100..ad2539827 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -29,7 +29,7 @@ public class TileEntityBeacon extends TileEntityContainer implements IUpdatePlay
     private ItemStack inventorySlot;
     private String n;
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private int maxStack = MAX_STACK;
 
     public ItemStack[] getContents() {
diff --git a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
index 88877d9d4..b517ce2c2 100644
--- a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
+++ b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
@@ -23,7 +23,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements IUpda
     public TileEntityBrewingStand() {}
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private int maxStack = 64;
 
     public void onOpen(CraftHumanEntity who) {
@@ -316,21 +316,15 @@ public class TileEntityBrewingStand extends TileEntityContainer implements IUpda
     }
 
     public int getProperty(int i) {
-        switch (i) {
-        case 0:
+        if (i == 0) {
             return this.brewTime;
-
-        default:
-            return 0;
         }
+        return 0;
     }
 
     public void b(int i, int j) {
-        switch (i) {
-        case 0:
+        if (i == 0) {
             this.brewTime = j;
-
-        default:
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityChest.java b/src/main/java/net/minecraft/server/TileEntityChest.java
index 5192d959b..c2d73c69c 100644
--- a/src/main/java/net/minecraft/server/TileEntityChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityChest.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import java.util.Iterator;
 import java.util.List;
 
 // CraftBukkit start
@@ -26,7 +25,7 @@ public class TileEntityChest extends TileEntityContainer implements IInventory {
     public TileEntityChest() {}
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private int maxStack = MAX_STACK;
 
     public ItemStack[] getContents() {
@@ -492,26 +491,22 @@ public class TileEntityChest extends TileEntityContainer implements IInventory {
         static {
             try {
                 TileEntityChest.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 TileEntityChest.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 TileEntityChest.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 TileEntityChest.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 0e3f35a6e..3fa5ee48f 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -25,7 +25,7 @@ public class TileEntityFurnace extends TileEntityContainer implements IUpdatePla
     // CraftBukkit start - add fields and methods
     private int lastTick = MinecraftServer.currentTick;
     private int maxStack = MAX_STACK;
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
 
     public ItemStack[] getContents() {
         return this.items;
@@ -380,9 +380,7 @@ public class TileEntityFurnace extends TileEntityContainer implements IUpdatePla
         if (enumdirection == EnumDirection.DOWN && i == 1) {
             Item item = itemstack.getItem();
 
-            if (item != Items.WATER_BUCKET && item != Items.BUCKET) {
-                return false;
-            }
+            return item == Items.WATER_BUCKET || item == Items.BUCKET;
         }
 
         return true;
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 4d7f16087..72476e293 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -5,7 +5,6 @@ import java.util.List;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-import org.bukkit.craftbukkit.entity.CraftItem;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryMoveItemEvent;
@@ -21,7 +20,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
     private int g = -1;
 
     // CraftBukkit start - add fields and methods
-    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public List<HumanEntity> transaction = new java.util.ArrayList<>();
     private int maxStack = MAX_STACK;
 
     public ItemStack[] getContents() {
@@ -192,7 +191,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 }
 
                 if (!this.q()) {
-                    flag = a((IHopper) this) || flag;
+                    flag = a(this) || flag;
                 }
 
                 if (flag) {
@@ -216,9 +215,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         ItemStack[] aitemstack = this.items;
         int i = aitemstack.length;
 
-        for (int j = 0; j < i; ++j) {
-            ItemStack itemstack = aitemstack[j];
-
+        for (ItemStack itemstack : aitemstack) {
             if (itemstack != null) {
                 return false;
             }
@@ -237,9 +234,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         ItemStack[] aitemstack = this.items;
         int i = aitemstack.length;
 
-        for (int j = 0; j < i; ++j) {
-            ItemStack itemstack = aitemstack[j];
-
+        for (ItemStack itemstack : aitemstack) {
             if (itemstack == null || itemstack.count != itemstack.getMaxStackSize()) {
                 return false;
             }
@@ -322,8 +317,8 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             IWorldInventory iworldinventory = (IWorldInventory) iinventory;
             int[] aint = iworldinventory.getSlotsForFace(enumdirection);
 
-            for (int i = 0; i < aint.length; ++i) {
-                ItemStack itemstack = iworldinventory.getItem(aint[i]);
+            for (int value : aint) {
+                ItemStack itemstack = iworldinventory.getItem(value);
 
                 if (itemstack == null || itemstack.count != itemstack.getMaxStackSize()) {
                     return false;
@@ -349,8 +344,8 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             IWorldInventory iworldinventory = (IWorldInventory) iinventory;
             int[] aint = iworldinventory.getSlotsForFace(enumdirection);
 
-            for (int i = 0; i < aint.length; ++i) {
-                if (iworldinventory.getItem(aint[i]) != null) {
+            for (int value : aint) {
+                if (iworldinventory.getItem(value) != null) {
                     return false;
                 }
             }
@@ -393,8 +388,8 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 IWorldInventory iworldinventory = (IWorldInventory) iinventory;
                 int[] aint = iworldinventory.getSlotsForFace(enumdirection);
 
-                for (int i = 0; i < aint.length; ++i) {
-                    if (a(ihopper, iinventory, aint[i], enumdirection)) {
+                for (int value : aint) {
+                    if (a(ihopper, iinventory, value, enumdirection)) {
                         return true;
                     }
                 }
@@ -408,12 +403,9 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 }
             }
         } else if (!ihopper.getWorld().tacoSpigotConfig.isHopperPushBased || !(ihopper instanceof TileEntityHopper)) { // TacoSpigot - only search for entities in 'pull mode'
-            Iterator iterator = a(ihopper.getWorld(), ihopper.A(), ihopper.B() + 1.0D, ihopper.C()).iterator();
-
-            while (iterator.hasNext()) {
-                EntityItem entityitem = (EntityItem) iterator.next();
 
-                if (a((IInventory) ihopper, entityitem)) {
+            for (EntityItem entityitem : a(ihopper.getWorld(), ihopper.A(), ihopper.B() + 1.0D, ihopper.C())) {
+                if (a(ihopper, entityitem)) {
                     return true;
                 }
             }
@@ -497,7 +489,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             }
             // CraftBukkit end
             ItemStack itemstack = entityitem.getItemStack().cloneItemStack();
-            ItemStack itemstack1 = addItem(iinventory, itemstack, (EnumDirection) null);
+            ItemStack itemstack1 = addItem(iinventory, itemstack, null);
 
             if (itemstack1 != null && itemstack1.count != 0) {
                 entityitem.setItemStack(itemstack1);
@@ -605,7 +597,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof IInventory) {
-                object = (IInventory) tileentity;
+                object = tileentity;
                 if (object instanceof TileEntityChest && block instanceof BlockChest) {
                     object = ((BlockChest) block).f(world, blockposition);
                 }
@@ -616,7 +608,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             List list = world.a((Entity) null, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.c);
 
             if (list.size() > 0) {
-                object = (IInventory) list.get(world.random.nextInt(list.size()));
+                object = list.get(world.random.nextInt(list.size()));
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityPiston.java b/src/main/java/net/minecraft/server/TileEntityPiston.java
index 8aa808304..5026ed94c 100644
--- a/src/main/java/net/minecraft/server/TileEntityPiston.java
+++ b/src/main/java/net/minecraft/server/TileEntityPiston.java
@@ -151,19 +151,16 @@ public class TileEntityPiston extends TileEntity implements IUpdatePlayerListBox
             try {
                 TileEntityPiston.SyntheticClass_1.a[EnumDirection.EnumAxis.X.ordinal()] = 1;
             } catch (NoSuchFieldError ignored) {
-                ;
             }
 
             try {
                 TileEntityPiston.SyntheticClass_1.a[EnumDirection.EnumAxis.Y.ordinal()] = 2;
             } catch (NoSuchFieldError ignored) {
-                ;
             }
 
             try {
                 TileEntityPiston.SyntheticClass_1.a[EnumDirection.EnumAxis.Z.ordinal()] = 3;
             } catch (NoSuchFieldError ignored) {
-                ;
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index e927fd237..a6a649dc8 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.gson.JsonParseException;
+import org.bukkit.entity.Player;
 
 public class TileEntitySign extends TileEntity {
 
@@ -93,7 +94,7 @@ public class TileEntitySign extends TileEntity {
                 // CraftBukkit end
 
                 try {
-                    this.lines[i] = ChatComponentUtils.filterForDisplay(icommandlistener, ichatbasecomponent, (Entity) null);
+                    this.lines[i] = ChatComponentUtils.filterForDisplay(icommandlistener, ichatbasecomponent, null);
                 } catch (CommandException commandexception) {
                     this.lines[i] = ichatbasecomponent;
                 }
@@ -169,8 +170,8 @@ public class TileEntitySign extends TileEntity {
             }
         };
 
-        for (int i = 0; i < this.lines.length; ++i) {
-            ChatModifier chatmodifier = this.lines[i] == null ? null : this.lines[i].getChatModifier();
+        for (IChatBaseComponent line : this.lines) {
+            ChatModifier chatmodifier = line == null ? null : line.getChatModifier();
 
             if (chatmodifier != null && chatmodifier.h() != null) {
                 ChatClickable chatclickable = chatmodifier.h();
@@ -178,7 +179,7 @@ public class TileEntitySign extends TileEntity {
                 if (chatclickable.a() == ChatClickable.EnumClickAction.RUN_COMMAND) {
                     // CraftBukkit start
                     // MinecraftServer.getServer().getCommandHandler().a(tileentitysignplayerwrapper, chatclickable.b());
-                    CommandBlockListenerAbstract.executeCommand(entityhuman, (org.bukkit.entity.Player) entityhuman.getBukkitEntity(), chatclickable.b());
+                    CommandBlockListenerAbstract.executeCommand(entityhuman, entityhuman.getBukkitEntity(), chatclickable.b());
                     // CraftBukkit end
                 }
             }
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index 58014c5f1..0ecf3fd95 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -36,8 +36,7 @@ public class TileEntitySkull extends TileEntity {
             .build( new CacheLoader<String, GameProfile>()
             {
                 @Override
-                public GameProfile load(String key) throws Exception
-                {
+                public GameProfile load(String key) {
                     final GameProfile[] profiles = new GameProfile[1];
                     ProfileLookupCallback gameProfileLookup = new ProfileLookupCallback() {
 
@@ -104,7 +103,7 @@ public class TileEntitySkull extends TileEntity {
                 String s = nbttagcompound.getString("ExtraType");
 
                 if (!UtilColor.b(s)) {
-                    this.g = new GameProfile((UUID) null, s);
+                    this.g = new GameProfile(null, s);
                     this.e();
                 }
             }
@@ -138,19 +137,15 @@ public class TileEntitySkull extends TileEntity {
         // Spigot start
         GameProfile profile = this.g;
         setSkullType( 0 ); // Work around client bug
-        b(profile, new Predicate<GameProfile>() {
-
-            @Override
-            public boolean apply(GameProfile input) {
-                setSkullType(3); // Work around client bug
-                g = input;
-                update();
-                if (world != null) {
-                    world.notify(position);
-                }
-                return false;
+        b(profile, input -> {
+            setSkullType(3); // Work around client bug
+            g = input;
+            update();
+            if (world != null) {
+                world.notify(position);
             }
-        }); 
+            return false;
+        });
         // Spigot end
     }
 
@@ -166,21 +161,15 @@ public class TileEntitySkull extends TileEntity {
                 if (profile != null && Iterables.getFirst(profile.getProperties().get("textures"), (Object) null) != null) {
                     callback.apply(profile);
                 } else {
-                    executor.execute(new Runnable() {
-                        @Override
-                        public void run() {
-                            final GameProfile profile = skinCache.getUnchecked(gameprofile.getName().toLowerCase());                            
-                            MinecraftServer.getServer().processQueue.add(new Runnable() {
-                                @Override
-                                public void run() {
-                                    if (profile == null) {
-                                        callback.apply(gameprofile);
-                                    } else {
-                                        callback.apply(profile);
-                                    }
-                                }
-                            });
-                        }
+                    executor.execute(() -> {
+                        final GameProfile profile1 = skinCache.getUnchecked(gameprofile.getName().toLowerCase());
+                        MinecraftServer.getServer().processQueue.add(() -> {
+                            if (profile1 == null) {
+                                callback.apply(gameprofile);
+                            } else {
+                                callback.apply(profile1);
+                            }
+                        });
                     });
                 }
             }
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index 0f82e06cb..6deb2206b 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -30,7 +30,6 @@ import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Iterator;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -42,7 +41,7 @@ public class UserCache {
     public static final SimpleDateFormat a = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
     private final Map<String, UserCache.UserCacheEntry> c = Maps.newHashMap();
     private final Map<UUID, UserCache.UserCacheEntry> d = Maps.newHashMap();
-    private final java.util.Deque<GameProfile> e = new java.util.concurrent.LinkedBlockingDeque<GameProfile>(); // CraftBukkit
+    private final java.util.Deque<GameProfile> e = new java.util.concurrent.LinkedBlockingDeque<>(); // CraftBukkit
     private final MinecraftServer f;
     protected final Gson b;
     private final File g;
@@ -84,7 +83,7 @@ public class UserCache {
 
         minecraftserver.getGameProfileRepository().findProfilesByNames(new String[] { s}, Agent.MINECRAFT, profilelookupcallback);
         if (!minecraftserver.getOnlineMode() && agameprofile[0] == null) {
-            UUID uuid = EntityHuman.a(new GameProfile((UUID) null, s));
+            UUID uuid = EntityHuman.a(new GameProfile(null, s));
             GameProfile gameprofile = new GameProfile(uuid, s);
 
             profilelookupcallback.onProfileLookupSucceeded(gameprofile);
@@ -94,7 +93,7 @@ public class UserCache {
     }
 
     public void a(GameProfile gameprofile) {
-        this.a(gameprofile, (Date) null);
+        this.a(gameprofile, null);
     }
 
     private void a(GameProfile gameprofile, Date date) {
@@ -112,7 +111,7 @@ public class UserCache {
         UserCache.UserCacheEntry usercache_usercacheentry = new UserCache.UserCacheEntry(gameprofile, date, null);
 
         if (this.d.containsKey(uuid)) {
-            UserCache.UserCacheEntry usercache_usercacheentry1 = (UserCache.UserCacheEntry) this.d.get(uuid);
+            UserCache.UserCacheEntry usercache_usercacheentry1 = this.d.get(uuid);
 
             this.c.remove(usercache_usercacheentry1.a().getName().toLowerCase(Locale.ROOT));
             this.e.remove(gameprofile);
@@ -126,7 +125,7 @@ public class UserCache {
 
     public GameProfile getProfile(String s) {
         String s1 = s.toLowerCase(Locale.ROOT);
-        UserCache.UserCacheEntry usercache_usercacheentry = (UserCache.UserCacheEntry) this.c.get(s1);
+        UserCache.UserCacheEntry usercache_usercacheentry = this.c.get(s1);
 
         if (usercache_usercacheentry != null && (new Date()).getTime() >= usercache_usercacheentry.c.getTime()) {
             this.d.remove(usercache_usercacheentry.a().getId());
@@ -145,7 +144,7 @@ public class UserCache {
             gameprofile = a(this.f, s); // Spigot - use correct case for offline players
             if (gameprofile != null) {
                 this.a(gameprofile);
-                usercache_usercacheentry = (UserCache.UserCacheEntry) this.c.get(s1);
+                usercache_usercacheentry = this.c.get(s1);
             }
         }
 
@@ -156,17 +155,17 @@ public class UserCache {
     public String[] a() {
         ArrayList arraylist = Lists.newArrayList(this.c.keySet());
 
-        return (String[]) arraylist.toArray(new String[arraylist.size()]);
+        return (String[]) arraylist.toArray(new String[0]);
     }
 
     public GameProfile a(UUID uuid) {
-        UserCache.UserCacheEntry usercache_usercacheentry = (UserCache.UserCacheEntry) this.d.get(uuid);
+        UserCache.UserCacheEntry usercache_usercacheentry = this.d.get(uuid);
 
         return usercache_usercacheentry == null ? null : usercache_usercacheentry.a();
     }
 
     private UserCache.UserCacheEntry b(UUID uuid) {
-        UserCache.UserCacheEntry usercache_usercacheentry = (UserCache.UserCacheEntry) this.d.get(uuid);
+        UserCache.UserCacheEntry usercache_usercacheentry = this.d.get(uuid);
 
         if (usercache_usercacheentry != null) {
             GameProfile gameprofile = usercache_usercacheentry.a();
@@ -183,29 +182,26 @@ public class UserCache {
 
         try {
             bufferedreader = Files.newReader(this.g, Charsets.UTF_8);
-            List list = (List) this.b.fromJson(bufferedreader, UserCache.h);
+            List list = this.b.fromJson(bufferedreader, UserCache.h);
 
             this.c.clear();
             this.d.clear();
             this.e.clear();
-            Iterator iterator = Lists.reverse(list).iterator();
 
-            while (iterator.hasNext()) {
-                UserCache.UserCacheEntry usercache_usercacheentry = (UserCache.UserCacheEntry) iterator.next();
+            for (Object o : Lists.reverse(list)) {
+                UserCacheEntry usercache_usercacheentry = (UserCacheEntry) o;
 
                 if (usercache_usercacheentry != null) {
                     this.a(usercache_usercacheentry.a(), usercache_usercacheentry.b());
                 }
             }
         } catch (FileNotFoundException filenotfoundexception) {
-            ;
-        // Spigot Start
+            // Spigot Start
         } catch (com.google.gson.JsonSyntaxException ex) {
             JsonList.a.warn( "Usercache.json is corrupted or has bad formatting. Deleting it to prevent further issues." );
             this.g.delete();
         // Spigot End
-        } catch (JsonParseException jsonparseexception) {
-            ;
+        } catch (JsonParseException ignored) {
         } finally {
             IOUtils.closeQuietly(bufferedreader);
         }
@@ -222,8 +218,7 @@ public class UserCache {
             return;
         } catch (FileNotFoundException filenotfoundexception) {
             return;
-        } catch (IOException ioexception) {
-            ;
+        } catch (IOException ignored) {
         } finally {
             IOUtils.closeQuietly(bufferedwriter);
         }
@@ -233,11 +228,10 @@ public class UserCache {
     private List<UserCache.UserCacheEntry> a(int i) {
         ArrayList arraylist = Lists.newArrayList();
         ArrayList arraylist1 = Lists.newArrayList(Iterators.limit(this.e.iterator(), i));
-        Iterator iterator = arraylist1.iterator();
 
-        while (iterator.hasNext()) {
-            GameProfile gameprofile = (GameProfile) iterator.next();
-            UserCache.UserCacheEntry usercache_usercacheentry = this.b(gameprofile.getId());
+        for (Object o : arraylist1) {
+            GameProfile gameprofile = (GameProfile) o;
+            UserCacheEntry usercache_usercacheentry = this.b(gameprofile.getId());
 
             if (usercache_usercacheentry != null) {
                 arraylist.add(usercache_usercacheentry);
@@ -314,9 +308,7 @@ public class UserCache {
                             return null;
                         }
 
-                        UserCache.UserCacheEntry usercache_usercacheentry = UserCache.this.new UserCacheEntry(new GameProfile(uuid, s1), date, null);
-
-                        return usercache_usercacheentry;
+                        return UserCache.this.new UserCacheEntry(new GameProfile(uuid, s1), date, null);
                     } else {
                         return null;
                     }
@@ -329,7 +321,7 @@ public class UserCache {
         }
 
         public JsonElement serialize(UserCacheEntry object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - decompile error
-            return this.a((UserCache.UserCacheEntry) object, type, jsonserializationcontext);
+            return this.a(object, type, jsonserializationcontext);
         }
 
         public UserCacheEntry deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - decompile error
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index e67aa0423..b61a7a3bc 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -82,7 +82,7 @@ public class Village {
     }
 
     private boolean a(BlockPosition blockposition, BlockPosition blockposition1) {
-        if (!World.a((IBlockAccess) this.a, blockposition1.down())) {
+        if (!World.a(this.a, blockposition1.down())) {
             return false;
         } else {
             int i = blockposition1.getX() - blockposition.getX() / 2;
@@ -149,10 +149,8 @@ public class Village {
     public VillageDoor b(BlockPosition blockposition) {
         VillageDoor villagedoor = null;
         int i = Integer.MAX_VALUE;
-        Iterator iterator = this.b.iterator();
 
-        while (iterator.hasNext()) {
-            VillageDoor villagedoor1 = (VillageDoor) iterator.next();
+        for (VillageDoor villagedoor1 : this.b) {
             int j = villagedoor1.a(blockposition);
 
             if (j < i) {
@@ -167,10 +165,8 @@ public class Village {
     public VillageDoor c(BlockPosition blockposition) {
         VillageDoor villagedoor = null;
         int i = Integer.MAX_VALUE;
-        Iterator iterator = this.b.iterator();
 
-        while (iterator.hasNext()) {
-            VillageDoor villagedoor1 = (VillageDoor) iterator.next();
+        for (VillageDoor villagedoor1 : this.b) {
             int j = villagedoor1.a(blockposition);
 
             if (j > 256) {
@@ -240,8 +236,8 @@ public class Village {
         double d0 = Double.MAX_VALUE;
         Village.Aggressor village_aggressor = null;
 
-        for (int i = 0; i < this.k.size(); ++i) {
-            Village.Aggressor village_aggressor1 = (Village.Aggressor) this.k.get(i);
+        for (Aggressor aggressor : this.k) {
+            Aggressor village_aggressor1 = (Aggressor) aggressor;
             double d1 = village_aggressor1.a.h(entityliving);
 
             if (d1 <= d0) {
@@ -256,11 +252,8 @@ public class Village {
     public EntityHuman c(EntityLiving entityliving) {
         double d0 = Double.MAX_VALUE;
         EntityHuman entityhuman = null;
-        Iterator iterator = this.j.keySet().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : this.j.keySet()) {
             if (this.d(s)) {
                 EntityHuman entityhuman1 = this.a.a(s);
 
@@ -344,16 +337,16 @@ public class Village {
     }
 
     public int a(String s) {
-        Integer integer = (Integer) this.j.get(s);
+        Integer integer = this.j.get(s);
 
-        return integer != null ? integer.intValue() : 0;
+        return integer != null ? integer : 0;
     }
 
     public int a(String s, int i) {
         int j = this.a(s);
         int k = MathHelper.clamp(j + i, -30, 10);
 
-        this.j.put(s, Integer.valueOf(k));
+        this.j.put(s, k);
         return k;
     }
 
@@ -389,10 +382,10 @@ public class Village {
                 GameProfile gameprofile = usercache.a(UUID.fromString(nbttagcompound2.getString("UUID")));
 
                 if (gameprofile != null) {
-                    this.j.put(gameprofile.getName(), Integer.valueOf(nbttagcompound2.getInt("S")));
+                    this.j.put(gameprofile.getName(), nbttagcompound2.getInt("S"));
                 }
             } else {
-                this.j.put(nbttagcompound2.getString("Name"), Integer.valueOf(nbttagcompound2.getInt("S")));
+                this.j.put(nbttagcompound2.getString("Name"), nbttagcompound2.getInt("S"));
             }
         }
 
@@ -412,10 +405,8 @@ public class Village {
         nbttagcompound.setInt("ACY", this.c.getY());
         nbttagcompound.setInt("ACZ", this.c.getZ());
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator = this.b.iterator();
 
-        while (iterator.hasNext()) {
-            VillageDoor villagedoor = (VillageDoor) iterator.next();
+        for (VillageDoor villagedoor : this.b) {
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
             nbttagcompound1.setInt("X", villagedoor.d().getX());
@@ -429,17 +420,15 @@ public class Village {
 
         nbttagcompound.set("Doors", nbttaglist);
         NBTTagList nbttaglist1 = new NBTTagList();
-        Iterator iterator1 = this.j.keySet().iterator();
 
-        while (iterator1.hasNext()) {
-            String s = (String) iterator1.next();
+        for (String s : this.j.keySet()) {
             NBTTagCompound nbttagcompound2 = new NBTTagCompound();
             UserCache usercache = MinecraftServer.getServer().getUserCache();
             GameProfile gameprofile = usercache.getProfile(s);
 
             if (gameprofile != null) {
                 nbttagcompound2.setString("UUID", gameprofile.getId().toString());
-                nbttagcompound2.setInt("S", ((Integer) this.j.get(s)).intValue());
+                nbttagcompound2.setInt("S", (Integer) this.j.get(s));
                 nbttaglist1.add(nbttagcompound2);
             }
         }
@@ -456,11 +445,8 @@ public class Village {
     }
 
     public void b(int i) {
-        Iterator iterator = this.j.keySet().iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
 
+        for (String s : this.j.keySet()) {
             this.a(s, i);
         }
 
diff --git a/src/main/java/net/minecraft/server/VillageSiege.java b/src/main/java/net/minecraft/server/VillageSiege.java
index 42d6737af..49d49d8a0 100644
--- a/src/main/java/net/minecraft/server/VillageSiege.java
+++ b/src/main/java/net/minecraft/server/VillageSiege.java
@@ -64,10 +64,9 @@ public class VillageSiege {
 
     private boolean b() {
         List list = this.a.players;
-        Iterator iterator = list.iterator();
 
-        while (iterator.hasNext()) {
-            EntityHuman entityhuman = (EntityHuman) iterator.next();
+        for (Object o : list) {
+            EntityHuman entityhuman = (EntityHuman) o;
 
             if (!entityhuman.isSpectator()) {
                 this.f = this.a.ae().getClosestVillage(new BlockPosition(entityhuman), 1);
@@ -85,11 +84,8 @@ public class VillageSiege {
                             this.h = blockposition.getY();
                             this.i = blockposition.getZ() + (int) ((double) (MathHelper.sin(f1) * f) * 0.9D);
                             flag = false;
-                            Iterator iterator1 = this.a.ae().getVillages().iterator();
-
-                            while (iterator1.hasNext()) {
-                                Village village = (Village) iterator1.next();
 
+                            for (Village village : this.a.ae().getVillages()) {
                                 if (village != this.f && village.a(new BlockPosition(this.g, this.h, this.i))) {
                                     flag = true;
                                     break;
@@ -132,7 +128,7 @@ public class VillageSiege {
 
             try {
                 entityzombie = new EntityZombie(this.a);
-                entityzombie.prepare(this.a.E(new BlockPosition(entityzombie)), (GroupDataEntity) null);
+                entityzombie.prepare(this.a.E(new BlockPosition(entityzombie)), null);
                 entityzombie.setVillager(false);
             } catch (Exception exception) {
                 exception.printStackTrace();
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 8656e5aa8..6b1278758 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -104,9 +104,7 @@ public abstract class World implements IBlockAccess {
     public ArrayList<BlockState> capturedBlockStates = new ArrayList<BlockState>() {
         @Override
         public boolean add(BlockState blockState) {
-            Iterator<BlockState> blockStateIterator = this.iterator();
-            while (blockStateIterator.hasNext()) {
-                BlockState blockState1 = blockStateIterator.next();
+            for (BlockState blockState1 : this) {
                 if (blockState1.getLocation().equals(blockState.getLocation())) {
                     return false;
                 }
@@ -132,10 +130,10 @@ public abstract class World implements IBlockAccess {
     private org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
     public ExecutorService lightingExecutor = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("PaperSpigot - Lighting Thread").build()); // PaperSpigot - Asynchronous lighting updates
-    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<Explosion.CacheKey, Float>(); // PaperSpigot - Optimize explosions
+    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // PaperSpigot - Optimize explosions
 
     public static long chunkToKey(int x, int z) {
-        long k = ((((long) x) & 0xFFFF0000L) << 16) | ((((long) x) & 0x0000FFFFL) << 0);
+        long k = ((((long) x) & 0xFFFF0000L) << 16) | ((((long) x) & 0x0000FFFFL));
         k |= ((((long) z) & 0xFFFF0000L) << 32) | ((((long) z) & 0x0000FFFFL) << 16);
         return k;
     }
@@ -245,7 +243,7 @@ public abstract class World implements IBlockAccess {
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Coordinates of biome request");
 
                 crashreportsystemdetails.a("Location", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         return CrashReportSystemDetails.a(blockposition);
                     }
 
@@ -473,8 +471,8 @@ public abstract class World implements IBlockAccess {
     }
 
     public void notify(BlockPosition blockposition) {
-        for (int i = 0; i < this.u.size(); ++i) {
-            this.u.get(i).a(blockposition);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(blockposition);
         }
 
     }
@@ -514,8 +512,8 @@ public abstract class World implements IBlockAccess {
     }
 
     public void b(int i, int j, int k, int l, int i1, int j1) {
-        for (int k1 = 0; k1 < this.u.size(); ++k1) {
-            this.u.get(k1).a(i, j, k, l, i1, j1);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(i, j, k, l, i1, j1);
         }
 
     }
@@ -584,9 +582,9 @@ public abstract class World implements IBlockAccess {
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Block being updated");
 
                 crashreportsystemdetails.a("Source block type", new Callable() {
-                    public String a() throws Exception {
+                    public String a() {
                         try {
-                            return String.format("ID #%d (%s // %s)", Integer.valueOf(Block.getId(block)), block.a(), block.getClass().getCanonicalName());
+                            return String.format("ID #%d (%s // %s)", Block.getId(block), block.a(), block.getClass().getCanonicalName());
                         } catch (Throwable throwable) {
                             return "ID #" + Block.getId(block);
                         }
@@ -748,8 +746,8 @@ public abstract class World implements IBlockAccess {
     }
 
     public void n(BlockPosition blockposition) {
-        for (int i = 0; i < this.u.size(); ++i) {
-            this.u.get(i).b(blockposition);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.b(blockposition);
         }
 
     }
@@ -767,9 +765,7 @@ public abstract class World implements IBlockAccess {
         // CraftBukkit start - tree generation
         if (captureTreeGeneration && useCaptured) {
             // Spigot end
-            Iterator<BlockState> it = capturedBlockStates.iterator();
-            while (it.hasNext()) {
-                BlockState previous = it.next();
+            for (BlockState previous : capturedBlockStates) {
                 if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
                     return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
                 }
@@ -935,22 +931,22 @@ public abstract class World implements IBlockAccess {
     }
 
     public void makeSound(Entity entity, String s, float f, float f1) {
-        for (int i = 0; i < this.u.size(); ++i) {
-            this.u.get(i).a(s, entity.locX, entity.locY, entity.locZ, f, f1);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(s, entity.locX, entity.locY, entity.locZ, f, f1);
         }
 
     }
 
     public void a(EntityHuman entityhuman, String s, float f, float f1) {
-        for (int i = 0; i < this.u.size(); ++i) {
-            this.u.get(i).a(entityhuman, s, entityhuman.locX, entityhuman.locY, entityhuman.locZ, f, f1);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(entityhuman, s, entityhuman.locX, entityhuman.locY, entityhuman.locZ, f, f1);
         }
 
     }
 
     public void makeSound(double d0, double d1, double d2, String s, float f, float f1) {
-        for (int i = 0; i < this.u.size(); ++i) {
-            this.u.get(i).a(s, d0, d1, d2, f, f1);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(s, d0, d1, d2, f, f1);
         }
 
     }
@@ -959,8 +955,8 @@ public abstract class World implements IBlockAccess {
     }
 
     public void a(BlockPosition blockposition, String s) {
-        for (int i = 0; i < this.u.size(); ++i) {
-            this.u.get(i).a(s, blockposition);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(s, blockposition);
         }
 
     }
@@ -970,8 +966,8 @@ public abstract class World implements IBlockAccess {
     }
 
     private void a(int i, boolean flag, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
-        for (int j = 0; j < this.u.size(); ++j) {
-            this.u.get(j).a(i, flag, d0, d1, d2, d3, d4, d5, aint);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(i, flag, d0, d1, d2, d3, d4, d5, aint);
         }
 
     }
@@ -1061,16 +1057,16 @@ public abstract class World implements IBlockAccess {
     }
 
     protected void a(Entity entity) {
-        for (int i = 0; i < this.u.size(); ++i) {
-            this.u.get(i).a(entity);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(entity);
         }
 
         entity.valid = true; // CraftBukkit
     }
 
     protected void b(Entity entity) {
-        for (int i = 0; i < this.u.size(); ++i) {
-            this.u.get(i).b(entity);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.b(entity);
         }
 
         entity.valid = false; // CraftBukkit
@@ -1093,11 +1089,7 @@ public abstract class World implements IBlockAccess {
                 if (o instanceof WorldMap) {
                     WorldMap map = (WorldMap) o;
                     map.i.remove(entity);
-                    for (Iterator<WorldMap.WorldMapHumanTracker> iter = map.g.iterator(); iter.hasNext(); ) {
-                        if (iter.next().trackee == entity) {
-                            iter.remove();
-                        }
-                    }
+                    map.g.removeIf(worldMapHumanTracker -> worldMapHumanTracker.trackee == entity);
                 }
             }
             // Spigot end
@@ -1686,8 +1678,8 @@ public abstract class World implements IBlockAccess {
     public boolean a(AxisAlignedBB axisalignedbb, Entity entity) {
         List list = this.getEntities(null, axisalignedbb);
 
-        for (int i = 0; i < list.size(); ++i) {
-            Entity entity1 = (Entity) list.get(i);
+        for (Object value : list) {
+            Entity entity1 = (Entity) value;
 
             // PaperSpigot start - Allow block placement if the placer cannot see the vanished blocker
             if (entity instanceof EntityPlayer && entity1 instanceof EntityPlayer) {
@@ -1802,7 +1794,7 @@ public abstract class World implements IBlockAccess {
                         Block block = iblockdata.getBlock();
 
                         if (block.getMaterial() == material) {
-                            double d0 = (double) ((float) (l1 + 1) - BlockFluids.b(iblockdata.get(BlockFluids.LEVEL).intValue()));
+                            double d0 = (double) ((float) (l1 + 1) - BlockFluids.b(iblockdata.get(BlockFluids.LEVEL)));
 
                             if ((double) l >= d0) {
                                 flag = true;
@@ -1864,7 +1856,7 @@ public abstract class World implements IBlockAccess {
                     Block block = iblockdata.getBlock();
 
                     if (block.getMaterial() == material) {
-                        int j2 = iblockdata.get(BlockFluids.LEVEL).intValue();
+                        int j2 = iblockdata.get(BlockFluids.LEVEL);
                         double d0 = (double) (l1 + 1);
 
                         if (j2 < 8) {
@@ -2048,7 +2040,7 @@ public abstract class World implements IBlockAccess {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
         Block block = iblockdata.getBlock();
 
-        return block.getMaterial().k() && block.d() || (block instanceof BlockStairs ? iblockdata.get(BlockStairs.HALF) == BlockStairs.EnumHalf.TOP : (block instanceof BlockStepAbstract ? iblockdata.get(BlockStepAbstract.HALF) == BlockStepAbstract.EnumSlabHalf.TOP : (block instanceof BlockHopper || (block instanceof BlockSnow && iblockdata.get(BlockSnow.LAYERS).intValue() == 7))));
+        return block.getMaterial().k() && block.d() || (block instanceof BlockStairs ? iblockdata.get(BlockStairs.HALF) == BlockStairs.EnumHalf.TOP : (block instanceof BlockStepAbstract ? iblockdata.get(BlockStepAbstract.HALF) == BlockStepAbstract.EnumSlabHalf.TOP : (block instanceof BlockHopper || (block instanceof BlockSnow && iblockdata.get(BlockSnow.LAYERS) == 7))));
     }
 
     public boolean d(BlockPosition blockposition, boolean flag) {
@@ -2359,8 +2351,7 @@ public abstract class World implements IBlockAccess {
                 EnumDirection[] aenumdirection = EnumDirection.values();
                 int k = aenumdirection.length;
 
-                for (int l = 0; l < k; ++l) {
-                    EnumDirection enumdirection = aenumdirection[l];
+                for (EnumDirection enumdirection : aenumdirection) {
                     BlockPosition blockposition1 = blockposition.shift(enumdirection);
                     int i1 = this.b(enumskyblock, blockposition1) - j;
 
@@ -2428,8 +2419,7 @@ public abstract class World implements IBlockAccess {
                                 EnumDirection[] aenumdirection = EnumDirection.values();
                                 int i4 = aenumdirection.length;
 
-                                for (int j4 = 0; j4 < i4; ++j4) {
-                                    EnumDirection enumdirection = aenumdirection[j4];
+                                for (EnumDirection enumdirection : aenumdirection) {
                                     int k4 = i2 + enumdirection.getAdjacentX();
                                     int l4 = j2 + enumdirection.getAdjacentY();
                                     int i5 = k2 + enumdirection.getAdjacentZ();
@@ -2532,7 +2522,7 @@ public abstract class World implements IBlockAccess {
         chunk.pendingLightUpdates.incrementAndGet();
         chunk.lightUpdateTime = chunk.world.getTime();
 
-        final List<Chunk> neighbors = new ArrayList<Chunk>();
+        final List<Chunk> neighbors = new ArrayList<>();
         for (int cx = (x >> 4) - 1; cx <= (x >> 4) + 1; ++cx) {
             for (int cz = (z >> 4) - 1; cz <= (z >> 4) + 1; ++cz) {
                 if (cx != x >> 4 && cz != z >> 4) {
@@ -2550,11 +2540,8 @@ public abstract class World implements IBlockAccess {
             return this.c(enumskyblock, position, chunk, neighbors);
         }
 
-        lightingExecutor.submit(new Runnable() {
-            @Override
-            public void run() {
-                World.this.c(enumskyblock, position, chunk, neighbors);
-            }
+        lightingExecutor.submit(() -> {
+            World.this.c(enumskyblock, position, chunk, neighbors);
         });
         return true;
     }
@@ -2595,11 +2582,8 @@ public abstract class World implements IBlockAccess {
 
     public <T extends Entity> List<T> a(Class<? extends T> oclass, Predicate<? super T> predicate) {
         ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.entityList.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : this.entityList) {
             if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply((T) entity)) { // CraftBukkit - fix decompile error
                 arraylist.add(entity);
             }
@@ -2610,10 +2594,9 @@ public abstract class World implements IBlockAccess {
 
     public <T extends Entity> List<T> b(Class<? extends T> oclass, Predicate<? super T> predicate) {
         ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.players.iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
+        for (EntityHuman player : this.players) {
+            Entity entity = (Entity) player;
 
             if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply((T) entity)) { // CraftBukkit - fix decompile error
                 arraylist.add(entity);
@@ -2650,8 +2633,8 @@ public abstract class World implements IBlockAccess {
         Entity entity = null;
         double d0 = Double.MAX_VALUE;
 
-        for (int i = 0; i < list.size(); ++i) {
-            Entity entity1 = (Entity) list.get(i);
+        for (Object value : list) {
+            Entity entity1 = (Entity) value;
 
             if (entity1 != t0 && IEntitySelector.d.apply(entity1)) {
                 double d1 = t0.h(entity1);
@@ -2679,10 +2662,8 @@ public abstract class World implements IBlockAccess {
 
     public int a(Class<?> oclass) {
         int i = 0;
-        Iterator iterator = this.entityList.iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
+        for (Entity entity : this.entityList) {
             // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
             if (entity instanceof EntityInsentient) {
                 EntityInsentient entityinsentient = (EntityInsentient) entity;
@@ -2705,11 +2686,8 @@ public abstract class World implements IBlockAccess {
         org.spigotmc.AsyncCatcher.catchOp("entity world add"); // Spigot
         // CraftBukkit start
         // this.entityList.addAll(collection);
-        Iterator iterator = collection.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
 
+        for (Entity entity : collection) {
             if (entity == null) {
                 continue;
             }
@@ -2807,8 +2785,7 @@ public abstract class World implements IBlockAccess {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int j = aenumdirection.length;
 
-        for (int k = 0; k < j; ++k) {
-            EnumDirection enumdirection = aenumdirection[k];
+        for (EnumDirection enumdirection : aenumdirection) {
             int l = this.getBlockFacePower(blockposition.shift(enumdirection), enumdirection);
 
             if (l >= 15) {
@@ -2831,8 +2808,7 @@ public abstract class World implements IBlockAccess {
         double d4 = -1.0D;
         EntityHuman entityhuman = null;
 
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman1 = this.players.get(i);
+        for (EntityHuman entityhuman1 : this.players) {
             // CraftBukkit start - Fixed an NPE
             if (entityhuman1 == null || entityhuman1.dead) {
                 continue;
@@ -2853,9 +2829,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean isPlayerNearby(double d0, double d1, double d2, double d3) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman = this.players.get(i);
-
+        for (EntityHuman entityhuman : this.players) {
             if (IEntitySelector.d.apply(entityhuman)) {
                 double d4 = entityhuman.e(d0, d1, d2);
 
@@ -2877,8 +2851,7 @@ public abstract class World implements IBlockAccess {
         double d4 = -1.0D;
         EntityHuman entityhuman = null;
 
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman1 = this.players.get(i);
+        for (EntityHuman entityhuman1 : this.players) {
             // CraftBukkit start - Fixed an NPE
             if (entityhuman1 == null || entityhuman1.dead || !entityhuman1.affectsSpawning) {
                 continue;
@@ -2899,9 +2872,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean isPlayerNearbyWhoAffectsSpawning(double d0, double d1, double d2, double d3) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman = this.players.get(i);
-
+        for (EntityHuman entityhuman : this.players) {
             if (IEntitySelector.d.apply(entityhuman)) {
                 double d4 = entityhuman.e(d0, d1, d2);
 
@@ -2916,9 +2887,7 @@ public abstract class World implements IBlockAccess {
     // PaperSpigot end
 
     public EntityHuman a(String s) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman = this.players.get(i);
-
+        for (EntityHuman entityhuman : this.players) {
             if (s.equals(entityhuman.getName())) {
                 return entityhuman;
             }
@@ -2928,9 +2897,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public EntityHuman b(UUID uuid) {
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman = this.players.get(i);
-
+        for (EntityHuman entityhuman : this.players) {
             if (uuid.equals(entityhuman.getUniqueID())) {
                 return entityhuman;
             }
@@ -3066,8 +3033,8 @@ public abstract class World implements IBlockAccess {
     }
 
     public void a(int i, BlockPosition blockposition, int j) {
-        for (int k = 0; k < this.u.size(); ++k) {
-            this.u.get(k).a(i, blockposition, j);
+        for (IWorldAccess iWorldAccess : this.u) {
+            iWorldAccess.a(i, blockposition, j);
         }
 
     }
@@ -3078,8 +3045,8 @@ public abstract class World implements IBlockAccess {
 
     public void a(EntityHuman entityhuman, int i, BlockPosition blockposition, int j) {
         try {
-            for (int k = 0; k < this.u.size(); ++k) {
-                this.u.get(k).a(entityhuman, i, blockposition, j);
+            for (IWorldAccess iWorldAccess : this.u) {
+                iWorldAccess.a(entityhuman, i, blockposition, j);
             }
 
         } catch (Throwable throwable) {
@@ -3088,8 +3055,8 @@ public abstract class World implements IBlockAccess {
 
             crashreportsystemdetails.a("Block coordinates", CrashReportSystemDetails.a(blockposition));
             crashreportsystemdetails.a("Event source", entityhuman);
-            crashreportsystemdetails.a("Event type", Integer.valueOf(i));
-            crashreportsystemdetails.a("Event data", Integer.valueOf(j));
+            crashreportsystemdetails.a("Event type", i);
+            crashreportsystemdetails.a("Event data", j);
             throw new ReportedException(crashreport);
         }
     }
@@ -3122,7 +3089,7 @@ public abstract class World implements IBlockAccess {
                 return World.this.players.size() + " total; " + World.this.players.toString();
             }
 
-            public Object call() throws Exception {
+            public Object call() {
                 return this.a();
             }
         });
@@ -3131,7 +3098,7 @@ public abstract class World implements IBlockAccess {
                 return World.this.chunkProvider.getName();
             }
 
-            public Object call() throws Exception {
+            public Object call() {
                 return this.a();
             }
         });
@@ -3146,9 +3113,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void c(int i, BlockPosition blockposition, int j) {
-        for (int k = 0; k < this.u.size(); ++k) {
-            IWorldAccess iworldaccess = this.u.get(k);
-
+        for (IWorldAccess iworldaccess : this.u) {
             iworldaccess.b(i, blockposition, j);
         }
 
@@ -3167,10 +3132,8 @@ public abstract class World implements IBlockAccess {
     }
 
     public void updateAdjacentComparators(BlockPosition blockposition, Block block) {
-        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-        while (iterator.hasNext()) {
-            EnumDirection enumdirection = (EnumDirection) iterator.next();
+        for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
             if (this.isLoaded(blockposition1)) {
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index 7ea40468e..3080778c0 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -122,11 +122,8 @@ public class WorldBorder {
     public void setCenter(double d0, double d1) {
         this.b = d0;
         this.c = d1;
-        Iterator iterator = this.k().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.k()) {
             iworldborderlistener.a(this, d0, d1);
         }
 
@@ -159,11 +156,8 @@ public class WorldBorder {
         this.e = d0;
         this.f = System.currentTimeMillis();
         this.g = this.f;
-        Iterator iterator = this.k().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.k()) {
             iworldborderlistener.a(this, d0);
         }
 
@@ -174,11 +168,8 @@ public class WorldBorder {
         this.e = d1;
         this.g = System.currentTimeMillis();
         this.f = this.g + i;
-        Iterator iterator = this.k().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.k()) {
             iworldborderlistener.a(this, d0, d1, i);
         }
 
@@ -207,11 +198,8 @@ public class WorldBorder {
 
     public void setDamageBuffer(double d0) {
         this.j = d0;
-        Iterator iterator = this.k().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.k()) {
             iworldborderlistener.c(this, d0);
         }
 
@@ -223,11 +211,8 @@ public class WorldBorder {
 
     public void setDamageAmount(double d0) {
         this.i = d0;
-        Iterator iterator = this.k().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.k()) {
             iworldborderlistener.b(this, d0);
         }
 
@@ -239,11 +224,8 @@ public class WorldBorder {
 
     public void setWarningTime(int i) {
         this.k = i;
-        Iterator iterator = this.k().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.k()) {
             iworldborderlistener.a(this, i);
         }
 
@@ -255,11 +237,8 @@ public class WorldBorder {
 
     public void setWarningDistance(int i) {
         this.l = i;
-        Iterator iterator = this.k().iterator();
-
-        while (iterator.hasNext()) {
-            IWorldBorderListener iworldborderlistener = (IWorldBorderListener) iterator.next();
 
+        for (IWorldBorderListener iworldborderlistener : this.k()) {
             iworldborderlistener.b(this, i);
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldData.java b/src/main/java/net/minecraft/server/WorldData.java
index 3a7b22b92..4ce173ed7 100644
--- a/src/main/java/net/minecraft/server/WorldData.java
+++ b/src/main/java/net/minecraft/server/WorldData.java
@@ -604,7 +604,7 @@ public class WorldData {
 
     public void a(CrashReportSystemDetails crashreportsystemdetails) {
         crashreportsystemdetails.a("Level seed", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return String.valueOf(WorldData.this.getSeed());
             }
 
@@ -613,8 +613,8 @@ public class WorldData {
             }
         });
         crashreportsystemdetails.a("Level generator", new Callable() {
-            public String a() throws Exception {
-                return String.format("ID %02d - %s, ver %d. Features enabled: %b", new Object[] { Integer.valueOf(WorldData.this.c.g()), WorldData.this.c.name(), Integer.valueOf(WorldData.this.c.getVersion()), Boolean.valueOf(WorldData.this.v)});
+            public String a() {
+                return String.format("ID %02d - %s, ver %d. Features enabled: %b", WorldData.this.c.g(), WorldData.this.c.name(), WorldData.this.c.getVersion(), WorldData.this.v);
             }
 
             public Object call() throws Exception {
@@ -622,7 +622,7 @@ public class WorldData {
             }
         });
         crashreportsystemdetails.a("Level generator options", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return WorldData.this.d;
             }
 
@@ -631,7 +631,7 @@ public class WorldData {
             }
         });
         crashreportsystemdetails.a("Level spawn location", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return CrashReportSystemDetails.a((double) WorldData.this.e, (double) WorldData.this.f, (double) WorldData.this.g);
             }
 
@@ -640,8 +640,8 @@ public class WorldData {
             }
         });
         crashreportsystemdetails.a("Level time", new Callable() {
-            public String a() throws Exception {
-                return String.format("%d game time, %d day time", new Object[] { Long.valueOf(WorldData.this.h), Long.valueOf(WorldData.this.i)});
+            public String a() {
+                return String.format("%d game time, %d day time", WorldData.this.h, WorldData.this.i);
             }
 
             public Object call() throws Exception {
@@ -649,7 +649,7 @@ public class WorldData {
             }
         });
         crashreportsystemdetails.a("Level dimension", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 return String.valueOf(WorldData.this.m);
             }
 
@@ -658,7 +658,7 @@ public class WorldData {
             }
         });
         crashreportsystemdetails.a("Level storage version", new Callable() {
-            public String a() throws Exception {
+            public String a() {
                 String s = "Unknown?";
 
                 try {
@@ -670,11 +670,10 @@ public class WorldData {
                     case 19133:
                         s = "Anvil";
                     }
-                } catch (Throwable throwable) {
-                    ;
+                } catch (Throwable ignored) {
                 }
 
-                return String.format("0x%05X - %s", new Object[] { Integer.valueOf(WorldData.this.o), s});
+                return String.format("0x%05X - %s", WorldData.this.o, s);
             }
 
             public Object call() throws Exception {
@@ -682,8 +681,8 @@ public class WorldData {
             }
         });
         crashreportsystemdetails.a("Level weather", new Callable() {
-            public String a() throws Exception {
-                return String.format("Rain time: %d (now: %b), thunder time: %d (now: %b)", new Object[] { Integer.valueOf(WorldData.this.r), Boolean.valueOf(WorldData.this.q), Integer.valueOf(WorldData.this.t), Boolean.valueOf(WorldData.this.s)});
+            public String a() {
+                return String.format("Rain time: %d (now: %b), thunder time: %d (now: %b)", WorldData.this.r, WorldData.this.q, WorldData.this.t, WorldData.this.s);
             }
 
             public Object call() throws Exception {
@@ -691,8 +690,8 @@ public class WorldData {
             }
         });
         crashreportsystemdetails.a("Level game mode", new Callable() {
-            public String a() throws Exception {
-                return String.format("Game mode: %s (ID %d). Hardcore: %b. Cheats: %b", new Object[] { WorldData.this.u.b(), Integer.valueOf(WorldData.this.u.getId()), Boolean.valueOf(WorldData.this.w), Boolean.valueOf(WorldData.this.x)});
+            public String a() {
+                return String.format("Game mode: %s (ID %d). Hardcore: %b. Cheats: %b", WorldData.this.u.b(), WorldData.this.u.getId(), WorldData.this.w, WorldData.this.x);
             }
 
             public Object call() throws Exception {
diff --git a/src/main/java/net/minecraft/server/WorldGenForestTree.java b/src/main/java/net/minecraft/server/WorldGenForestTree.java
index ffbc47d6d..882bf99ca 100644
--- a/src/main/java/net/minecraft/server/WorldGenForestTree.java
+++ b/src/main/java/net/minecraft/server/WorldGenForestTree.java
@@ -5,7 +5,7 @@ import java.util.Random;
 public class WorldGenForestTree extends WorldGenTreeAbstract {
 
     private static final IBlockData a = Blocks.LOG2.getBlockData().set(BlockLog2.VARIANT, BlockWood.EnumLogVariant.DARK_OAK);
-    private static final IBlockData b = Blocks.LEAVES2.getBlockData().set(BlockLeaves2.VARIANT, BlockWood.EnumLogVariant.DARK_OAK).set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false));
+    private static final IBlockData b = Blocks.LEAVES2.getBlockData().set(BlockLeaves2.VARIANT, BlockWood.EnumLogVariant.DARK_OAK).set(BlockLeaves.CHECK_DECAY, Boolean.FALSE);
 
     public WorldGenForestTree(boolean flag) {
         super(flag);
diff --git a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
index 171be82cc..c59ee4a10 100644
--- a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
+++ b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
@@ -10,7 +10,7 @@ import java.util.Map.Entry;
 
 public class WorldGenLargeFeature extends StructureGenerator {
 
-    private static final List<BiomeBase> d = Arrays.asList(new BiomeBase[] { BiomeBase.DESERT, BiomeBase.DESERT_HILLS, BiomeBase.JUNGLE, BiomeBase.JUNGLE_HILLS, BiomeBase.SWAMPLAND});
+    private static final List<BiomeBase> d = Arrays.asList(BiomeBase.DESERT, BiomeBase.DESERT_HILLS, BiomeBase.JUNGLE, BiomeBase.JUNGLE_HILLS, BiomeBase.SWAMPLAND);
     private List<BiomeBase.BiomeMeta> f;
     private int g;
     private int h;
@@ -24,12 +24,11 @@ public class WorldGenLargeFeature extends StructureGenerator {
 
     public WorldGenLargeFeature(Map<String, String> map) {
         this();
-        Iterator iterator = map.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
+        for (Entry<String, String> stringStringEntry : map.entrySet()) {
+            Entry entry = (Entry) stringStringEntry;
 
-            if (((String) entry.getKey()).equals("distance")) {
+            if (entry.getKey().equals("distance")) {
                 this.g = MathHelper.a((String) entry.getValue(), this.g, this.h + 1);
             }
         }
@@ -67,11 +66,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
                 return false;
             }
 
-            Iterator iterator = WorldGenLargeFeature.d.iterator();
-
-            while (iterator.hasNext()) {
-                BiomeBase biomebase1 = (BiomeBase) iterator.next();
-
+            for (BiomeBase biomebase1 : WorldGenLargeFeature.d) {
                 if (biomebase == biomebase1) {
                     return true;
                 }
@@ -89,7 +84,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
         StructureStart structurestart = this.c(blockposition);
 
         if (structurestart != null && structurestart instanceof WorldGenLargeFeature.WorldGenLargeFeatureStart && !structurestart.a.isEmpty()) {
-            StructurePiece structurepiece = (StructurePiece) structurestart.a.getFirst();
+            StructurePiece structurepiece = structurestart.a.getFirst();
 
             return structurepiece instanceof WorldGenRegistration.WorldGenWitchHut;
         } else {
diff --git a/src/main/java/net/minecraft/server/WorldGenRegistration.java b/src/main/java/net/minecraft/server/WorldGenRegistration.java
index 12e4b10e3..6e4dfb585 100644
--- a/src/main/java/net/minecraft/server/WorldGenRegistration.java
+++ b/src/main/java/net/minecraft/server/WorldGenRegistration.java
@@ -20,14 +20,12 @@ public class WorldGenRegistration {
         static {
             try {
                 WorldGenRegistration.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 WorldGenRegistration.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
@@ -102,12 +100,12 @@ public class WorldGenRegistration {
                     j1 = this.d(2);
                     int k1 = this.b(2, 5);
 
-                    if (structureboundingbox.b((BaseBlockPosition) (new BlockPosition(i1, j1, k1)))) {
+                    if (structureboundingbox.b(new BlockPosition(i1, j1, k1))) {
                         this.e = true;
                         EntityWitch entitywitch = new EntityWitch(world);
 
                         entitywitch.setPositionRotation((double) i1 + 0.5D, (double) j1, (double) k1 + 0.5D, 0.0F, 0.0F);
-                        entitywitch.prepare(world.E(new BlockPosition(i1, j1, k1)), (GroupDataEntity) null);
+                        entitywitch.prepare(world.E(new BlockPosition(i1, j1, k1)), null);
                         world.addEntity(entitywitch, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                     }
                 }
@@ -123,9 +121,9 @@ public class WorldGenRegistration {
         private boolean f;
         private boolean g;
         private boolean h;
-        private static final List<StructurePieceTreasure> i = Lists.newArrayList(new StructurePieceTreasure[] { new StructurePieceTreasure(Items.DIAMOND, 0, 1, 3, 3), new StructurePieceTreasure(Items.IRON_INGOT, 0, 1, 5, 10), new StructurePieceTreasure(Items.GOLD_INGOT, 0, 2, 7, 15), new StructurePieceTreasure(Items.EMERALD, 0, 1, 3, 2), new StructurePieceTreasure(Items.BONE, 0, 4, 6, 20), new StructurePieceTreasure(Items.ROTTEN_FLESH, 0, 3, 7, 16), new StructurePieceTreasure(Items.SADDLE, 0, 1, 1, 3), new StructurePieceTreasure(Items.IRON_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.GOLDEN_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.DIAMOND_HORSE_ARMOR, 0, 1, 1, 1)});
-        private static final List<StructurePieceTreasure> j = Lists.newArrayList(new StructurePieceTreasure[] { new StructurePieceTreasure(Items.ARROW, 0, 2, 7, 30)});
-        private static WorldGenRegistration.WorldGenJungleTemple.WorldGenJungleTemple$WorldGenJungleTemplePiece k = new WorldGenRegistration.WorldGenJungleTemple.WorldGenJungleTemple$WorldGenJungleTemplePiece((WorldGenRegistration.SyntheticClass_1) null);
+        private static final List<StructurePieceTreasure> i = Lists.newArrayList(new StructurePieceTreasure(Items.DIAMOND, 0, 1, 3, 3), new StructurePieceTreasure(Items.IRON_INGOT, 0, 1, 5, 10), new StructurePieceTreasure(Items.GOLD_INGOT, 0, 2, 7, 15), new StructurePieceTreasure(Items.EMERALD, 0, 1, 3, 2), new StructurePieceTreasure(Items.BONE, 0, 4, 6, 20), new StructurePieceTreasure(Items.ROTTEN_FLESH, 0, 3, 7, 16), new StructurePieceTreasure(Items.SADDLE, 0, 1, 1, 3), new StructurePieceTreasure(Items.IRON_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.GOLDEN_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.DIAMOND_HORSE_ARMOR, 0, 1, 1, 1));
+        private static final List<StructurePieceTreasure> j = Lists.newArrayList(new StructurePieceTreasure(Items.ARROW, 0, 2, 7, 30));
+        private static WorldGenRegistration.WorldGenJungleTemple.WorldGenJungleTemple$WorldGenJungleTemplePiece k = new WorldGenRegistration.WorldGenJungleTemple.WorldGenJungleTemple$WorldGenJungleTemplePiece(null);
 
         public WorldGenJungleTemple() {}
 
@@ -257,10 +255,10 @@ public class WorldGenRegistration {
                 this.a(world, structureboundingbox, 7, -2, 1, 9, -2, 1, false, random, WorldGenRegistration.WorldGenJungleTemple.k);
                 this.a(world, structureboundingbox, 6, -3, 1, 6, -3, 1, false, random, WorldGenRegistration.WorldGenJungleTemple.k);
                 this.a(world, structureboundingbox, 6, -1, 1, 6, -1, 1, false, random, WorldGenRegistration.WorldGenJungleTemple.k);
-                this.a(world, Blocks.TRIPWIRE_HOOK.fromLegacyData(this.a(Blocks.TRIPWIRE_HOOK, EnumDirection.EAST.b())).set(BlockTripwireHook.ATTACHED, Boolean.valueOf(true)), 1, -3, 8, structureboundingbox);
-                this.a(world, Blocks.TRIPWIRE_HOOK.fromLegacyData(this.a(Blocks.TRIPWIRE_HOOK, EnumDirection.WEST.b())).set(BlockTripwireHook.ATTACHED, Boolean.valueOf(true)), 4, -3, 8, structureboundingbox);
-                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.valueOf(true)), 2, -3, 8, structureboundingbox);
-                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.valueOf(true)), 3, -3, 8, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE_HOOK.fromLegacyData(this.a(Blocks.TRIPWIRE_HOOK, EnumDirection.EAST.b())).set(BlockTripwireHook.ATTACHED, Boolean.TRUE), 1, -3, 8, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE_HOOK.fromLegacyData(this.a(Blocks.TRIPWIRE_HOOK, EnumDirection.WEST.b())).set(BlockTripwireHook.ATTACHED, Boolean.TRUE), 4, -3, 8, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.TRUE), 2, -3, 8, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.TRUE), 3, -3, 8, structureboundingbox);
                 this.a(world, Blocks.REDSTONE_WIRE.getBlockData(), 5, -3, 7, structureboundingbox);
                 this.a(world, Blocks.REDSTONE_WIRE.getBlockData(), 5, -3, 6, structureboundingbox);
                 this.a(world, Blocks.REDSTONE_WIRE.getBlockData(), 5, -3, 5, structureboundingbox);
@@ -275,11 +273,11 @@ public class WorldGenRegistration {
                 }
 
                 this.a(world, Blocks.VINE.fromLegacyData(15), 3, -2, 2, structureboundingbox);
-                this.a(world, Blocks.TRIPWIRE_HOOK.fromLegacyData(this.a(Blocks.TRIPWIRE_HOOK, EnumDirection.NORTH.b())).set(BlockTripwireHook.ATTACHED, Boolean.valueOf(true)), 7, -3, 1, structureboundingbox);
-                this.a(world, Blocks.TRIPWIRE_HOOK.fromLegacyData(this.a(Blocks.TRIPWIRE_HOOK, EnumDirection.SOUTH.b())).set(BlockTripwireHook.ATTACHED, Boolean.valueOf(true)), 7, -3, 5, structureboundingbox);
-                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.valueOf(true)), 7, -3, 2, structureboundingbox);
-                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.valueOf(true)), 7, -3, 3, structureboundingbox);
-                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.valueOf(true)), 7, -3, 4, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE_HOOK.fromLegacyData(this.a(Blocks.TRIPWIRE_HOOK, EnumDirection.NORTH.b())).set(BlockTripwireHook.ATTACHED, Boolean.TRUE), 7, -3, 1, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE_HOOK.fromLegacyData(this.a(Blocks.TRIPWIRE_HOOK, EnumDirection.SOUTH.b())).set(BlockTripwireHook.ATTACHED, Boolean.TRUE), 7, -3, 5, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.TRUE), 7, -3, 2, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.TRUE), 7, -3, 3, structureboundingbox);
+                this.a(world, Blocks.TRIPWIRE.getBlockData().set(BlockTripwire.ATTACHED, Boolean.TRUE), 7, -3, 4, structureboundingbox);
                 this.a(world, Blocks.REDSTONE_WIRE.getBlockData(), 8, -3, 6, structureboundingbox);
                 this.a(world, Blocks.REDSTONE_WIRE.getBlockData(), 9, -3, 6, structureboundingbox);
                 this.a(world, Blocks.REDSTONE_WIRE.getBlockData(), 9, -3, 5, structureboundingbox);
@@ -292,7 +290,7 @@ public class WorldGenRegistration {
                 this.a(world, Blocks.VINE.fromLegacyData(15), 8, -1, 3, structureboundingbox);
                 this.a(world, Blocks.VINE.fromLegacyData(15), 8, -2, 3, structureboundingbox);
                 if (!this.e) {
-                    this.e = this.a(world, structureboundingbox, random, 8, -3, 3, StructurePieceTreasure.a(WorldGenRegistration.WorldGenJungleTemple.i, new StructurePieceTreasure[] { Items.ENCHANTED_BOOK.b(random)}), 2 + random.nextInt(5));
+                    this.e = this.a(world, structureboundingbox, random, 8, -3, 3, StructurePieceTreasure.a(WorldGenRegistration.WorldGenJungleTemple.i, Items.ENCHANTED_BOOK.b(random)), 2 + random.nextInt(5));
                 }
 
                 this.a(world, Blocks.MOSSY_COBBLESTONE.getBlockData(), 9, -3, 2, structureboundingbox);
@@ -323,7 +321,7 @@ public class WorldGenRegistration {
                 this.a(world, Blocks.STICKY_PISTON.fromLegacyData(this.a(Blocks.STICKY_PISTON, EnumDirection.WEST.a())), 10, -1, 8, structureboundingbox);
                 this.a(world, Blocks.UNPOWERED_REPEATER.fromLegacyData(this.a(Blocks.UNPOWERED_REPEATER, EnumDirection.NORTH.b())), 10, -2, 10, structureboundingbox);
                 if (!this.f) {
-                    this.f = this.a(world, structureboundingbox, random, 9, -3, 10, StructurePieceTreasure.a(WorldGenRegistration.WorldGenJungleTemple.i, new StructurePieceTreasure[] { Items.ENCHANTED_BOOK.b(random)}), 2 + random.nextInt(5));
+                    this.f = this.a(world, structureboundingbox, random, 9, -3, 10, StructurePieceTreasure.a(WorldGenRegistration.WorldGenJungleTemple.i, Items.ENCHANTED_BOOK.b(random)), 2 + random.nextInt(5));
                 }
 
                 return true;
@@ -352,7 +350,7 @@ public class WorldGenRegistration {
     public static class WorldGenPyramidPiece extends WorldGenRegistration.WorldGenScatteredPiece {
 
         private boolean[] e = new boolean[4];
-        private static final List<StructurePieceTreasure> f = Lists.newArrayList(new StructurePieceTreasure[] { new StructurePieceTreasure(Items.DIAMOND, 0, 1, 3, 3), new StructurePieceTreasure(Items.IRON_INGOT, 0, 1, 5, 10), new StructurePieceTreasure(Items.GOLD_INGOT, 0, 2, 7, 15), new StructurePieceTreasure(Items.EMERALD, 0, 1, 3, 2), new StructurePieceTreasure(Items.BONE, 0, 4, 6, 20), new StructurePieceTreasure(Items.ROTTEN_FLESH, 0, 3, 7, 16), new StructurePieceTreasure(Items.SADDLE, 0, 1, 1, 3), new StructurePieceTreasure(Items.IRON_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.GOLDEN_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.DIAMOND_HORSE_ARMOR, 0, 1, 1, 1)});
+        private static final List<StructurePieceTreasure> f = Lists.newArrayList(new StructurePieceTreasure(Items.DIAMOND, 0, 1, 3, 3), new StructurePieceTreasure(Items.IRON_INGOT, 0, 1, 5, 10), new StructurePieceTreasure(Items.GOLD_INGOT, 0, 2, 7, 15), new StructurePieceTreasure(Items.EMERALD, 0, 1, 3, 2), new StructurePieceTreasure(Items.BONE, 0, 4, 6, 20), new StructurePieceTreasure(Items.ROTTEN_FLESH, 0, 3, 7, 16), new StructurePieceTreasure(Items.SADDLE, 0, 1, 1, 3), new StructurePieceTreasure(Items.IRON_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.GOLDEN_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.DIAMOND_HORSE_ARMOR, 0, 1, 1, 1));
 
         public WorldGenPyramidPiece() {}
 
@@ -565,16 +563,13 @@ public class WorldGenRegistration {
             this.a(world, Blocks.AIR.getBlockData(), 10, -10, 12, structureboundingbox);
             this.a(world, Blocks.SANDSTONE.fromLegacyData(BlockSandStone.EnumSandstoneVariant.CHISELED.a()), 10, -10, 13, structureboundingbox);
             this.a(world, Blocks.SANDSTONE.fromLegacyData(BlockSandStone.EnumSandstoneVariant.SMOOTH.a()), 10, -11, 13, structureboundingbox);
-            Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
-
-            while (iterator.hasNext()) {
-                EnumDirection enumdirection = (EnumDirection) iterator.next();
 
+            for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
                 if (!this.e[enumdirection.b()]) {
                     int l1 = enumdirection.getAdjacentX() * 2;
                     int i2 = enumdirection.getAdjacentZ() * 2;
 
-                    this.e[enumdirection.b()] = this.a(world, structureboundingbox, random, 10 + l1, -11, 10 + i2, StructurePieceTreasure.a(WorldGenRegistration.WorldGenPyramidPiece.f, new StructurePieceTreasure[] { Items.ENCHANTED_BOOK.b(random)}), 2 + random.nextInt(5));
+                    this.e[enumdirection.b()] = this.a(world, structureboundingbox, random, 10 + l1, -11, 10 + i2, StructurePieceTreasure.a(WorldGenPyramidPiece.f, Items.ENCHANTED_BOOK.b(random)), 2 + random.nextInt(5));
                 }
             }
 
@@ -634,7 +629,7 @@ public class WorldGenRegistration {
                 for (int l = this.l.c; l <= this.l.f; ++l) {
                     for (int i1 = this.l.a; i1 <= this.l.d; ++i1) {
                         blockposition_mutableblockposition.c(i1, 64, l);
-                        if (structureboundingbox.b((BaseBlockPosition) blockposition_mutableblockposition)) {
+                        if (structureboundingbox.b(blockposition_mutableblockposition)) {
                             j += Math.max(world.r(blockposition_mutableblockposition).getY(), world.worldProvider.getSeaLevel());
                             ++k;
                         }
diff --git a/src/main/java/net/minecraft/server/WorldGenVillage.java b/src/main/java/net/minecraft/server/WorldGenVillage.java
index 6648a70d2..1af540d52 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillage.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillage.java
@@ -9,7 +9,7 @@ import java.util.Map.Entry;
 
 public class WorldGenVillage extends StructureGenerator {
 
-    public static final List<BiomeBase> d = Arrays.asList(new BiomeBase[] { BiomeBase.PLAINS, BiomeBase.DESERT, BiomeBase.SAVANNA});
+    public static final List<BiomeBase> d = Arrays.asList(BiomeBase.PLAINS, BiomeBase.DESERT, BiomeBase.SAVANNA);
     private int f;
     private int g;
     private int h;
@@ -21,14 +21,13 @@ public class WorldGenVillage extends StructureGenerator {
 
     public WorldGenVillage(Map<String, String> map) {
         this();
-        Iterator iterator = map.entrySet().iterator();
 
-        while (iterator.hasNext()) {
-            Entry entry = (Entry) iterator.next();
+        for (Entry<String, String> stringStringEntry : map.entrySet()) {
+            Entry entry = (Entry) stringStringEntry;
 
-            if (((String) entry.getKey()).equals("size")) {
+            if (entry.getKey().equals("size")) {
                 this.f = MathHelper.a((String) entry.getValue(), this.f, 0);
-            } else if (((String) entry.getKey()).equals("distance")) {
+            } else if (entry.getKey().equals("distance")) {
                 this.g = MathHelper.a((String) entry.getValue(), this.g, this.h + 1);
             }
         }
@@ -62,9 +61,7 @@ public class WorldGenVillage extends StructureGenerator {
         if (k == i1 && l == j1) {
             boolean flag = this.c.getWorldChunkManager().a(k * 16 + 8, l * 16 + 8, 0, WorldGenVillage.d);
 
-            if (flag) {
-                return true;
-            }
+            return flag;
         }
 
         return false;
@@ -86,7 +83,7 @@ public class WorldGenVillage extends StructureGenerator {
             WorldGenVillagePieces.WorldGenVillageStartPiece worldgenvillagepieces_worldgenvillagestartpiece = new WorldGenVillagePieces.WorldGenVillageStartPiece(world.getWorldChunkManager(), 0, random, (i << 4) + 2, (j << 4) + 2, list, k);
 
             this.a.add(worldgenvillagepieces_worldgenvillagestartpiece);
-            worldgenvillagepieces_worldgenvillagestartpiece.a((StructurePiece) worldgenvillagepieces_worldgenvillagestartpiece, (List) this.a, random);
+            worldgenvillagepieces_worldgenvillagestartpiece.a(worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
             List list1 = worldgenvillagepieces_worldgenvillagestartpiece.g;
             List list2 = worldgenvillagepieces_worldgenvillagestartpiece.f;
 
@@ -98,21 +95,18 @@ public class WorldGenVillage extends StructureGenerator {
                 if (list1.isEmpty()) {
                     l = random.nextInt(list2.size());
                     structurepiece = (StructurePiece) list2.remove(l);
-                    structurepiece.a((StructurePiece) worldgenvillagepieces_worldgenvillagestartpiece, (List) this.a, random);
+                    structurepiece.a(worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
                 } else {
                     l = random.nextInt(list1.size());
                     structurepiece = (StructurePiece) list1.remove(l);
-                    structurepiece.a((StructurePiece) worldgenvillagepieces_worldgenvillagestartpiece, (List) this.a, random);
+                    structurepiece.a(worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
                 }
             }
 
             this.c();
             l = 0;
-            Iterator iterator = this.a.iterator();
-
-            while (iterator.hasNext()) {
-                StructurePiece structurepiece1 = (StructurePiece) iterator.next();
 
+            for (StructurePiece structurepiece1 : this.a) {
                 if (!(structurepiece1 instanceof WorldGenVillagePieces.WorldGenVillageRoadPiece)) {
                     ++l;
                 }
diff --git a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
index 3ed55f49d..cdcfbd009 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
@@ -36,13 +36,8 @@ public class WorldGenVillagePieces {
         arraylist.add(new WorldGenVillagePieces.WorldGenVillagePieceWeight(WorldGenVillagePieces.WorldGenVillageFarm.class, 3, MathHelper.nextInt(random, 2 + i, 4 + i * 2)));
         arraylist.add(new WorldGenVillagePieces.WorldGenVillagePieceWeight(WorldGenVillagePieces.WorldGenVillageBlacksmith.class, 15, MathHelper.nextInt(random, 0, 1 + i)));
         arraylist.add(new WorldGenVillagePieces.WorldGenVillagePieceWeight(WorldGenVillagePieces.WorldGenVillageHouse2.class, 8, MathHelper.nextInt(random, 0 + i, 3 + i * 2)));
-        Iterator iterator = arraylist.iterator();
 
-        while (iterator.hasNext()) {
-            if (((WorldGenVillagePieces.WorldGenVillagePieceWeight) iterator.next()).d == 0) {
-                iterator.remove();
-            }
-        }
+        arraylist.removeIf(o -> ((WorldGenVillagePieceWeight) o).d == 0);
 
         return arraylist;
     }
@@ -101,18 +96,15 @@ public class WorldGenVillagePieces {
             while (j1 < 5) {
                 ++j1;
                 int k1 = random.nextInt(i1);
-                Iterator iterator = worldgenvillagepieces_worldgenvillagestartpiece.e.iterator();
-
-                while (iterator.hasNext()) {
-                    WorldGenVillagePieces.WorldGenVillagePieceWeight worldgenvillagepieces_worldgenvillagepieceweight = (WorldGenVillagePieces.WorldGenVillagePieceWeight) iterator.next();
 
+                for (WorldGenVillagePieceWeight worldgenvillagepieces_worldgenvillagepieceweight : worldgenvillagepieces_worldgenvillagestartpiece.e) {
                     k1 -= worldgenvillagepieces_worldgenvillagepieceweight.b;
                     if (k1 < 0) {
                         if (!worldgenvillagepieces_worldgenvillagepieceweight.a(l) || worldgenvillagepieces_worldgenvillagepieceweight == worldgenvillagepieces_worldgenvillagestartpiece.d && worldgenvillagepieces_worldgenvillagestartpiece.e.size() > 1) {
                             break;
                         }
 
-                        WorldGenVillagePieces.WorldGenVillagePiece worldgenvillagepieces_worldgenvillagepiece = a(worldgenvillagepieces_worldgenvillagestartpiece, worldgenvillagepieces_worldgenvillagepieceweight, list, random, i, j, k, enumdirection, l);
+                        WorldGenVillagePiece worldgenvillagepieces_worldgenvillagepiece = a(worldgenvillagepieces_worldgenvillagestartpiece, worldgenvillagepieces_worldgenvillagepieceweight, list, random, i, j, k, enumdirection, l);
 
                         if (worldgenvillagepieces_worldgenvillagepiece != null) {
                             ++worldgenvillagepieces_worldgenvillagepieceweight.c;
@@ -197,26 +189,22 @@ public class WorldGenVillagePieces {
         static {
             try {
                 WorldGenVillagePieces.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 WorldGenVillagePieces.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 WorldGenVillagePieces.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
             try {
                 WorldGenVillagePieces.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
+            } catch (NoSuchFieldError ignored) {
             }
 
         }
@@ -451,7 +439,7 @@ public class WorldGenVillagePieces {
 
     public static class WorldGenVillageBlacksmith extends WorldGenVillagePieces.WorldGenVillagePiece {
 
-        private static final List<StructurePieceTreasure> a = Lists.newArrayList(new StructurePieceTreasure[] { new StructurePieceTreasure(Items.DIAMOND, 0, 1, 3, 3), new StructurePieceTreasure(Items.IRON_INGOT, 0, 1, 5, 10), new StructurePieceTreasure(Items.GOLD_INGOT, 0, 1, 3, 5), new StructurePieceTreasure(Items.BREAD, 0, 1, 3, 15), new StructurePieceTreasure(Items.APPLE, 0, 1, 3, 15), new StructurePieceTreasure(Items.IRON_PICKAXE, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_SWORD, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_CHESTPLATE, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_HELMET, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_LEGGINGS, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_BOOTS, 0, 1, 1, 5), new StructurePieceTreasure(Item.getItemOf(Blocks.OBSIDIAN), 0, 3, 7, 5), new StructurePieceTreasure(Item.getItemOf(Blocks.SAPLING), 0, 3, 7, 5), new StructurePieceTreasure(Items.SADDLE, 0, 1, 1, 3), new StructurePieceTreasure(Items.IRON_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.GOLDEN_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.DIAMOND_HORSE_ARMOR, 0, 1, 1, 1)});
+        private static final List<StructurePieceTreasure> a = Lists.newArrayList(new StructurePieceTreasure(Items.DIAMOND, 0, 1, 3, 3), new StructurePieceTreasure(Items.IRON_INGOT, 0, 1, 5, 10), new StructurePieceTreasure(Items.GOLD_INGOT, 0, 1, 3, 5), new StructurePieceTreasure(Items.BREAD, 0, 1, 3, 15), new StructurePieceTreasure(Items.APPLE, 0, 1, 3, 15), new StructurePieceTreasure(Items.IRON_PICKAXE, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_SWORD, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_CHESTPLATE, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_HELMET, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_LEGGINGS, 0, 1, 1, 5), new StructurePieceTreasure(Items.IRON_BOOTS, 0, 1, 1, 5), new StructurePieceTreasure(Item.getItemOf(Blocks.OBSIDIAN), 0, 3, 7, 5), new StructurePieceTreasure(Item.getItemOf(Blocks.SAPLING), 0, 3, 7, 5), new StructurePieceTreasure(Items.SADDLE, 0, 1, 1, 3), new StructurePieceTreasure(Items.IRON_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.GOLDEN_HORSE_ARMOR, 0, 1, 1, 1), new StructurePieceTreasure(Items.DIAMOND_HORSE_ARMOR, 0, 1, 1, 1));
         private boolean b;
 
         public WorldGenVillageBlacksmith() {}
@@ -523,7 +511,7 @@ public class WorldGenVillagePieces {
             this.a(world, Blocks.PLANKS.getBlockData(), 1, 1, 5, structureboundingbox);
             this.a(world, Blocks.OAK_STAIRS.fromLegacyData(this.a(Blocks.OAK_STAIRS, 3)), 2, 1, 5, structureboundingbox);
             this.a(world, Blocks.OAK_STAIRS.fromLegacyData(this.a(Blocks.OAK_STAIRS, 1)), 1, 1, 4, structureboundingbox);
-            if (!this.b && structureboundingbox.b((BaseBlockPosition) (new BlockPosition(this.a(5, 5), this.d(1), this.b(5, 5))))) {
+            if (!this.b && structureboundingbox.b(new BlockPosition(this.a(5, 5), this.d(1), this.b(5, 5)))) {
                 this.b = true;
                 this.a(world, structureboundingbox, random, 5, 1, 5, WorldGenVillagePieces.WorldGenVillageBlacksmith.a, 3 + random.nextInt(6));
             }
@@ -1335,7 +1323,7 @@ public class WorldGenVillagePieces {
                 for (int j = this.l.c; j <= this.l.f; ++j) {
                     BlockPosition blockposition = new BlockPosition(i, 64, j);
 
-                    if (structureboundingbox.b((BaseBlockPosition) blockposition)) {
+                    if (structureboundingbox.b(blockposition)) {
                         blockposition = world.r(blockposition).down();
                         world.setTypeAndData(blockposition, iblockdata, 2);
                         world.setTypeAndData(blockposition.down(), iblockdata1, 2);
@@ -1369,7 +1357,7 @@ public class WorldGenVillagePieces {
         public WorldGenVillageStartPiece() {}
 
         public WorldGenVillageStartPiece(WorldChunkManager worldchunkmanager, int i, Random random, int j, int k, List<WorldGenVillagePieces.WorldGenVillagePieceWeight> list, int l) {
-            super((WorldGenVillagePieces.WorldGenVillageStartPiece) null, 0, random, j, k);
+            super(null, 0, random, j, k);
             this.a = worldchunkmanager;
             this.e = list;
             this.c = l;
@@ -1524,7 +1512,7 @@ public class WorldGenVillagePieces {
             for (int k = this.l.c; k <= this.l.f; ++k) {
                 for (int l = this.l.a; l <= this.l.d; ++l) {
                     blockposition_mutableblockposition.c(l, 64, k);
-                    if (structureboundingbox.b((BaseBlockPosition) blockposition_mutableblockposition)) {
+                    if (structureboundingbox.b(blockposition_mutableblockposition)) {
                         i += Math.max(world.r(blockposition_mutableblockposition).getY(), world.worldProvider.getSeaLevel());
                         ++j;
                     }
@@ -1549,7 +1537,7 @@ public class WorldGenVillagePieces {
                     int k1 = this.d(j);
                     int l1 = this.b(i + i1, k);
 
-                    if (!structureboundingbox.b((BaseBlockPosition) (new BlockPosition(j1, k1, l1)))) {
+                    if (!structureboundingbox.b(new BlockPosition(j1, k1, l1))) {
                         break;
                     }
 
@@ -1557,7 +1545,7 @@ public class WorldGenVillagePieces {
                     EntityVillager entityvillager = new EntityVillager(world);
 
                     entityvillager.setPositionRotation((double) j1 + 0.5D, (double) k1, (double) l1 + 0.5D, 0.0F, 0.0F);
-                    entityvillager.prepare(world.E(new BlockPosition(entityvillager)), (GroupDataEntity) null);
+                    entityvillager.prepare(world.E(new BlockPosition(entityvillager)), null);
                     entityvillager.setProfession(this.c(i1, entityvillager.getProfession()));
                     world.addEntity(entityvillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                 }
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 162b3a31a..097fd5710 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -149,7 +149,7 @@ public class WorldMap extends PersistentBase {
         }
 
         for (int i = 0; i < this.g.size(); ++i) {
-            WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker1 = (WorldMap.WorldMapHumanTracker) this.g.get(i);
+            WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker1 = this.g.get(i);
 
             if (!worldmap_worldmaphumantracker1.trackee.dead && (worldmap_worldmaphumantracker1.trackee.inventory.c(itemstack) || itemstack.y())) {
                 if (!itemstack.y() && worldmap_worldmaphumantracker1.trackee.dimension == this.map) {
@@ -231,25 +231,22 @@ public class WorldMap extends PersistentBase {
     }
 
     public Packet a(ItemStack itemstack, World world, EntityHuman entityhuman) {
-        WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = (WorldMap.WorldMapHumanTracker) this.i.get(entityhuman);
+        WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = this.i.get(entityhuman);
 
         return worldmap_worldmaphumantracker == null ? null : worldmap_worldmaphumantracker.a(itemstack);
     }
 
     public void flagDirty(int i, int j) {
         super.c();
-        Iterator iterator = this.g.iterator();
-
-        while (iterator.hasNext()) {
-            WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = (WorldMap.WorldMapHumanTracker) iterator.next();
 
+        for (WorldMapHumanTracker worldmap_worldmaphumantracker : this.g) {
             worldmap_worldmaphumantracker.a(i, j);
         }
 
     }
 
     public WorldMap.WorldMapHumanTracker a(EntityHuman entityhuman) {
-        WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = (WorldMap.WorldMapHumanTracker) this.i.get(entityhuman);
+        WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = this.i.get(entityhuman);
 
         if (worldmap_worldmaphumantracker == null) {
             worldmap_worldmaphumantracker = new WorldMap.WorldMapHumanTracker(entityhuman);
@@ -279,7 +276,7 @@ public class WorldMap extends PersistentBase {
             // CraftBukkit start
             org.bukkit.craftbukkit.map.RenderData render = WorldMap.this.mapView.render((org.bukkit.craftbukkit.entity.CraftPlayer) this.trackee.getBukkitEntity()); // CraftBukkit
 
-            java.util.Collection<MapIcon> icons = new java.util.ArrayList<MapIcon>();
+            java.util.Collection<MapIcon> icons = new java.util.ArrayList<>();
 
             for ( org.bukkit.map.MapCursor cursor : render.cursors) {
 
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index e5124af9b..478537789 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -12,6 +12,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
+import java.nio.charset.StandardCharsets;
 import java.util.UUID;
 
 import org.bukkit.craftbukkit.entity.CraftPlayer;
@@ -44,12 +45,9 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
     private void h() {
         try {
             File file = new File(this.baseDir, "session.lock");
-            DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(file));
 
-            try {
+            try (DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(file))) {
                 dataoutputstream.writeLong(this.sessionId);
-            } finally {
-                dataoutputstream.close();
             }
 
         } catch (IOException ioexception) {
@@ -65,14 +63,11 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
     public void checkSession() throws ExceptionWorldConflict {
         try {
             File file = new File(this.baseDir, "session.lock");
-            DataInputStream datainputstream = new DataInputStream(new FileInputStream(file));
 
-            try {
+            try (DataInputStream datainputstream = new DataInputStream(new FileInputStream(file))) {
                 if (datainputstream.readLong() != this.sessionId) {
                     throw new ExceptionWorldConflict("The save for world located at " + this.baseDir + " is being accessed from another location, aborting");  // Spigot
                 }
-            } finally {
-                datainputstream.close();
             }
 
         } catch (IOException ioexception) {
@@ -91,7 +86,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
 
         if (file.exists()) {
             try {
-                nbttagcompound = NBTCompressedStreamTools.a((InputStream) (new FileInputStream(file)));
+                nbttagcompound = NBTCompressedStreamTools.a(new FileInputStream(file));
                 nbttagcompound1 = nbttagcompound.getCompound("Data");
                 return new WorldData(nbttagcompound1);
             } catch (Exception exception) {
@@ -102,7 +97,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
         file = new File(this.baseDir, "level.dat_old");
         if (file.exists()) {
             try {
-                nbttagcompound = NBTCompressedStreamTools.a((InputStream) (new FileInputStream(file)));
+                nbttagcompound = NBTCompressedStreamTools.a(new FileInputStream(file));
                 nbttagcompound1 = nbttagcompound.getCompound("Data");
                 return new WorldData(nbttagcompound1);
             } catch (Exception exception1) {
@@ -124,7 +119,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file1 = new File(this.baseDir, "level.dat_old");
             File file2 = new File(this.baseDir, "level.dat");
 
-            NBTCompressedStreamTools.a(nbttagcompound2, (OutputStream) (new FileOutputStream(file)));
+            NBTCompressedStreamTools.a(nbttagcompound2, new FileOutputStream(file));
             if (file1.exists()) {
                 file1.delete();
             }
@@ -155,7 +150,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file1 = new File(this.baseDir, "level.dat_old");
             File file2 = new File(this.baseDir, "level.dat");
 
-            NBTCompressedStreamTools.a(nbttagcompound1, (OutputStream) (new FileOutputStream(file)));
+            NBTCompressedStreamTools.a(nbttagcompound1, new FileOutputStream(file));
             if (file1.exists()) {
                 file1.delete();
             }
@@ -183,7 +178,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file = new File(this.playerDir, entityhuman.getUniqueID().toString() + ".dat.tmp");
             File file1 = new File(this.playerDir, entityhuman.getUniqueID().toString() + ".dat");
 
-            NBTCompressedStreamTools.a(nbttagcompound, (OutputStream) (new FileOutputStream(file)));
+            NBTCompressedStreamTools.a(nbttagcompound, new FileOutputStream(file));
             if (file1.exists()) {
                 file1.delete();
             }
@@ -204,7 +199,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             boolean usingWrongFile = false;
             if ( org.bukkit.Bukkit.getOnlineMode() && !file.exists() ) // PaperSpigot - Check online mode first
             {
-                file = new File( this.playerDir, UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + entityhuman.getName() ).getBytes( "UTF-8" ) ).toString() + ".dat");
+                file = new File( this.playerDir, UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + entityhuman.getName() ).getBytes(StandardCharsets.UTF_8) ).toString() + ".dat");
                 if ( file.exists() )
                 {
                     usingWrongFile = true;
@@ -214,7 +209,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             // Spigot End
 
             if (file.exists() && file.isFile()) {
-                nbttagcompound = NBTCompressedStreamTools.a((InputStream) (new FileInputStream(file)));
+                nbttagcompound = NBTCompressedStreamTools.a(new FileInputStream(file));
             }
             // Spigot Start
             if ( usingWrongFile )
@@ -250,7 +245,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file1 = new File(this.playerDir, s + ".dat");
 
             if (file1.exists()) {
-                return NBTCompressedStreamTools.a((InputStream) (new FileInputStream(file1)));
+                return NBTCompressedStreamTools.a(new FileInputStream(file1));
             }
         } catch (Exception exception) {
             a.warn("Failed to load player data for " + s);
@@ -295,39 +290,21 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
         if (uuid != null) return uuid;
         File file1 = new File(this.baseDir, "uid.dat");
         if (file1.exists()) {
-            DataInputStream dis = null;
-            try {
-                dis = new DataInputStream(new FileInputStream(file1));
+            try (DataInputStream dis = new DataInputStream(new FileInputStream(file1))) {
                 return uuid = new UUID(dis.readLong(), dis.readLong());
             } catch (IOException ex) {
                 a.warn("Failed to read " + file1 + ", generating new random UUID", ex);
-            } finally {
-                if (dis != null) {
-                    try {
-                        dis.close();
-                    } catch (IOException ex) {
-                        // NOOP
-                    }
-                }
             }
+            // NOOP
         }
         uuid = UUID.randomUUID();
-        DataOutputStream dos = null;
-        try {
-            dos = new DataOutputStream(new FileOutputStream(file1));
+        try (DataOutputStream dos = new DataOutputStream(new FileOutputStream(file1))) {
             dos.writeLong(uuid.getMostSignificantBits());
             dos.writeLong(uuid.getLeastSignificantBits());
         } catch (IOException ex) {
             a.warn("Failed to write " + file1, ex);
-        } finally {
-            if (dos != null) {
-                try {
-                    dos.close();
-                } catch (IOException ex) {
-                    // NOOP
-                }
-            }
         }
+        // NOOP
         return uuid;
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index b7112822c..2fb14bb9b 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -28,7 +28,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     public EntityTracker tracker;
     private final PlayerChunkMap manager;
     // private final Set<NextTickListEntry> L = Sets.newHashSet(); // PAIL: Rename nextTickListHash
-    private final HashTreeSet<NextTickListEntry> M = new HashTreeSet<NextTickListEntry>(); // CraftBukkit - HashTreeSet // PAIL: Rename nextTickList
+    private final HashTreeSet<NextTickListEntry> M = new HashTreeSet<>(); // CraftBukkit - HashTreeSet // PAIL: Rename nextTickList
     private final Map<UUID, Entity> entitiesByUUID = Maps.newHashMap();
     public ChunkProviderServer chunkProviderServer;
     public boolean savingDisabled;
@@ -287,11 +287,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         if (!this.players.isEmpty()) {
             int i = 0;
             int j = 0;
-            Iterator iterator = this.players.iterator();
-
-            while (iterator.hasNext()) {
-                EntityHuman entityhuman = (EntityHuman) iterator.next();
 
+            for (EntityHuman entityhuman : this.players) {
                 if (entityhuman.isSpectator()) {
                     ++i;
                 } else if (entityhuman.isSleeping() || entityhuman.fauxSleeping) {
@@ -306,11 +303,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     protected void e() {
         this.O = false;
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            EntityHuman entityhuman = (EntityHuman) iterator.next();
 
+        for (EntityHuman entityhuman : this.players) {
             if (entityhuman.isSleeping()) {
                 entityhuman.a(false, false, true);
             }
@@ -472,9 +466,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     ChunkSection[] achunksection = chunk.getSections();
                     int j1 = achunksection.length;
 
-                    for (int k1 = 0; k1 < j1; ++k1) {
-                        ChunkSection chunksection = achunksection[k1];
-
+                    for (ChunkSection chunksection : achunksection) {
                         if (chunksection != null && chunksection.shouldTick()) {
                             for (int l1 = 0; l1 < i1; ++l1) {
                                 this.m = this.m * 3 + 1013904223;
@@ -583,13 +575,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public void tickEntities() {
-        if (false && this.players.isEmpty()) { // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
-            if (this.emptyTime++ >= 1200) {
-                return;
-            }
-        } else {
-            this.j();
-        }
+        this.j();
 
         super.tickEntities();
         spigotConfig.currentPrimedTnt = 0; // Spigot
@@ -831,7 +817,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                 try {
                     this.a(crashreport);
-                } catch (Throwable throwable1) {
+                } catch (Throwable ignored) {
                 }
 
                 throw new ReportedException(crashreport);
@@ -949,10 +935,9 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this.chunkProvider.saveChunks(flag, iprogressupdate);
             // CraftBukkit - ArrayList -> Collection
             Collection arraylist = this.chunkProviderServer.a();
-            Iterator iterator = arraylist.iterator();
 
-            while (iterator.hasNext()) {
-                Chunk chunk = (Chunk) iterator.next();
+            for (Object value : arraylist) {
+                Chunk chunk = (Chunk) value;
 
                 if (chunk != null && !this.manager.a(chunk.locX, chunk.locZ)) {
                     this.chunkProviderServer.queueUnload(chunk.locX, chunk.locZ);
@@ -994,8 +979,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         Entity[] aentity = entity.aB();
 
         if (aentity != null) {
-            for (int i = 0; i < aentity.length; ++i) {
-                this.entitiesById.a(aentity[i].getId(), aentity[i]);
+            for (Entity value : aentity) {
+                this.entitiesById.a(value.getId(), value);
             }
         }
 
@@ -1008,8 +993,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         Entity[] aentity = entity.aB();
 
         if (aentity != null) {
-            for (int i = 0; i < aentity.length; ++i) {
-                this.entitiesById.d(aentity[i].getId());
+            for (Entity value : aentity) {
+                this.entitiesById.d(value.getId());
             }
         }
 
@@ -1055,11 +1040,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             explosion.clearBlocks();
         }
 
-        Iterator iterator = this.players.iterator();
-
-        while (iterator.hasNext()) {
-            EntityHuman entityhuman = (EntityHuman) iterator.next();
-
+        for (EntityHuman entityhuman : this.players) {
             if (entityhuman.e(d0, d1, d2) < 4096.0D) {
                 ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutExplosion(d0, d1, d2, f, explosion.getBlocks(), explosion.b().get(entityhuman)));
             }
@@ -1187,8 +1168,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         // CraftBukkit end
         PacketPlayOutWorldParticles packetplayoutworldparticles = new PacketPlayOutWorldParticles(enumparticle, flag, (float) d0, (float) d1, (float) d2, (float) d3, (float) d4, (float) d5, (float) d6, i, aint);
 
-        for (int j = 0; j < this.players.size(); ++j) {
-            EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
+        for (EntityHuman player : this.players) {
+            EntityPlayer entityplayer = (EntityPlayer) player;
             if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity()))
                 continue; // CraftBukkit
             BlockPosition blockposition = entityplayer.getChunkCoordinates();
diff --git a/src/main/java/net/techcable/tacospigot/BlockStateRegistry.java b/src/main/java/net/techcable/tacospigot/BlockStateRegistry.java
index 5678ed35a..ee29dd0a9 100644
--- a/src/main/java/net/techcable/tacospigot/BlockStateRegistry.java
+++ b/src/main/java/net/techcable/tacospigot/BlockStateRegistry.java
@@ -1,8 +1,5 @@
 package net.techcable.tacospigot;
 
-import gnu.trove.map.TObjectIntMap;
-import gnu.trove.map.hash.TObjectIntHashMap;
-
 import java.util.Arrays;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
index ab6725ce5..d1f6ad0e9 100644
--- a/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
@@ -149,8 +149,7 @@ public class ImmutableArrayMap<K, V> extends AbstractMap<K, V> implements Map<K,
         int largestRangeSize = 0;
         int[] largestRange = new int[3];
         for (int minIndex = 0; minIndex < ids.length; minIndex++) {
-            final int min = ids[minIndex];
-            int lastNum = min;
+            int lastNum = ids[minIndex];
             int maxIndex;
             for (maxIndex = minIndex + 1; maxIndex < ids.length; maxIndex++) {
                 final int max = ids[maxIndex];
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
index f532fe288..9a64604ec 100644
--- a/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayTable.java
@@ -6,7 +6,6 @@ import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.NoSuchElementException;
 import java.util.Set;
 import java.util.function.ToIntBiFunction;
 import javax.annotation.Nullable;
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index c0a716023..18531d82c 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -1,24 +1,18 @@
 package net.techcable.tacospigot;
 
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.logging.Level;
 
-import net.minecraft.server.MinecraftServer;
-
-import org.bukkit.Bukkit;
-import org.bukkit.command.Command;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
-
-import com.google.common.base.Throwables;
-
 public class TacoSpigotConfig {
 
     private static File CONFIG_FILE;
@@ -34,7 +28,7 @@ public class TacoSpigotConfig {
         try {
             System.out.println("Loading TacoSpigot config from " + configFile.getName());
             config.load(CONFIG_FILE);
-        } catch (IOException ex) {
+        } catch (IOException ignored) {
         } catch (InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Could not load taco.yml, please correct your syntax errors", ex);
             throw Throwables.propagate(ex);
@@ -96,7 +90,7 @@ public class TacoSpigotConfig {
 
     private static <T> List getList(String path, T def) {
         config.addDefault(path, def);
-        return (List<T>) config.getList(path, config.getList(path));
+        return config.getList(path, config.getList(path));
     }
 
     private static String getString(String path, String def) {
@@ -105,6 +99,7 @@ public class TacoSpigotConfig {
     }
 
     public static boolean useArraysForBlockStates;
+
     private static void useArraysForBlockStates() {
         useArraysForBlockStates = getBoolean("useArraysForBlockStates", false);
     }
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotWorldConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotWorldConfig.java
index 8c1f1a758..f6975ff22 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotWorldConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotWorldConfig.java
@@ -56,7 +56,7 @@ public class TacoSpigotWorldConfig {
 
     private <T> List getList(String path, T def) {
         config.addDefault("world-settings.default." + path, def);
-        return (List<T>) config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+        return config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
     }
 
     private String getString(String path, String def) {
diff --git a/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java b/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
index e98fa4d64..b2633199b 100644
--- a/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
+++ b/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
@@ -1,16 +1,7 @@
 package net.techcable.tacospigot.utils;
 
-import java.util.AbstractSet;
-import java.util.Iterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
 import java.util.function.BiConsumer;
 import java.util.function.BiPredicate;
-import java.util.stream.Stream;
-import java.util.stream.StreamSupport;
-
-import com.google.common.base.Preconditions;
-import com.google.common.collect.AbstractIterator;
 
 import net.minecraft.server.Block;
 import net.minecraft.server.BlockPosition;
diff --git a/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java b/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
index 341eaa334..8bfb2f5cc 100644
--- a/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
+++ b/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java
@@ -159,8 +159,7 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
         }
 
         @Override
-        public void write(final byte[] b, final int off, final int len)
-                throws IOException {
+        public void write(final byte[] b, final int off, final int len) {
             System.err.write(b, off, len);
         }
 
@@ -193,13 +192,12 @@ public final class ConsoleAppender extends AbstractOutputStreamAppender {
         }
 
         @Override
-        public void write(final byte[] b, final int off, final int len)
-                throws IOException {
+        public void write(final byte[] b, final int off, final int len) {
             System.out.write(b, off, len);
         }
 
         @Override
-        public void write(final int b) throws IOException {
+        public void write(final int b) {
             System.out.write(b);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 8a33e282c..201b9fd75 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -24,7 +24,7 @@ public class CraftChunk implements Chunk {
 
     public CraftChunk(net.minecraft.server.Chunk chunk) {
         if (!(chunk instanceof EmptyChunk)) {
-            this.weakChunk = new WeakReference<net.minecraft.server.Chunk>(chunk);
+            this.weakChunk = new WeakReference<>(chunk);
         }
 
         worldServer = (WorldServer) getHandle().world;
@@ -47,7 +47,7 @@ public class CraftChunk implements Chunk {
             c = worldServer.getChunkAt(x, z);
 
             if (!(c instanceof EmptyChunk)) {
-                weakChunk = new WeakReference<net.minecraft.server.Chunk>(c);
+                weakChunk = new WeakReference<>(c);
             }
         }
 
@@ -170,7 +170,7 @@ public class CraftChunk implements Chunk {
                 // Copy base IDs
                 for (int j = 0; j < 4096; j++) {
                     if (baseids[j] == 0) continue;
-                    IBlockData blockData = (IBlockData) net.minecraft.server.Block.d.a(baseids[j]);
+                    IBlockData blockData = net.minecraft.server.Block.d.a(baseids[j]);
                     if (blockData == null) continue;
                     blockids[j] = (short) net.minecraft.server.Block.getId(blockData.getBlock());
                     int data = blockData.getBlock().toLegacyData(blockData);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java b/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
index 899837263..40c9818ac 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
@@ -14,7 +14,7 @@ import net.minecraft.server.MinecraftServer;
 
 public class CraftCrashReport implements Callable<Object> {
 
-    public Object call() throws Exception {
+    public Object call() {
         StringWriter value = new StringWriter();
         try {
             value.append("\n   Running: ").append(Bukkit.getName()).append(" version ").append(Bukkit.getVersion()).append(" (Implementing API version ").append(Bukkit.getBukkitVersion()).append(") ").append(String.valueOf(MinecraftServer.getServer().getOnlineMode()));
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java b/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
index 7a8ea3bd0..555830f7a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit;
 
 import net.minecraft.server.IpBanEntry;
 import net.minecraft.server.IpBanList;
-import net.minecraft.server.MinecraftServer;
 
 import java.io.IOException;
 import java.util.Date;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
index 80832f78a..bd2171f27 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
@@ -7,7 +7,6 @@ import java.util.Set;
 
 import net.minecraft.server.IpBanEntry;
 import net.minecraft.server.IpBanList;
-import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
 
@@ -26,7 +25,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     public org.bukkit.BanEntry getBanEntry(String target) {
         Validate.notNull(target, "Target cannot be null");
 
-        IpBanEntry entry = (IpBanEntry) list.get(target);
+        IpBanEntry entry = list.get(target);
         if (entry == null) {
             return null;
         }
@@ -57,7 +56,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     public Set<org.bukkit.BanEntry> getBanEntries() {
         ImmutableSet.Builder<org.bukkit.BanEntry> builder = ImmutableSet.builder();
         for (String target : list.getEntries()) {
-            builder.add(new CraftIpBanEntry(target, (IpBanEntry) list.get(target), list));
+            builder.add(new CraftIpBanEntry(target, list.get(target), list));
         }
 
         return builder.build();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 45217866b..a7ab89345 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -7,7 +7,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 
-import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.WorldNBTStorage;
 
@@ -122,7 +121,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        Map<String, Object> result = new LinkedHashMap<>();
 
         result.put("UUID", profile.getId().toString());
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
index 3c6f9229f..ba2002353 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit;
 import com.mojang.authlib.GameProfile;
 import net.minecraft.server.GameProfileBanEntry;
 import net.minecraft.server.GameProfileBanList;
-import net.minecraft.server.MinecraftServer;
 
 import java.io.IOException;
 import java.util.Date;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
index 84a1f9c86..a227e497d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
@@ -33,7 +33,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
             return null;
         }
 
-        GameProfileBanEntry entry = (GameProfileBanEntry) list.get(profile);
+        GameProfileBanEntry entry = list.get(profile);
         if (entry == null) {
             return null;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index cc31ab879..ec480bee2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -10,6 +10,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
 import com.mojang.authlib.GameProfile;
+import dev.lockedthread.LockedSpigotConfig;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -78,6 +79,7 @@ import java.util.*;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 public final class CraftServer implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
@@ -93,7 +95,7 @@ public final class CraftServer implements Server {
     private final PluginManager pluginManager = new SimplePluginManager(this, commandMap);
     protected final MinecraftServer console;
     protected final DedicatedPlayerList playerList;
-    private final Map<String, World> worlds = new LinkedHashMap<String, World>();
+    private final Map<String, World> worlds = new LinkedHashMap<>();
     private YamlConfiguration configuration;
     private YamlConfiguration commandsConfiguration;
     private final Yaml yaml = new Yaml(new SafeConstructor());
@@ -132,12 +134,7 @@ public final class CraftServer implements Server {
     public CraftServer(MinecraftServer console, PlayerList playerList) {
         this.console = console;
         this.playerList = (DedicatedPlayerList) playerList;
-        this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, new Function<EntityPlayer, CraftPlayer>() {
-            @Override
-            public CraftPlayer apply(EntityPlayer player) {
-                return player.getBukkitEntity();
-            }
-        }));
+        this.playerView = Collections.unmodifiableList(playerList.players.stream().map(player -> player.getBukkitEntity()).collect(Collectors.toList()));
         this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
         online.value = console.getPropertyManager().getBoolean("online-mode", true);
 
@@ -177,7 +174,7 @@ public final class CraftServer implements Server {
         if (legacyAlias != null) {
             ConfigurationSection aliases = commandsConfiguration.createSection("aliases");
             for (String key : legacyAlias.getKeys(false)) {
-                ArrayList<String> commands = new ArrayList<String>();
+                ArrayList<String> commands = new ArrayList<>();
 
                 if (legacyAlias.isList(key)) {
                     for (String command : legacyAlias.getStringList(key)) {
@@ -413,7 +410,7 @@ public final class CraftServer implements Server {
     public List<Player> matchPlayer(String partialName) {
         Validate.notNull(partialName, "PartialName cannot be null");
 
-        List<Player> matchedPlayers = new ArrayList<Player>();
+        List<Player> matchedPlayers = new ArrayList<>();
 
         for (Player iterPlayer : this.getOnlinePlayers()) {
             String iterPlayerName = iterPlayer.getName();
@@ -561,7 +558,7 @@ public final class CraftServer implements Server {
 
     @Override
     public List<World> getWorlds() {
-        return new ArrayList<World>(worlds.values());
+        return new ArrayList<>(worlds.values());
     }
 
     public DedicatedPlayerList getHandle() {
@@ -655,20 +652,13 @@ public final class CraftServer implements Server {
         chunkGCLoadThresh = configuration.getInt("chunk-gc.load-threshold");
         loadIcon();
 
-        try {
-            playerList.getIPBans().load();
-        } catch (IOException ex) {
-            logger.log(Level.WARNING, "Failed to load banned-ips.json, " + ex.getMessage());
-        }
-        try {
-            playerList.getProfileBans().load();
-        } catch (IOException ex) {
-            logger.log(Level.WARNING, "Failed to load banned-players.json, " + ex.getMessage());
-        }
+        playerList.getIPBans().load();
+        playerList.getProfileBans().load();
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         org.github.paperspigot.PaperSpigotConfig.init((File) console.options.valueOf("paper-settings")); // PaperSpigot
         net.techcable.tacospigot.TacoSpigotConfig.init((File) console.options.valueOf("taco-settings")); // TacoSpigot
+        LockedSpigotConfig.init((File) console.options.valueOf("lockedspigot-settings")); // LockedSpigot
         for (WorldServer world : console.worlds) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
@@ -702,7 +692,7 @@ public final class CraftServer implements Server {
         while (pollCount < 50 && getScheduler().getActiveWorkers().size() > 0) {
             try {
                 Thread.sleep(50);
-            } catch (InterruptedException e) {
+            } catch (InterruptedException ignored) {
             }
             pollCount++;
         }
@@ -756,7 +746,7 @@ public final class CraftServer implements Server {
         Map<String, Map<String, Object>> perms;
 
         try {
-            perms = (Map<String, Map<String, Object>>) yaml.load(stream);
+            perms = yaml.load(stream);
         } catch (MarkedYAMLException ex) {
             getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML: " + ex.toString());
             return;
@@ -766,7 +756,7 @@ public final class CraftServer implements Server {
         } finally {
             try {
                 stream.close();
-            } catch (IOException ex) {
+            } catch (IOException ignored) {
             }
         }
 
@@ -1093,7 +1083,7 @@ public final class CraftServer implements Server {
     public List<Recipe> getRecipesFor(ItemStack result) {
         Validate.notNull(result, "Result cannot be null");
 
-        List<Recipe> results = new ArrayList<Recipe>();
+        List<Recipe> results = new ArrayList<>();
         Iterator<Recipe> iter = recipeIterator();
         while (iter.hasNext()) {
             Recipe recipe = iter.next();
@@ -1130,7 +1120,7 @@ public final class CraftServer implements Server {
     @Override
     public Map<String, String[]> getCommandAliases() {
         ConfigurationSection section = commandsConfiguration.getConfigurationSection("aliases");
-        Map<String, String[]> result = new LinkedHashMap<String, String[]>();
+        Map<String, String[]> result = new LinkedHashMap<>();
 
         if (section != null) {
             for (String key : section.getKeys(false)) {
@@ -1142,7 +1132,7 @@ public final class CraftServer implements Server {
                     commands = ImmutableList.of(section.getString(key));
                 }
 
-                result.put(key, commands.toArray(new String[commands.size()]));
+                result.put(key, commands.toArray(new String[0]));
             }
         }
 
@@ -1343,7 +1333,7 @@ public final class CraftServer implements Server {
     @Override
     @SuppressWarnings("unchecked")
     public Set<String> getIPBans() {
-        return new HashSet<String>(Arrays.asList(playerList.getIPBans().getEntries()));
+        return new HashSet<>(Arrays.asList(playerList.getIPBans().getEntries()));
     }
 
     @Override
@@ -1362,7 +1352,7 @@ public final class CraftServer implements Server {
 
     @Override
     public Set<OfflinePlayer> getBannedPlayers() {
-        Set<OfflinePlayer> result = new HashSet<OfflinePlayer>();
+        Set<OfflinePlayer> result = new HashSet<>();
 
         for (JsonListEntry entry : playerList.getProfileBans().getValues()) {
             result.add(getOfflinePlayer((GameProfile) entry.getKey()));
@@ -1392,7 +1382,7 @@ public final class CraftServer implements Server {
 
     @Override
     public Set<OfflinePlayer> getWhitelistedPlayers() {
-        Set<OfflinePlayer> result = new LinkedHashSet<OfflinePlayer>();
+        Set<OfflinePlayer> result = new LinkedHashSet<>();
 
         for (JsonListEntry entry : playerList.getWhitelist().getValues()) {
             result.add(getOfflinePlayer((GameProfile) entry.getKey()));
@@ -1403,7 +1393,7 @@ public final class CraftServer implements Server {
 
     @Override
     public Set<OfflinePlayer> getOperators() {
-        Set<OfflinePlayer> result = new HashSet<OfflinePlayer>();
+        Set<OfflinePlayer> result = new HashSet<>();
 
         for (JsonListEntry entry : playerList.getOPs().getValues()) {
             result.add(getOfflinePlayer((GameProfile) entry.getKey()));
@@ -1465,7 +1455,7 @@ public final class CraftServer implements Server {
     public OfflinePlayer[] getOfflinePlayers() {
         WorldNBTStorage storage = (WorldNBTStorage) console.worlds.get(0).getDataManager();
         String[] files = storage.getPlayerDir().list(new DatFileFilter());
-        Set<OfflinePlayer> players = new HashSet<OfflinePlayer>();
+        Set<OfflinePlayer> players = new HashSet<>();
 
         for (String file : files) {
             try {
@@ -1477,7 +1467,7 @@ public final class CraftServer implements Server {
 
         players.addAll(getOnlinePlayers());
 
-        return players.toArray(new OfflinePlayer[players.size()]);
+        return players.toArray(new OfflinePlayer[0]);
     }
 
     @Override
@@ -1496,7 +1486,7 @@ public final class CraftServer implements Server {
 
     @Override
     public Set<String> getListeningPluginChannels() {
-        Set<String> result = new HashSet<String>();
+        Set<String> result = new HashSet<>();
 
         for (Player player : getOnlinePlayers()) {
             result.addAll(player.getListeningPluginChannels());
@@ -1629,7 +1619,7 @@ public final class CraftServer implements Server {
     // PaperSpigot end
 
     public List<String> tabCompleteChat(Player player, String message) {
-        List<String> completions = new ArrayList<String>();
+        List<String> completions = new ArrayList<>();
         PlayerChatTabCompleteEvent event = new PlayerChatTabCompleteEvent(player, message, completions);
         String token = event.getLastToken();
         for (Player p : getOnlinePlayers()) {
@@ -1639,15 +1629,9 @@ public final class CraftServer implements Server {
         }
         pluginManager.callEvent(event);
 
-        Iterator<?> it = completions.iterator();
-        while (it.hasNext()) {
-            Object current = it.next();
-            if (!(current instanceof String)) {
-                // Sanity
-                it.remove();
-            }
-        }
-        Collections.sort(completions, String.CASE_INSENSITIVE_ORDER);
+        // Sanity
+        completions.removeIf(current -> !(current instanceof String));
+        completions.sort(String.CASE_INSENSITIVE_ORDER);
         return completions;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
index 3341c994f..84b42f150 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
@@ -119,7 +119,7 @@ public class CraftStatistic {
     }
 
     public static net.minecraft.server.Statistic getEntityStatistic(org.bukkit.Statistic stat, EntityType entity) {
-        MonsterEggInfo monsteregginfo = (MonsterEggInfo) EntityTypes.eggInfo.get(Integer.valueOf(entity.getTypeId()));
+        MonsterEggInfo monsteregginfo = EntityTypes.eggInfo.get((int) entity.getTypeId());
 
         if (monsteregginfo != null) {
             return monsteregginfo.killEntityStatistic;
@@ -135,11 +135,11 @@ public class CraftStatistic {
     public static Material getMaterialFromStatistic(net.minecraft.server.Statistic statistic) {
         String statisticString = statistic.name;
         String val = statisticString.substring(statisticString.lastIndexOf(".") + 1);
-        Item item = (Item) Item.REGISTRY.get(new MinecraftKey(val));
+        Item item = Item.REGISTRY.get(new MinecraftKey(val));
         if (item != null) {
             return Material.getMaterial(Item.getId(item));
         }
-        Block block = (Block) Block.REGISTRY.get(new MinecraftKey(val));
+        Block block = Block.REGISTRY.get(new MinecraftKey(val));
         if (block != null) {
             return Material.getMaterial(Block.getId(block));
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 958fe4ffb..94da183b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -45,8 +45,6 @@ import org.bukkit.entity.minecart.PoweredMinecart;
 import org.bukkit.entity.minecart.SpawnerMinecart;
 import org.bukkit.entity.minecart.StorageMinecart;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-import org.bukkit.event.weather.ThunderChangeEvent;
-import org.bukkit.event.weather.WeatherChangeEvent;
 import org.bukkit.event.world.SpawnChangeEvent;
 import org.bukkit.generator.BlockPopulator;
 import org.bukkit.generator.ChunkGenerator;
@@ -64,7 +62,7 @@ public class CraftWorld implements World {
     private Environment environment;
     private final CraftServer server = (CraftServer) Bukkit.getServer();
     private final ChunkGenerator generator;
-    private final List<BlockPopulator> populators = new ArrayList<BlockPopulator>();
+    private final List<BlockPopulator> populators = new ArrayList<>();
     private final BlockMetadataStore blockMetadata = new BlockMetadataStore(this);
     private int monsterSpawn = -1;
     private int animalSpawn = -1;
@@ -125,12 +123,7 @@ public class CraftWorld implements World {
     // PaperSpigot start - Async chunk load API
     public void getChunkAtAsync(final int x, final int z, final ChunkLoadCallback callback) {
         final ChunkProviderServer cps = this.world.chunkProviderServer;
-        cps.getChunkAt(x, z, new Runnable() {
-            @Override
-            public void run() {
-                callback.onLoad(cps.getChunkAt(x, z).bukkitChunk);
-            }
-        });
+        cps.getChunkAt(x, z, () -> callback.onLoad(cps.getChunkAt(x, z).bukkitChunk));
     }
     public void getChunkAtAsync(Block block, ChunkLoadCallback callback) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, callback);
@@ -430,22 +423,22 @@ public class CraftWorld implements World {
             break;
         case JUNGLE:
             IBlockData iblockdata1 = Blocks.LOG.getBlockData().set(BlockLog1.VARIANT, BlockWood.EnumLogVariant.JUNGLE);
-            IBlockData iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.JUNGLE).set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false));
+            IBlockData iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.JUNGLE).set(BlockLeaves.CHECK_DECAY, Boolean.FALSE);
             gen = new WorldGenJungleTree(true, 10, 20, iblockdata1, iblockdata2); // Magic values as in BlockSapling
             break;
         case SMALL_JUNGLE:
             iblockdata1 = Blocks.LOG.getBlockData().set(BlockLog1.VARIANT, BlockWood.EnumLogVariant.JUNGLE);
-            iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.JUNGLE).set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false));
+            iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.JUNGLE).set(BlockLeaves.CHECK_DECAY, Boolean.FALSE);
             gen = new WorldGenTrees(true, 4 + rand.nextInt(7), iblockdata1, iblockdata2, false);
             break;
         case COCOA_TREE:
             iblockdata1 = Blocks.LOG.getBlockData().set(BlockLog1.VARIANT, BlockWood.EnumLogVariant.JUNGLE);
-            iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.JUNGLE).set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false));
+            iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.JUNGLE).set(BlockLeaves.CHECK_DECAY, Boolean.FALSE);
             gen = new WorldGenTrees(true, 4 + rand.nextInt(7), iblockdata1, iblockdata2, true);
             break;
         case JUNGLE_BUSH:
             iblockdata1 = Blocks.LOG.getBlockData().set(BlockLog1.VARIANT, BlockWood.EnumLogVariant.JUNGLE);
-            iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.OAK).set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(false));
+            iblockdata2 = Blocks.LEAVES.getBlockData().set(BlockLeaves1.VARIANT, BlockWood.EnumLogVariant.OAK).set(BlockLeaves.CHECK_DECAY, Boolean.FALSE);
             gen = new WorldGenGroundBush(iblockdata1, iblockdata2);
             break;
         case RED_MUSHROOM:
@@ -644,7 +637,7 @@ public class CraftWorld implements World {
     }
 
     public List<Entity> getEntities() {
-        List<Entity> list = new ArrayList<Entity>();
+        List<Entity> list = new ArrayList<>();
 
         for (Object o : world.entityList) {
             if (o instanceof net.minecraft.server.Entity) {
@@ -662,7 +655,7 @@ public class CraftWorld implements World {
     }
 
     public List<LivingEntity> getLivingEntities() {
-        List<LivingEntity> list = new ArrayList<LivingEntity>();
+        List<LivingEntity> list = new ArrayList<>();
 
         for (Object o : world.entityList) {
             if (o instanceof net.minecraft.server.Entity) {
@@ -687,7 +680,7 @@ public class CraftWorld implements World {
 
     @SuppressWarnings("unchecked")
     public <T extends Entity> Collection<T> getEntitiesByClass(Class<T> clazz) {
-        Collection<T> list = new ArrayList<T>();
+        Collection<T> list = new ArrayList<>();
 
         for (Object entity: world.entityList) {
             if (entity instanceof net.minecraft.server.Entity) {
@@ -709,7 +702,7 @@ public class CraftWorld implements World {
     }
 
     public Collection<Entity> getEntitiesByClasses(Class<?>... classes) {
-        Collection<Entity> list = new ArrayList<Entity>();
+        Collection<Entity> list = new ArrayList<>();
 
         for (Object entity: world.entityList) {
             if (entity instanceof net.minecraft.server.Entity) {
@@ -741,7 +734,7 @@ public class CraftWorld implements World {
 
         AxisAlignedBB bb = new AxisAlignedBB(location.getX() - x, location.getY() - y, location.getZ() - z, location.getX() + x, location.getY() + y, location.getZ() + z);
         List<net.minecraft.server.Entity> entityList = getHandle().a((net.minecraft.server.Entity) null, bb, null); // PAIL : rename
-        List<Entity> bukkitEntityList = new ArrayList<org.bukkit.entity.Entity>(entityList.size());
+        List<Entity> bukkitEntityList = new ArrayList<>(entityList.size());
         for (Object entity : entityList) {
             bukkitEntityList.add(((net.minecraft.server.Entity) entity).getBukkitEntity());
         }
@@ -749,7 +742,7 @@ public class CraftWorld implements World {
     }
 
     public List<Player> getPlayers() {
-        List<Player> list = new ArrayList<Player>(world.players.size());
+        List<Player> list = new ArrayList<>(world.players.size());
 
         for (EntityHuman human : world.players) {
             HumanEntity bukkitEntity = human.getBukkitEntity();
@@ -1090,7 +1083,7 @@ public class CraftWorld implements World {
                 if (nmsBlock.getMaterial().isBuildable() || BlockDiodeAbstract.d(nmsBlock)) {
                     boolean taken = false;
                     AxisAlignedBB bb = EntityHanging.calculateBoundingBox(pos,CraftBlock.blockFaceToNotch(dir).opposite(),width,height);
-                    List<net.minecraft.server.Entity> list = (List<net.minecraft.server.Entity>) world.getEntities(null, bb);
+                    List<net.minecraft.server.Entity> list = world.getEntities(null, bb);
                     for (Iterator<net.minecraft.server.Entity> it = list.iterator(); !taken && it.hasNext();) {
                         net.minecraft.server.Entity e = it.next();
                         if (e instanceof EntityHanging) {
@@ -1152,7 +1145,7 @@ public class CraftWorld implements World {
         Preconditions.checkArgument(entity != null, "Cannot spawn null entity");
 
         if (entity instanceof EntityInsentient) {
-            ((EntityInsentient) entity).prepare(getHandle().E(new BlockPosition(entity)), (GroupDataEntity) null);
+            ((EntityInsentient) entity).prepare(getHandle().E(new BlockPosition(entity)), null);
         }
 
         world.addEntity(entity, reason);
@@ -1237,7 +1230,7 @@ public class CraftWorld implements World {
     }
 
     public File getWorldFolder() {
-        return ((WorldNBTStorage) world.getDataManager()).getDirectory();
+        return world.getDataManager().getDirectory();
     }
 
     public void sendPluginMessage(Plugin source, String channel, byte[] message) {
@@ -1249,7 +1242,7 @@ public class CraftWorld implements World {
     }
 
     public Set<String> getListeningPluginChannels() {
-        Set<String> result = new HashSet<String>();
+        Set<String> result = new HashSet<>();
 
         for (Player player : getPlayers()) {
             result.addAll(player.getListeningPluginChannels());
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index a5bbd8b71..90d84cb88 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -1,5 +1,13 @@
 package org.bukkit.craftbukkit;
 
+import dev.lockedthread.LockedSpigotConfig;
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+import net.minecraft.server.MinecraftServer;
+import org.apache.commons.lang3.JavaVersion;
+import org.apache.commons.lang3.SystemUtils;
+import org.fusesource.jansi.AnsiConsole;
+
 import java.io.File;
 import java.io.IOException;
 import java.text.SimpleDateFormat;
@@ -7,13 +15,6 @@ import java.util.Arrays;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import joptsimple.OptionParser;
-import joptsimple.OptionSet;
-import net.minecraft.server.MinecraftServer;
-
-import org.apache.commons.lang3.JavaVersion;
-import org.apache.commons.lang3.SystemUtils;
-import org.fusesource.jansi.AnsiConsole;
 
 public class Main {
     public static boolean useJline = true;
@@ -148,6 +149,14 @@ public class Main {
                         .defaultsTo(new File("taco.yml"))
                         .describedAs("Yml file");
                 // TacoSpigot end
+
+                // TacoSpigot start
+                acceptsAll(asList("lockedspigot", "lockedspigot-settings"), "File for lockedspigot settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("locked.yml"))
+                        .describedAs("Yml file");
+                // TacoSpigot end
             }
         };
 
@@ -177,8 +186,8 @@ public class Main {
 
             try {
                 // This trick bypasses Maven Shade's clever rewriting of our getProperty call when using String literals
-                String jline_UnsupportedTerminal = new String(new char[] {'j','l','i','n','e','.','U','n','s','u','p','p','o','r','t','e','d','T','e','r','m','i','n','a','l'});
-                String jline_terminal = new String(new char[] {'j','l','i','n','e','.','t','e','r','m','i','n','a','l'});
+                String jline_UnsupportedTerminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+                String jline_terminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
 
                 useJline = !(jline_UnsupportedTerminal).equals(System.getProperty(jline_terminal));
 
@@ -201,21 +210,22 @@ public class Main {
 
                 // Spigot Start
                 int maxPermGen = 0; // In kb
-                for ( String s : java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments() )
-                {
-                    if ( s.startsWith( "-XX:MaxPermSize" ) )
-                    {
-                        maxPermGen = Integer.parseInt( s.replaceAll( "[^\\d]", "" ) );
-                        maxPermGen <<= 10 * ("kmg".indexOf( Character.toLowerCase( s.charAt( s.length() - 1 ) ) ) );
+                for (String s : java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments()) {
+                    if (s.startsWith("-XX:MaxPermSize")) {
+                        maxPermGen = Integer.parseInt(s.replaceAll("[^\\d]", ""));
+                        maxPermGen <<= 10 * ("kmg".indexOf(Character.toLowerCase(s.charAt(s.length() - 1))));
                     }
                 }
-                if ( Float.parseFloat( System.getProperty( "java.class.version" ) ) < 52 && maxPermGen < ( 128 << 10 ) ) // 128mb
+                if (Float.parseFloat(System.getProperty("java.class.version")) < 52 && maxPermGen < (128 << 10)) // 128mb
                 {
-                    System.out.println( "Warning, your max perm gen size is not set or less than 128mb. It is recommended you restart Java with the following argument: -XX:MaxPermSize=128M" );
-                    System.out.println( "Please see http://www.spigotmc.org/wiki/changing-permgen-size/ for more details and more in-depth instructions." );
+                    System.out.println("Warning, your max perm gen size is not set or less than 128mb. It is recommended you restart Java with the following argument: -XX:MaxPermSize=128M");
+                    System.out.println("Please see http://www.spigotmc.org/wiki/changing-permgen-size/ for more details and more in-depth instructions.");
                 }
                 // Spigot End
-                net.techcable.tacospigot.TacoSpigotConfig.init((File) options.valueOf("taco-settings")); // TacoSpigot - load config before we load libraries to allow access while loading
+                net.techcable.tacospigot.TacoSpigotConfig.init((File) options.valueOf("taco-settings")); // LockedSpigot
+
+                LockedSpigotConfig.init((File) options.valueOf("lockedspigot-settings")); // TacoSpigot - load config before we load libraries to allow access while loading
+
                 System.out.println("Loading libraries, please wait...");
                 MinecraftServer.main(options);
             } catch (Throwable t) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
index f233b7ab3..623316d11 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
@@ -17,7 +17,7 @@ public class CraftBanner extends CraftBlockState implements Banner {
 
     private final TileEntityBanner banner;
     private DyeColor base;
-    private List<Pattern> patterns = new ArrayList<Pattern>();
+    private List<Pattern> patterns = new ArrayList<>();
 
     public CraftBanner(final Block block) {
         super(block);
@@ -29,7 +29,7 @@ public class CraftBanner extends CraftBlockState implements Banner {
 
         if (banner.patterns != null) {
             for (int i = 0; i < banner.patterns.size(); i++) {
-                NBTTagCompound p = (NBTTagCompound) banner.patterns.get(i);
+                NBTTagCompound p = banner.patterns.get(i);
                 patterns.add(new Pattern(DyeColor.getByDyeData((byte) p.getInt("Color")), PatternType.getByIdentifier(p.getString("Pattern"))));
             }
         }
@@ -43,7 +43,7 @@ public class CraftBanner extends CraftBlockState implements Banner {
 
         if (banner.patterns != null) {
             for (int i = 0; i < banner.patterns.size(); i++) {
-                NBTTagCompound p = (NBTTagCompound) banner.patterns.get(i);
+                NBTTagCompound p = banner.patterns.get(i);
                 patterns.add(new Pattern(DyeColor.getByDyeData((byte) p.getInt("Color")), PatternType.getByIdentifier(p.getString("Pattern"))));
             }
         }
@@ -61,12 +61,12 @@ public class CraftBanner extends CraftBlockState implements Banner {
 
     @Override
     public List<Pattern> getPatterns() {
-        return new ArrayList<Pattern>(patterns);
+        return new ArrayList<>(patterns);
     }
 
     @Override
     public void setPatterns(List<Pattern> patterns) {
-        this.patterns = new ArrayList<Pattern>(patterns);
+        this.patterns = new ArrayList<>(patterns);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 22a80551b..3cac9be9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -29,8 +29,8 @@ public class CraftBlock implements Block {
     private final int x;
     private final int y;
     private final int z;
-    private static final Biome BIOME_MAPPING[];
-    private static final BiomeBase BIOMEBASE_MAPPING[];
+    private static final Biome[] BIOME_MAPPING;
+    private static final BiomeBase[] BIOMEBASE_MAPPING;
 
     public CraftBlock(CraftChunk chunk, int x, int y, int z) {
         this.x = x;
@@ -416,7 +416,7 @@ public class CraftBlock implements Block {
     }
 
     public Collection<ItemStack> getDrops() {
-        List<ItemStack> drops = new ArrayList<ItemStack>();
+        List<ItemStack> drops = new ArrayList<>();
 
         net.minecraft.server.Block block = this.getNMSBlock();
         if (block != Blocks.AIR) {
@@ -442,7 +442,7 @@ public class CraftBlock implements Block {
                         drops.add(CraftItemStack.asBukkitCopy(nmsStack));
                         // We don't want to drop cocoa blocks, we want to drop cocoa beans.
                     } else if (Blocks.COCOA == block) {
-                        int age = (Integer) block.fromLegacyData(data).get(BlockCocoa.AGE);
+                        int age = block.fromLegacyData(data).get(BlockCocoa.AGE);
                         int dropAmount = (age >= 2 ? 3 : 1);
                         for (int j = 0; j < dropAmount; ++j) {
                             drops.add(new ItemStack(Material.INK_SACK, 1, (short) 3));
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
index 4a8c8141b..bd87d5bac 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
@@ -14,6 +14,8 @@ import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 
 import java.util.List;
+import java.util.Objects;
+
 import net.minecraft.server.TileEntity;
 
 public class CraftBlockState implements BlockState {
@@ -207,7 +209,7 @@ public class CraftBlockState implements BlockState {
             return false;
         }
         final CraftBlockState other = (CraftBlockState) obj;
-        if (this.world != other.world && (this.world == null || !this.world.equals(other.world))) {
+        if (!Objects.equals(this.world, other.world)) {
             return false;
         }
         if (this.x != other.x) {
@@ -222,10 +224,7 @@ public class CraftBlockState implements BlockState {
         if (this.type != other.type) {
             return false;
         }
-        if (this.data != other.data && (this.data == null || !this.data.equals(other.data))) {
-            return false;
-        }
-        return true;
+        return this.data == other.data || (this.data != null && this.data.equals(other.data));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index 69e5da4c6..8a6adeaea 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -10,7 +10,7 @@ public class ChunkIOExecutor {
     static final int BASE_THREADS = 2; // PaperSpigot - Bumped value
     static final int PLAYERS_PER_THREAD = 50;
 
-    private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException>(new ChunkIOProvider(), BASE_THREADS);
+    private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<>(new ChunkIOProvider(), BASE_THREADS);
 
     public static Chunk syncChunkLoad(World world, ChunkRegionLoader loader, ChunkProviderServer provider, int x, int z) {
         return instance.getSkipQueue(new QueuedChunk(x, z, loader, world, provider));
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
index 1178ad7f7..7a86b4319 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOProvider.java
@@ -10,10 +10,6 @@ import org.bukkit.craftbukkit.util.AsynchronousExecutor;
 import org.bukkit.craftbukkit.util.LongHash;
 
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import net.minecraft.server.Entity;
-import net.minecraft.server.EntitySlice;
 
 class ChunkIOProvider implements AsynchronousExecutor.CallBackProvider<QueuedChunk, Chunk, Runnable, RuntimeException> {
     private final AtomicInteger threadNumber = new AtomicInteger(1);
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java b/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
index 26a2fb894..b4e2fe511 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
@@ -14,7 +14,7 @@ import org.bukkit.craftbukkit.CraftServer;
 
 public class ColouredConsoleSender extends CraftConsoleCommandSender {
     private final Terminal terminal;
-    private final Map<ChatColor, String> replacements = new EnumMap<ChatColor, String>(ChatColor.class);
+    private final Map<ChatColor, String> replacements = new EnumMap<>(ChatColor.class);
     private final ChatColor[] colors = ChatColor.values();
 
     protected ColouredConsoleSender() {
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index db46eb055..e8c34d4e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -60,9 +60,9 @@ public final class VanillaCommandWrapper extends VanillaCommand {
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
         if (location == null) { // PaperSpigot use location information if available
-            return (List<String>) vanillaCommand.tabComplete(getListener(sender), args, new BlockPosition(0, 0, 0));
+            return vanillaCommand.tabComplete(getListener(sender), args, new BlockPosition(0, 0, 0));
         } else {
-            return (List<String>) vanillaCommand.tabComplete(getListener(sender), args, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ()));
+            return vanillaCommand.tabComplete(getListener(sender), args, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ()));
         }
     }
     // PaperSpigot end
@@ -92,15 +92,12 @@ public final class VanillaCommandWrapper extends VanillaCommand {
         try {
             if (vanillaCommand.canUse(icommandlistener)) {
                 if (i > -1) {
-                    List<Entity> list = ((List<Entity>)PlayerSelector.getPlayers(icommandlistener, as[i], Entity.class));
+                    List<Entity> list = PlayerSelector.getPlayers(icommandlistener, as[i], Entity.class);
                     String s2 = as[i];
                     
                     icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, list.size());
-                    Iterator<Entity> iterator = list.iterator();
-
-                    while (iterator.hasNext()) {
-                        Entity entity = iterator.next();
 
+                    for (Entity entity : list) {
                         CommandSender oldSender = lastSender;
                         lastSender = bSender;
                         try {
@@ -108,7 +105,7 @@ public final class VanillaCommandWrapper extends VanillaCommand {
                             vanillaCommand.execute(icommandlistener, as);
                             j++;
                         } catch (ExceptionUsage exceptionusage) {
-                            ChatMessage chatmessage = new ChatMessage("commands.generic.usage", new Object[] { new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs())});
+                            ChatMessage chatmessage = new ChatMessage("commands.generic.usage", new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()));
                             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                             icommandlistener.sendMessage(chatmessage);
                         } catch (CommandException commandexception) {
@@ -124,18 +121,18 @@ public final class VanillaCommandWrapper extends VanillaCommand {
                     j++;
                 }
             } else {
-                ChatMessage chatmessage = new ChatMessage("commands.generic.permission", new Object[0]);
+                ChatMessage chatmessage = new ChatMessage("commands.generic.permission");
                 chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                 icommandlistener.sendMessage(chatmessage);
             }
         } catch (ExceptionUsage exceptionusage) {
-            ChatMessage chatmessage1 = new ChatMessage("commands.generic.usage", new Object[] { new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()) });
+            ChatMessage chatmessage1 = new ChatMessage("commands.generic.usage", new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()));
             chatmessage1.getChatModifier().setColor(EnumChatFormat.RED);
             icommandlistener.sendMessage(chatmessage1);
         } catch (CommandException commandexception) {
             CommandAbstract.a(icommandlistener, vanillaCommand, 1, commandexception.getMessage(), commandexception.getArgs());
         } catch (Throwable throwable) {
-            ChatMessage chatmessage3 = new ChatMessage("commands.generic.exception", new Object[0]);
+            ChatMessage chatmessage3 = new ChatMessage("commands.generic.exception");
             chatmessage3.getChatModifier().setColor(EnumChatFormat.RED);
             icommandlistener.sendMessage(chatmessage3);
             if (icommandlistener.f() instanceof EntityMinecartCommandBlock) {
@@ -144,7 +141,7 @@ public final class VanillaCommandWrapper extends VanillaCommand {
                 CommandBlockListenerAbstract listener = (CommandBlockListenerAbstract) icommandlistener;
                 MinecraftServer.LOGGER.log(Level.WARN, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.getChunkCoordinates().getX(), listener.getChunkCoordinates().getY(), listener.getChunkCoordinates().getZ()), throwable);
             } else {
-                MinecraftServer.LOGGER.log(Level.WARN, String.format("Unknown CommandBlock failed to handle command"), throwable);
+                MinecraftServer.LOGGER.log(Level.WARN, "Unknown CommandBlock failed to handle command", throwable);
             }
         } finally {
             MinecraftServer.getServer().worldServer = prev;
@@ -175,7 +172,7 @@ public final class VanillaCommandWrapper extends VanillaCommand {
         throw new IllegalArgumentException("Cannot make " + sender + " a vanilla command listener");
     }
 
-    private int getPlayerListSize(String as[]) {
+    private int getPlayerListSize(String[] as) {
         for (int i = 0; i < as.length; i++) {
             if (vanillaCommand.isListStart(as, i) && PlayerSelector.isList(as[i])) {
                 return i;
@@ -184,11 +181,9 @@ public final class VanillaCommandWrapper extends VanillaCommand {
         return -1;
     }
 
-    public static String[] dropFirstArgument(String as[]) {
-        String as1[] = new String[as.length - 1];
-        for (int i = 1; i < as.length; i++) {
-            as1[i - 1] = as[i];
-        }
+    public static String[] dropFirstArgument(String[] as) {
+        String[] as1 = new String[as.length - 1];
+        System.arraycopy(as, 1, as1, 0, as.length - 1);
 
         return as1;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
index 30ef7d9af..d834e7efb 100644
--- a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
+++ b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
@@ -12,7 +12,7 @@ import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
  */
 public class ConversationTracker {
 
-    private LinkedList<Conversation> conversationQueue = new LinkedList<Conversation>();
+    private LinkedList<Conversation> conversationQueue = new LinkedList<>();
 
     public synchronized boolean beginConversation(Conversation conversation) {
         if (!conversationQueue.contains(conversation)) {
@@ -43,7 +43,7 @@ public class ConversationTracker {
     public synchronized void abandonAllConversations() {
 
         LinkedList<Conversation> oldQueue = conversationQueue;
-        conversationQueue = new LinkedList<Conversation>();
+        conversationQueue = new LinkedList<>();
         for (Conversation conversation : oldQueue) {
             try {
                 conversation.abandon(new ConversationAbandonedEvent(conversation, new ManuallyAbandonedConversationCanceller()));
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 4f9179908..998683f06 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1,8 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
-import java.util.ArrayList;
-import java.util.Collection;
+
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
@@ -14,7 +13,6 @@ import org.bukkit.Location;
 import org.bukkit.Server;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.metadata.MetadataValue;
@@ -268,7 +266,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
         List<Entity> notchEntityList = entity.world.a(entity, entity.getBoundingBox().grow(x, y, z), null);
-        List<org.bukkit.entity.Entity> bukkitEntityList = new java.util.ArrayList<org.bukkit.entity.Entity>(notchEntityList.size());
+        List<org.bukkit.entity.Entity> bukkitEntityList = new java.util.ArrayList<>(notchEntityList.size());
 
         for (Entity e : notchEntityList) {
             bukkitEntityList.add(e.getBukkitEntity());
@@ -509,7 +507,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public boolean hasPermission(Permission perm) {
-        return this.perm.hasPermission(perm);
+        return CraftEntity.perm.hasPermission(perm);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
index 411c023de..f36e7ee4c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
@@ -1,9 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
-import net.minecraft.server.BlockPosition;
 import net.minecraft.server.EntityHanging;
 import net.minecraft.server.EnumDirection;
-import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 8a08babc1..a07ea137f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -186,21 +186,21 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 break;
             case DISPENSER:
                 if (iinventory instanceof TileEntityDispenser) {
-                    getHandle().openContainer((TileEntityDispenser) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:dispenser");
                 }
                 break;
             case DROPPER:
                 if (iinventory instanceof TileEntityDropper) {
-                    getHandle().openContainer((TileEntityDropper) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:dropper");
                 }
                 break;
             case FURNACE:
                 if (iinventory instanceof TileEntityFurnace) {
-                    getHandle().openContainer((TileEntityFurnace) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:furnace");
                 }
@@ -210,7 +210,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 break;
             case BREWING:
                 if (iinventory instanceof TileEntityBrewingStand) {
-                    getHandle().openContainer((TileEntityBrewingStand) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:brewing_stand");
                 }
@@ -220,16 +220,16 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 break;
             case HOPPER:
                 if (iinventory instanceof TileEntityHopper) {
-                    getHandle().openContainer((TileEntityHopper) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else if (iinventory instanceof EntityMinecartHopper) {
-                    getHandle().openContainer((EntityMinecartHopper) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:hopper");
                 }
                 break;
             case BEACON:
                 if (iinventory instanceof TileEntityBeacon) {
-                    getHandle().openContainer((TileEntityBeacon) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:beacon");
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index c2d3866a4..8f4abb293 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -131,7 +131,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         if (maxDistance > 120) {
             maxDistance = 120;
         }
-        ArrayList<Block> blocks = new ArrayList<Block>();
+        ArrayList<Block> blocks = new ArrayList<>();
         Iterator<Block> itr = new BlockIterator(this, maxDistance);
         while (itr.hasNext()) {
             Block block = itr.next();
@@ -157,7 +157,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         if (maxDistance > 120) {
             maxDistance = 120;
         }
-        ArrayList<Block> blocks = new ArrayList<Block>();
+        ArrayList<Block> blocks = new ArrayList<>();
         Iterator<Block> itr = new BlockIterator(this, maxDistance);
         while (itr.hasNext()) {
             Block block = itr.next();
@@ -322,7 +322,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     public Collection<PotionEffect> getActivePotionEffects() {
-        List<PotionEffect> effects = new ArrayList<PotionEffect>();
+        List<PotionEffect> effects = new ArrayList<>();
         for (Object raw : getHandle().effects.values()) {
             if (!(raw instanceof MobEffect))
                 continue;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
index 03e0730b2..6a21ae641 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
@@ -4,7 +4,6 @@ import net.minecraft.server.Blocks;
 import net.minecraft.server.EntityMinecartAbstract;
 
 import net.minecraft.server.IBlockData;
-import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Minecart;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index ad07563d2..68ab91fc6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -10,6 +10,7 @@ import java.io.IOException;
 import java.lang.Override;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -29,7 +30,6 @@ import org.apache.commons.lang.Validate;
 import org.apache.commons.lang.NotImplementedException;
 import org.bukkit.*;
 import org.bukkit.Achievement;
-import org.bukkit.BanList;
 import org.bukkit.Statistic;
 import org.bukkit.Material;
 import org.bukkit.Statistic.Type;
@@ -74,8 +74,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private long lastPlayed = 0;
     private boolean hasPlayedBefore = false;
     private final ConversationTracker conversationTracker = new ConversationTracker();
-    private final Set<String> channels = new HashSet<String>();
-    private final Set<UUID> hiddenPlayers = new HashSet<UUID>();
+    private final Set<String> channels = new HashSet<>();
+    private final Set<UUID> hiddenPlayers = new HashSet<>();
     private int hash = 0;
     private double health = 20;
     private boolean scaledHealth = false;
@@ -279,7 +279,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             name = getName();
         }
         getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromString(name)[0];
-        for (EntityPlayer player : (List<EntityPlayer>)server.getHandle().players) {
+        for (EntityPlayer player : server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME, getHandle()));
             }
@@ -505,7 +505,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (getHandle().playerConnection == null) return;
 
         RenderData data = ((CraftMapView) map).render(this);
-        Collection<MapIcon> icons = new ArrayList<MapIcon>();
+        Collection<MapIcon> icons = new ArrayList<>();
         for (MapCursor cursor : data.cursors) {
             if (cursor.isVisible()) {
                 icons.add(new MapIcon(cursor.getRawType(), cursor.getX(), cursor.getY(), cursor.getDirection()));
@@ -976,7 +976,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         //remove this player from the hidden player's EntityTrackerEntry
         EntityTracker tracker = ((WorldServer) entity.world).tracker;
         EntityPlayer other = ((CraftPlayer) player).getHandle();
-        EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
+        EntityTrackerEntry entry = tracker.trackedEntities.get(other.getId());
         if (entry != null) {
             entry.clear(getHandle());
         }
@@ -998,7 +998,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, other));
 
-        EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
+        EntityTrackerEntry entry = tracker.trackedEntities.get(other.getId());
         if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
             entry.updatePlayer(getHandle());
         }
@@ -1015,7 +1015,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        Map<String, Object> result = new LinkedHashMap<>();
 
         result.put("name", getName());
 
@@ -1181,7 +1181,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
             for (String channel : listening) {
                 try {
-                    stream.write(channel.getBytes("UTF8"));
+                    stream.write(channel.getBytes(StandardCharsets.UTF_8));
                     stream.write((byte) 0);
                 } catch (IOException ex) {
                     Logger.getLogger(CraftPlayer.class.getName()).log(Level.SEVERE, "Could not send Plugin Channel REGISTER to " + getName(), ex);
@@ -1387,7 +1387,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         injectScaledMaxHealth(set, true);
 
-        getHandle().getDataWatcher().watch(6, (float) getScaledHealth());
+        getHandle().getDataWatcher().watch(6, getScaledHealth());
         getHandle().playerConnection.sendPacket(new PacketPlayOutUpdateHealth(getScaledHealth(), getHandle().getFoodData().getFoodLevel(), getHandle().getFoodData().getSaturationLevel()));
         getHandle().playerConnection.sendPacket(new PacketPlayOutUpdateAttributes(getHandle().getId(), set));
 
@@ -1546,7 +1546,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         @Override
         public Set<Player> getHiddenPlayers()
         {
-            Set<Player> ret = new HashSet<Player>();
+            Set<Player> ret = new HashSet<>();
             for ( UUID u : hiddenPlayers )
             {
                 ret.add( getServer().getPlayer( u ) );
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
index 2f29f2fc7..1c5bbed78 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
@@ -56,7 +56,7 @@ public abstract class CraftProjectile extends AbstractProjectile implements Proj
         }
         getHandle().shooter = ((CraftLivingEntity) shooter).getHandle();
         if (shooter instanceof CraftHumanEntity) {
-            getHandle().shooterName = ((CraftHumanEntity) shooter).getName();
+            getHandle().shooterName = shooter.getName();
         }
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
index ee21d7b6e..6da373b71 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWaterMob.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.entity;
 import net.minecraft.server.EntityWaterAnimal;
 
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.WaterMob;
 
 public class CraftWaterMob extends CraftLivingEntity implements WaterMob {
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index db915033b..b9b6f3247 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -99,8 +99,8 @@ public class CraftEventFactory {
         Block blockClicked = craftWorld.getBlockAt(clickedX, clickedY, clickedZ);
 
         boolean canBuild = true;
-        for (int i = 0; i < blockStates.size(); i++) {
-            if (!canBuild(craftWorld, player, blockStates.get(i).getX(), blockStates.get(i).getZ())) {
+        for (BlockState blockState : blockStates) {
+            if (!canBuild(craftWorld, player, blockState.getX(), blockState.getZ())) {
                 canBuild = false;
                 break;
             }
@@ -368,7 +368,7 @@ public class CraftEventFactory {
     }
 
     public static EntityDeathEvent callEntityDeathEvent(EntityLiving victim) {
-        return callEntityDeathEvent(victim, new ArrayList<org.bukkit.inventory.ItemStack>(0));
+        return callEntityDeathEvent(victim, new ArrayList<>(0));
     }
 
     public static EntityDeathEvent callEntityDeathEvent(EntityLiving victim, List<org.bukkit.inventory.ItemStack> drops) {
@@ -562,8 +562,8 @@ public class CraftEventFactory {
     private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
 
     public static EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, DamageSource source, double rawDamage, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
-        Map<DamageModifier, Double> modifiers = new EnumMap<DamageModifier, Double>(DamageModifier.class);
-        Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<DamageModifier, Function<? super Double, Double>>(DamageModifier.class);
+        Map<DamageModifier, Double> modifiers = new EnumMap<>(DamageModifier.class);
+        Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<>(DamageModifier.class);
         modifiers.put(DamageModifier.BASE, rawDamage);
         modifierFunctions.put(DamageModifier.BASE, ZERO);
         if (source == DamageSource.FALLING_BLOCK || source == DamageSource.ANVIL) {
@@ -595,7 +595,7 @@ public class CraftEventFactory {
             return false;
         }
 
-        final EnumMap<DamageModifier, Double> modifiers = new EnumMap<DamageModifier, Double>(DamageModifier.class);
+        final EnumMap<DamageModifier, Double> modifiers = new EnumMap<>(DamageModifier.class);
         final EnumMap<DamageModifier, Function<? super Double, Double>> functions = new EnumMap(DamageModifier.class);
 
         modifiers.put(DamageModifier.BASE, damage);
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
index fc4bc81fc..600377f46 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
@@ -28,7 +28,7 @@ public class NormalChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public List<BlockPopulator> getDefaultPopulators(org.bukkit.World world) {
-        return new ArrayList<BlockPopulator>();
+        return new ArrayList<>();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
index 2089a5f52..c1533d67c 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
@@ -16,7 +16,7 @@ public class CustomIndexHelpTopic extends IndexHelpTopic {
     private final HelpMap helpMap;
 
     public CustomIndexHelpTopic(HelpMap helpMap, String name, String shortText, String permission, List<String> futureTopics, String preamble) {
-        super(name, shortText, permission, new HashSet<HelpTopic>(), preamble);
+        super(name, shortText, permission, new HashSet<>(), preamble);
         this.helpMap = helpMap;
         this.futureTopics = futureTopics;
     }
@@ -24,7 +24,7 @@ public class CustomIndexHelpTopic extends IndexHelpTopic {
     @Override
     public String getFullText(CommandSender sender) {
         if (futureTopics != null) {
-            List<HelpTopic> topics = new LinkedList<HelpTopic>();
+            List<HelpTopic> topics = new LinkedList<>();
             for (String futureTopic : futureTopics) {
                 HelpTopic topic = helpMap.getHelpTopic(futureTopic);
                 if (topic != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java b/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
index 60a6221b4..8552f5021 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
@@ -54,7 +54,7 @@ public class HelpYamlReader {
      * @return A list of general topics.
      */
     public List<HelpTopic> getGeneralTopics() {
-        List<HelpTopic> topics = new LinkedList<HelpTopic>();
+        List<HelpTopic> topics = new LinkedList<>();
         ConfigurationSection generalTopics = helpYaml.getConfigurationSection("general-topics");
         if (generalTopics != null) {
             for (String topicName : generalTopics.getKeys(false)) {
@@ -74,7 +74,7 @@ public class HelpYamlReader {
      * @return A list of index topics.
      */
     public List<HelpTopic> getIndexTopics() {
-        List<HelpTopic> topics = new LinkedList<HelpTopic>();
+        List<HelpTopic> topics = new LinkedList<>();
         ConfigurationSection indexTopics = helpYaml.getConfigurationSection("index-topics");
         if (indexTopics != null) {
             for (String topicName : indexTopics.getKeys(false)) {
@@ -95,7 +95,7 @@ public class HelpYamlReader {
      * @return A list of amendments.
      */
     public List<HelpTopicAmendment> getTopicAmendments() {
-        List<HelpTopicAmendment> amendments = new LinkedList<HelpTopicAmendment>();
+        List<HelpTopicAmendment> amendments = new LinkedList<>();
         ConfigurationSection commandTopics = helpYaml.getConfigurationSection("amended-topics");
         if (commandTopics != null) {
             for (String topicName : commandTopics.getKeys(false)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index 7dd5afef0..4637e02d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -26,8 +26,8 @@ public class SimpleHelpMap implements HelpMap {
 
     @SuppressWarnings("unchecked")
     public SimpleHelpMap(CraftServer server) {
-        this.helpTopics = new TreeMap<String, HelpTopic>(HelpTopicComparator.topicNameComparatorInstance()); // Using a TreeMap for its explicit sorting on key
-        this.topicFactoryMap = new HashMap<Class, HelpTopicFactory<Command>>();
+        this.helpTopics = new TreeMap<>(HelpTopicComparator.topicNameComparatorInstance()); // Using a TreeMap for its explicit sorting on key
+        this.topicFactoryMap = new HashMap<>();
         this.server = server;
         this.yaml = new HelpYamlReader(server);
 
@@ -98,7 +98,7 @@ public class SimpleHelpMap implements HelpMap {
      */
     public synchronized void initializeCommands() {
         // ** Load topics from highest to lowest priority order **
-        Set<String> ignoredPlugins = new HashSet<String>(yaml.getIgnoredPlugins());
+        Set<String> ignoredPlugins = new HashSet<>(yaml.getIgnoredPlugins());
 
         // Don't load any automatic help topics if All is ignored
         if (ignoredPlugins.contains("All")) {
@@ -147,7 +147,7 @@ public class SimpleHelpMap implements HelpMap {
         }
 
         // Initialize plugin-level sub-topics
-        Map<String, Set<HelpTopic>> pluginIndexes = new HashMap<String, Set<HelpTopic>>();
+        Map<String, Set<HelpTopic>> pluginIndexes = new HashMap<>();
         fillPluginIndexes(pluginIndexes, server.getCommandMap().getCommands());
 
         for (Map.Entry<String, Set<HelpTopic>> entry : pluginIndexes.entrySet()) {
@@ -172,7 +172,7 @@ public class SimpleHelpMap implements HelpMap {
                 HelpTopic topic = getHelpTopic("/" + command.getLabel());
                 if (topic != null) {
                     if (!pluginIndexes.containsKey(pluginName)) {
-                        pluginIndexes.put(pluginName, new TreeSet<HelpTopic>(HelpTopicComparator.helpTopicComparatorInstance())); //keep things in topic order
+                        pluginIndexes.put(pluginName, new TreeSet<>(HelpTopicComparator.helpTopicComparatorInstance())); //keep things in topic order
                     }
                     pluginIndexes.get(pluginName).add(topic);
                 }
@@ -197,10 +197,7 @@ public class SimpleHelpMap implements HelpMap {
         if ((command instanceof BukkitCommand || command instanceof VanillaCommand) && ignoredPlugins.contains("Bukkit")) {
             return true;
         }
-        if (command instanceof PluginIdentifiableCommand && ignoredPlugins.contains(((PluginIdentifiableCommand)command).getPlugin().getName())) {
-            return true;
-        }
-        return false;
+        return command instanceof PluginIdentifiableCommand && ignoredPlugins.contains(((PluginIdentifiableCommand) command).getPlugin().getName());
     }
 
     public void registerHelpTopicFactory(Class commandClass, HelpTopicFactory factory) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
index 69f17db84..c2855a96f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
@@ -2,7 +2,6 @@ package org.bukkit.craftbukkit.inventory;
 
 import net.minecraft.server.RecipesFurnace;
 
-import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.FurnaceRecipe;
 import org.bukkit.inventory.ItemStack;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index e9a3c5013..3b7a73bb7 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -155,7 +155,7 @@ public class CraftInventory implements Inventory {
     }
 
     public HashMap<Integer, ItemStack> all(int materialId) {
-        HashMap<Integer, ItemStack> slots = new HashMap<Integer, ItemStack>();
+        HashMap<Integer, ItemStack> slots = new HashMap<>();
 
         ItemStack[] inventory = getContents();
         for (int i = 0; i < inventory.length; i++) {
@@ -173,7 +173,7 @@ public class CraftInventory implements Inventory {
     }
 
     public HashMap<Integer, ItemStack> all(ItemStack item) {
-        HashMap<Integer, ItemStack> slots = new HashMap<Integer, ItemStack>();
+        HashMap<Integer, ItemStack> slots = new HashMap<>();
         if (item != null) {
             ItemStack[] inventory = getContents();
             for (int i = 0; i < inventory.length; i++) {
@@ -263,7 +263,7 @@ public class CraftInventory implements Inventory {
 
     public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
         Validate.noNullElements(items, "Item cannot be null");
-        HashMap<Integer, ItemStack> leftover = new HashMap<Integer, ItemStack>();
+        HashMap<Integer, ItemStack> leftover = new HashMap<>();
 
         /* TODO: some optimization
          *  - Create a 'firstPartial' with a 'fromIndex'
@@ -328,7 +328,7 @@ public class CraftInventory implements Inventory {
 
     public HashMap<Integer, ItemStack> removeItem(ItemStack... items) {
         Validate.notNull(items, "Items cannot be null");
-        HashMap<Integer, ItemStack> leftover = new HashMap<Integer, ItemStack>();
+        HashMap<Integer, ItemStack> leftover = new HashMap<>();
 
         // TODO: optimization
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
index e99b8ccae..602fffde4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
@@ -58,7 +58,7 @@ public class CraftInventoryCustom extends CraftInventory {
             Validate.notNull(title, "Title cannot be null");
             this.items = new ItemStack[size];
             this.title = title;
-            this.viewers = new ArrayList<HumanEntity>();
+            this.viewers = new ArrayList<>();
             this.owner = owner;
             this.type = InventoryType.CHEST;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
index 87252cad4..32aff0182 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import net.minecraft.server.ITileEntityContainer;
 import net.minecraft.server.ITileInventory;
 import org.bukkit.block.DoubleChest;
 import org.bukkit.inventory.DoubleChestInventory;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 23f05f4db..3e8182a24 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -20,10 +20,6 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
 import com.google.common.collect.ImmutableMap;
-import net.minecraft.server.IChatBaseComponent.ChatSerializer;
-import net.minecraft.server.Items;
-import net.minecraft.server.NBTTagString;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 
 @DelegateDeserialization(ItemStack.class)
 public final class CraftItemStack extends ItemStack {
@@ -194,7 +190,7 @@ public final class CraftItemStack extends ItemStack {
         int size = list.size();
 
         for (int i = 0; i < size; i++) {
-            NBTTagCompound tag = (NBTTagCompound) list.get(i);
+            NBTTagCompound tag = list.get(i);
             short id = tag.getShort(ENCHANTMENTS_ID.NBT);
             if (id == ench.getId()) {
                 tag.setShort(ENCHANTMENTS_LVL.NBT, (short) level);
@@ -246,7 +242,7 @@ public final class CraftItemStack extends ItemStack {
         int size = list.size();
 
         for (int i = 0; i < size; i++) {
-            NBTTagCompound enchantment = (NBTTagCompound) list.get(i);
+            NBTTagCompound enchantment = list.get(i);
             int id = 0xffff & enchantment.getShort(ENCHANTMENTS_ID.NBT);
             if (id == ench.getId()) {
                 index = i;
@@ -293,8 +289,8 @@ public final class CraftItemStack extends ItemStack {
         ImmutableMap.Builder<Enchantment, Integer> result = ImmutableMap.builder();
 
         for (int i = 0; i < list.size(); i++) {
-            int id = 0xffff & ((NBTTagCompound) list.get(i)).getShort(ENCHANTMENTS_ID.NBT);
-            int level = 0xffff & ((NBTTagCompound) list.get(i)).getShort(ENCHANTMENTS_LVL.NBT);
+            int id = 0xffff & list.get(i).getShort(ENCHANTMENTS_ID.NBT);
+            int level = 0xffff & list.get(i).getShort(ENCHANTMENTS_LVL.NBT);
 
             result.put(Enchantment.getById(id), level);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
index 80f9ffa9b..d0031b6d3 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
@@ -23,7 +23,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     static final ItemMetaKey PATTERN = new ItemMetaKey("Pattern", "pattern");
 
     private DyeColor base;
-    private List<Pattern> patterns = new ArrayList<Pattern>();
+    private List<Pattern> patterns = new ArrayList<>();
 
     CraftMetaBanner(CraftMetaItem meta) {
         super(meta);
@@ -34,7 +34,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
         CraftMetaBanner banner = (CraftMetaBanner) meta;
         base = banner.base;
-        patterns = new ArrayList<Pattern>(banner.patterns);
+        patterns = new ArrayList<>(banner.patterns);
     }
 
     CraftMetaBanner(NBTTagCompound tag) {
@@ -111,12 +111,12 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
     @Override
     public List<Pattern> getPatterns() {
-        return new ArrayList<Pattern>(patterns);
+        return new ArrayList<>(patterns);
     }
 
     @Override
     public void setPatterns(List<Pattern> patterns) {
-        this.patterns = new ArrayList<Pattern>(patterns);
+        this.patterns = new ArrayList<>(patterns);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index 0b5ada011..a73d3ffbd 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -38,7 +38,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     protected String title;
     protected String author;
-    public List<IChatBaseComponent> pages = new ArrayList<IChatBaseComponent>();
+    public List<IChatBaseComponent> pages = new ArrayList<>();
     protected Integer generation;
 
     CraftMetaBook(CraftMetaItem meta) {
@@ -269,7 +269,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     @Override
     public CraftMetaBook clone() {
         CraftMetaBook meta = (CraftMetaBook) super.clone();
-        meta.pages = new ArrayList<IChatBaseComponent>(pages);
+        meta.pages = new ArrayList<>(pages);
         return meta;
     }
 
@@ -322,7 +322,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         if (hasPages()) {
-            List<String> pagesString = new ArrayList<String>();
+            List<String> pagesString = new ArrayList<>();
             for (IChatBaseComponent comp : pages) {
                 pagesString.add(CraftChatMessage.fromComponent(comp));
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
index ae3341c4e..032dfe88b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
@@ -1,7 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Map;
 
 import net.minecraft.server.NBTTagCompound;
@@ -16,7 +14,6 @@ import com.google.common.collect.ImmutableMap.Builder;
 import net.minecraft.server.IChatBaseComponent.ChatSerializer;
 import net.minecraft.server.IChatBaseComponent;
 import net.minecraft.server.NBTTagString;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
@@ -107,8 +104,7 @@ class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
 
     @Override
     public CraftMetaBookSigned clone() {
-        CraftMetaBookSigned meta = (CraftMetaBookSigned) super.clone();
-        return meta;
+        return (CraftMetaBookSigned) super.clone();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
index 6c6fde739..c26dcdd9d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
@@ -66,12 +66,10 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
 
     @Override
     boolean applicableTo(Material type) {
-        switch (type) {
-            case FIREWORK_CHARGE:
-                return true;
-            default:
-                return false;
+        if (type == Material.FIREWORK_CHARGE) {
+            return true;
         }
+        return false;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
index 8d44e55e6..837073a07 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
@@ -30,7 +30,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         CraftMetaEnchantedBook that = (CraftMetaEnchantedBook) meta;
 
         if (that.hasEnchants()) {
-            this.enchantments = new HashMap<Enchantment, Integer>(that.enchantments);
+            this.enchantments = new HashMap<>(that.enchantments);
         }
     }
 
@@ -59,12 +59,10 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
 
     @Override
     boolean applicableTo(Material type) {
-        switch (type) {
-            case ENCHANTED_BOOK:
-                return true;
-            default:
-                return false;
+        if (type == Material.ENCHANTED_BOOK) {
+            return true;
         }
+        return false;
     }
 
     @Override
@@ -107,7 +105,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         CraftMetaEnchantedBook meta = (CraftMetaEnchantedBook) super.clone();
 
         if (this.enchantments != null) {
-            meta.enchantments = new HashMap<Enchantment, Integer>(this.enchantments);
+            meta.enchantments = new HashMap<>(this.enchantments);
         }
 
         return meta;
@@ -144,7 +142,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
 
     public boolean addStoredEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
         if (enchantments == null) {
-            enchantments = new HashMap<Enchantment, Integer>(4);
+            enchantments = new HashMap<>(4);
         }
 
         if (ignoreRestrictions || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
index 5a409aebb..968f1cdf8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
@@ -69,7 +69,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         this.power = that.power;
 
         if (that.hasEffects()) {
-            this.effects = new ArrayList<FireworkEffect>(that.effects);
+            this.effects = new ArrayList<>(that.effects);
         }
     }
 
@@ -89,10 +89,10 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
 
         NBTTagList fireworkEffects = fireworks.getList(EXPLOSIONS.NBT, 10);
-        List<FireworkEffect> effects = this.effects = new ArrayList<FireworkEffect>(fireworkEffects.size());
+        List<FireworkEffect> effects = this.effects = new ArrayList<>(fireworkEffects.size());
 
         for (int i = 0; i < fireworkEffects.size(); i++) {
-            effects.add(getEffect((NBTTagCompound) fireworkEffects.get(i)));
+            effects.add(getEffect(fireworkEffects.get(i)));
         }
     }
 
@@ -189,7 +189,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
 
         List<FireworkEffect> effects = this.effects;
         if (effects == null) {
-            effects = this.effects = new ArrayList<FireworkEffect>();
+            effects = this.effects = new ArrayList<>();
         }
 
         for (Object obj : collection) {
@@ -243,12 +243,10 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
-            case FIREWORK:
-                return true;
-            default:
-                return false;
+        if (type == Material.FIREWORK) {
+            return true;
         }
+        return false;
     }
 
     @Override
@@ -318,7 +316,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         CraftMetaFirework meta = (CraftMetaFirework) super.clone();
 
         if (this.effects != null) {
-            meta.effects = new ArrayList<FireworkEffect>(this.effects);
+            meta.effects = new ArrayList<>(this.effects);
         }
 
         return meta;
@@ -327,7 +325,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     public void addEffect(FireworkEffect effect) {
         Validate.notNull(effect, "Effect cannot be null");
         if (this.effects == null) {
-            this.effects = new ArrayList<FireworkEffect>();
+            this.effects = new ArrayList<>();
         }
         this.effects.add(effect);
     }
@@ -340,7 +338,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
 
         List<FireworkEffect> list = this.effects;
         if (list == null) {
-            list = this.effects = new ArrayList<FireworkEffect>();
+            list = this.effects = new ArrayList<>();
         }
 
         for (FireworkEffect effect : effects) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index eaaa6a11a..6bc563159 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -40,7 +40,6 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.util.EnumSet;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -153,9 +152,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
             try {
                 return constructor.newInstance(map);
-            } catch (final InstantiationException e) {
-                throw new AssertionError(e);
-            } catch (final IllegalAccessException e) {
+            } catch (final InstantiationException | IllegalAccessException e) {
                 throw new AssertionError(e);
             } catch (final InvocationTargetException e) {
                 throw e.getCause();
@@ -228,7 +225,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
     private static final Set<String> HANDLED_TAGS = Sets.newHashSet();
 
-    private final Map<String, NBTBase> unhandledTags = new HashMap<String, NBTBase>();
+    private final Map<String, NBTBase> unhandledTags = new HashMap<>();
 
     CraftMetaItem(CraftMetaItem meta) {
         if (meta == null) {
@@ -238,11 +235,11 @@ class CraftMetaItem implements ItemMeta, Repairable {
         this.displayName = meta.displayName;
 
         if (meta.hasLore()) {
-            this.lore = new ArrayList<String>(meta.lore);
+            this.lore = new ArrayList<>(meta.lore);
         }
 
         if (meta.enchantments != null) { // Spigot
-            this.enchantments = new HashMap<Enchantment, Integer>(meta.enchantments);
+            this.enchantments = new HashMap<>(meta.enchantments);
         }
 
         this.repairCost = meta.repairCost;
@@ -261,7 +258,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
             if (display.hasKey(LORE.NBT)) {
                 NBTTagList list = display.getList(LORE.NBT, 8);
-                lore = new ArrayList<String>(list.size());
+                lore = new ArrayList<>(list.size());
 
                 for (int index = 0; index < list.size(); index++) {
                     String line = limit( list.getString(index), 1024 ); // Spigot
@@ -285,9 +282,9 @@ class CraftMetaItem implements ItemMeta, Repairable {
             NBTTagList nbttaglist = tag.getList(ATTRIBUTES.NBT, 10);
 
             // Spigot start
-            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTracker = new gnu.trove.map.hash.TObjectDoubleHashMap<String>();
-            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTrackerX = new gnu.trove.map.hash.TObjectDoubleHashMap<String>();
-            Map<String, IAttribute> attributesByName = new HashMap<String, IAttribute>();
+            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTracker = new gnu.trove.map.hash.TObjectDoubleHashMap<>();
+            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTrackerX = new gnu.trove.map.hash.TObjectDoubleHashMap<>();
+            Map<String, IAttribute> attributesByName = new HashMap<>();
             attributeTracker.put( "generic.maxHealth", 20.0 );
             attributesByName.put( "generic.maxHealth", GenericAttributes.maxHealth );
             attributeTracker.put( "generic.followRange", 32.0 );
@@ -301,9 +298,9 @@ class CraftMetaItem implements ItemMeta, Repairable {
             NBTTagList oldList = nbttaglist;
             nbttaglist = new NBTTagList();
 
-            List<NBTTagCompound> op0 = new ArrayList<NBTTagCompound>();
-            List<NBTTagCompound> op1 = new ArrayList<NBTTagCompound>();
-            List<NBTTagCompound> op2 = new ArrayList<NBTTagCompound>();
+            List<NBTTagCompound> op0 = new ArrayList<>();
+            List<NBTTagCompound> op1 = new ArrayList<>();
+            List<NBTTagCompound> op2 = new ArrayList<>();
 
             for ( int i = 0; i < oldList.size(); ++i )
             {
@@ -405,7 +402,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                 if (!(nbttaglist.get(i) instanceof NBTTagCompound)) {
                     continue;
                 }
-                NBTTagCompound nbttagcompound = (NBTTagCompound) nbttaglist.get(i);
+                NBTTagCompound nbttagcompound = nbttaglist.get(i);
 
                 if (!nbttagcompound.hasKeyOfType(ATTRIBUTES_UUID_HIGH.NBT, 99)) {
                     continue;
@@ -463,11 +460,11 @@ class CraftMetaItem implements ItemMeta, Repairable {
         }
 
         NBTTagList ench = tag.getList(key.NBT, 10);
-        Map<Enchantment, Integer> enchantments = new HashMap<Enchantment, Integer>(ench.size());
+        Map<Enchantment, Integer> enchantments = new HashMap<>(ench.size());
 
         for (int i = 0; i < ench.size(); i++) {
-            int id = 0xffff & ((NBTTagCompound) ench.get(i)).getShort(ENCHANTMENTS_ID.NBT);
-            int level = 0xffff & ((NBTTagCompound) ench.get(i)).getShort(ENCHANTMENTS_LVL.NBT);
+            int id = 0xffff & ench.get(i).getShort(ENCHANTMENTS_ID.NBT);
+            int level = 0xffff & ench.get(i).getShort(ENCHANTMENTS_LVL.NBT);
 
             // Spigot start - skip invalid enchantments
             Enchantment e = Enchantment.getById(id);
@@ -484,7 +481,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
         Iterable<?> lore = SerializableMeta.getObject(Iterable.class, map, LORE.BUKKIT, true);
         if (lore != null) {
-            safelyAdd(lore, this.lore = new ArrayList<String>(), Integer.MAX_VALUE);
+            safelyAdd(lore, this.lore = new ArrayList<>(), Integer.MAX_VALUE);
         }
 
         enchantments = buildEnchantments(map, ENCHANTMENTS);
@@ -542,7 +539,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
             return null;
         }
 
-        Map<Enchantment, Integer> enchantments = new HashMap<Enchantment, Integer>(ench.size());
+        Map<Enchantment, Integer> enchantments = new HashMap<>(ench.size());
         for (Map.Entry<?, ?> entry : ench.entrySet()) {
             Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
 
@@ -677,7 +674,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
     public boolean addEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
         if (enchantments == null) {
-            enchantments = new HashMap<Enchantment, Integer>(4);
+            enchantments = new HashMap<>(4);
         }
 
         if (ignoreRestrictions || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
@@ -744,7 +741,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
     }
 
     public List<String> getLore() {
-        return this.lore == null ? null : new ArrayList<String>(this.lore);
+        return this.lore == null ? null : new ArrayList<>(this.lore);
     }
 
     public void setLore(List<String> lore) { // too tired to think if .clone is better
@@ -752,7 +749,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
             this.lore = null;
         } else {
             if (this.lore == null) {
-                safelyAdd(lore, this.lore = new ArrayList<String>(lore.size()), Integer.MAX_VALUE);
+                safelyAdd(lore, this.lore = new ArrayList<>(lore.size()), Integer.MAX_VALUE);
             } else {
                 this.lore.clear();
                 safelyAdd(lore, this.lore, Integer.MAX_VALUE);
@@ -832,10 +829,10 @@ class CraftMetaItem implements ItemMeta, Repairable {
         try {
             CraftMetaItem clone = (CraftMetaItem) super.clone();
             if (this.lore != null) {
-                clone.lore = new ArrayList<String>(this.lore);
+                clone.lore = new ArrayList<>(this.lore);
             }
             if (this.enchantments != null) {
-                clone.enchantments = new HashMap<Enchantment, Integer>(this.enchantments);
+                clone.enchantments = new HashMap<>(this.enchantments);
             }
             clone.hideFlag = this.hideFlag;
             return clone;
@@ -875,7 +872,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
         // Spigot end
 
 
-        Set<String> hideFlags = new HashSet<String>();
+        Set<String> hideFlags = new HashSet<>();
         for (ItemFlag hideFlagEnum : getItemFlags()) {
             hideFlags.add(hideFlagEnum.name());
         }
@@ -883,7 +880,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
             builder.put(HIDEFLAGS.BUKKIT, hideFlags);
         }
 
-        final Map<String, NBTBase> internalTags = new HashMap<String, NBTBase>(unhandledTags);
+        final Map<String, NBTBase> internalTags = new HashMap<>(unhandledTags);
         serializeInternal(internalTags);
         if (!internalTags.isEmpty()) {
             NBTTagCompound internal = new NBTTagCompound();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
index d8af39054..7504ab703 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
@@ -59,12 +59,10 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
 
     @Override
     boolean applicableTo(Material type) {
-        switch (type) {
-            case MAP:
-                return true;
-            default:
-                return false;
+        if (type == Material.MAP) {
+            return true;
         }
+        return false;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
index 5b2d12bb6..78d215510 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
@@ -37,7 +37,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
         }
         CraftMetaPotion potionMeta = (CraftMetaPotion) meta;
         if (potionMeta.hasCustomEffects()) {
-            this.customEffects = new ArrayList<PotionEffect>(potionMeta.customEffects);
+            this.customEffects = new ArrayList<>(potionMeta.customEffects);
         }
     }
 
@@ -47,7 +47,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
         if (tag.hasKey(POTION_EFFECTS.NBT)) {
             NBTTagList list = tag.getList(POTION_EFFECTS.NBT, 10);
             int length = list.size();
-            customEffects = new ArrayList<PotionEffect>(length);
+            customEffects = new ArrayList<>(length);
 
             for (int i = 0; i < length; i++) {
                 NBTTagCompound effect = list.get(i);
@@ -107,19 +107,17 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
-            case POTION:
-                return true;
-            default:
-                return false;
+        if (type == Material.POTION) {
+            return true;
         }
+        return false;
     }
 
     @Override
     public CraftMetaPotion clone() {
         CraftMetaPotion clone = (CraftMetaPotion) super.clone();
         if (this.customEffects != null) {
-            clone.customEffects = new ArrayList<PotionEffect>(this.customEffects);
+            clone.customEffects = new ArrayList<>(this.customEffects);
         }
         return clone;
     }
@@ -152,7 +150,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
             }
         } else {
             if (customEffects == null) {
-                customEffects = new ArrayList<PotionEffect>();
+                customEffects = new ArrayList<>();
             }
             customEffects.add(effect);
             return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
index 55bbad76b..cb266719f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
@@ -83,15 +83,11 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
             // Spigot start - do an async lookup of the profile. 
             // Unfortunately there is not way to refresh the holding
             // inventory, so that responsibility is left to the user.
-            net.minecraft.server.TileEntitySkull.b(profile, new com.google.common.base.Predicate<GameProfile>() {
-
-                @Override
-                public boolean apply(GameProfile input) {
-                    NBTTagCompound owner = new NBTTagCompound();
-                    GameProfileSerializer.serialize( owner, input );
-                    tag.set( SKULL_OWNER.NBT, owner );
-                    return false;
-                }
+            net.minecraft.server.TileEntitySkull.b(profile, input -> {
+                NBTTagCompound owner1 = new NBTTagCompound();
+                GameProfileSerializer.serialize(owner1, input );
+                tag.set( SKULL_OWNER.NBT, owner1);
+                return false;
             });
             // Spigot end
         }
@@ -108,12 +104,10 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
 
     @Override
     boolean applicableTo(Material type) {
-        switch(type) {
-            case SKULL_ITEM:
-                return true;
-            default:
-                return false;
+        if (type == Material.SKULL_ITEM) {
+            return true;
         }
+        return false;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
index 5e4496678..873968c9d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
@@ -15,7 +15,7 @@ import org.bukkit.inventory.InventoryHolder;
 public class InventoryWrapper implements IInventory {
 
     private final Inventory inventory;
-    private final List<HumanEntity> viewers = new ArrayList<HumanEntity>();
+    private final List<HumanEntity> viewers = new ArrayList<>();
 
     public InventoryWrapper(Inventory inventory) {
         this.inventory = inventory;
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
index 1c3e19811..cf4ecb8c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
@@ -91,7 +91,7 @@ public class CraftMapCanvas implements MapCanvas {
                         i = j;
                         continue;
                     }
-                    catch (NumberFormatException ex) {}
+                    catch (NumberFormatException ignored) {}
                 }
             }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index ad47bdd4d..84b16f253 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -42,7 +42,7 @@ public class CraftMapRenderer extends MapRenderer {
                 continue;
             }
       
-            MapIcon decoration = (MapIcon) worldMap.decorations.get(key);
+            MapIcon decoration = worldMap.decorations.get(key);
             cursors.addCursor(decoration.getX(), decoration.getY(), (byte) (decoration.getRotation() & 15), decoration.getType());
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index 1a150d98b..23fc942d1 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -17,9 +17,9 @@ import org.bukkit.map.MapView;
 
 public final class CraftMapView implements MapView {
 
-    private final Map<CraftPlayer, RenderData> renderCache = new HashMap<CraftPlayer, RenderData>();
-    private final List<MapRenderer> renderers = new ArrayList<MapRenderer>();
-    private final Map<MapRenderer, Map<CraftPlayer, CraftMapCanvas>> canvases = new HashMap<MapRenderer, Map<CraftPlayer, CraftMapCanvas>>();
+    private final Map<CraftPlayer, RenderData> renderCache = new HashMap<>();
+    private final List<MapRenderer> renderers = new ArrayList<>();
+    private final Map<MapRenderer, Map<CraftPlayer, CraftMapCanvas>> canvases = new HashMap<>();
     protected final WorldMap worldMap;
 
     public CraftMapView(WorldMap worldMap) {
@@ -84,13 +84,13 @@ public final class CraftMapView implements MapView {
     }
 
     public List<MapRenderer> getRenderers() {
-        return new ArrayList<MapRenderer>(renderers);
+        return new ArrayList<>(renderers);
     }
 
     public void addRenderer(MapRenderer renderer) {
         if (!renderers.contains(renderer)) {
             renderers.add(renderer);
-            canvases.put(renderer, new HashMap<CraftPlayer, CraftMapCanvas>());
+            canvases.put(renderer, new HashMap<>());
             renderer.initialize(this);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/RenderData.java b/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
index 256a13178..557c40666 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
@@ -10,7 +10,7 @@ public class RenderData {
 
     public RenderData() {
         this.buffer = new byte[128 * 128];
-        this.cursors = new ArrayList<MapCursor>();
+        this.cursors = new ArrayList<>();
     }
 
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
index 6f7102f26..af845a3ee 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
@@ -33,7 +33,7 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
      */
     @Override
     protected String disambiguate(Block block, String metadataKey) {
-        return Integer.toString(block.getX()) + ":" + Integer.toString(block.getY()) + ":"  + Integer.toString(block.getZ()) + ":"  + metadataKey;
+        return block.getX() + ":" + block.getY() + ":"  + block.getZ() + ":"  + metadataKey;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index bb16958ad..9171bc06a 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -21,7 +21,7 @@ public class CraftPotionBrewer implements PotionBrewer {
             return cache.get(damage);
 
         List<?> mcEffects = net.minecraft.server.PotionBrewer.getEffects(damage, false);
-        List<PotionEffect> effects = new ArrayList<PotionEffect>();
+        List<PotionEffect> effects = new ArrayList<>();
         if (mcEffects == null)
             return effects;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
index f3da84a92..89d8ffd0d 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
@@ -11,7 +11,7 @@ import org.bukkit.scheduler.BukkitWorker;
 
 class CraftAsyncTask extends CraftTask {
 
-    private final LinkedList<BukkitWorker> workers = new LinkedList<BukkitWorker>();
+    private final LinkedList<BukkitWorker> workers = new LinkedList<>();
     private final Map<Integer, CraftTask> runners;
 
     CraftAsyncTask(final Map<Integer, CraftTask> runners, final Plugin plugin, final Runnable task, final int id, final long delay) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index d76ec40a0..aaa47ad9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -53,24 +53,20 @@ public class CraftScheduler implements BukkitScheduler {
     /**
      * Tail of a linked-list. AtomicReference only matters when adding to queue
      */
-    private final AtomicReference<CraftTask> tail = new AtomicReference<CraftTask>(head);
+    private final AtomicReference<CraftTask> tail = new AtomicReference<>(head);
     /**
      * Main thread logic only
      */
-    private final PriorityQueue<CraftTask> pending = new PriorityQueue<CraftTask>(10,
-            new Comparator<CraftTask>() {
-                public int compare(final CraftTask o1, final CraftTask o2) {
-                    return (int) (o1.getNextRun() - o2.getNextRun());
-                }
-            });
+    private final PriorityQueue<CraftTask> pending = new PriorityQueue<>(10,
+            (o1, o2) -> (int) (o1.getNextRun() - o2.getNextRun()));
     /**
      * Main thread logic only
      */
-    private final List<CraftTask> temp = new ArrayList<CraftTask>();
+    private final List<CraftTask> temp = new ArrayList<>();
     /**
      * These are tasks that are currently active. It's provided for 'viewing' the current state.
      */
-    private final ConcurrentHashMap<Integer, CraftTask> runners = new ConcurrentHashMap<Integer, CraftTask>();
+    private final ConcurrentHashMap<Integer, CraftTask> runners = new ConcurrentHashMap<>();
     private volatile int currentTick = -1;
     private final Executor executor = Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("Craft Scheduler Thread - %1$d").build()); // Spigot
     private CraftAsyncDebugger debugHead = new CraftAsyncDebugger(-1, null, null) {@Override StringBuilder debugTo(StringBuilder string) {return string;}};
@@ -152,7 +148,7 @@ public class CraftScheduler implements BukkitScheduler {
 
     public <T> Future<T> callSyncMethod(final Plugin plugin, final Callable<T> task) {
         validate(plugin, task);
-        final CraftFuture<T> future = new CraftFuture<T>(task, plugin, nextId());
+        final CraftFuture<T> future = new CraftFuture<>(task, plugin, nextId());
         handle(future, 0l);
         return future;
     }
@@ -238,19 +234,17 @@ public class CraftScheduler implements BukkitScheduler {
 
     public void cancelAllTasks() {
         final CraftTask task = new CraftTask(
-                new Runnable() {
-                    public void run() {
-                        Iterator<CraftTask> it = CraftScheduler.this.runners.values().iterator();
-                        while (it.hasNext()) {
-                            CraftTask task = it.next();
-                            task.cancel0();
-                            if (task.isSync()) {
-                                it.remove();
-                            }
+                () -> {
+                    Iterator<CraftTask> it = CraftScheduler.this.runners.values().iterator();
+                    while (it.hasNext()) {
+                        CraftTask task1 = it.next();
+                        task1.cancel0();
+                        if (task1.isSync()) {
+                            it.remove();
                         }
-                        CraftScheduler.this.pending.clear();
-                        CraftScheduler.this.temp.clear();
                     }
+                    CraftScheduler.this.pending.clear();
+                    CraftScheduler.this.temp.clear();
                 }){{this.timings=co.aikar.timings.SpigotTimings.getCancelTasksTimer();}}; // Spigot
         handle(task, 0l);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
@@ -289,7 +283,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     public List<BukkitWorker> getActiveWorkers() {
-        final ArrayList<BukkitWorker> workers = new ArrayList<BukkitWorker>();
+        final ArrayList<BukkitWorker> workers = new ArrayList<>();
         for (final CraftTask taskObj : runners.values()) {
             // Iterator will be a best-effort (may fail to grab very new values) if called from an async thread
             if (taskObj.isSync()) {
@@ -305,7 +299,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     public List<BukkitTask> getPendingTasks() {
-        final ArrayList<CraftTask> truePending = new ArrayList<CraftTask>();
+        final ArrayList<CraftTask> truePending = new ArrayList<>();
         for (CraftTask task = head.getNext(); task != null; task = task.getNext()) {
             if (task.getTaskId() != -1) {
                 // -1 is special code
@@ -313,7 +307,7 @@ public class CraftScheduler implements BukkitScheduler {
             }
         }
 
-        final ArrayList<BukkitTask> pending = new ArrayList<BukkitTask>();
+        final ArrayList<BukkitTask> pending = new ArrayList<>();
         for (CraftTask task : runners.values()) {
             if (task.getPeriod() >= -1l) {
                 pending.add(task);
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
index 5bd8cf9d7..fb9c3726b 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
@@ -9,6 +9,8 @@ import org.bukkit.scoreboard.DisplaySlot;
 import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Score;
 
+import java.util.Objects;
+
 final class CraftObjective extends CraftScoreboardComponent implements Objective {
     private final ScoreboardObjective objective;
     private final CraftCriteria criteria;
@@ -131,7 +133,7 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
             return false;
         }
         final CraftObjective other = (CraftObjective) obj;
-        return !(this.objective != other.objective && (this.objective == null || !this.objective.equals(other.objective)));
+        return !(!Objects.equals(this.objective, other.objective));
     }
 
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index 00b30f8c8..5fb3d9168 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -1,10 +1,9 @@
 package org.bukkit.craftbukkit.scoreboard;
 
-import java.util.Collection;
+import com.google.common.collect.ImmutableSet;
 import net.minecraft.server.Scoreboard;
 import net.minecraft.server.ScoreboardObjective;
 import net.minecraft.server.ScoreboardTeam;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
@@ -13,9 +12,7 @@ import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Score;
 import org.bukkit.scoreboard.Team;
 
-import com.google.common.base.Function;
-import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.Iterables;
+import java.util.stream.Collectors;
 
 public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     final Scoreboard board;
@@ -45,7 +42,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         Validate.notNull(criteria, "Criteria cannot be null");
 
         ImmutableSet.Builder<Objective> objectives = ImmutableSet.builder();
-        for (ScoreboardObjective netObjective : (Collection<ScoreboardObjective>) this.board.getObjectives()) {
+        for (ScoreboardObjective netObjective : this.board.getObjectives()) {
             CraftObjective objective = new CraftObjective(this, netObjective);
             if (objective.getCriteria().equals(criteria)) {
                 objectives.add(objective);
@@ -55,13 +52,10 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     public ImmutableSet<Objective> getObjectives() {
-        return ImmutableSet.copyOf(Iterables.transform((Collection<ScoreboardObjective>) this.board.getObjectives(), new Function<ScoreboardObjective, Objective>() {
-
-            @Override
-            public Objective apply(ScoreboardObjective input) {
-                return new CraftObjective(CraftScoreboard.this, input);
-            }
-        }));
+        return ImmutableSet.copyOf(this.board.getObjectives()
+                .stream()
+                .map(input -> new CraftObjective(CraftScoreboard.this, input))
+                .collect(Collectors.toList()));
     }
 
     public Objective getObjective(DisplaySlot slot) throws IllegalArgumentException {
@@ -83,7 +77,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         Validate.notNull(entry, "Entry cannot be null");
 
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
-        for (ScoreboardObjective objective : (Collection<ScoreboardObjective>) this.board.getObjectives()) {
+        for (ScoreboardObjective objective : this.board.getObjectives()) {
             scores.add(new CraftScore(new CraftObjective(this, objective), entry));
         }
         return scores.build();
@@ -98,7 +92,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     public void resetScores(String entry) throws IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
 
-        for (ScoreboardObjective objective : (Collection<ScoreboardObjective>) this.board.getObjectives()) {
+        for (ScoreboardObjective objective : this.board.getObjectives()) {
             board.resetPlayerScores(entry, objective);
         }
     }
@@ -125,13 +119,10 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     public ImmutableSet<Team> getTeams() {
-        return ImmutableSet.copyOf(Iterables.transform((Collection<ScoreboardTeam>) this.board.getTeams(), new Function<ScoreboardTeam, Team>() {
-
-            @Override
-            public Team apply(ScoreboardTeam input) {
-                return new CraftTeam(CraftScoreboard.this, input);
-            }
-        }));
+        return ImmutableSet.copyOf(this.board.getTeams()
+                .stream()
+                .map(input -> new CraftTeam(CraftScoreboard.this, input))
+                .collect(Collectors.toList()));
     }
 
     public Team registerNewTeam(String name) throws IllegalArgumentException {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index fbea5db29..096fb1c56 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -28,8 +28,8 @@ import org.bukkit.scoreboard.ScoreboardManager;
 public final class CraftScoreboardManager implements ScoreboardManager {
     private final CraftScoreboard mainScoreboard;
     private final MinecraftServer server;
-    private final Collection<CraftScoreboard> scoreboards = new WeakCollection<CraftScoreboard>();
-    private final Map<CraftPlayer, CraftScoreboard> playerBoards = new HashMap<CraftPlayer, CraftScoreboard>();
+    private final Collection<CraftScoreboard> scoreboards = new WeakCollection<>();
+    private final Map<CraftPlayer, CraftScoreboard> playerBoards = new HashMap<>();
 
     public CraftScoreboardManager(MinecraftServer minecraftserver, net.minecraft.server.Scoreboard scoreboardServer) {
         mainScoreboard = new CraftScoreboard(scoreboardServer);
@@ -51,7 +51,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     // CraftBukkit method
     public CraftScoreboard getPlayerBoard(CraftPlayer player) {
         CraftScoreboard board = playerBoards.get(player);
-        return (CraftScoreboard) (board == null ? getMainScoreboard() : board);
+        return board == null ? getMainScoreboard() : board;
     }
 
     // CraftBukkit method
@@ -70,11 +70,11 @@ public final class CraftScoreboardManager implements ScoreboardManager {
         if (scoreboard == mainScoreboard) {
             playerBoards.remove(player);
         } else {
-            playerBoards.put(player, (CraftScoreboard) scoreboard);
+            playerBoards.put(player, scoreboard);
         }
 
         // Old objective tracking
-        HashSet<ScoreboardObjective> removed = new HashSet<ScoreboardObjective>();
+        HashSet<ScoreboardObjective> removed = new HashSet<>();
         for (int i = 0; i < 3; ++i) {
             ScoreboardObjective scoreboardobjective = oldboard.getObjectiveForSlot(i);
             if (scoreboardobjective != null && !removed.contains(scoreboardobjective)) {
@@ -84,9 +84,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
         }
 
         // Old team tracking
-        Iterator<?> iterator = oldboard.getTeams().iterator();
-        while (iterator.hasNext()) {
-            ScoreboardTeam scoreboardteam = (ScoreboardTeam) iterator.next();
+        for (ScoreboardTeam scoreboardteam : oldboard.getTeams()) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutScoreboardTeam(scoreboardteam, 1));
         }
 
@@ -103,7 +101,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     public Collection<ScoreboardScore> getScoreboardScores(IScoreboardCriteria criteria, String name, Collection<ScoreboardScore> collection) {
         for (CraftScoreboard scoreboard : scoreboards) {
             Scoreboard board = scoreboard.board;
-            for (ScoreboardObjective objective : (Iterable<ScoreboardObjective>) board.getObjectivesForCriteria(criteria)) {
+            for (ScoreboardObjective objective : board.getObjectivesForCriteria(criteria)) {
                 collection.add(board.getPlayerScoreForObjective(name, objective));
             }
         }
@@ -112,7 +110,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
 
     // CraftBukkit method
     public void updateAllScoresForList(IScoreboardCriteria criteria, String name, List<EntityPlayer> of) {
-        for (ScoreboardScore score : getScoreboardScores(criteria, name, new ArrayList<ScoreboardScore>())) {
+        for (ScoreboardScore score : getScoreboardScores(criteria, name, new ArrayList<>())) {
             score.updateForList((List) of);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index f5ff0f712..fddedd10c 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.scoreboard;
 
+import java.util.Objects;
 import java.util.Set;
 
 import net.minecraft.server.ScoreboardTeamBase.EnumNameTagVisibility;
@@ -236,7 +237,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
             return false;
         }
         final CraftTeam other = (CraftTeam) obj;
-        return !(this.team != other.team && (this.team == null || !this.team.equals(other.team)));
+        return !(!Objects.equals(this.team, other.team));
     }
 
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
index 193c3621c..e0ad59111 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
@@ -74,7 +74,7 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
         volatile int state = PENDING;
         final P parameter;
         T object;
-        final List<C> callbacks = new LinkedList<C>();
+        final List<C> callbacks = new LinkedList<>();
         E t = null;
 
         Task(final P parameter) {
@@ -215,8 +215,8 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
     }
 
     final CallBackProvider<P, T, C, E> provider;
-    final Queue<Task> finished = new ConcurrentLinkedQueue<Task>();
-    final Map<P, Task> tasks = new HashMap<P, Task>();
+    final Queue<Task> finished = new ConcurrentLinkedQueue<>();
+    final Map<P, Task> tasks = new HashMap<>();
     final ThreadPoolExecutor pool;
 
     /**
@@ -228,7 +228,7 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
         this.provider = provider;
 
         // We have an unbound queue size so do not need a max thread size
-        pool = new ThreadPoolExecutor(coreSize, Integer.MAX_VALUE, 60l, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), provider);
+        pool = new ThreadPoolExecutor(coreSize, Integer.MAX_VALUE, 60l, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), provider);
     }
 
     /**
diff --git a/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java b/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
index 2dbedd2d0..04ecd59d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
@@ -15,7 +15,7 @@ public class BlockStateListPopulator {
     private final List<BlockState> list;
 
     public BlockStateListPopulator(World world) {
-        this(world, new ArrayList<BlockState>());
+        this(world, new ArrayList<>());
     }
 
     public BlockStateListPopulator(World world, List<BlockState> list) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index 38ef8216c..0a7fdd793 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -19,10 +19,10 @@ import net.minecraft.server.ChatMessage;
 
 public final class CraftChatMessage {
     
-    private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))");
+    private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + org.bukkit.ChatColor.COLOR_CHAR + " \\n]|$))))");
     private static class StringMessage {
         private static final Map<Character, EnumChatFormat> formatMap;
-        private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + "[0-9a-fk-or])|(\\n)|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))", Pattern.CASE_INSENSITIVE);
+        private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + org.bukkit.ChatColor.COLOR_CHAR + "[0-9a-fk-or])|(\\n)|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + org.bukkit.ChatColor.COLOR_CHAR + " \\n]|$))))", Pattern.CASE_INSENSITIVE);
 
         static {
             Builder<Character, EnumChatFormat> builder = ImmutableMap.builder();
@@ -32,7 +32,7 @@ public final class CraftChatMessage {
             formatMap = builder.build();
         }
 
-        private final List<IChatBaseComponent> list = new ArrayList<IChatBaseComponent>();
+        private final List<IChatBaseComponent> list = new ArrayList<>();
         private IChatBaseComponent currentChatComponent = new ChatComponentText("");
         private ChatModifier modifier = new ChatModifier();
         private final IChatBaseComponent[] output;
@@ -97,7 +97,7 @@ public final class CraftChatMessage {
                     }
                     modifier.setChatClickable(new ChatClickable(EnumClickAction.OPEN_URL, match));
                     appendNewComponent(matcher.end(groupId));
-                    modifier.setChatClickable((ChatClickable) null);
+                    modifier.setChatClickable(null);
                 }
                 currentIndex = matcher.end(groupId);
             }
@@ -106,7 +106,7 @@ public final class CraftChatMessage {
                 appendNewComponent(message.length());
             }
 
-            output = list.toArray(new IChatBaseComponent[list.size()]);
+            output = list.toArray(new IChatBaseComponent[0]);
         }
 
         private void appendNewComponent(int index) {
@@ -144,7 +144,7 @@ public final class CraftChatMessage {
         if (component == null) return "";
         StringBuilder out = new StringBuilder();
         
-        for (IChatBaseComponent c : (Iterable<IChatBaseComponent>) component) {
+        for (IChatBaseComponent c : component) {
             ChatModifier modi = c.getChatModifier();
             out.append(modi.getColor() == null ? defaultColor : modi.getColor());
             if (modi.isBold()) {
@@ -181,8 +181,8 @@ public final class CraftChatMessage {
 
                 ChatModifier modifier = text.getChatModifier() != null ?
                         text.getChatModifier() : new ChatModifier();
-                List<IChatBaseComponent> extras = new ArrayList<IChatBaseComponent>();
-                List<IChatBaseComponent> extrasOld = new ArrayList<IChatBaseComponent>(text.a());
+                List<IChatBaseComponent> extras = new ArrayList<>();
+                List<IChatBaseComponent> extrasOld = new ArrayList<>(text.a());
                 component = text = new ChatComponentText("");
 
                 int pos = 0;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 589dba72d..53c0d7a4c 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -54,8 +54,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     public static Item getItem(Material material) {
         // TODO: Don't use ID
-        Item item = Item.getById(material.getId());
-        return item;
+        return Item.getById(material.getId());
     }
 
     @Deprecated
@@ -94,13 +93,13 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public Material getMaterialFromInternalName(String name) {
-        return getMaterial((Item) Item.REGISTRY.get(new MinecraftKey(name)));
+        return getMaterial(Item.REGISTRY.get(new MinecraftKey(name)));
     }
 
     @Override
     public List<String> tabCompleteInternalMaterialName(String token, List<String> completions) {
         ArrayList<String> results = Lists.newArrayList();
-        for (MinecraftKey key : (Set<MinecraftKey>)Item.REGISTRY.keySet()) {
+        for (MinecraftKey key : Item.REGISTRY.keySet()) {
             results.add(key.toString());
         }
         return StringUtil.copyPartialMatches(token, results, completions);
@@ -111,7 +110,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         net.minecraft.server.ItemStack nmsStack = CraftItemStack.asNMSCopy(stack);
 
         try {
-            nmsStack.setTag((NBTTagCompound) MojangsonParser.parse(arguments));
+            nmsStack.setTag(MojangsonParser.parse(arguments));
         } catch (MojangsonParseException ex) {
             Logger.getLogger(CraftMagicNumbers.class.getName()).log(Level.SEVERE, null, ex);
         }
@@ -133,10 +132,9 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public List<String> tabCompleteInternalStatisticOrAchievementName(String token, List<String> completions) {
-        List<String> matches = new ArrayList<String>();
-        Iterator iterator = StatisticList.stats.iterator();
-        while (iterator.hasNext()) {
-            String statistic = ((net.minecraft.server.Statistic) iterator.next()).name;
+        List<String> matches = new ArrayList<>();
+        for (net.minecraft.server.Statistic value : StatisticList.stats) {
+            String statistic = (value).name;
             if (statistic.startsWith(token)) {
                 matches.add(statistic);
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
index 74ce4b2ec..66a66c6a8 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
@@ -10,7 +10,7 @@ import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
 public class ForwardLogHandler extends ConsoleHandler {
-    private Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
+    private Map<String, Logger> cachedLoggers = new ConcurrentHashMap<>();
 
     private Logger getLogger(String name) {
         Logger logger = cachedLoggers.get(name);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
index 80a5c29f3..03b87173c 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
@@ -8,8 +8,8 @@ import java.util.TreeSet;
 
 public class HashTreeSet<V> implements Set<V> {
 
-    private HashSet<V> hash = new HashSet<V>();
-    private TreeSet<V> tree = new TreeSet<V>();
+    private HashSet<V> hash = new HashSet<>();
+    private TreeSet<V> tree = new TreeSet<>();
 
     public HashTreeSet() {
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java b/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
index ae19da4d8..f4a7e5abf 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
@@ -15,7 +15,7 @@ public class LazyPlayerSet extends LazyHashSet<Player> {
             throw new IllegalStateException("Reference already created!");
         }
         List<EntityPlayer> players = MinecraftServer.getServer().getPlayerList().players;
-        HashSet<Player> reference = new HashSet<Player>(players.size());
+        HashSet<Player> reference = new HashSet<>(players.size());
         for (EntityPlayer player : players) {
             reference.add(player.getBukkitEntity());
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LongHash.java b/src/main/java/org/bukkit/craftbukkit/util/LongHash.java
index 691cafd03..9c015261b 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LongHash.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LongHash.java
@@ -10,6 +10,6 @@ public class LongHash {
     }
 
     public static int lsw(long l) {
-        return (int) (l & 0xFFFFFFFF) + Integer.MIN_VALUE;
+        return (int) (l) + Integer.MIN_VALUE;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java b/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
index 0cd430a3a..f628cf4ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
@@ -192,7 +192,7 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
      */
     @Deprecated
     public Set<Map.Entry<Long, V>> entrySet() {
-        HashSet<Map.Entry<Long, V>> set = new HashSet<Map.Entry<Long, V>>();
+        HashSet<Map.Entry<Long, V>> set = new HashSet<>();
         for (long key : keySet()) {
             set.add(new Entry(key, get(key)));
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
index ae3481ba8..bf9fb0cd0 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
@@ -14,12 +14,10 @@ public class ServerShutdownThread extends Thread {
     public void run() {
         try {
             server.stop();
-        } catch (ExceptionWorldConflict ex) {
-            ex.printStackTrace();
         } finally {
             try {
                 server.reader.getTerminal().restore();
-            } catch (Exception e) {
+            } catch (Exception ignored) {
             }
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/StructureGrowDelegate.java b/src/main/java/org/bukkit/craftbukkit/util/StructureGrowDelegate.java
index f9cc7d6f6..eb7f4cf64 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/StructureGrowDelegate.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/StructureGrowDelegate.java
@@ -14,7 +14,7 @@ import org.bukkit.material.MaterialData;
 
 public class StructureGrowDelegate implements BlockChangeDelegate {
     private final CraftWorld world;
-    private final List<BlockState> blocks = new ArrayList<BlockState>();
+    private final List<BlockState> blocks = new ArrayList<>();
 
     public StructureGrowDelegate(World world) {
         this.world = world.getWorld();
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 7e7363f52..1af20afcf 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -13,12 +13,12 @@ public final class WeakCollection<T> implements Collection<T> {
     private final Collection<WeakReference<T>> collection;
 
     public WeakCollection() {
-        collection = new ArrayList<WeakReference<T>>();
+        collection = new ArrayList<>();
     }
 
     public boolean add(T value) {
         Validate.notNull(value, "Cannot add null value");
-        return collection.add(new WeakReference<T>(value));
+        return collection.add(new WeakReference<>(value));
     }
 
     public boolean addAll(Collection<? extends T> collection) {
@@ -26,7 +26,7 @@ public final class WeakCollection<T> implements Collection<T> {
         boolean ret = false;
         for (T value : collection) {
             Validate.notNull(value, "Cannot add null value");
-            ret |= values.add(new WeakReference<T>(value));
+            ret |= values.add(new WeakReference<>(value));
         }
         return ret;
     }
@@ -160,10 +160,8 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     private Collection<T> toCollection() {
-        ArrayList<T> collection = new ArrayList<T>();
-        for (T value : this) {
-            collection.add(value);
-        }
+        ArrayList<T> collection = new ArrayList<>();
+        collection.addAll(this);
         return collection;
     }
 }
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index d6d9899e2..a13f0640c 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -1,16 +1,6 @@
 package org.github.paperspigot;
 
 import com.google.common.base.Throwables;
-import java.io.File;
-import java.io.IOException;
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.*;
-import java.util.logging.Level;
-
-import net.minecraft.server.Item;
 import net.minecraft.server.Items;
 import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang.StringUtils;
@@ -20,8 +10,16 @@ import org.bukkit.command.Command;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-public class PaperSpigotConfig
-{
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.*;
+import java.util.logging.Level;
+
+public class PaperSpigotConfig {
 
     private static File CONFIG_FILE;
     private static final String HEADER = "This is the main configuration file for PaperSpigot.\n"
@@ -38,150 +36,127 @@ public class PaperSpigotConfig
     static Map<String, Command> commands;
     /*========================================================================*/
 
-    public static void init(File configFile)
-    {
+    public static void init(File configFile) {
         CONFIG_FILE = configFile;
         config = new YamlConfiguration();
-        try
-        {
-            config.load ( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-        } catch ( InvalidConfigurationException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex );
-            throw Throwables.propagate( ex );
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
         }
-        config.options().header( HEADER );
-        config.options().copyDefaults( true );
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
 
-        commands = new HashMap<String, Command>();
+        commands = new HashMap<>();
 
-        version = getInt( "config-version", 9 );
-        set( "config-version", 9 );
-        readConfig( PaperSpigotConfig.class, null );
+        version = getInt("config-version", 9);
+        set("config-version", 9);
+        readConfig(PaperSpigotConfig.class, null);
     }
 
-    public static void registerCommands()
-    {
-        for ( Map.Entry<String, Command> entry : commands.entrySet() )
-        {
-            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "PaperSpigot", entry.getValue() );
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "PaperSpigot", entry.getValue());
         }
     }
 
-    static void readConfig(Class<?> clazz, Object instance)
-    {
-        for ( Method method : clazz.getDeclaredMethods() )
-        {
-            if ( Modifier.isPrivate( method.getModifiers() ) )
-            {
-                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
-                {
-                    try
-                    {
-                        method.setAccessible( true );
-                        method.invoke( instance );
-                    } catch ( InvocationTargetException ex )
-                    {
-                        throw Throwables.propagate( ex.getCause() );
-                    } catch ( Exception ex )
-                    {
-                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
                     }
                 }
             }
         }
 
-        try
-        {
-            config.save( CONFIG_FILE );
-        } catch ( IOException ex )
-        {
-            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + CONFIG_FILE, ex );
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
         }
     }
 
-    private static void set(String path, Object val)
-    {
-        config.set( path, val );
+    private static void set(String path, Object val) {
+        config.set(path, val);
     }
 
-    private static boolean getBoolean(String path, boolean def)
-    {
-        config.addDefault( path, def );
-        return config.getBoolean( path, config.getBoolean( path ) );
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
     }
 
-    private static double getDouble(String path, double def)
-    {
-        config.addDefault( path, def );
-        return config.getDouble( path, config.getDouble( path ) );
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
     }
 
-    private static float getFloat(String path, float def)
-    {
+    private static float getFloat(String path, float def) {
         // TODO: Figure out why getFloat() always returns the default value.
-        return (float) getDouble( path, (double) def );
+        return (float) getDouble(path, (double) def);
     }
 
-    private static int getInt(String path, int def)
-    {
-        config.addDefault( path, def );
-        return config.getInt( path, config.getInt( path ) );
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
     }
 
-    private static <T> List getList(String path, T def)
-    {
-        config.addDefault( path, def );
-        return (List<T>) config.getList( path, config.getList( path ) );
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
     }
 
-    private static String getString(String path, String def)
-    {
-        config.addDefault( path, def );
-        return config.getString( path, config.getString( path ) );
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
     }
 
     public static double babyZombieMovementSpeed;
-    private static void babyZombieMovementSpeed()
-    {
-        babyZombieMovementSpeed = getDouble( "settings.baby-zombie-movement-speed", 0.5D ); // Player moves at 0.1F, for reference
+
+    private static void babyZombieMovementSpeed() {
+        babyZombieMovementSpeed = getDouble("settings.baby-zombie-movement-speed", 0.5D); // Player moves at 0.1F, for reference
     }
 
     public static boolean interactLimitEnabled;
-    private static void interactLimitEnabled()
-    {
-        interactLimitEnabled = getBoolean( "settings.limit-player-interactions", true );
-        if ( !interactLimitEnabled )
-        {
-            Bukkit.getLogger().log( Level.INFO, "Disabling player interaction limiter, your server may be more vulnerable to malicious users" );
+
+    private static void interactLimitEnabled() {
+        interactLimitEnabled = getBoolean("settings.limit-player-interactions", true);
+        if (!interactLimitEnabled) {
+            Bukkit.getLogger().log(Level.INFO, "Disabling player interaction limiter, your server may be more vulnerable to malicious users");
         }
     }
 
     public static double strengthEffectModifier;
     public static double weaknessEffectModifier;
-    private static void effectModifiers()
-    {
-        strengthEffectModifier = getDouble( "effect-modifiers.strength", 1.3D );
-        weaknessEffectModifier = getDouble( "effect-modifiers.weakness", -0.5D );
+
+    private static void effectModifiers() {
+        strengthEffectModifier = getDouble("effect-modifiers.strength", 1.3D);
+        weaknessEffectModifier = getDouble("effect-modifiers.weakness", -0.5D);
     }
 
     public static Set<Integer> dataValueAllowedItems;
-    private static void dataValueAllowedItems()
-    {
-        dataValueAllowedItems = new HashSet<Integer>( getList( "data-value-allowed-items", Collections.emptyList() ) );
-        Bukkit.getLogger().info( "Data value allowed items: " + StringUtils.join(dataValueAllowedItems, ", ") );
+
+    private static void dataValueAllowedItems() {
+        dataValueAllowedItems = new HashSet<Integer>(getList("data-value-allowed-items", Collections.emptyList()));
+        Bukkit.getLogger().info("Data value allowed items: " + StringUtils.join(dataValueAllowedItems, ", "));
     }
 
     public static boolean stackableLavaBuckets;
     public static boolean stackableWaterBuckets;
     public static boolean stackableMilkBuckets;
-    private static void stackableBuckets()
-    {
-        stackableLavaBuckets = getBoolean( "stackable-buckets.lava", false );
-        stackableWaterBuckets = getBoolean( "stackable-buckets.water", false );
-        stackableMilkBuckets = getBoolean( "stackable-buckets.milk", false );
+
+    private static void stackableBuckets() {
+        stackableLavaBuckets = getBoolean("stackable-buckets.lava", false);
+        stackableWaterBuckets = getBoolean("stackable-buckets.water", false);
+        stackableMilkBuckets = getBoolean("stackable-buckets.milk", false);
 
         Field maxStack;
 
@@ -218,8 +193,8 @@ public class PaperSpigotConfig
     }
 
     public static boolean warnForExcessiveVelocity;
-    private static void excessiveVelocityWarning()
-    {
+
+    private static void excessiveVelocityWarning() {
         warnForExcessiveVelocity = getBoolean("warnWhenSettingExcessiveVelocity", true);
     }
 }
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
index 6ad8e817d..4f4ac8412 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotWorldConfig.java
@@ -1,243 +1,230 @@
 package org.github.paperspigot;
 
-import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
-public class PaperSpigotWorldConfig
-{
+import java.util.List;
+
+public class PaperSpigotWorldConfig {
 
     private final String worldName;
     private final YamlConfiguration config;
     private boolean verbose;
 
-    public PaperSpigotWorldConfig(String worldName)
-    {
+    public PaperSpigotWorldConfig(String worldName) {
         this.worldName = worldName;
         this.config = PaperSpigotConfig.config;
         init();
     }
 
-    public void init()
-    {
-        this.verbose = getBoolean( "verbose", true );
+    public void init() {
+        this.verbose = getBoolean("verbose", true);
 
-        log( "-------- World Settings For [" + worldName + "] --------" );
-        PaperSpigotConfig.readConfig( PaperSpigotWorldConfig.class, this );
+        log("-------- World Settings For [" + worldName + "] --------");
+        PaperSpigotConfig.readConfig(PaperSpigotWorldConfig.class, this);
     }
 
-    private void log(String s)
-    {
-        if ( verbose )
-        {
-            Bukkit.getLogger().info( s );
+    private void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
         }
     }
 
-    private void set(String path, Object val)
-    {
-        config.set( "world-settings.default." + path, val );
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
     }
 
-    private boolean getBoolean(String path, boolean def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getBoolean( "world-settings." + worldName + "." + path, config.getBoolean( "world-settings.default." + path ) );
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
     }
 
-    private double getDouble(String path, double def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getDouble( "world-settings." + worldName + "." + path, config.getDouble( "world-settings.default." + path ) );
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
     }
 
-    private int getInt(String path, int def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getInt( "world-settings." + worldName + "." + path, config.getInt( "world-settings.default." + path ) );
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path));
     }
 
-    private float getFloat(String path, float def)
-    {
+    private float getFloat(String path, float def) {
         // TODO: Figure out why getFloat() always returns the default value.
-        return (float) getDouble( path, (double) def );
+        return (float) getDouble(path, (double) def);
     }
 
-    private <T> List getList(String path, T def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
+    private <T> List getList(String path, T def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
     }
 
-    private String getString(String path, String def)
-    {
-        config.addDefault( "world-settings.default." + path, def );
-        return config.getString( "world-settings." + worldName + "." + path, config.getString( "world-settings.default." + path ) );
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
     }
 
     public boolean allowUndeadHorseLeashing;
-    private void allowUndeadHorseLeashing()
-    {
-        allowUndeadHorseLeashing = getBoolean( "allow-undead-horse-leashing", false );
-        log( "Allow undead horse types to be leashed: " + allowUndeadHorseLeashing );
+
+    private void allowUndeadHorseLeashing() {
+        allowUndeadHorseLeashing = getBoolean("allow-undead-horse-leashing", false);
+        log("Allow undead horse types to be leashed: " + allowUndeadHorseLeashing);
     }
 
     public double squidMinSpawnHeight;
     public double squidMaxSpawnHeight;
-    private void squidSpawnHeight()
-    {
-        squidMinSpawnHeight = getDouble( "squid-spawn-height.minimum", 45.0D );
-        squidMaxSpawnHeight = getDouble( "squid-spawn-height.maximum", 63.0D );
-        log( "Squids will spawn between Y: " + squidMinSpawnHeight + " and Y: " + squidMaxSpawnHeight );
+
+    private void squidSpawnHeight() {
+        squidMinSpawnHeight = getDouble("squid-spawn-height.minimum", 45.0D);
+        squidMaxSpawnHeight = getDouble("squid-spawn-height.maximum", 63.0D);
+        log("Squids will spawn between Y: " + squidMinSpawnHeight + " and Y: " + squidMaxSpawnHeight);
     }
 
     public float playerBlockingDamageMultiplier;
-    private void playerBlockingDamageMultiplier()
-    {
-        playerBlockingDamageMultiplier = getFloat( "player-blocking-damage-multiplier", 0.5F );
-        log( "Player blocking damage multiplier set to " + playerBlockingDamageMultiplier );
+
+    private void playerBlockingDamageMultiplier() {
+        playerBlockingDamageMultiplier = getFloat("player-blocking-damage-multiplier", 0.5F);
+        log("Player blocking damage multiplier set to " + playerBlockingDamageMultiplier);
     }
 
     public int cactusMaxHeight;
     public int reedMaxHeight;
-    private void blockGrowthHeight()
-    {
-        cactusMaxHeight = getInt( "max-growth-height.cactus", 3 );
-        reedMaxHeight = getInt( "max-growth-height.reeds", 3 );
-        log( "Max height for cactus growth " + cactusMaxHeight + ". Max height for reed growth " + reedMaxHeight );
+
+    private void blockGrowthHeight() {
+        cactusMaxHeight = getInt("max-growth-height.cactus", 3);
+        reedMaxHeight = getInt("max-growth-height.reeds", 3);
+        log("Max height for cactus growth " + cactusMaxHeight + ". Max height for reed growth " + reedMaxHeight);
     }
 
     public int fishingMinTicks;
     public int fishingMaxTicks;
-    private void fishingTickRange()
-    {
-        fishingMinTicks = getInt( "fishing-time-range.MinimumTicks", 100 );
-        fishingMaxTicks = getInt( "fishing-time-range.MaximumTicks", 900 );
+
+    private void fishingTickRange() {
+        fishingMinTicks = getInt("fishing-time-range.MinimumTicks", 100);
+        fishingMaxTicks = getInt("fishing-time-range.MaximumTicks", 900);
     }
 
     public float blockBreakExhaustion;
     public float playerSwimmingExhaustion;
-    private void exhaustionValues()
-    {
-        blockBreakExhaustion = getFloat( "player-exhaustion.block-break", 0.025F );
-        playerSwimmingExhaustion = getFloat( "player-exhaustion.swimming", 0.015F );
+
+    private void exhaustionValues() {
+        blockBreakExhaustion = getFloat("player-exhaustion.block-break", 0.025F);
+        playerSwimmingExhaustion = getFloat("player-exhaustion.swimming", 0.015F);
     }
 
     public int softDespawnDistance;
     public int hardDespawnDistance;
-    private void despawnDistances()
-    {
-        softDespawnDistance = getInt( "despawn-ranges.soft", 32 ); // 32^2 = 1024, Minecraft Default
-        hardDespawnDistance = getInt( "despawn-ranges.hard", 128 ); // 128^2 = 16384, Minecraft Default;
 
-        if ( softDespawnDistance > hardDespawnDistance ) {
+    private void despawnDistances() {
+        softDespawnDistance = getInt("despawn-ranges.soft", 32); // 32^2 = 1024, Minecraft Default
+        hardDespawnDistance = getInt("despawn-ranges.hard", 128); // 128^2 = 16384, Minecraft Default;
+
+        if (softDespawnDistance > hardDespawnDistance) {
             softDespawnDistance = hardDespawnDistance;
         }
 
-        log( "Living Entity Despawn Ranges:  Soft: " + softDespawnDistance + " Hard: " + hardDespawnDistance );
+        log("Living Entity Despawn Ranges:  Soft: " + softDespawnDistance + " Hard: " + hardDespawnDistance);
 
-        softDespawnDistance = softDespawnDistance*softDespawnDistance;
-        hardDespawnDistance = hardDespawnDistance*hardDespawnDistance;
+        softDespawnDistance = softDespawnDistance * softDespawnDistance;
+        hardDespawnDistance = hardDespawnDistance * hardDespawnDistance;
     }
 
     public boolean keepSpawnInMemory;
-    private void keepSpawnInMemory()
-    {
-        keepSpawnInMemory = getBoolean( "keep-spawn-loaded", true );
-        log( "Keep spawn chunk loaded: " + keepSpawnInMemory );
+
+    private void keepSpawnInMemory() {
+        keepSpawnInMemory = getBoolean("keep-spawn-loaded", true);
+        log("Keep spawn chunk loaded: " + keepSpawnInMemory);
     }
 
     public int fallingBlockHeightNerf;
-    private void fallingBlockheightNerf()
-    {
-        fallingBlockHeightNerf = getInt( "falling-block-height-nerf", 0 );
-        if ( fallingBlockHeightNerf != 0 )
-        {
-            log( "Falling Block Height Limit set to Y: " + fallingBlockHeightNerf );
+
+    private void fallingBlockheightNerf() {
+        fallingBlockHeightNerf = getInt("falling-block-height-nerf", 0);
+        if (fallingBlockHeightNerf != 0) {
+            log("Falling Block Height Limit set to Y: " + fallingBlockHeightNerf);
         }
     }
 
     public int tntEntityHeightNerf;
-    private void tntEntityHeightNerf()
-    {
-        tntEntityHeightNerf = getInt( "tnt-entity-height-nerf", 0 );
-        if ( tntEntityHeightNerf != 0 )
-        {
-            log( "TNT Entity Height Limit set to Y: " + tntEntityHeightNerf );
+
+    private void tntEntityHeightNerf() {
+        tntEntityHeightNerf = getInt("tnt-entity-height-nerf", 0);
+        if (tntEntityHeightNerf != 0) {
+            log("TNT Entity Height Limit set to Y: " + tntEntityHeightNerf);
         }
     }
 
     public int waterOverLavaFlowSpeed;
-    private void waterOverLavaFlowSpeed()
-    {
-        waterOverLavaFlowSpeed = getInt( "water-over-lava-flow-speed", 5 );
-        log( "Water over lava flow speed: " + waterOverLavaFlowSpeed );
+
+    private void waterOverLavaFlowSpeed() {
+        waterOverLavaFlowSpeed = getInt("water-over-lava-flow-speed", 5);
+        log("Water over lava flow speed: " + waterOverLavaFlowSpeed);
     }
 
     public boolean removeInvalidMobSpawnerTEs;
-    private void removeInvalidMobSpawnerTEs()
-    {
-        removeInvalidMobSpawnerTEs = getBoolean( "remove-invalid-mob-spawner-tile-entities", true );
-        log( "Remove invalid mob spawner tile entities: " + removeInvalidMobSpawnerTEs );
+
+    private void removeInvalidMobSpawnerTEs() {
+        removeInvalidMobSpawnerTEs = getBoolean("remove-invalid-mob-spawner-tile-entities", true);
+        log("Remove invalid mob spawner tile entities: " + removeInvalidMobSpawnerTEs);
     }
 
     public boolean removeUnloadedEnderPearls;
     public boolean removeUnloadedTNTEntities;
     public boolean removeUnloadedFallingBlocks;
-    private void removeUnloaded()
-    {
-        removeUnloadedEnderPearls = getBoolean( "remove-unloaded.enderpearls", true );
-        removeUnloadedTNTEntities = getBoolean( "remove-unloaded.tnt-entities", true );
-        removeUnloadedFallingBlocks = getBoolean( "remove-unloaded.falling-blocks", true );
+
+    private void removeUnloaded() {
+        removeUnloadedEnderPearls = getBoolean("remove-unloaded.enderpearls", true);
+        removeUnloadedTNTEntities = getBoolean("remove-unloaded.tnt-entities", true);
+        removeUnloadedFallingBlocks = getBoolean("remove-unloaded.falling-blocks", true);
     }
 
     public boolean boatsDropBoats;
     public boolean disablePlayerCrits;
     public boolean disableChestCatDetection;
-    private void mechanicsChanges()
-    {
-        boatsDropBoats = getBoolean( "game-mechanics.boats-drop-boats", false );
-        disablePlayerCrits = getBoolean( "game-mechanics.disable-player-crits", false );
-        disableChestCatDetection = getBoolean( "game-mechanics.disable-chest-cat-detection", false );
+
+    private void mechanicsChanges() {
+        boatsDropBoats = getBoolean("game-mechanics.boats-drop-boats", false);
+        disablePlayerCrits = getBoolean("game-mechanics.disable-player-crits", false);
+        disableChestCatDetection = getBoolean("game-mechanics.disable-chest-cat-detection", false);
     }
 
     public boolean netherVoidTopDamage;
-    private void nethervoidTopDamage()
-    {
-        netherVoidTopDamage = getBoolean( "nether-ceiling-void-damage", false );
+
+    private void nethervoidTopDamage() {
+        netherVoidTopDamage = getBoolean("nether-ceiling-void-damage", false);
     }
 
     public int tickNextTickCap;
     public boolean tickNextTickListCapIgnoresRedstone;
-    private void tickNextTickCap()
-    {
-        tickNextTickCap = getInt( "tick-next-tick-list-cap", 10000 ); // Higher values will be friendlier to vanilla style mechanics (to a point) but may hurt performance
-        tickNextTickListCapIgnoresRedstone = getBoolean( "tick-next-tick-list-cap-ignores-redstone", false ); // Redstone TickNextTicks will always bypass the preceding cap.
-        log( "WorldServer TickNextTick cap set at " + tickNextTickCap );
-        log( "WorldServer TickNextTickList cap always processes redstone: " + tickNextTickListCapIgnoresRedstone );
+
+    private void tickNextTickCap() {
+        tickNextTickCap = getInt("tick-next-tick-list-cap", 10000); // Higher values will be friendlier to vanilla style mechanics (to a point) but may hurt performance
+        tickNextTickListCapIgnoresRedstone = getBoolean("tick-next-tick-list-cap-ignores-redstone", false); // Redstone TickNextTicks will always bypass the preceding cap.
+        log("WorldServer TickNextTick cap set at " + tickNextTickCap);
+        log("WorldServer TickNextTickList cap always processes redstone: " + tickNextTickListCapIgnoresRedstone);
     }
 
     public boolean useAsyncLighting;
-    private void useAsyncLighting()
-    {
-        useAsyncLighting = getBoolean( "use-async-lighting", false );
-        log( "World async lighting: " + useAsyncLighting );
+
+    private void useAsyncLighting() {
+        useAsyncLighting = getBoolean("use-async-lighting", false);
+        log("World async lighting: " + useAsyncLighting);
     }
 
     public boolean disableEndCredits;
-    private void disableEndCredits()
-    {
-        disableEndCredits = getBoolean( "game-mechanics.disable-end-credits", false );
+
+    private void disableEndCredits() {
+        disableEndCredits = getBoolean("game-mechanics.disable-end-credits", false);
     }
 
     public boolean loadUnloadedEnderPearls;
     public boolean loadUnloadedTNTEntities;
     public boolean loadUnloadedFallingBlocks;
-    private void loadUnloaded()
-    {
-        loadUnloadedEnderPearls = getBoolean( "load-chunks.enderpearls", false );
-        loadUnloadedTNTEntities = getBoolean( "load-chunks.tnt-entities", false );
-        loadUnloadedFallingBlocks = getBoolean( "load-chunks.falling-blocks", false );
+
+    private void loadUnloaded() {
+        loadUnloadedEnderPearls = getBoolean("load-chunks.enderpearls", false);
+        loadUnloadedTNTEntities = getBoolean("load-chunks.tnt-entities", false);
+        loadUnloadedFallingBlocks = getBoolean("load-chunks.falling-blocks", false);
     }
 
     public boolean generateCanyon;
@@ -250,156 +237,156 @@ public class PaperSpigotWorldConfig
     public boolean generateTemple;
     public boolean generateVillage;
     public boolean generateFlatBedrock;
-    private void generatorSettings()
-    {
-        generateCanyon = getBoolean( "generator-settings.canyon", true );
-        generateCaves = getBoolean( "generator-settings.caves", true );
-        generateDungeon = getBoolean( "generator-settings.dungeon", true );
-        generateFortress = getBoolean( "generator-settings.fortress", true );
-        generateMineshaft = getBoolean( "generator-settings.mineshaft", true );
-        generateMonument = getBoolean( "generator-settings.monument", true );
-        generateStronghold = getBoolean( "generator-settings.stronghold", true );
-        generateTemple = getBoolean( "generator-settings.temple", true );
-        generateVillage = getBoolean( "generator-settings.village", true );
-        generateFlatBedrock = getBoolean( "generator-settings.flat-bedrock", false );
+
+    private void generatorSettings() {
+        generateCanyon = getBoolean("generator-settings.canyon", true);
+        generateCaves = getBoolean("generator-settings.caves", true);
+        generateDungeon = getBoolean("generator-settings.dungeon", true);
+        generateFortress = getBoolean("generator-settings.fortress", true);
+        generateMineshaft = getBoolean("generator-settings.mineshaft", true);
+        generateMonument = getBoolean("generator-settings.monument", true);
+        generateStronghold = getBoolean("generator-settings.stronghold", true);
+        generateTemple = getBoolean("generator-settings.temple", true);
+        generateVillage = getBoolean("generator-settings.village", true);
+        generateFlatBedrock = getBoolean("generator-settings.flat-bedrock", false);
     }
 
     public boolean fixCannons;
-    private void fixCannons()
-    {
+
+    private void fixCannons() {
         // TODO: Remove migrations after most users have upgraded.
-        if ( PaperSpigotConfig.version < 9 )
-        {
+        if (PaperSpigotConfig.version < 9) {
             // Migrate default value
 
-            boolean value = config.getBoolean( "world-settings.default.fix-cannons", false );
-            if ( !value ) value = config.getBoolean( "world-settings.default.tnt-gameplay.fix-directional-bias", false );
-            if ( !value ) value = !config.getBoolean( "world-settings.default.tnt-gameplay.moves-in-water", true );
-            if ( !value ) value = config.getBoolean( "world-settings.default.tnt-gameplay.legacy-explosion-height", false );
-            if ( value ) config.set( "world-settings.default.fix-cannons", true );
+            boolean value = config.getBoolean("world-settings.default.fix-cannons", false);
+            if (!value) value = config.getBoolean("world-settings.default.tnt-gameplay.fix-directional-bias", false);
+            if (!value) value = !config.getBoolean("world-settings.default.tnt-gameplay.moves-in-water", true);
+            if (!value) value = config.getBoolean("world-settings.default.tnt-gameplay.legacy-explosion-height", false);
+            if (value) config.set("world-settings.default.fix-cannons", true);
 
-            if ( config.contains( "world-settings.default.tnt-gameplay" ) )
-            {
-                config.getDefaults().set( "world-settings.default.tnt-gameplay", null);
-                config.set( "world-settings.default.tnt-gameplay", null );
+            if (config.contains("world-settings.default.tnt-gameplay")) {
+                config.getDefaults().set("world-settings.default.tnt-gameplay", null);
+                config.set("world-settings.default.tnt-gameplay", null);
             }
 
             // Migrate world setting
 
-            value = config.getBoolean( "world-settings." + worldName + ".fix-cannons", false );
-            if ( !value ) value = config.getBoolean( "world-settings." + worldName + ".tnt-gameplay.fix-directional-bias", false );
-            if ( !value ) value = !config.getBoolean( "world-settings." + worldName + ".tnt-gameplay.moves-in-water", true );
-            if ( !value ) value = config.getBoolean( "world-settings." + worldName + ".tnt-gameplay.legacy-explosion-height", false );
-            if ( value ) config.set( "world-settings." + worldName + ".fix-cannons", true );
-
-            if ( config.contains( "world-settings." + worldName + ".tnt-gameplay" ) )
-            {
-                config.getDefaults().set( "world-settings." + worldName + ".tnt-gameplay", null);
-                config.set( "world-settings." + worldName + ".tnt-gameplay", null );
+            value = config.getBoolean("world-settings." + worldName + ".fix-cannons", false);
+            if (!value)
+                value = config.getBoolean("world-settings." + worldName + ".tnt-gameplay.fix-directional-bias", false);
+            if (!value)
+                value = !config.getBoolean("world-settings." + worldName + ".tnt-gameplay.moves-in-water", true);
+            if (!value)
+                value = config.getBoolean("world-settings." + worldName + ".tnt-gameplay.legacy-explosion-height", false);
+            if (value) config.set("world-settings." + worldName + ".fix-cannons", true);
+
+            if (config.contains("world-settings." + worldName + ".tnt-gameplay")) {
+                config.getDefaults().set("world-settings." + worldName + ".tnt-gameplay", null);
+                config.set("world-settings." + worldName + ".tnt-gameplay", null);
             }
         }
 
-        fixCannons = getBoolean( "fix-cannons", false );
-        log( "Fix TNT cannons: " + fixCannons );
+        fixCannons = getBoolean("fix-cannons", false);
+        log("Fix TNT cannons: " + fixCannons);
     }
 
     public boolean fallingBlocksCollideWithSigns;
-    private void fallingBlocksCollideWithSigns()
-    {
-        fallingBlocksCollideWithSigns = getBoolean( "falling-blocks-collide-with-signs", false );
+
+    private void fallingBlocksCollideWithSigns() {
+        fallingBlocksCollideWithSigns = getBoolean("falling-blocks-collide-with-signs", false);
     }
 
     public boolean optimizeExplosions;
-    private void optimizeExplosions()
-    {
-        optimizeExplosions = getBoolean( "optimize-explosions", false );
+
+    private void optimizeExplosions() {
+        optimizeExplosions = getBoolean("optimize-explosions", false);
     }
 
     public boolean fastDrainLava;
     public boolean fastDrainWater;
-    private void fastDraining()
-    {
-        fastDrainLava = getBoolean( "fast-drain.lava", false );
-        fastDrainWater = getBoolean( "fast-drain.water", false );
+
+    private void fastDraining() {
+        fastDrainLava = getBoolean("fast-drain.lava", false);
+        fastDrainWater = getBoolean("fast-drain.water", false);
     }
 
     public int lavaFlowSpeedNormal;
     public int lavaFlowSpeedNether;
-    private void lavaFlowSpeed()
-    {
-        lavaFlowSpeedNormal = getInt( "lava-flow-speed.normal", 30 );
-        lavaFlowSpeedNether = getInt( "lava-flow-speed.nether", 10 );
+
+    private void lavaFlowSpeed() {
+        lavaFlowSpeedNormal = getInt("lava-flow-speed.normal", 30);
+        lavaFlowSpeedNether = getInt("lava-flow-speed.nether", 10);
     }
 
     public boolean disableExplosionKnockback;
-    private void disableExplosionKnockback()
-    {
-        disableExplosionKnockback = getBoolean( "disable-explosion-knockback", false );
+
+    private void disableExplosionKnockback() {
+        disableExplosionKnockback = getBoolean("disable-explosion-knockback", false);
     }
 
     public boolean disableThunder;
-    private void disableThunder()
-    {
-        disableThunder = getBoolean( "disable-thunder", false );
+
+    private void disableThunder() {
+        disableThunder = getBoolean("disable-thunder", false);
     }
 
     public boolean disableIceAndSnow;
-    private void disableIceAndSnow()
-    {
-        disableIceAndSnow = getBoolean( "disable-ice-and-snow", false );
+
+    private void disableIceAndSnow() {
+        disableIceAndSnow = getBoolean("disable-ice-and-snow", false);
     }
 
     public boolean disableMoodSounds;
-    private void disableMoodSounds()
-    {
-        disableMoodSounds = getBoolean( "disable-mood-sounds", false );
+
+    private void disableMoodSounds() {
+        disableMoodSounds = getBoolean("disable-mood-sounds", false);
     }
 
     public int mobSpawnerTickRate;
-    private void mobSpawnerTickRate()
-    {
-        mobSpawnerTickRate = getInt( "mob-spawner-tick-rate", 1 );
+
+    private void mobSpawnerTickRate() {
+        mobSpawnerTickRate = getInt("mob-spawner-tick-rate", 1);
     }
 
     public boolean cacheChunkMaps;
-    private void cacheChunkMaps()
-    {
-        cacheChunkMaps = getBoolean( "cache-chunk-maps", false );
+
+    private void cacheChunkMaps() {
+        cacheChunkMaps = getBoolean("cache-chunk-maps", false);
     }
 
     public int containerUpdateTickRate;
-    private void containerUpdateTickRate()
-    {
-        containerUpdateTickRate = getInt( "container-update-tick-rate", 1 );
+
+    private void containerUpdateTickRate() {
+        containerUpdateTickRate = getInt("container-update-tick-rate", 1);
     }
 
     public float tntExplosionVolume;
-    private void tntExplosionVolume()
-    {
-        tntExplosionVolume = getFloat( "tnt-explosion-volume", 4.0F );
+
+    private void tntExplosionVolume() {
+        tntExplosionVolume = getFloat("tnt-explosion-volume", 4.0F);
     }
 
     public boolean useHopperCheck;
-    private void useHopperCheck()
-    {
-        useHopperCheck = getBoolean( "use-hopper-check", false );
+
+    private void useHopperCheck() {
+        useHopperCheck = getBoolean("use-hopper-check", false);
     }
 
     public boolean allChunksAreSlimeChunks;
-    private void allChunksAreSlimeChunks()
-    {
-        allChunksAreSlimeChunks = getBoolean( "all-chunks-are-slime-chunks", false );
+
+    private void allChunksAreSlimeChunks() {
+        allChunksAreSlimeChunks = getBoolean("all-chunks-are-slime-chunks", false);
     }
 
     public boolean allowBlockLocationTabCompletion;
-    private void allowBlockLocationTabCompletion()
-    {
-        allowBlockLocationTabCompletion = getBoolean( "allow-block-location-tab-completion", true );
+
+    private void allowBlockLocationTabCompletion() {
+        allowBlockLocationTabCompletion = getBoolean("allow-block-location-tab-completion", true);
     }
 
     public int portalSearchRadius;
-    private void portalSearchRadius()
-    {
+
+    private void portalSearchRadius() {
         portalSearchRadius = getInt("portal-search-radius", 128);
     }
 }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index d3767d2a8..1dd81c96e 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -1,46 +1,17 @@
 package org.spigotmc;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Set;
-import net.minecraft.server.AxisAlignedBB;
-import net.minecraft.server.Chunk;
-import net.minecraft.server.Entity;
-import net.minecraft.server.EntityAmbient;
-import net.minecraft.server.EntityAnimal;
-import net.minecraft.server.EntityArrow;
-import net.minecraft.server.EntityComplexPart;
-import net.minecraft.server.EntityCreature;
-import net.minecraft.server.EntityCreeper;
-import net.minecraft.server.EntityEnderCrystal;
-import net.minecraft.server.EntityEnderDragon;
-import net.minecraft.server.EntityFallingBlock;
-import net.minecraft.server.EntityFireball;
-import net.minecraft.server.EntityFireworks;
-import net.minecraft.server.EntityHuman;
-import net.minecraft.server.EntityLiving;
-import net.minecraft.server.EntityMonster;
-import net.minecraft.server.EntityProjectile;
-import net.minecraft.server.EntitySheep;
-import net.minecraft.server.EntitySlice;
-import net.minecraft.server.EntitySlime;
-import net.minecraft.server.EntityTNTPrimed;
-import net.minecraft.server.EntityVillager;
-import net.minecraft.server.EntityWeather;
-import net.minecraft.server.EntityWither;
-import net.minecraft.server.MathHelper;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.World;
 import co.aikar.timings.SpigotTimings;
+import net.minecraft.server.*;
+
+import java.util.List;
 
 
-public class ActivationRange
-{
+public class ActivationRange {
 
-    static AxisAlignedBB maxBB = AxisAlignedBB.a( 0, 0, 0, 0, 0, 0 );
-    static AxisAlignedBB miscBB = AxisAlignedBB.a( 0, 0, 0, 0, 0, 0 );
-    static AxisAlignedBB animalBB = AxisAlignedBB.a( 0, 0, 0, 0, 0, 0 );
-    static AxisAlignedBB monsterBB = AxisAlignedBB.a( 0, 0, 0, 0, 0, 0 );
+    static AxisAlignedBB maxBB = AxisAlignedBB.a(0, 0, 0, 0, 0, 0);
+    static AxisAlignedBB miscBB = AxisAlignedBB.a(0, 0, 0, 0, 0, 0);
+    static AxisAlignedBB animalBB = AxisAlignedBB.a(0, 0, 0, 0, 0, 0);
+    static AxisAlignedBB monsterBB = AxisAlignedBB.a(0, 0, 0, 0, 0, 0);
 
     /**
      * Initializes an entities type on construction to specify what group this
@@ -49,16 +20,12 @@ public class ActivationRange
      * @param entity
      * @return group id
      */
-    public static byte initializeEntityActivationType(Entity entity)
-    {
-        if ( entity instanceof EntityMonster || entity instanceof EntitySlime )
-        {
+    public static byte initializeEntityActivationType(Entity entity) {
+        if (entity instanceof EntityMonster || entity instanceof EntitySlime) {
             return 1; // Monster
-        } else if ( entity instanceof EntityCreature || entity instanceof EntityAmbient )
-        {
+        } else if (entity instanceof EntityCreature || entity instanceof EntityAmbient) {
             return 2; // Animal
-        } else
-        {
+        } else {
             return 3; // Misc
         }
     }
@@ -67,14 +34,13 @@ public class ActivationRange
      * These entities are excluded from Activation range checks.
      *
      * @param entity
-     * @param world
+     * @param config
      * @return boolean If it should always tick.
      */
-    public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
-    {
-        if ( ( entity.activationType == 3 && config.miscActivationRange == 0 )
-                || ( entity.activationType == 2 && config.animalActivationRange == 0 )
-                || ( entity.activationType == 1 && config.monsterActivationRange == 0 )
+    public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config) {
+        return (entity.activationType == 3 && config.miscActivationRange == 0)
+                || (entity.activationType == 2 && config.animalActivationRange == 0)
+                || (entity.activationType == 1 && config.monsterActivationRange == 0)
                 || entity instanceof EntityHuman
                 || entity instanceof EntityProjectile
                 || entity instanceof EntityEnderDragon
@@ -85,12 +51,8 @@ public class ActivationRange
                 || entity instanceof EntityTNTPrimed
                 || entity instanceof EntityFallingBlock // PaperSpigot - Always tick falling blocks
                 || entity instanceof EntityEnderCrystal
-                || entity instanceof EntityFireworks )
-        {
-            return true;
-        }
+                || entity instanceof EntityFireworks;
 
-        return false;
     }
 
     /**
@@ -99,38 +61,33 @@ public class ActivationRange
      *
      * @param world
      */
-    public static void activateEntities(World world)
-    {
+    public static void activateEntities(World world) {
         SpigotTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
         final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
 
-        int maxRange = Math.max( monsterActivationRange, animalActivationRange );
-        maxRange = Math.max( maxRange, miscActivationRange );
-        maxRange = Math.min( ( world.spigotConfig.viewDistance << 4 ) - 8, maxRange );
+        int maxRange = Math.max(monsterActivationRange, animalActivationRange);
+        maxRange = Math.max(maxRange, miscActivationRange);
+        maxRange = Math.min((world.spigotConfig.viewDistance << 4) - 8, maxRange);
 
-        for ( Entity player : (List<Entity>) (List) world.players )
-        {
+        for (Entity player : (List<Entity>) (List) world.players) {
 
             player.activatedTick = MinecraftServer.currentTick;
-            maxBB = player.getBoundingBox().grow( maxRange, 256, maxRange );
-            miscBB = player.getBoundingBox().grow( miscActivationRange, 256, miscActivationRange );
-            animalBB = player.getBoundingBox().grow( animalActivationRange, 256, animalActivationRange );
-            monsterBB = player.getBoundingBox().grow( monsterActivationRange, 256, monsterActivationRange );
-
-            int i = MathHelper.floor( maxBB.a / 16.0D );
-            int j = MathHelper.floor( maxBB.d / 16.0D );
-            int k = MathHelper.floor( maxBB.c / 16.0D );
-            int l = MathHelper.floor( maxBB.f / 16.0D );
-
-            for ( int i1 = i; i1 <= j; ++i1 )
-            {
-                for ( int j1 = k; j1 <= l; ++j1 )
-                {
-                    if ( world.getWorld().isChunkLoaded( i1, j1 ) )
-                    {
-                        activateChunkEntities( world.getChunkAt( i1, j1 ) );
+            maxBB = player.getBoundingBox().grow(maxRange, 256, maxRange);
+            miscBB = player.getBoundingBox().grow(miscActivationRange, 256, miscActivationRange);
+            animalBB = player.getBoundingBox().grow(animalActivationRange, 256, animalActivationRange);
+            monsterBB = player.getBoundingBox().grow(monsterActivationRange, 256, monsterActivationRange);
+
+            int i = MathHelper.floor(maxBB.a / 16.0D);
+            int j = MathHelper.floor(maxBB.d / 16.0D);
+            int k = MathHelper.floor(maxBB.c / 16.0D);
+            int l = MathHelper.floor(maxBB.f / 16.0D);
+
+            for (int i1 = i; i1 <= j; ++i1) {
+                for (int j1 = k; j1 <= l; ++j1) {
+                    if (world.getWorld().isChunkLoaded(i1, j1)) {
+                        activateChunkEntities(world.getChunkAt(i1, j1));
                     }
                 }
             }
@@ -143,37 +100,28 @@ public class ActivationRange
      *
      * @param chunk
      */
-    private static void activateChunkEntities(Chunk chunk)
-    {
-        for ( List<Entity> slice : chunk.entitySlices )
-        {
-            for ( Entity entity : slice )
-            {
-                if ( MinecraftServer.currentTick > entity.activatedTick )
-                {
-                    if ( entity.defaultActivationState )
-                    {
+    private static void activateChunkEntities(Chunk chunk) {
+        for (List<Entity> slice : chunk.entitySlices) {
+            for (Entity entity : slice) {
+                if (MinecraftServer.currentTick > entity.activatedTick) {
+                    if (entity.defaultActivationState) {
                         entity.activatedTick = MinecraftServer.currentTick;
                         continue;
                     }
-                    switch ( entity.activationType )
-                    {
+                    switch (entity.activationType) {
                         case 1:
-                            if ( monsterBB.b( entity.getBoundingBox() ) )
-                            {
+                            if (monsterBB.b(entity.getBoundingBox())) {
                                 entity.activatedTick = MinecraftServer.currentTick;
                             }
                             break;
                         case 2:
-                            if ( animalBB.b( entity.getBoundingBox() ) )
-                            {
+                            if (animalBB.b(entity.getBoundingBox())) {
                                 entity.activatedTick = MinecraftServer.currentTick;
                             }
                             break;
                         case 3:
                         default:
-                            if ( miscBB.b( entity.getBoundingBox() ) )
-                            {
+                            if (miscBB.b(entity.getBoundingBox())) {
                                 entity.activatedTick = MinecraftServer.currentTick;
                             }
                     }
@@ -189,55 +137,42 @@ public class ActivationRange
      * @param entity
      * @return
      */
-    public static boolean checkEntityImmunities(Entity entity)
-    {
+    public static boolean checkEntityImmunities(Entity entity) {
         // quick checks.
-        if ( entity.inWater || entity.fireTicks > 0 )
-        {
+        if (entity.inWater || entity.fireTicks > 0) {
             return true;
         }
-        if ( !( entity instanceof EntityArrow ) )
-        {
-            if ( !entity.onGround || entity.passenger != null
-                    || entity.vehicle != null )
-            {
+        if (!(entity instanceof EntityArrow)) {
+            if (!entity.onGround || entity.passenger != null
+                    || entity.vehicle != null) {
                 return true;
             }
-        } else if ( !( (EntityArrow) entity ).inGround )
-        {
+        } else if (!((EntityArrow) entity).inGround) {
             return true;
         }
         // special cases.
-        if ( entity instanceof EntityLiving )
-        {
+        if (entity instanceof EntityLiving) {
             EntityLiving living = (EntityLiving) entity;
-            if ( /*TODO: Missed mapping? living.attackTicks > 0 || */ living.hurtTicks > 0 || living.effects.size() > 0 )
-            {
+            if ( /*TODO: Missed mapping? living.attackTicks > 0 || */ living.hurtTicks > 0 || living.effects.size() > 0) {
                 return true;
             }
-            if ( entity instanceof EntityCreature && ( (EntityCreature) entity ).getGoalTarget() != null )
-            {
+            if (entity instanceof EntityCreature && ((EntityCreature) entity).getGoalTarget() != null) {
                 return true;
             }
-            if ( entity instanceof EntityVillager && ( (EntityVillager) entity ).cm() /* Getter for first boolean */ )
-            {
+            if (entity instanceof EntityVillager && ((EntityVillager) entity).cm() /* Getter for first boolean */) {
                 return true;
             }
-            if ( entity instanceof EntityAnimal )
-            {
+            if (entity instanceof EntityAnimal) {
                 EntityAnimal animal = (EntityAnimal) entity;
-                if ( animal.isBaby() || animal.isInLove() )
-                {
+                if (animal.isBaby() || animal.isInLove()) {
                     return true;
                 }
-                if ( entity instanceof EntitySheep && ( (EntitySheep) entity ).isSheared() )
-                {
+                if (entity instanceof EntitySheep && ((EntitySheep) entity).isSheared()) {
                     return true;
                 }
             }
-            if (entity instanceof EntityCreeper && ((EntityCreeper) entity).cn()) { // isExplosive
-                return true;
-            }
+            // isExplosive
+            return entity instanceof EntityCreeper && ((EntityCreeper) entity).cn();
         }
         return false;
     }
@@ -248,11 +183,10 @@ public class ActivationRange
      * @param entity
      * @return
      */
-    public static boolean checkIfActive(Entity entity)
-    {
+    public static boolean checkIfActive(Entity entity) {
         SpigotTimings.checkIfActiveTimer.startTiming();
         // Never safe to skip fireworks or entities not yet added to chunk
-        if ( !entity.isAddedToChunk() || entity instanceof EntityFireworks || entity.loadChunks ) { // PaperSpigot
+        if (!entity.isAddedToChunk() || entity instanceof EntityFireworks || entity.loadChunks) { // PaperSpigot
             SpigotTimings.checkIfActiveTimer.stopTiming();
             return true;
         }
@@ -260,29 +194,24 @@ public class ActivationRange
         boolean isActive = entity.activatedTick >= MinecraftServer.currentTick || entity.defaultActivationState;
 
         // Should this entity tick?
-        if ( !isActive )
-        {
-            if ( ( MinecraftServer.currentTick - entity.activatedTick - 1 ) % 20 == 0 )
-            {
+        if (!isActive) {
+            if ((MinecraftServer.currentTick - entity.activatedTick - 1) % 20 == 0) {
                 // Check immunities every 20 ticks.
-                if ( checkEntityImmunities( entity ) )
-                {
+                if (checkEntityImmunities(entity)) {
                     // Triggered some sort of immunity, give 20 full ticks before we check again.
                     entity.activatedTick = MinecraftServer.currentTick + 20;
                 }
                 isActive = true;
             }
             // Add a little performance juice to active entities. Skip 1/4 if not immune.
-        } else if ( !entity.defaultActivationState && entity.ticksLived % 4 == 0 && !checkEntityImmunities( entity ) )
-        {
+        } else if (!entity.defaultActivationState && entity.ticksLived % 4 == 0 && !checkEntityImmunities(entity)) {
             isActive = false;
         }
-        int x = MathHelper.floor( entity.locX );
-        int z = MathHelper.floor( entity.locZ );
+        int x = MathHelper.floor(entity.locX);
+        int z = MathHelper.floor(entity.locZ);
         // Make sure not on edge of unloaded chunk
-        Chunk chunk = entity.world.getChunkIfLoaded( x >> 4, z >> 4 );
-        if ( isActive && !( chunk != null && chunk.areNeighborsLoaded( 1 ) ) )
-        {
+        Chunk chunk = entity.world.getChunkIfLoaded(x >> 4, z >> 4);
+        if (isActive && !(chunk != null && chunk.areNeighborsLoaded(1))) {
             isActive = false;
         }
         SpigotTimings.checkIfActiveTimer.stopTiming();
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index ec884c625..f3a2c846b 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -28,7 +28,7 @@ public class AntiXray
     private final byte[] replacementOres;
     // PaperSpigot start
     public boolean queueUpdates = true;
-    public final Set<BlockPosition> pendingUpdates = new HashSet<BlockPosition>();
+    public final Set<BlockPosition> pendingUpdates = new HashSet<>();
     // PaperSpigot end
 
     public AntiXray(SpigotWorldConfig config)
diff --git a/src/main/java/org/spigotmc/Metrics.java b/src/main/java/org/spigotmc/Metrics.java
index f653050ef..0fed5852c 100644
--- a/src/main/java/org/spigotmc/Metrics.java
+++ b/src/main/java/org/spigotmc/Metrics.java
@@ -30,9 +30,6 @@ package org.spigotmc;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginDescriptionFile;
-import org.bukkit.scheduler.BukkitTask;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -91,7 +88,7 @@ public class Metrics {
     /**
      * All of the custom graphs to submit to metrics
      */
-    private final Set<Graph> graphs = Collections.synchronizedSet(new HashSet<Graph>());
+    private final Set<Graph> graphs = Collections.synchronizedSet(new HashSet<>());
     /**
      * The default graph, used for addCustomData when you don't want a specific graph
      */
@@ -264,12 +261,7 @@ public class Metrics {
             try {
                 // Reload the metrics file
                 configuration.load(getConfigFile());
-            } catch (IOException ex) {
-                if (debug) {
-                    Bukkit.getLogger().log(Level.INFO, "[Metrics] " + ex.getMessage());
-                }
-                return true;
-            } catch (InvalidConfigurationException ex) {
+            } catch (IOException | InvalidConfigurationException ex) {
                 if (debug) {
                     Bukkit.getLogger().log(Level.INFO, "[Metrics] " + ex.getMessage());
                 }
@@ -389,11 +381,8 @@ public class Metrics {
         // Acquire a lock on the graphs, which lets us make the assumption we also lock everything
         // inside of the graph (e.g plotters)
         synchronized (graphs) {
-            final Iterator<Graph> iter = graphs.iterator();
-
-            while (iter.hasNext()) {
-                final Graph graph = iter.next();
 
+            for (Graph graph : graphs) {
                 for (Plotter plotter : graph.getPlotters()) {
                     // The key name to send to the metrics server
                     // The format is C-GRAPHNAME-PLOTTERNAME where separator - is defined at the top
@@ -445,11 +434,8 @@ public class Metrics {
             // Is this the first update this hour?
             if (response.contains("OK This is your first update this hour")) {
                 synchronized (graphs) {
-                    final Iterator<Graph> iter = graphs.iterator();
-
-                    while (iter.hasNext()) {
-                        final Graph graph = iter.next();
 
+                    for (Graph graph : graphs) {
                         for (Plotter plotter : graph.getPlotters()) {
                             plotter.reset();
                         }
@@ -513,7 +499,7 @@ public class Metrics {
         /**
          * The set of plotters that are contained within this graph
          */
-        private final Set<Plotter> plotters = new LinkedHashSet<Plotter>();
+        private final Set<Plotter> plotters = new LinkedHashSet<>();
 
         private Graph(final String name) {
             this.name = name;
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index 429c25804..900bc7b5e 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -23,14 +23,7 @@ public class RestartCommand extends Command
     {
         if ( testPermission( sender ) )
         {
-            MinecraftServer.getServer().processQueue.add( new Runnable()
-            {
-                @Override
-                public void run()
-                {
-                    restart();
-                }
-            } );
+            MinecraftServer.getServer().processQueue.add(() -> restart());
         }
         return true;
     }
@@ -53,7 +46,7 @@ public class RestartCommand extends Command
                 WatchdogThread.doStop();
 
                 // Kick all players
-                for ( EntityPlayer p : (List< EntityPlayer>) MinecraftServer.getServer().getPlayerList().players )
+                for ( EntityPlayer p : MinecraftServer.getServer().getPlayerList().players)
                 {
                     p.playerConnection.disconnect(SpigotConfig.restartMessage);
                 }
@@ -61,7 +54,7 @@ public class RestartCommand extends Command
                 try
                 {
                     Thread.sleep( 100 );
-                } catch ( InterruptedException ex )
+                } catch ( InterruptedException ignored)
                 {
                 }
                 // Close the socket so we can rebind with the new process
@@ -71,7 +64,7 @@ public class RestartCommand extends Command
                 try
                 {
                     Thread.sleep( 100 );
-                } catch ( InterruptedException ex )
+                } catch ( InterruptedException ignored)
                 {
                 }
 
@@ -79,7 +72,7 @@ public class RestartCommand extends Command
                 try
                 {
                     MinecraftServer.getServer().stop();
-                } catch ( Throwable t )
+                } catch ( Throwable ignored)
                 {
                 }
 
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index b9d185d99..8c9f2433f 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -60,7 +60,7 @@ public class SpigotConfig
         try
         {
             config.load( CONFIG_FILE );
-        } catch ( IOException ex )
+        } catch ( IOException ignored)
         {
         } catch ( InvalidConfigurationException ex )
         {
@@ -71,7 +71,7 @@ public class SpigotConfig
         config.options().header( HEADER );
         config.options().copyDefaults( true );
 
-        commands = new HashMap<String, Command>();
+        commands = new HashMap<>();
 
         version = getInt( "config-version", 8 );
         set( "config-version", 8 );
@@ -150,7 +150,7 @@ public class SpigotConfig
     private static <T> List getList(String path, T def)
     {
         config.addDefault( path, def );
-        return (List<T>) config.getList( path, config.getList( path ) );
+        return config.getList( path, config.getList( path ) );
     }
 
     private static String getString(String path, String def)
@@ -282,7 +282,7 @@ public class SpigotConfig
     }
 
     public static boolean disableStatSaving;
-    public static TObjectIntHashMap<String> forcedStats = new TObjectIntHashMap<String>();
+    public static TObjectIntHashMap<String> forcedStats = new TObjectIntHashMap<>();
     private static void stats()
     {
         disableStatSaving = getBoolean( "stats.disable-saving", false );
@@ -329,10 +329,7 @@ public class SpigotConfig
     public static List<String> spamExclusions;
     private static void spamExclusions()
     {
-        spamExclusions = getList( "commands.spam-exclusions", Arrays.asList( new String[]
-        {
-                "/skill"
-        } ) );
+        spamExclusions = getList( "commands.spam-exclusions", Arrays.asList("/skill") );
     }
 
     public static boolean silentCommandBlocks;
@@ -355,8 +352,8 @@ public class SpigotConfig
             set( "commands.replace-commands", config.getStringList( "replace-commands" ) );
             config.set( "replace-commands", null );
         }
-        replaceCommands = new HashSet<String>( (List<String>) getList( "commands.replace-commands",
-                Arrays.asList( "setblock", "summon", "testforblock", "tellraw" ) ) );
+        replaceCommands = new HashSet<>((List<String>) getList("commands.replace-commands",
+                Arrays.asList("setblock", "summon", "testforblock", "tellraw")));
     }
     
     public static int userCacheCap;
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 8e86212aa..0f78f9e8b 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -61,7 +61,7 @@ public class SpigotWorldConfig
     private <T> List getList(String path, T def)
     {
         config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
+        return config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
     }
 
     private String getString(String path, String def)
@@ -233,16 +233,10 @@ public class SpigotWorldConfig
         {
             set( "anti-xray.blocks", null );
         }
-        hiddenBlocks = getList( "anti-xray.hide-blocks", Arrays.asList( new Integer[]
-        {
-            14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130
-        } ) );
+        hiddenBlocks = getList( "anti-xray.hide-blocks", Arrays.asList(14, 15, 16, 21, 48, 49, 54, 56, 73, 74, 82, 129, 130) );
         log( "\tHidden Blocks: " + hiddenBlocks );
 
-        replaceBlocks = getList( "anti-xray.replace-blocks", Arrays.asList( new Integer[]
-        {
-            1, 5
-        } ) );
+        replaceBlocks = getList( "anti-xray.replace-blocks", Arrays.asList(1, 5) );
         log( "\tReplace Blocks: " + replaceBlocks );
 
         antiXrayInstance = new AntiXray( this );
diff --git a/src/test/java/org/bukkit/DyeColorsTest.java b/src/test/java/org/bukkit/DyeColorsTest.java
index f0b889b34..1b235e81a 100644
--- a/src/test/java/org/bukkit/DyeColorsTest.java
+++ b/src/test/java/org/bukkit/DyeColorsTest.java
@@ -22,7 +22,7 @@ public class DyeColorsTest extends AbstractTestingBase {
 
     @Parameters(name= "{index}: {0}")
     public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
+        List<Object[]> list = new ArrayList<>();
         for (DyeColor dye : DyeColor.values()) {
             list.add(new Object[] {dye});
         }
diff --git a/src/test/java/org/bukkit/MaterialTest.java b/src/test/java/org/bukkit/MaterialTest.java
index a63c0f4d2..9bd88b845 100644
--- a/src/test/java/org/bukkit/MaterialTest.java
+++ b/src/test/java/org/bukkit/MaterialTest.java
@@ -29,10 +29,7 @@ public class MaterialTest extends AbstractTestingBase {
         }
         materials.remove(0); // Purge air.
 
-        Iterator<Item> items = Item.REGISTRY.iterator();
-
-        while (items.hasNext()) {
-            Item item = items.next();
+        for (Item item : Item.REGISTRY) {
             if (item == null) continue;
 
             int id = CraftMagicNumbers.getId(item);
diff --git a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
index 0a6c277ab..56d9c81dc 100644
--- a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
+++ b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
@@ -3,7 +3,6 @@ package org.bukkit;
 import static org.junit.Assert.*;
 import static org.hamcrest.Matchers.*;
 
-import java.util.Collections;
 import java.util.List;
 
 import net.minecraft.server.AchievementList;
@@ -19,9 +18,9 @@ import com.google.common.collect.Lists;
 public class StatisticsAndAchievementsTest extends AbstractTestingBase {
     @Test
     @SuppressWarnings("unchecked")
-    public void verifyAchievementMapping() throws Throwable {
+    public void verifyAchievementMapping() {
         List<Achievement> achievements = Lists.newArrayList(Achievement.values());
-        for (net.minecraft.server.Achievement achievement : (List<net.minecraft.server.Achievement>) AchievementList.e) {
+        for (net.minecraft.server.Achievement achievement : AchievementList.e) {
             String name = achievement.name;
 
             String message = String.format("org.bukkit.Achievement is missing: '%s'", name);
@@ -37,9 +36,9 @@ public class StatisticsAndAchievementsTest extends AbstractTestingBase {
 
     @Test
     @SuppressWarnings("unchecked")
-    public void verifyStatisticMapping() throws Throwable {
+    public void verifyStatisticMapping() {
         HashMultiset<Statistic> statistics = HashMultiset.create();
-        for (net.minecraft.server.Statistic statistic : (List<net.minecraft.server.Statistic>) StatisticList.stats) {
+        for (net.minecraft.server.Statistic statistic : StatisticList.stats) {
             if (statistic instanceof net.minecraft.server.Achievement) {
                 continue;
             }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
index 1349a7f18..38385d237 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
@@ -24,7 +24,7 @@ public class CompositeSerialization extends AbstractTestingBase {
     public void testSaveRestoreCompositeList() throws InvalidConfigurationException {
         YamlConfiguration out = getConfig();
 
-        List<ItemStack> stacks = new ArrayList<ItemStack>();
+        List<ItemStack> stacks = new ArrayList<>();
         stacks.add(new ItemStack(1));
         stacks.add(new ItemStack(2));
         stacks.add(new ItemStack(3));
@@ -54,7 +54,7 @@ public class CompositeSerialization extends AbstractTestingBase {
         assertThat(stacks, hasSize(raw.size()));
 
         for (int i = 0; i < 9; i++) {
-            assertThat(String.valueOf(i), (Object) stacks.get(i), is((Object) raw.get(i)));
+            assertThat(String.valueOf(i), stacks.get(i), is(raw.get(i)));
         }
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
index 1e5c3ef2d..69c4bab9d 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
@@ -5,7 +5,6 @@ import static org.hamcrest.Matchers.*;
 
 import java.util.ArrayList;
 import java.util.List;
-import org.apache.commons.lang.ArrayUtils;
 
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemFactory;
@@ -26,7 +25,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
     static {
         Material[] local_materials = Material.values();
-        List<Material> list = new ArrayList<Material>(local_materials.length);
+        List<Material> list = new ArrayList<>(local_materials.length);
         for (Material material : local_materials) {
             if (INVALIDATED_MATERIALS.contains(material)) {
                 continue;
@@ -34,7 +33,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
             list.add(material);
         }
-        materials = list.toArray(new Material[list.size()]);
+        materials = list.toArray(new Material[0]);
     }
 
     static String name(Enum<?> from, Enum<?> to) {
@@ -46,7 +45,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
     @Parameters(name="Material[{index}]:{0}")
     public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
+        List<Object[]> list = new ArrayList<>();
         for (Material material : materials) {
             list.add(new Object[] {material});
         }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemFactoryTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemFactoryTest.java
index f5bcbdbe1..8384b1e22 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemFactoryTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemFactoryTest.java
@@ -21,7 +21,7 @@ public class ItemFactoryTest extends AbstractTestingBase {
     @Test
     public void testKnownAttributes() throws Throwable {
         final ZipInputStream nmsZipStream = new ZipInputStream(CommandAbstract.class/* Magic class that isn't imported! */.getProtectionDomain().getCodeSource().getLocation().openStream());
-        final Collection<String> names = new HashSet<String>();
+        final Collection<String> names = new HashSet<>();
         for (ZipEntry clazzEntry; (clazzEntry = nmsZipStream.getNextEntry()) != null; ) {
             final String entryName = clazzEntry.getName();
             if (!(entryName.endsWith(".class") && entryName.startsWith("net/minecraft/server/"))) {
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
index f1b4ec0da..928c8f389 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
@@ -23,8 +23,8 @@ public class ItemMetaImplementationOverrideTest {
 
     @Parameters(name="[{index}]:{1}")
     public static List<Object[]> data() {
-        final List<Object[]> testData = new ArrayList<Object[]>();
-        List<Class<? extends CraftMetaItem>> classes = new ArrayList<Class<? extends CraftMetaItem>>();
+        final List<Object[]> testData = new ArrayList<>();
+        List<Class<? extends CraftMetaItem>> classes = new ArrayList<>();
 
         for (Material material : ItemStackTest.COMPOUND_MATERIALS) {
             Class<? extends CraftMetaItem> clazz = CraftItemFactory.instance().getItemMeta(material).getClass().asSubclass(parent);
@@ -33,7 +33,7 @@ public class ItemMetaImplementationOverrideTest {
             }
         }
 
-        List<Method> list = new ArrayList<Method>();
+        List<Method> list = new ArrayList<>();
 
         for (Method method: parent.getDeclaredMethods()) {
             if (method.isAnnotationPresent(Overridden.class)) {
@@ -45,11 +45,7 @@ public class ItemMetaImplementationOverrideTest {
             for (final Method method : list) {
                 testData.add(
                     new Object[] {
-                        new Callable<Method>() {
-                            public Method call() throws Exception {
-                                return clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());
-                            }
-                        },
+                            (Callable<Method>) () -> clazz.getDeclaredMethod(method.getName(), method.getParameterTypes()),
                         clazz.getSimpleName() + " contains " + method.getName()
                     }
                 );
@@ -57,11 +53,7 @@ public class ItemMetaImplementationOverrideTest {
 
             testData.add(
                 new Object[] {
-                    new Callable<DelegateDeserialization>() {
-                        public DelegateDeserialization call() throws Exception {
-                            return clazz.getAnnotation(DelegateDeserialization.class);
-                        }
-                    },
+                        (Callable<DelegateDeserialization>) () -> clazz.getAnnotation(DelegateDeserialization.class),
                     clazz.getSimpleName() + " contains annotation " + DelegateDeserialization.class
                 }
             );
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
index 71a345761..619c3f551 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
@@ -122,7 +122,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         craft.setItemMeta(craft.getItemMeta());
         ItemStack bukkit = new ItemStack(craft);
         assertThat(craft, is(bukkit));
-        assertThat(bukkit, is((ItemStack) craft));
+        assertThat(bukkit, is(craft));
     }
 
     @Test
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
index a7edc048b..0c33eb809 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
@@ -29,182 +29,136 @@ public class ItemStackBookTest extends ItemStackTest {
             ItemStackLoreEnchantmentTest.operators(),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1", "Page 2");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Pages vs. Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1", "Page 2");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             cleanStack.setItemMeta(cleanStack.getItemMeta());
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Pages vs. blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1", "Page 2");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 2", "Page 1");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Pages switched"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1", "Page 2");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Pages short"
                 }
             ),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setAuthor("AnAuthor");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Author vs. Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setAuthor("AnAuthor");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             cleanStack.setItemMeta(cleanStack.getItemMeta());
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Author vs. blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setAuthor("AnAuthor");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setAuthor("AnotherAuthor");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Authors"
                 }
             ),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setTitle("Some title");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Title vs. Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setTitle("Some title");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             cleanStack.setItemMeta(cleanStack.getItemMeta());
                             return cleanStack;
-                        }
-                    },
+                        },
                     "title vs. blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setTitle("Some title");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setTitle("Different title");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Titles"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
index a0499b8ad..8598eedaa 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
@@ -30,76 +30,58 @@ public class ItemStackEnchantStorageTest extends ItemStackTest {
             ItemStackLoreEnchantmentTest.operators(),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.DURABILITY, 1, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Enchantable vs Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.KNOCKBACK, 1, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Enchantable vs Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.DAMAGE_UNDEAD, 1, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.DAMAGE_UNDEAD, 1, true);
                             meta.addStoredEnchant(Enchantment.FIRE_ASPECT, 1, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Enchantable vs More"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.PROTECTION_FIRE, 1, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.PROTECTION_FIRE, 2, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Enchantable vs Other"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
index cb38cd274..175f0a90c 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
@@ -32,94 +32,72 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
             ItemStackLoreEnchantmentTest.operators(),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.BLACK).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Effect Color 1 vs. Effect Color 2"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.CREEPER).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.BURST).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Effect type 1 vs. Effect type 2"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.BLUE).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.RED).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Effect fade 1 vs. Effect fade 2"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFlicker().build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Effect vs. Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withTrail().build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Effect vs. None"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
index 40b1d19da..2e65529aa 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
@@ -32,150 +32,114 @@ public class ItemStackFireworkTest extends ItemStackTest {
             ItemStackLoreEnchantmentTest.operators(),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.BLACK).build());
                             meta.addEffect(FireworkEffect.builder().withColor(Color.GREEN).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Effect Color 1 vs. Effect Color 2"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.CREEPER).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.BURST).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Effect type 1 vs. Effect type 2"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.BLUE).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.RED).build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Effect fade 1 vs. Effect fade 2"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFlicker().build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Effect vs. Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withTrail().build());
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Effect vs. None"
                 }
             ),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.setPower(127);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.setPower(100);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Height vs. Other"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.setPower(42);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Height vs. Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.setPower(10);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Height vs. None"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
index 6d68e1f46..a69f2d3d0 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
@@ -31,56 +31,42 @@ public class ItemStackLeatherTest extends ItemStackTest {
             ItemStackLoreEnchantmentTest.operators(),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             meta.setColor(Color.FUCHSIA);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Color vs Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             meta.setColor(Color.GRAY);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Color vs Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             meta.setColor(Color.MAROON);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             meta.setColor(Color.ORANGE);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Color vs Other"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
index 32a9184fd..c1ed1d4fe 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
@@ -29,266 +29,196 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
             ~0l,
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setLore(Arrays.asList("First Lore", "Second Lore"));
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Lore vs Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setLore(Arrays.asList("Some lore"));
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Lore vs Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setLore(Arrays.asList("Some more lore", "Another lore"));
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setLore(Arrays.asList("Some more lore"));
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Lore vs Other"
                 }
             ),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setDisplayName("TestItemName");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Name vs Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setDisplayName("AnotherItemName");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Name vs Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setDisplayName("The original ItemName");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setDisplayName("The other name");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Name vs Other"
                 }
             ),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             cleanStack.addUnsafeEnchantment(Enchantment.DIG_SPEED, 2);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "EnchantStack vs Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             cleanStack.addUnsafeEnchantment(Enchantment.OXYGEN, 1);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "EnchantStack vs Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             cleanStack.addUnsafeEnchantment(Enchantment.ARROW_DAMAGE, 1);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             cleanStack.addUnsafeEnchantment(Enchantment.ARROW_FIRE, 1);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "EnchantStack vs OtherEnchantStack"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.DURABILITY, 1, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Enchant vs Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.KNOCKBACK, 1, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Enchant vs Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.PROTECTION_FIRE, 1, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.PROTECTION_FIRE, 2, true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Enchant vs Other"
                 }
             ),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             ((Repairable) meta).setRepairCost(42);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Repair vs Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             ((Repairable) meta).setRepairCost(36);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Repair vs Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             ((Repairable) meta).setRepairCost(89);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             ItemMeta meta = cleanStack.getItemMeta();
                             ((Repairable) meta).setRepairCost(88);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Repair vs Other"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
index 9c4998584..6b5c7e280 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
@@ -29,90 +29,66 @@ public class ItemStackMapTest extends ItemStackTest {
             ItemStackLoreEnchantmentTest.operators(),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Scale vs. Unscale"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Scale vs. Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Unscale vs. Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(true);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Scale vs. None"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Unscale vs. None"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
index c1f9fb745..c7c59e279 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
@@ -30,114 +30,88 @@ public class ItemStackPotionsTest extends ItemStackTest {
             ItemStackLoreEnchantmentTest.operators(),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.CONFUSION.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Potion vs Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.HARM.createEffect(2, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Potion vs Blank"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.SLOW_DIGGING.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.FAST_DIGGING.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Potion vs Harder"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.JUMP.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.JUMP.createEffect(1, 1), false);
                             meta.addCustomEffect(PotionEffectType.REGENERATION.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Potion vs Better"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.SPEED.createEffect(10, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.SPEED.createEffect(5, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Potion vs Faster"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.INCREASE_DAMAGE.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.INCREASE_DAMAGE.createEffect(1, 2), false);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Potion vs Stronger"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
index a79d443e7..93c249491 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
@@ -29,57 +29,43 @@ public class ItemStackSkullTest extends ItemStackTest {
             ItemStackLoreEnchantmentTest.operators(),
             Arrays.asList(
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner("Notch");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner("Dinnerbone");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Name 1 vs. Name 2"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner("Notch");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        },
+                        (Operator) cleanStack -> {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner(null);
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
+                        },
                     "Name vs. Null"
                 },
                 new Object[] {
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
+                        (Operator) cleanStack -> {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner("Notch");
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
-                        }
-                    },
-                    new Operator() {
-                        public ItemStack operate(ItemStack cleanStack) {
-                            return cleanStack;
-                        }
-                    },
+                        },
+                        (Operator) cleanStack -> cleanStack,
                     "Name vs. None"
                 }
             )
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
index 6140edeec..f1f325d28 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
@@ -74,7 +74,7 @@ public class ItemStackTest extends AbstractTestingBase {
          * @return
          */
         static List<Object[]> compound(final List<Object[]> parameterList, final String nameFormat, final int nameIndex, final Material...materials) {
-            final List<Object[]> out = new ArrayList<Object[]>();
+            final List<Object[]> out = new ArrayList<>();
             for (Object[] params : parameterList) {
                 final int len = params.length;
                 for (final Material material : materials) {
@@ -153,9 +153,9 @@ public class ItemStackTest extends AbstractTestingBase {
          */
         static List<Object[]> compound(final Joiner joiner, final int nameParameter, final long singletonBitmask, final List<Object[]>...originalLists) {
 
-            final List<Object[]> out = new ArrayList<Object[]>();
-            final List<List<Object[]>> singletons = new ArrayList<List<Object[]>>();
-            final List<List<Object[]>> notSingletons = new ArrayList<List<Object[]>>();
+            final List<Object[]> out = new ArrayList<>();
+            final List<List<Object[]>> singletons = new ArrayList<>();
+            final List<List<Object[]>> notSingletons = new ArrayList<>();
 
             { // Separate and prime the 'singletons'
                 int i = 0;
@@ -179,11 +179,7 @@ public class ItemStackTest extends AbstractTestingBase {
                             } else if (toOut[i] instanceof Operator) {
                                 final Operator op1 = (Operator) toOut[i];
                                 final Operator op2 = (Operator) singleton[i];
-                                toOut[i] = new Operator() {
-                                    public ItemStack operate(final ItemStack cleanStack) {
-                                        return op2.operate(op1.operate(cleanStack));
-                                    }
-                                };
+                                toOut[i] = (Operator) cleanStack -> op2.operate(op1.operate(cleanStack));
                             }
                         }
                         out.add(toOut);
@@ -197,7 +193,7 @@ public class ItemStackTest extends AbstractTestingBase {
             notSingletons.toArray(lists);
             lists[lists.length - 1] = out;
 
-            final RecursiveContainer methodParams = new RecursiveContainer(joiner, new Object[lists.length], nameParameter, new ArrayList<Object[]>(lists.length), new ArrayList<Object[]>(), lists);
+            final RecursiveContainer methodParams = new RecursiveContainer(joiner, new Object[lists.length], nameParameter, new ArrayList<>(lists.length), new ArrayList<>(), lists);
 
             recursivelyCompound(methodParams, 0);
             methodParams.out.addAll(out);
@@ -317,7 +313,7 @@ public class ItemStackTest extends AbstractTestingBase {
     static final int NAME_PARAMETER = 2;
     static {
         final ItemFactory factory = CraftItemFactory.instance();
-        final Map<Class<? extends ItemMeta>, Material> possibleMaterials = new HashMap<Class<? extends ItemMeta>, Material>();
+        final Map<Class<? extends ItemMeta>, Material> possibleMaterials = new HashMap<>();
         ItemMeta meta;
         for (final Material material : Material.values()) {
             meta = factory.getItemMeta(material);
@@ -326,7 +322,7 @@ public class ItemStackTest extends AbstractTestingBase {
             possibleMaterials.put(meta.getClass(), material);
 
         }
-        COMPOUND_MATERIALS = possibleMaterials.values().toArray(new Material[possibleMaterials.size()]);
+        COMPOUND_MATERIALS = possibleMaterials.values().toArray(new Material[0]);
     }
 
     @Parameter(0) public StackProvider provider;
@@ -400,12 +396,12 @@ public class ItemStackTest extends AbstractTestingBase {
     }
 
     @Test
-    public void testBukkitYamlDeserialize() throws Throwable {
+    public void testBukkitYamlDeserialize() {
         testYamlDeserialize(new BukkitWrapper(provider), new BukkitWrapper(unequalProvider));
     }
 
     @Test
-    public void testCraftYamlDeserialize() throws Throwable {
+    public void testCraftYamlDeserialize() {
         testYamlDeserialize(new CraftWrapper(provider), new CraftWrapper(unequalProvider));
     }
 
@@ -424,19 +420,10 @@ public class ItemStackTest extends AbstractTestingBase {
         final ItemStack unequalStack = unequalProvider.stack();
 
         ByteArrayOutputStream out = new ByteArrayOutputStream();
-        ObjectOutputStream oos = null;
-        try {
-            oos = new BukkitObjectOutputStream(out);
+        try (ObjectOutputStream oos = new BukkitObjectOutputStream(out)) {
 
             oos.writeObject(stack);
             oos.writeObject(unequalStack);
-        } finally {
-            if (oos != null) {
-                try {
-                    oos.close();
-                } catch (IOException ex) {
-                }
-            }
         }
 
         final String data = new String(Base64Coder.encode(out.toByteArray()));
@@ -456,7 +443,7 @@ public class ItemStackTest extends AbstractTestingBase {
             if (ois != null) {
                 try {
                     ois.close();
-                } catch (IOException ex) {
+                } catch (IOException ignored) {
                 }
             }
         }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java
index a18384377..e51237278 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java
@@ -12,7 +12,7 @@ import org.junit.Test;
 public class NMSCraftItemStackTest extends AbstractTestingBase {
 
     @Test
-    public void testCloneEnchantedItem() throws Exception {
+    public void testCloneEnchantedItem() {
         net.minecraft.server.ItemStack nmsItemStack = new net.minecraft.server.ItemStack(net.minecraft.server.Items.POTION);
         nmsItemStack.addEnchantment(Enchantment.DAMAGE_ALL, 1);
         ItemStack itemStack = CraftItemStack.asCraftMirror(nmsItemStack);
@@ -27,7 +27,7 @@ public class NMSCraftItemStackTest extends AbstractTestingBase {
     }
 
     @Test
-    public void testCloneNullItem() throws Exception {
+    public void testCloneNullItem() {
         net.minecraft.server.ItemStack nmsItemStack = null;
         ItemStack itemStack = CraftItemStack.asCraftMirror(nmsItemStack);
         ItemStack clone = itemStack.clone();
diff --git a/src/test/java/org/bukkit/potion/PotionTest.java b/src/test/java/org/bukkit/potion/PotionTest.java
index a9df7d199..c44e15bbb 100644
--- a/src/test/java/org/bukkit/potion/PotionTest.java
+++ b/src/test/java/org/bukkit/potion/PotionTest.java
@@ -25,7 +25,7 @@ public class PotionTest extends AbstractTestingBase {
     }
 
     @Test
-    public void testEffectCompleteness() throws Throwable {
+    public void testEffectCompleteness() {
         Map<Integer, ?> effectDurations = Util.getInternalState(net.minecraft.server.PotionBrewer.class, null, "effectDurations");
 
         Map<PotionType, String> effects = new EnumMap(PotionType.class);
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
index e5215bb4e..488cc3440 100644
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -15,41 +15,25 @@ public class DummyServer implements InvocationHandler {
     private static interface MethodHandler {
         Object handle(DummyServer server, Object[] args);
     }
-    private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
+    private static final HashMap<Method, MethodHandler> methods = new HashMap<>();
     static {
         try {
             methods.put(
                     Server.class.getMethod("getItemFactory"),
-                    new MethodHandler() {
-                        public Object handle(DummyServer server, Object[] args) {
-                            return CraftItemFactory.instance();
-                        }
-                    }
-                );
+                    (server, args) -> CraftItemFactory.instance()
+            );
             methods.put(
                     Server.class.getMethod("getName"),
-                    new MethodHandler() {
-                        public Object handle(DummyServer server, Object[] args) {
-                            return DummyServer.class.getName();
-                        }
-                    }
-                );
+                    (server, args) -> DummyServer.class.getName()
+            );
             methods.put(
                     Server.class.getMethod("getVersion"),
-                    new MethodHandler() {
-                        public Object handle(DummyServer server, Object[] args) {
-                            return DummyServer.class.getPackage().getImplementationVersion();
-                        }
-                    }
-                );
+                    (server, args) -> DummyServer.class.getPackage().getImplementationVersion()
+            );
             methods.put(
                     Server.class.getMethod("getBukkitVersion"),
-                    new MethodHandler() {
-                        public Object handle(DummyServer server, Object[] args) {
-                            return Versioning.getBukkitVersion();
-                        }
-                    }
-                );
+                    (server, args) -> Versioning.getBukkitVersion()
+            );
             methods.put(
                     Server.class.getMethod("getLogger"),
                     new MethodHandler() {
@@ -67,7 +51,7 @@ public class DummyServer implements InvocationHandler {
 
     public static void setup() {}
 
-    private DummyServer() {};
+    private DummyServer() {}
 
     public Object invoke(Object proxy, Method method, Object[] args) {
         MethodHandler handler = methods.get(method);
diff --git a/src/test/java/org/bukkit/support/Matchers.java b/src/test/java/org/bukkit/support/Matchers.java
index b190c6736..6602029b8 100644
--- a/src/test/java/org/bukkit/support/Matchers.java
+++ b/src/test/java/org/bukkit/support/Matchers.java
@@ -9,7 +9,7 @@ public final class Matchers {
     private Matchers() {}
 
     public static <T> Matcher<T> sameHash(T value) {
-        return new SameHash<T>(value);
+        return new SameHash<>(value);
     }
 
     static class SameHash<T> extends BaseMatcher<T> {
diff --git a/src/test/java/org/bukkit/support/Util.java b/src/test/java/org/bukkit/support/Util.java
index 2f24d9a40..8afc4e58e 100644
--- a/src/test/java/org/bukkit/support/Util.java
+++ b/src/test/java/org/bukkit/support/Util.java
@@ -23,8 +23,7 @@ public class Util {
         field.setAccessible(true);
         try {
             return (T) field.get(object);
-        } catch (IllegalArgumentException e) {
-        } catch (IllegalAccessException e) {
+        } catch (IllegalArgumentException | IllegalAccessException ignored) {
         }
         throw new RuntimeException("Unable to get internal value");
     }
-- 
2.21.0.windows.1

