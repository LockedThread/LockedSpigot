From bdcd1428614bafa631cf5790cab9488793070e10 Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Sun, 5 May 2019 21:10:19 -0400
Subject: [PATCH] Added serverChatDisconnectSpam,
 serverPacketDeserializerLimit, and implemented /fps features


diff --git a/src/main/java/dev/lockedthread/LockedSpigotConfig.java b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
index c15828740..ca08d4398 100644
--- a/src/main/java/dev/lockedthread/LockedSpigotConfig.java
+++ b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
@@ -76,6 +76,9 @@ public class LockedSpigotConfig {
 
     private static boolean hopperEfficientSearch;
 
+    private static int serverPacketDeserializerLimit;
+    private static boolean serverChatDisconnectSpam;
+
     private static void load() {
         ironGolemCancelFallDamage = getBoolean("irongolem.cancel-falldamage", true);
         ironGolemDropPoppies = getBoolean("irongolem.drop-poppies", false);
@@ -128,6 +131,9 @@ public class LockedSpigotConfig {
 
         hopperEfficientSearch = getBoolean("hopper.efficient-search", true);
 
+        serverPacketDeserializerLimit = getInt("server.packet-deserializer-limit", Integer.MAX_VALUE);
+        serverChatDisconnectSpam = getBoolean("server.chat-disconnect-spam", false);
+
         try {
             config.save(CONFIG_FILE);
         } catch (IOException e) {
@@ -370,4 +376,12 @@ public class LockedSpigotConfig {
     public static boolean isLiquidsCreateStone() {
         return liquidsCreateStone;
     }
+
+    public static int getServerPacketDeserializerLimit() {
+        return serverPacketDeserializerLimit;
+    }
+
+    public static boolean isServerChatDisconnectSpam() {
+        return serverChatDisconnectSpam;
+    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index 8a0568933..8db9c491e 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -8,7 +8,6 @@ import org.apache.logging.log4j.Logger;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Set;
-import java.util.concurrent.Callable;
 
 public class EntityTracker {
 
@@ -27,11 +26,8 @@ public class EntityTracker {
         if (entity instanceof EntityPlayer) {
             this.addEntity(entity, 512, 2);
             EntityPlayer entityplayer = (EntityPlayer) entity;
-            Iterator iterator = this.c.iterator();
-
-            while (iterator.hasNext()) {
-                EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+            for (EntityTrackerEntry entitytrackerentry : this.c) {
                 if (entitytrackerentry.tracker != entityplayer) {
                     entitytrackerentry.updatePlayer(entityplayer);
                 }
@@ -115,27 +111,21 @@ public class EntityTracker {
             CrashReport crashreport = CrashReport.a(throwable, "Adding entity to track");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity To Track");
 
-            crashreportsystemdetails.a("Tracking range", (Object) (i + " blocks"));
+            crashreportsystemdetails.a("Tracking range", i + " blocks");
             final int finalI = i; // CraftBukkit - fix decompile error
-            crashreportsystemdetails.a("Update interval", new Callable() {
-                public String a() throws Exception {
-                    String s = "Once per " + finalI + " ticks"; // CraftBukkit
-
-                    if (finalI == Integer.MAX_VALUE) { // CraftBukkit
-                        s = "Maximum (" + s + ")";
-                    }
+            crashreportsystemdetails.a("Update interval", () -> {
+                String s = "Once per " + finalI + " ticks"; // CraftBukkit
 
-                    return s;
+                if (finalI == Integer.MAX_VALUE) { // CraftBukkit
+                    s = "Maximum (" + s + ")";
                 }
 
-                public Object call() throws Exception {
-                    return this.a();
-                }
+                return s;
             });
             entity.appendEntityCrashDetails(crashreportsystemdetails);
             CrashReportSystemDetails crashreportsystemdetails1 = crashreport.a("Entity That Is Already Tracked");
 
-            ((EntityTrackerEntry) this.trackedEntities.get(entity.getId())).tracker.appendEntityCrashDetails(crashreportsystemdetails1);
+            this.trackedEntities.get(entity.getId()).tracker.appendEntityCrashDetails(crashreportsystemdetails1);
 
             try {
                 throw new ReportedException(crashreport);
@@ -150,16 +140,13 @@ public class EntityTracker {
         org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
         if (entity instanceof EntityPlayer) {
             EntityPlayer entityplayer = (EntityPlayer) entity;
-            Iterator iterator = this.c.iterator();
-
-            while (iterator.hasNext()) {
-                EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+            for (EntityTrackerEntry entitytrackerentry : this.c) {
                 entitytrackerentry.a(entityplayer);
             }
         }
 
-        EntityTrackerEntry entitytrackerentry1 = (EntityTrackerEntry) this.trackedEntities.d(entity.getId());
+        EntityTrackerEntry entitytrackerentry1 = this.trackedEntities.d(entity.getId());
 
         if (entitytrackerentry1 != null) {
             this.c.remove(entitytrackerentry1);
@@ -170,24 +157,18 @@ public class EntityTracker {
 
     public void updatePlayers() {
         ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.c.iterator();
-
-        while (iterator.hasNext()) {
-            EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+        for (EntityTrackerEntry entitytrackerentry : this.c) {
             entitytrackerentry.track(this.world.players);
             if (entitytrackerentry.n && entitytrackerentry.tracker instanceof EntityPlayer) {
-                arraylist.add((EntityPlayer) entitytrackerentry.tracker);
+                arraylist.add(entitytrackerentry.tracker);
             }
         }
 
-        for (int i = 0; i < arraylist.size(); ++i) {
-            EntityPlayer entityplayer = (EntityPlayer) arraylist.get(i);
-            Iterator iterator1 = this.c.iterator();
-
-            while (iterator1.hasNext()) {
-                EntityTrackerEntry entitytrackerentry1 = (EntityTrackerEntry) iterator1.next();
+        for (Object o : arraylist) {
+            EntityPlayer entityplayer = (EntityPlayer) o;
 
+            for (EntityTrackerEntry entitytrackerentry1 : this.c) {
                 if (entitytrackerentry1.tracker != entityplayer) {
                     entitytrackerentry1.updatePlayer(entityplayer);
                 }
@@ -197,11 +178,8 @@ public class EntityTracker {
     }
 
     public void a(EntityPlayer entityplayer) {
-        Iterator iterator = this.c.iterator();
-
-        while (iterator.hasNext()) {
-            EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+        for (EntityTrackerEntry entitytrackerentry : this.c) {
             if (entitytrackerentry.tracker == entityplayer) {
                 entitytrackerentry.scanPlayers(this.world.players);
             } else {
@@ -212,7 +190,7 @@ public class EntityTracker {
     }
 
     public void a(Entity entity, Packet packet) {
-        EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) this.trackedEntities.get(entity.getId());
+        EntityTrackerEntry entitytrackerentry = this.trackedEntities.get(entity.getId());
 
         if (entitytrackerentry != null) {
             entitytrackerentry.broadcast(packet);
@@ -221,7 +199,7 @@ public class EntityTracker {
     }
 
     public void sendPacketToEntity(Entity entity, Packet packet) {
-        EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) this.trackedEntities.get(entity.getId());
+        EntityTrackerEntry entitytrackerentry = this.trackedEntities.get(entity.getId());
 
         if (entitytrackerentry != null) {
             entitytrackerentry.broadcastIncludingSelf(packet);
@@ -230,11 +208,8 @@ public class EntityTracker {
     }
 
     public void untrackPlayer(EntityPlayer entityplayer) {
-        Iterator iterator = this.c.iterator();
-
-        while (iterator.hasNext()) {
-            EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) iterator.next();
 
+        for (EntityTrackerEntry entitytrackerentry : this.c) {
             entitytrackerentry.clear(entityplayer);
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 3d3fc3df5..06a0623f6 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -1,15 +1,15 @@
 package net.minecraft.server;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerVelocityEvent;
+
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
-import org.bukkit.entity.Player;
-import org.bukkit.event.player.PlayerVelocityEvent;
 // CraftBukkit end
 
 public class EntityTrackerEntry {
@@ -60,7 +60,7 @@ public class EntityTrackerEntry {
     }
 
     public boolean equals(Object object) {
-        return object instanceof EntityTrackerEntry ? ((EntityTrackerEntry) object).tracker.getId() == this.tracker.getId() : false;
+        return object instanceof EntityTrackerEntry && ((EntityTrackerEntry) object).tracker.getId() == this.tracker.getId();
     }
 
     public int hashCode() {
@@ -91,14 +91,12 @@ public class EntityTrackerEntry {
                 WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, this.tracker.world);
 
                 for (EntityPlayer trackedPlayer : this.trackedPlayers) {
-                    EntityHuman entityhuman = (EntityHuman) trackedPlayer;
-                    EntityPlayer entityplayer = (EntityPlayer) entityhuman;
 
-                    worldmap.a(entityplayer, itemstack);
-                    Packet packet = Items.FILLED_MAP.c(itemstack, this.tracker.world, entityplayer);
+                    worldmap.a(trackedPlayer, itemstack);
+                    Packet packet = Items.FILLED_MAP.c(itemstack, this.tracker.world, trackedPlayer);
 
                     if (packet != null) {
-                        entityplayer.playerConnection.sendPacket(packet);
+                        trackedPlayer.playerConnection.sendPacket(packet);
                     }
                 }
             }
@@ -326,7 +324,7 @@ public class EntityTrackerEntry {
     }
 
     public void updatePlayer(EntityPlayer entityplayer) {
-        org.spigotmc.AsyncCatcher.catchOp( "player tracker update"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
         if (entityplayer != this.tracker) {
             if (this.c(entityplayer)) {
                 if (!this.trackedPlayers.contains(entityplayer) && (this.e(entityplayer) || this.tracker.attachedToPlayer)) {
@@ -343,7 +341,15 @@ public class EntityTrackerEntry {
                     this.trackedPlayerMap.put(entityplayer, true); // PaperBukkit
                     Packet packet = this.c();
 
-                    entityplayer.playerConnection.sendPacket(packet);
+                    if (entityplayer.getBukkitEntity().canSeeFallingBlocks() || !(this.tracker instanceof EntityFallingBlock)) {
+                        entityplayer.playerConnection.sendPacket(packet);
+                    }
+
+                    if (entityplayer.getBukkitEntity().canSeeTNT() || !(this.tracker instanceof EntityTNTPrimed)) {
+                        entityplayer.playerConnection.sendPacket(packet);
+                    }
+
+                    //entityplayer.playerConnection.sendPacket(packet);
                     if (!this.tracker.getDataWatcher().d()) {
                         entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityMetadata(this.tracker.getId(), this.tracker.getDataWatcher(), true));
                     }
@@ -512,6 +518,7 @@ public class EntityTrackerEntry {
             } else if (this.tracker instanceof EntityEgg) {
                 return new PacketPlayOutSpawnEntity(this.tracker, 62);
             } else if (this.tracker instanceof EntityTNTPrimed) {
+
                 return new PacketPlayOutSpawnEntity(this.tracker, 50);
             } else if (this.tracker instanceof EntityEnderCrystal) {
                 return new PacketPlayOutSpawnEntity(this.tracker, 51);
@@ -554,7 +561,7 @@ public class EntityTrackerEntry {
     }
 
     public void clear(EntityPlayer entityplayer) {
-        org.spigotmc.AsyncCatcher.catchOp( "player tracker clear"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp("player tracker clear"); // Spigot
         if (this.trackedPlayers.contains(entityplayer)) {
             this.trackedPlayers.remove(entityplayer);
             entityplayer.d(this.tracker);
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index d679a738f..ac4d1f296 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -1,15 +1,12 @@
 package net.minecraft.server;
 
 import com.google.common.base.Charsets;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.ByteBufAllocator;
-import io.netty.buffer.ByteBufInputStream;
-import io.netty.buffer.ByteBufOutputStream;
-import io.netty.buffer.ByteBufProcessor;
+import dev.lockedthread.LockedSpigotConfig;
+import io.netty.buffer.*;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 
-import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
 import java.io.InputStream;
@@ -20,10 +17,8 @@ import java.nio.channels.GatheringByteChannel;
 import java.nio.channels.ScatteringByteChannel;
 import java.nio.charset.Charset;
 import java.util.UUID;
-
-import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
 // TacoSpigot start
-import net.techcable.tacospigot.CompatHacks;
+
 // TacoSpigot end
 
 public class PacketDataSerializer extends ByteBuf {
@@ -31,7 +26,6 @@ public class PacketDataSerializer extends ByteBuf {
     private final ByteBuf a;
 
     // TacoSpigot start
-    private final boolean allowLargePackets;
     public PacketDataSerializer(ByteBuf bytebuf) {
         /*
          * By default, we limit the size of the received byte array to Short.MAX_VALUE, which is 31 KB.
@@ -41,7 +35,6 @@ public class PacketDataSerializer extends ByteBuf {
          * it's still much better than the old system of having no limit,
          * which would leave the server vulnerable to packets up to 2 GIGABYTES in size.
          */
-        this.allowLargePackets = CompatHacks.hasProtocolSupport();
         // TacoSpigot end
         this.a = bytebuf;
     }
@@ -62,11 +55,9 @@ public class PacketDataSerializer extends ByteBuf {
     }
 
     // TacoSpigot start
-    private static final int DEFAULT_LIMIT = Short.MAX_VALUE;
-    private static final int LARGE_PACKET_LIMIT = Short.MAX_VALUE * 1024;
     public byte[] a() {
         // TacoSpigot start
-        int limit = allowLargePackets ? LARGE_PACKET_LIMIT : DEFAULT_LIMIT;
+        int limit = LockedSpigotConfig.getServerPacketDeserializerLimit();
         return readByteArray(limit);
     }
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 5e1e67496..db4c75687 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1,28 +1,16 @@
 package net.minecraft.server;
 
+import co.aikar.timings.SpigotTimings;
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
+import dev.lockedthread.LockedSpigotConfig;
 import io.netty.buffer.Unpooled;
-import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.Callable;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
-// CraftBukkit start
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
-import java.util.HashSet;
-
+import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
@@ -30,39 +18,32 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.LazyPlayerSet;
 import org.bukkit.craftbukkit.util.Waitable;
-
-import org.bukkit.Location;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
 import org.bukkit.event.block.SignChangeEvent;
-import org.bukkit.event.inventory.ClickType;
-import org.bukkit.event.inventory.CraftItemEvent;
-import org.bukkit.event.inventory.InventoryAction;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.event.inventory.InventoryCreativeEvent;
+import org.bukkit.event.inventory.*;
 import org.bukkit.event.inventory.InventoryType.SlotType;
-import org.bukkit.event.player.AsyncPlayerChatEvent;
-import org.bukkit.event.player.PlayerAnimationEvent;
-import org.bukkit.event.player.PlayerChatEvent;
-import org.bukkit.event.player.PlayerCommandPreprocessEvent;
-import org.bukkit.event.player.PlayerInteractEntityEvent;
-import org.bukkit.event.player.PlayerInteractAtEntityEvent;
-import org.bukkit.event.player.PlayerItemHeldEvent;
-import org.bukkit.event.player.PlayerKickEvent;
-import org.bukkit.event.player.PlayerMoveEvent;
-import org.bukkit.event.player.PlayerResourcePackStatusEvent;
-import org.bukkit.event.player.PlayerTeleportEvent;
-import org.bukkit.event.player.PlayerToggleFlightEvent;
-import org.bukkit.event.player.PlayerToggleSneakEvent;
-import org.bukkit.event.player.PlayerToggleSprintEvent;
+import org.bukkit.event.player.*;
 import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.util.NumberConversions;
-import co.aikar.timings.SpigotTimings; // Spigot
+import org.github.paperspigot.PaperSpigotConfig;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+
+// CraftBukkit start
 // CraftBukkit end
 
-import org.github.paperspigot.PaperSpigotConfig; // PaperSpigot
+// CraftBukkit start
+// CraftBukkit end
 
 public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerListBox {
 
@@ -82,7 +63,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle");
     // CraftBukkit end
     private int m;
-    private IntHashMap<Short> n = new IntHashMap();
+    private IntHashMap<Short> n = new IntHashMap<>();
     private double o;
     private double p;
     private double q;
@@ -119,6 +100,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public CraftPlayer getPlayer() {
         return (this.player == null) ? null : this.player.getBukkitEntity();
     }
+
     private final static HashSet<Integer> invalidItems = new HashSet<>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
     // CraftBukkit end
 
@@ -221,8 +203,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 // CraftBukkit start - fire PlayerMoveEvent
                 Player player = this.getPlayer();
                 // Spigot Start
-                if ( !hasMoved )
-                {
+                if (!hasMoved) {
                     Location curPos = player.getLocation();
                     lastPosX = curPos.getX();
                     lastPosY = curPos.getY();
@@ -568,83 +549,83 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         this.player.resetIdleTimer();
         // CraftBukkit start
         switch (PlayerConnection.SyntheticClass_1.a[packetplayinblockdig.c().ordinal()]) {
-        case 1: // DROP_ITEM
-            if (!this.player.isSpectator()) {
-                // limit how quickly items can be dropped
-                // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
-                if (this.lastDropTick != MinecraftServer.currentTick) {
-                    this.dropCount = 0;
-                    this.lastDropTick = MinecraftServer.currentTick;
-                } else {
-                    // Else we increment the drop count and check the amount.
-                    this.dropCount++;
-                    if (this.dropCount >= 20) {
-                        c.warn(this.player.getName() + " dropped their items too quickly!");
-                        this.disconnect("You dropped your items too quickly (Hacking?)");
-                        return;
+            case 1: // DROP_ITEM
+                if (!this.player.isSpectator()) {
+                    // limit how quickly items can be dropped
+                    // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
+                    if (this.lastDropTick != MinecraftServer.currentTick) {
+                        this.dropCount = 0;
+                        this.lastDropTick = MinecraftServer.currentTick;
+                    } else {
+                        // Else we increment the drop count and check the amount.
+                        this.dropCount++;
+                        if (this.dropCount >= 20) {
+                            c.warn(this.player.getName() + " dropped their items too quickly!");
+                            this.disconnect("You dropped your items too quickly (Hacking?)");
+                            return;
+                        }
                     }
+                    // CraftBukkit end
+                    this.player.a(false);
                 }
-                // CraftBukkit end
-                this.player.a(false);
-            }
 
-            return;
+                return;
 
-        case 2: // DROP_ALL_ITEMS
-            if (!this.player.isSpectator()) {
-                this.player.a(true);
-            }
+            case 2: // DROP_ALL_ITEMS
+                if (!this.player.isSpectator()) {
+                    this.player.a(true);
+                }
 
-            return;
+                return;
 
-        case 3: // RELEASE_USE_ITEM
-            this.player.bU();
-            return;
+            case 3: // RELEASE_USE_ITEM
+                this.player.bU();
+                return;
 
-        case 4: // START_DESTROY_BLOCK
-        case 5: // ABORT_DESTROY_BLOCK
-        case 6: // STOP_DESTROY_BLOCK
-            double d0 = this.player.locX - ((double) blockposition.getX() + 0.5D);
-            double d1 = this.player.locY - ((double) blockposition.getY() + 0.5D) + 1.5D;
-            double d2 = this.player.locZ - ((double) blockposition.getZ() + 0.5D);
-            double d3 = d0 * d0 + d1 * d1 + d2 * d2;
+            case 4: // START_DESTROY_BLOCK
+            case 5: // ABORT_DESTROY_BLOCK
+            case 6: // STOP_DESTROY_BLOCK
+                double d0 = this.player.locX - ((double) blockposition.getX() + 0.5D);
+                double d1 = this.player.locY - ((double) blockposition.getY() + 0.5D) + 1.5D;
+                double d2 = this.player.locZ - ((double) blockposition.getZ() + 0.5D);
+                double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-            if (d3 > 36.0D) {
-                return;
-            } else if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight()) {
-                return;
-            } else {
-                if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK) {
-                    if (!this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
-                        this.player.playerInteractManager.a(blockposition, packetplayinblockdig.b());
+                if (d3 > 36.0D) {
+                    return;
+                } else if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight()) {
+                    return;
+                } else {
+                    if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK) {
+                        if (!this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
+                            this.player.playerInteractManager.a(blockposition, packetplayinblockdig.b());
+                        } else {
+                            // CraftBukkit start - fire PlayerInteractEvent
+                            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, packetplayinblockdig.b(), this.player.inventory.getItemInHand());
+                            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                            // Update any tile entity data for this block
+                            TileEntity tileentity = worldserver.getTileEntity(blockposition);
+                            if (tileentity != null) {
+                                this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                            }
+                            // CraftBukkit end
+                        }
                     } else {
-                        // CraftBukkit start - fire PlayerInteractEvent
-                        CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, packetplayinblockdig.b(), this.player.inventory.getItemInHand());
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
-                        // Update any tile entity data for this block
-                        TileEntity tileentity = worldserver.getTileEntity(blockposition);
-                        if (tileentity != null) {
-                            this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                        if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK) {
+                            this.player.playerInteractManager.a(blockposition);
+                        } else if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK) {
+                            this.player.playerInteractManager.e();
                         }
-                        // CraftBukkit end
-                    }
-                } else {
-                    if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK) {
-                        this.player.playerInteractManager.a(blockposition);
-                    } else if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK) {
-                        this.player.playerInteractManager.e();
-                    }
 
-                    if (worldserver.getType(blockposition).getBlock().getMaterial() != Material.AIR) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                        if (worldserver.getType(blockposition).getBlock().getMaterial() != Material.AIR) {
+                            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                        }
                     }
-                }
 
-                return;
-            }
+                    return;
+                }
 
-        default:
-            throw new IllegalArgumentException("Invalid player action");
+            default:
+                throw new IllegalArgumentException("Invalid player action");
         }
         // CraftBukkit end
     }
@@ -660,12 +641,11 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         // PaperSpigot - Allow disabling the player interaction limiter
         if (org.github.paperspigot.PaperSpigotConfig.interactLimitEnabled && lastPlace != -1 && packetplayinblockplace.timestamp - lastPlace < 30 && packets++ >= 4) {
             throttled = true;
-        } else if ( packetplayinblockplace.timestamp - lastPlace >= 30 || lastPlace == -1 )
-        {
+        } else if (packetplayinblockplace.timestamp - lastPlace >= 30 || lastPlace == -1) {
             lastPlace = packetplayinblockplace.timestamp;
             packets = 0;
         }
-    // Spigot end
+        // Spigot end
 
         // CraftBukkit start
         if (this.player.dead) return;
@@ -690,42 +670,42 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             // CraftBukkit start
             int itemstackAmount = itemstack.count;
             // Spigot start - skip the event if throttled
-            if (!throttled) {            
-            // Raytrace to look for 'rogue armswings'
-            float f1 = this.player.pitch;
-            float f2 = this.player.yaw;
-            double d0 = this.player.locX;
-            double d1 = this.player.locY + (double) this.player.getHeadHeight();
-            double d2 = this.player.locZ;
-            Vec3D vec3d = new Vec3D(d0, d1, d2);
-
-            float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
-            float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
-            float f5 = -MathHelper.cos(-f1 * 0.017453292F);
-            float f6 = MathHelper.sin(-f1 * 0.017453292F);
-            float f7 = f4 * f5;
-            float f8 = f3 * f5;
-            double d3 = player.playerInteractManager.getGameMode() == WorldSettings.EnumGamemode.CREATIVE ? 5.0D : 4.5D;
-            Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
-            MovingObjectPosition movingobjectposition = this.player.world.rayTrace(vec3d, vec3d1, false);
-
-            boolean cancelled = false;
-            if (movingobjectposition == null || movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack);
-                cancelled = event.useItemInHand() == Event.Result.DENY;
-            } else {
-                if (player.playerInteractManager.firedInteract) {
-                    player.playerInteractManager.firedInteract = false;
-                    cancelled = player.playerInteractManager.interactResult;
-                } else {
-                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, true);
+            if (!throttled) {
+                // Raytrace to look for 'rogue armswings'
+                float f1 = this.player.pitch;
+                float f2 = this.player.yaw;
+                double d0 = this.player.locX;
+                double d1 = this.player.locY + (double) this.player.getHeadHeight();
+                double d2 = this.player.locZ;
+                Vec3D vec3d = new Vec3D(d0, d1, d2);
+
+                float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+                float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+                float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+                float f6 = MathHelper.sin(-f1 * 0.017453292F);
+                float f7 = f4 * f5;
+                float f8 = f3 * f5;
+                double d3 = player.playerInteractManager.getGameMode() == WorldSettings.EnumGamemode.CREATIVE ? 5.0D : 4.5D;
+                Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+                MovingObjectPosition movingobjectposition = this.player.world.rayTrace(vec3d, vec3d1, false);
+
+                boolean cancelled = false;
+                if (movingobjectposition == null || movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
+                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack);
                     cancelled = event.useItemInHand() == Event.Result.DENY;
+                } else {
+                    if (player.playerInteractManager.firedInteract) {
+                        player.playerInteractManager.firedInteract = false;
+                        cancelled = player.playerInteractManager.interactResult;
+                    } else {
+                        org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, true);
+                        cancelled = event.useItemInHand() == Event.Result.DENY;
+                    }
                 }
-            }
 
-            if (!cancelled) {
-                this.player.playerInteractManager.useItem(this.player, this.player.world, itemstack);
-            }
+                if (!cancelled) {
+                    this.player.playerInteractManager.useItem(this.player, this.player.world, itemstack);
+                }
             }
             // Spigot end
 
@@ -1005,15 +985,13 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             } else if (getPlayer().isConversing()) {
                 // Spigot start
                 final String message = s;
-                this.minecraftServer.processQueue.add( new Waitable()
-                {
+                this.minecraftServer.processQueue.add(new Waitable() {
                     @Override
-                    protected Object evaluate()
-                    {
-                        getPlayer().acceptConversationInput( message );
+                    protected Object evaluate() {
+                        getPlayer().acceptConversationInput(message);
                         return null;
                     }
-                } );
+                });
                 // Spigot end
             } else if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
                 ChatMessage chatmessage = new ChatMessage("chat.cannotSend");
@@ -1031,10 +1009,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             // Spigot start - spam exclusions
             boolean counted = true;
-            for ( String exclude : org.spigotmc.SpigotConfig.spamExclusions )
-            {
-                if ( exclude != null && s.startsWith( exclude ) )
-                {
+            for (String exclude : org.spigotmc.SpigotConfig.spamExclusions) {
+                if (exclude != null && s.startsWith(exclude)) {
                     counted = false;
                     break;
                 }
@@ -1042,31 +1018,32 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             // Spigot end
             // CraftBukkit start - replaced with thread safe throttle
             // this.chatThrottle += 20;
-            if (counted && chatSpamField.addAndGet(this, 20) > 200 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) { // Spigot
-                if (!isSync) {
-                    Waitable waitable = new Waitable() {
-                        @Override
-                        protected Object evaluate() {
-                            PlayerConnection.this.disconnect("disconnect.spam");
-                            return null;
-                        }
-                    };
+            if (LockedSpigotConfig.isServerChatDisconnectSpam()) {
+                if (counted && chatSpamField.addAndGet(this, 20) > 200 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) { // Spigot
+                    if (!isSync) {
+                        Waitable waitable = new Waitable() {
+                            @Override
+                            protected Object evaluate() {
+                                PlayerConnection.this.disconnect("disconnect.spam");
+                                return null;
+                            }
+                        };
 
-                    this.minecraftServer.processQueue.add(waitable);
+                        this.minecraftServer.processQueue.add(waitable);
 
-                    try {
-                        waitable.get();
-                    } catch (InterruptedException e) {
-                        Thread.currentThread().interrupt();
-                    } catch (ExecutionException e) {
-                        throw new RuntimeException(e);
+                        try {
+                            waitable.get();
+                        } catch (InterruptedException e) {
+                            Thread.currentThread().interrupt();
+                        } catch (ExecutionException e) {
+                            throw new RuntimeException(e);
+                        }
+                    } else {
+                        this.disconnect("disconnect.spam");
                     }
-                } else {
-                    this.disconnect("disconnect.spam");
+                    // CraftBukkit end
                 }
-                // CraftBukkit end
             }
-
         }
     }
 
@@ -1133,7 +1110,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                             }
                         }
                         return null;
-                    }};
+                    }
+                };
                 if (async) {
                     minecraftServer.processQueue.add(waitable);
                 } else {
@@ -1167,11 +1145,11 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     }
     // CraftBukkit end
 
-   private void handleCommand(String s) {
+    private void handleCommand(String s) {
         SpigotTimings.playerCommandTimer.startTiming(); // Spigot
-       // CraftBukkit start - whole method
-        if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        c.info(this.player.getName() + " issued server command: " + s);
+        // CraftBukkit start - whole method
+        if (org.spigotmc.SpigotConfig.logCommands) // Spigot
+            c.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
 
@@ -1261,41 +1239,41 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         // CraftBukkit end
         this.player.resetIdleTimer();
         switch (PlayerConnection.SyntheticClass_1.b[packetplayinentityaction.b().ordinal()]) {
-        case 1:
-            this.player.setSneaking(true);
-            break;
-
-        case 2:
-            this.player.setSneaking(false);
-            break;
-
-        case 3:
-            this.player.setSprinting(true);
-            break;
-
-        case 4:
-            this.player.setSprinting(false);
-            break;
-
-        case 5:
-            this.player.a(false, true, true);
-            // this.checkMovement = false; // CraftBukkit - this is handled in teleport
-            break;
-
-        case 6:
-            if (this.player.vehicle instanceof EntityHorse) {
-                ((EntityHorse) this.player.vehicle).v(packetplayinentityaction.c());
-            }
-            break;
+            case 1:
+                this.player.setSneaking(true);
+                break;
 
-        case 7:
-            if (this.player.vehicle instanceof EntityHorse) {
-                ((EntityHorse) this.player.vehicle).g(this.player);
-            }
-            break;
+            case 2:
+                this.player.setSneaking(false);
+                break;
+
+            case 3:
+                this.player.setSprinting(true);
+                break;
+
+            case 4:
+                this.player.setSprinting(false);
+                break;
+
+            case 5:
+                this.player.a(false, true, true);
+                // this.checkMovement = false; // CraftBukkit - this is handled in teleport
+                break;
+
+            case 6:
+                if (this.player.vehicle instanceof EntityHorse) {
+                    ((EntityHorse) this.player.vehicle).v(packetplayinentityaction.c());
+                }
+                break;
+
+            case 7:
+                if (this.player.vehicle instanceof EntityHorse) {
+                    ((EntityHorse) this.player.vehicle).g(this.player);
+                }
+                break;
 
-        default:
-            throw new IllegalArgumentException("Invalid client command!");
+            default:
+                throw new IllegalArgumentException("Invalid client command!");
         }
 
     }
@@ -1306,9 +1284,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         Entity entity = packetplayinuseentity.a(worldserver);
         // Spigot Start
-        if ( entity == player && !player.isSpectator() )
-        {
-            disconnect( "Cannot interact with self!" );
+        if (entity == player && !player.isSpectator()) {
+            disconnect("Cannot interact with self!");
             return;
         }
         // Spigot End
@@ -1396,35 +1373,35 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         PacketPlayInClientCommand.EnumClientCommand packetplayinclientcommand_enumclientcommand = packetplayinclientcommand.a();
 
         switch (PlayerConnection.SyntheticClass_1.c[packetplayinclientcommand_enumclientcommand.ordinal()]) {
-        case 1:
-            if (this.player.viewingCredits) {
-                // this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
-                this.minecraftServer.getPlayerList().changeDimension(this.player, 0, PlayerTeleportEvent.TeleportCause.END_PORTAL); // CraftBukkit - reroute logic through custom portal management
-            } else if (this.player.u().getWorldData().isHardcore()) {
-                if (this.minecraftServer.T() && this.player.getName().equals(this.minecraftServer.S())) {
-                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
-                    this.minecraftServer.aa();
+            case 1:
+                if (this.player.viewingCredits) {
+                    // this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
+                    this.minecraftServer.getPlayerList().changeDimension(this.player, 0, PlayerTeleportEvent.TeleportCause.END_PORTAL); // CraftBukkit - reroute logic through custom portal management
+                } else if (this.player.u().getWorldData().isHardcore()) {
+                    if (this.minecraftServer.T() && this.player.getName().equals(this.minecraftServer.S())) {
+                        this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
+                        this.minecraftServer.aa();
+                    } else {
+                        GameProfileBanEntry gameprofilebanentry = new GameProfileBanEntry(this.player.getProfile(), null, "(You just lost the game)", null, "Death in Hardcore");
+
+                        this.minecraftServer.getPlayerList().getProfileBans().add(gameprofilebanentry);
+                        this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
+                    }
                 } else {
-                    GameProfileBanEntry gameprofilebanentry = new GameProfileBanEntry(this.player.getProfile(), null, "(You just lost the game)", null, "Death in Hardcore");
+                    if (this.player.getHealth() > 0.0F) {
+                        return;
+                    }
 
-                    this.minecraftServer.getPlayerList().getProfileBans().add(gameprofilebanentry);
-                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
+                    this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, false);
                 }
-            } else {
-                if (this.player.getHealth() > 0.0F) {
-                    return;
-                }
-
-                this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, false);
-            }
-            break;
+                break;
 
-        case 2:
-            this.player.getStatisticManager().a(this.player);
-            break;
+            case 2:
+                this.player.getStatisticManager().a(this.player);
+                break;
 
-        case 3:
-            this.player.b(AchievementList.f);
+            case 3:
+                this.player.b(AchievementList.f);
         }
 
     }
@@ -1816,19 +1793,19 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 itemstack = CraftItemStack.asNMSCopy(event.getCursor());
 
                 switch (event.getResult()) {
-                case ALLOW:
-                    // Plugin cleared the id / stacksize checks
-                    flag2 = flag3 = true;
-                    break;
-                case DEFAULT:
-                    break;
-                case DENY:
-                    // Reset the slot
-                    if (packetplayinsetcreativeslot.a() >= 0) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.defaultContainer.windowId, packetplayinsetcreativeslot.a(), this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem()));
-                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, null));
-                    }
-                    return;
+                    case ALLOW:
+                        // Plugin cleared the id / stacksize checks
+                        flag2 = flag3 = true;
+                        break;
+                    case DEFAULT:
+                        break;
+                    case DENY:
+                        // Reset the slot
+                        if (packetplayinsetcreativeslot.a() >= 0) {
+                            this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.defaultContainer.windowId, packetplayinsetcreativeslot.a(), this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem()));
+                            this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, null));
+                        }
+                        return;
                 }
             }
             // CraftBukkit end
@@ -1904,7 +1881,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
             if (!event.isCancelled()) {
                 System.arraycopy(org.bukkit.craftbukkit.block.CraftSign.sanitizeLines(event.getLines()), 0, tileentitysign.lines, 0, 4);
                 tileentitysign.isEditable = false;
-             }
+            }
             // CraftBukkit end
 
             tileentitysign.update();
@@ -1944,9 +1921,11 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     public void a(PacketPlayInTabComplete packetplayintabcomplete) {
         PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.u());
         // CraftBukkit start
-        if (chatSpamField.addAndGet(this, 10) > 500 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
-            this.disconnect("disconnect.spam");
-            return;
+        if (LockedSpigotConfig.isServerChatDisconnectSpam()) {
+            if (chatSpamField.addAndGet(this, 10) > 500 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
+                this.disconnect("disconnect.spam");
+                return;
+            }
         }
         // CraftBukkit end
         ArrayList arraylist = Lists.newArrayList();
@@ -1970,186 +1949,186 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         ItemStack itemstack1;
 
         try { // CraftBukkit
-        if ("MC|BEdit".equals(packetplayincustompayload.a())) {
-            packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
-
-            try {
-                itemstack = packetdataserializer.i();
-                if (itemstack == null) {
-                    return;
-                }
+            if ("MC|BEdit".equals(packetplayincustompayload.a())) {
+                packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
-                if (!ItemBookAndQuill.b(itemstack.getTag())) {
-                    throw new IOException("Invalid book tag!");
-                }
+                try {
+                    itemstack = packetdataserializer.i();
+                    if (itemstack == null) {
+                        return;
+                    }
 
-                itemstack1 = this.player.inventory.getItemInHand();
-                if (itemstack1 != null) {
-                    if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
-                        itemstack1 = new ItemStack(Items.WRITABLE_BOOK); // CraftBukkit
-                        itemstack1.a("pages", itemstack.getTag().getList("pages", 8));
-                        CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
+                    if (!ItemBookAndQuill.b(itemstack.getTag())) {
+                        throw new IOException("Invalid book tag!");
                     }
 
+                    itemstack1 = this.player.inventory.getItemInHand();
+                    if (itemstack1 != null) {
+                        if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
+                            itemstack1 = new ItemStack(Items.WRITABLE_BOOK); // CraftBukkit
+                            itemstack1.a("pages", itemstack.getTag().getList("pages", 8));
+                            CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
+                        }
+
+                        return;
+                    }
+                } catch (Exception exception) {
+                    PlayerConnection.c.error("Couldn\'t handle book info", exception);
+                    this.disconnect("Invalid book data!"); // CraftBukkit
                     return;
+                } finally {
+                    packetdataserializer.release();
                 }
-            } catch (Exception exception) {
-                PlayerConnection.c.error("Couldn\'t handle book info", exception);
-                this.disconnect("Invalid book data!"); // CraftBukkit
+
                 return;
-            } finally {
-                packetdataserializer.release();
-            }
+            } else if ("MC|BSign".equals(packetplayincustompayload.a())) {
+                packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
-            return;
-        } else if ("MC|BSign".equals(packetplayincustompayload.a())) {
-            packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
+                try {
+                    itemstack = packetdataserializer.i();
+                    if (itemstack == null) {
+                        return;
+                    }
 
-            try {
-                itemstack = packetdataserializer.i();
-                if (itemstack == null) {
-                    return;
-                }
+                    if (!ItemWrittenBook.b(itemstack.getTag())) {
+                        throw new IOException("Invalid book tag!");
+                    }
 
-                if (!ItemWrittenBook.b(itemstack.getTag())) {
-                    throw new IOException("Invalid book tag!");
-                }
+                    itemstack1 = this.player.inventory.getItemInHand();
+                    if (itemstack1 != null) {
+                        if (itemstack.getItem() == Items.WRITTEN_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
+                            // CraftBukkit start
+                            itemstack1 = new ItemStack(Items.WRITTEN_BOOK);
+                            itemstack1.a("author", new NBTTagString(this.player.getName()));
+                            itemstack1.a("title", new NBTTagString(itemstack.getTag().getString("title")));
+                            itemstack1.a("pages", itemstack.getTag().getList("pages", 8));
+                            itemstack1.setItem(Items.WRITTEN_BOOK);
+                            CraftEventFactory.handleEditBookEvent(player, itemstack1);
+                            // CraftBukkit end
+                        }
 
-                itemstack1 = this.player.inventory.getItemInHand();
-                if (itemstack1 != null) {
-                    if (itemstack.getItem() == Items.WRITTEN_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
-                        // CraftBukkit start
-                        itemstack1 = new ItemStack(Items.WRITTEN_BOOK);
-                        itemstack1.a("author", new NBTTagString(this.player.getName()));
-                        itemstack1.a("title", new NBTTagString(itemstack.getTag().getString("title")));
-                        itemstack1.a("pages", itemstack.getTag().getList("pages", 8));
-                        itemstack1.setItem(Items.WRITTEN_BOOK);
-                        CraftEventFactory.handleEditBookEvent(player, itemstack1);
-                        // CraftBukkit end
+                        return;
                     }
-
+                } catch (Exception exception1) {
+                    PlayerConnection.c.error("Couldn\'t sign book", exception1);
+                    this.disconnect("Invalid book data!"); // CraftBukkit
                     return;
+                } finally {
+                    packetdataserializer.release();
                 }
-            } catch (Exception exception1) {
-                PlayerConnection.c.error("Couldn\'t sign book", exception1);
-                this.disconnect("Invalid book data!"); // CraftBukkit
-                return;
-            } finally {
-                packetdataserializer.release();
-            }
 
-            return;
-        } else if ("MC|TrSel".equals(packetplayincustompayload.a())) {
-            try {
-                int i = packetplayincustompayload.b().readInt();
-                Container container = this.player.activeContainer;
+                return;
+            } else if ("MC|TrSel".equals(packetplayincustompayload.a())) {
+                try {
+                    int i = packetplayincustompayload.b().readInt();
+                    Container container = this.player.activeContainer;
 
-                if (container instanceof ContainerMerchant) {
-                    ((ContainerMerchant) container).d(i);
+                    if (container instanceof ContainerMerchant) {
+                        ((ContainerMerchant) container).d(i);
+                    }
+                } catch (Exception exception2) {
+                    PlayerConnection.c.error("Couldn\'t select trade", exception2);
+                    this.disconnect("Invalid trade data!"); // CraftBukkit
                 }
-            } catch (Exception exception2) {
-                PlayerConnection.c.error("Couldn\'t select trade", exception2);
-                this.disconnect("Invalid trade data!"); // CraftBukkit
-            }
-        } else if ("MC|AdvCdm".equals(packetplayincustompayload.a())) {
-            if (!this.minecraftServer.getEnableCommandBlock()) {
-                this.player.sendMessage(new ChatMessage("advMode.notEnabled"));
-            } else if (this.player.getBukkitEntity().isOp() && this.player.abilities.canInstantlyBuild) { // CraftBukkit - Change to Bukkit OP versus Vanilla OP
-                packetdataserializer = packetplayincustompayload.b();
+            } else if ("MC|AdvCdm".equals(packetplayincustompayload.a())) {
+                if (!this.minecraftServer.getEnableCommandBlock()) {
+                    this.player.sendMessage(new ChatMessage("advMode.notEnabled"));
+                } else if (this.player.getBukkitEntity().isOp() && this.player.abilities.canInstantlyBuild) { // CraftBukkit - Change to Bukkit OP versus Vanilla OP
+                    packetdataserializer = packetplayincustompayload.b();
 
-                try {
-                    byte b0 = packetdataserializer.readByte();
-                    CommandBlockListenerAbstract commandblocklistenerabstract = null;
+                    try {
+                        byte b0 = packetdataserializer.readByte();
+                        CommandBlockListenerAbstract commandblocklistenerabstract = null;
 
-                    if (b0 == 0) {
-                        TileEntity tileentity = this.player.world.getTileEntity(new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
+                        if (b0 == 0) {
+                            TileEntity tileentity = this.player.world.getTileEntity(new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
 
-                        if (tileentity instanceof TileEntityCommand) {
-                            commandblocklistenerabstract = ((TileEntityCommand) tileentity).getCommandBlock();
-                        }
-                    } else if (b0 == 1) {
-                        Entity entity = this.player.world.a(packetdataserializer.readInt());
+                            if (tileentity instanceof TileEntityCommand) {
+                                commandblocklistenerabstract = ((TileEntityCommand) tileentity).getCommandBlock();
+                            }
+                        } else if (b0 == 1) {
+                            Entity entity = this.player.world.a(packetdataserializer.readInt());
 
-                        if (entity instanceof EntityMinecartCommandBlock) {
-                            commandblocklistenerabstract = ((EntityMinecartCommandBlock) entity).getCommandBlock();
+                            if (entity instanceof EntityMinecartCommandBlock) {
+                                commandblocklistenerabstract = ((EntityMinecartCommandBlock) entity).getCommandBlock();
+                            }
                         }
-                    }
 
-                    String s = packetdataserializer.c(packetdataserializer.readableBytes());
-                    boolean flag = packetdataserializer.readBoolean();
+                        String s = packetdataserializer.c(packetdataserializer.readableBytes());
+                        boolean flag = packetdataserializer.readBoolean();
 
-                    if (commandblocklistenerabstract != null) {
-                        commandblocklistenerabstract.setCommand(s);
-                        commandblocklistenerabstract.a(flag);
-                        if (!flag) {
-                            commandblocklistenerabstract.b((IChatBaseComponent) null);
-                        }
+                        if (commandblocklistenerabstract != null) {
+                            commandblocklistenerabstract.setCommand(s);
+                            commandblocklistenerabstract.a(flag);
+                            if (!flag) {
+                                commandblocklistenerabstract.b((IChatBaseComponent) null);
+                            }
 
-                        commandblocklistenerabstract.h();
-                        this.player.sendMessage(new ChatMessage("advMode.setCommand.success", s));
+                            commandblocklistenerabstract.h();
+                            this.player.sendMessage(new ChatMessage("advMode.setCommand.success", s));
+                        }
+                    } catch (Exception exception3) {
+                        PlayerConnection.c.error("Couldn\'t set command block", exception3);
+                        this.disconnect("Invalid CommandBlock data!"); // CraftBukkit
+                    } finally {
+                        packetdataserializer.release();
                     }
-                } catch (Exception exception3) {
-                    PlayerConnection.c.error("Couldn\'t set command block", exception3);
-                    this.disconnect("Invalid CommandBlock data!"); // CraftBukkit
-                } finally {
-                    packetdataserializer.release();
+                } else {
+                    this.player.sendMessage(new ChatMessage("advMode.notAllowed"));
                 }
-            } else {
-                this.player.sendMessage(new ChatMessage("advMode.notAllowed"));
-            }
-        } else if ("MC|Beacon".equals(packetplayincustompayload.a())) {
-            if (this.player.activeContainer instanceof ContainerBeacon) {
-                try {
-                    packetdataserializer = packetplayincustompayload.b();
-                    int j = packetdataserializer.readInt();
-                    int k = packetdataserializer.readInt();
-                    ContainerBeacon containerbeacon = (ContainerBeacon) this.player.activeContainer;
-                    Slot slot = containerbeacon.getSlot(0);
-
-                    if (slot.hasItem()) {
-                        slot.a(1);
-                        IInventory iinventory = containerbeacon.e();
-
-                        iinventory.b(1, j);
-                        iinventory.b(2, k);
-                        iinventory.update();
+            } else if ("MC|Beacon".equals(packetplayincustompayload.a())) {
+                if (this.player.activeContainer instanceof ContainerBeacon) {
+                    try {
+                        packetdataserializer = packetplayincustompayload.b();
+                        int j = packetdataserializer.readInt();
+                        int k = packetdataserializer.readInt();
+                        ContainerBeacon containerbeacon = (ContainerBeacon) this.player.activeContainer;
+                        Slot slot = containerbeacon.getSlot(0);
+
+                        if (slot.hasItem()) {
+                            slot.a(1);
+                            IInventory iinventory = containerbeacon.e();
+
+                            iinventory.b(1, j);
+                            iinventory.b(2, k);
+                            iinventory.update();
+                        }
+                    } catch (Exception exception4) {
+                        PlayerConnection.c.error("Couldn\'t set beacon", exception4);
+                        this.disconnect("Invalid beacon data!"); // CraftBukkit
                     }
-                } catch (Exception exception4) {
-                    PlayerConnection.c.error("Couldn\'t set beacon", exception4);
-                    this.disconnect("Invalid beacon data!"); // CraftBukkit
                 }
-            }
-        } else if ("MC|ItemName".equals(packetplayincustompayload.a()) && this.player.activeContainer instanceof ContainerAnvil) {
-            ContainerAnvil containeranvil = (ContainerAnvil) this.player.activeContainer;
+            } else if ("MC|ItemName".equals(packetplayincustompayload.a()) && this.player.activeContainer instanceof ContainerAnvil) {
+                ContainerAnvil containeranvil = (ContainerAnvil) this.player.activeContainer;
 
-            if (packetplayincustompayload.b() != null && packetplayincustompayload.b().readableBytes() >= 1) {
-                String s1 = SharedConstants.a(packetplayincustompayload.b().c(32767));
+                if (packetplayincustompayload.b() != null && packetplayincustompayload.b().readableBytes() >= 1) {
+                    String s1 = SharedConstants.a(packetplayincustompayload.b().c(32767));
 
-                if (s1.length() <= 30) {
-                    containeranvil.a(s1);
+                    if (s1.length() <= 30) {
+                        containeranvil.a(s1);
+                    }
+                } else {
+                    containeranvil.a("");
                 }
-            } else {
-                containeranvil.a("");
             }
-        }
-        // CraftBukkit start
-        else if (packetplayincustompayload.a().equals("REGISTER")) {
-            String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-            for (String channel : channels.split("\0")) {
-                getPlayer().addChannel(channel);
-            }
-        } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
-            String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
-            for (String channel : channels.split("\0")) {
-                getPlayer().removeChannel(channel);
+            // CraftBukkit start
+            else if (packetplayincustompayload.a().equals("REGISTER")) {
+                String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
+                for (String channel : channels.split("\0")) {
+                    getPlayer().addChannel(channel);
+                }
+            } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
+                String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
+                for (String channel : channels.split("\0")) {
+                    getPlayer().removeChannel(channel);
+                }
+            } else {
+                byte[] data = new byte[packetplayincustompayload.b().readableBytes()];
+                packetplayincustompayload.b().readBytes(data);
+                server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), packetplayincustompayload.a(), data);
             }
-        } else {
-            byte[] data = new byte[packetplayincustompayload.b().readableBytes()];
-            packetplayincustompayload.b().readBytes(data);
-            server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), packetplayincustompayload.a(), data);
-        }
-        // CraftBukkit end
-        // CraftBukkit start
+            // CraftBukkit end
+            // CraftBukkit start
         } finally {
             if (packetplayincustompayload.b().refCnt() > 0) {
                 packetplayincustompayload.b().release();
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 7be4f9e2e..4dba72e63 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -1,10 +1,11 @@
 package net.minecraft.server;
 
 // CraftBukkit start
-import org.bukkit.event.block.BlockBreakEvent;
+
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
+import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.player.PlayerInteractEvent;
 // CraftBukkit end
 
@@ -351,7 +352,7 @@ public class PlayerInteractManager {
                     iblockdata.getBlock().a(this.world, this.player, blockposition, iblockdata, tileentity);
                 }
             }
-            
+
             // CraftBukkit start - Drop event experience
             if (flag && event != null) {
                 iblockdata.getBlock().dropExperience(this.world, blockposition, event.getExpToDrop());
@@ -365,32 +366,31 @@ public class PlayerInteractManager {
     public boolean useItem(EntityHuman entityhuman, World world, ItemStack itemstack) {
         if (this.gamemode == WorldSettings.EnumGamemode.SPECTATOR) {
             return false;
-        } else {
-            int i = itemstack.count;
-            int j = itemstack.getData();
-            ItemStack itemstack1 = itemstack.a(world, entityhuman);
-
-            if (itemstack1 == itemstack && (itemstack1 == null || itemstack1.count == i && itemstack1.l() <= 0 && itemstack1.getData() == j)) {
-                return false;
-            } else {
-                entityhuman.inventory.items[entityhuman.inventory.itemInHandIndex] = itemstack1;
-                if (this.isCreative()) {
-                    itemstack1.count = i;
-                    if (itemstack1.e()) {
-                        itemstack1.setData(j);
-                    }
-                }
+        }
+        int i = itemstack.count;
+        int j = itemstack.getData();
+        ItemStack itemstack1 = itemstack.a(world, entityhuman);
 
-                if (itemstack1.count == 0) {
-                    entityhuman.inventory.items[entityhuman.inventory.itemInHandIndex] = null;
+        if (itemstack1 == itemstack && (itemstack1 == null || itemstack1.count == i && itemstack1.l() <= 0 && itemstack1.getData() == j)) {
+            return false;
+        } else {
+            entityhuman.inventory.items[entityhuman.inventory.itemInHandIndex] = itemstack1;
+            if (this.isCreative()) {
+                itemstack1.count = i;
+                if (itemstack1.e()) {
+                    itemstack1.setData(j);
                 }
+            }
 
-                if (!entityhuman.bS()) {
-                    ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
-                }
+            if (itemstack1.count == 0) {
+                entityhuman.inventory.items[entityhuman.inventory.itemInHandIndex] = null;
+            }
 
-                return true;
+            if (!entityhuman.bS()) {
+                ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
             }
+
+            return true;
         }
     }
 
diff --git a/src/main/java/net/techcable/tacospigot/CompatHacks.java b/src/main/java/net/techcable/tacospigot/CompatHacks.java
deleted file mode 100644
index 6ebc9c89c..000000000
--- a/src/main/java/net/techcable/tacospigot/CompatHacks.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package net.techcable.tacospigot;
-
-import org.bukkit.Bukkit;
-
-public class CompatHacks {
-    private CompatHacks() {}
-    public static boolean hasProtocolSupport() {
-        return Bukkit.getPluginManager().isPluginEnabled("ProtocolSupport");
-    }
-}
\ No newline at end of file
-- 
2.21.0.windows.1

