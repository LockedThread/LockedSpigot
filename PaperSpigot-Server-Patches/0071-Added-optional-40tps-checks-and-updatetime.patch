From 9b1dc99e97eacd942123d82e9dcede1f9e0bc181 Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Mon, 6 May 2019 14:07:58 -0400
Subject: [PATCH] Added optional 40tps checks and updatetime


diff --git a/src/main/java/dev/lockedthread/LockedSpigotConfig.java b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
index 203d285ee..6d7167b83 100644
--- a/src/main/java/dev/lockedthread/LockedSpigotConfig.java
+++ b/src/main/java/dev/lockedthread/LockedSpigotConfig.java
@@ -79,8 +79,13 @@ public class LockedSpigotConfig {
     private static int serverPacketDeserializerLimit;
     private static boolean serverChatDisconnectSpam;
     private static boolean serverMobAi;
+    private static boolean serverUpdateTime;
     private static int serverChunkIOBaseThreads;
     private static int serverChunkIOPlayersPerThread;
+    private static boolean server40tpsEntities;
+    private static boolean server40tpsChunkIO;
+    private static boolean server40TpsProcessQueue;
+    private static boolean server40TpsTimeUpdate;
 
     private static void load() {
         ironGolemCancelFallDamage = getBoolean("irongolem.cancel-falldamage", true);
@@ -137,8 +142,14 @@ public class LockedSpigotConfig {
         serverPacketDeserializerLimit = getInt("server.packet-deserializer-limit", Integer.MAX_VALUE);
         serverChatDisconnectSpam = getBoolean("server.chat-disconnect-spam", false);
         serverMobAi = getBoolean("server.mob-ai", false);
+        serverUpdateTime = getBoolean("server.update-time", false);
         serverChunkIOBaseThreads = getInt("server.chunk-io.base-threads", 2);
         serverChunkIOPlayersPerThread = getInt("server.chunk-io.players-per-thread", 50);
+        server40tpsEntities = getBoolean("server.40-tps.entites", false);
+        server40tpsChunkIO = getBoolean("server.40-tps.chunk-io", true);
+        server40TpsProcessQueue = getBoolean("server.40-tps.process-queue", true);
+        server40TpsTimeUpdate = getBoolean("server.40-tps.time-update", false);
+
 
         try {
             config.save(CONFIG_FILE);
@@ -334,6 +345,26 @@ public class LockedSpigotConfig {
         return serverChunkIOPlayersPerThread;
     }
 
+    public static boolean isServer40tpsEntities() {
+        return server40tpsEntities;
+    }
+
+    public static boolean isServer40TpsTimeUpdate() {
+        return server40TpsTimeUpdate;
+    }
+
+    public static boolean isServer40TpsProcessQueue() {
+        return server40TpsProcessQueue;
+    }
+
+    public static boolean isServer40tpsChunkIO() {
+        return server40tpsChunkIO;
+    }
+
+    public static boolean isServerUpdateTime() {
+        return serverUpdateTime;
+    }
+
     public static void init(File configFile) {
         CONFIG_FILE = configFile;
         config = new YamlConfiguration();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 8b2d45f92..db93f6150 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -10,6 +10,7 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import dev.lockedthread.LockedSpigotConfig;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -789,21 +790,42 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
         // Run tasks that are waiting on processing
         SpigotTimings.processQueueTimer.startTiming(); // Spigot
-        while (!processQueue.isEmpty()) {
-            processQueue.remove().run();
+        if (LockedSpigotConfig.isServer40TpsProcessQueue()) {
+            while (!processQueue.isEmpty()) {
+                processQueue.remove().run();
+            }
+        } else if (offTick) {
+            while (!processQueue.isEmpty()) {
+                processQueue.remove().run();
+            }
         }
         SpigotTimings.processQueueTimer.stopTiming(); // Spigot
 
-        SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
-        org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
+        SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot}
+        if (LockedSpigotConfig.isServer40tpsChunkIO()) {
+            org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
+        } else if (offTick) {
+            org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
+        }
         SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
         SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
         // Send time updates to everyone, it will get the right time from the world the player is in.
-        if (this.ticks % 40 == 0) {
-            for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
-                EntityPlayer entityplayer = this.getPlayerList().players.get(i);
-                entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
+        if (LockedSpigotConfig.isServerUpdateTime()) {
+            if (LockedSpigotConfig.isServer40TpsTimeUpdate()) {
+                if (this.ticks % 40 == 0) {
+                    for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
+                        EntityPlayer entityplayer = this.getPlayerList().players.get(i);
+                        entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
+                    }
+                }
+            } else if (offTick) {
+                if (this.ticks % 40 == 0) {
+                    for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
+                        EntityPlayer entityplayer = this.getPlayerList().players.get(i);
+                        entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
+                    }
+                }
             }
         }
         SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
@@ -851,20 +873,38 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 }
             }
 
-            try {
-                worldserver.timings.tickEntities.startTiming(); // Spigot
-                worldserver.tickEntities();
-                worldserver.timings.tickEntities.stopTiming(); // Spigot
-            } catch (Throwable throwable1) {
-                // Spigot Start
+            if (LockedSpigotConfig.isServer40tpsEntities()) {
                 try {
-                    crashreport = CrashReport.a(throwable1, "Exception ticking world entities");
-                } catch (Throwable t) {
-                    throw new RuntimeException("Error generating crash report", t);
+                    worldserver.timings.tickEntities.startTiming(); // Spigot
+                    worldserver.tickEntities();
+                    worldserver.timings.tickEntities.stopTiming(); // Spigot
+                } catch (Throwable throwable1) {
+                    // Spigot Start
+                    try {
+                        crashreport = CrashReport.a(throwable1, "Exception ticking world entities");
+                    } catch (Throwable t) {
+                        throw new RuntimeException("Error generating crash report", t);
+                    }
+                    // Spigot End
+                    worldserver.a(crashreport);
+                    throw new ReportedException(crashreport);
+                }
+            } else if (offTick) {
+                try {
+                    worldserver.timings.tickEntities.startTiming(); // Spigot
+                    worldserver.tickEntities();
+                    worldserver.timings.tickEntities.stopTiming(); // Spigot
+                } catch (Throwable throwable1) {
+                    // Spigot Start
+                    try {
+                        crashreport = CrashReport.a(throwable1, "Exception ticking world entities");
+                    } catch (Throwable t) {
+                        throw new RuntimeException("Error generating crash report", t);
+                    }
+                    // Spigot End
+                    worldserver.a(crashreport);
+                    throw new ReportedException(crashreport);
                 }
-                // Spigot End
-                worldserver.a(crashreport);
-                throw new ReportedException(crashreport);
             }
 
             /*
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index a5550ef2d..f9e805a46 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -4,6 +4,7 @@ import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.ListenableFuture;
+import dev.lockedthread.LockedSpigotConfig;
 import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -231,9 +232,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this.c(j);
         }
 
-        this.worldData.setTime(this.worldData.getTime() + 1L);
-        if (this.getGameRules().getBoolean("doDaylightCycle")) {
-            this.worldData.setDayTime(this.worldData.getDayTime() + 1L);
+        if (LockedSpigotConfig.isServerUpdateTime()) {
+            this.worldData.setTime(this.worldData.getTime() + 1L);
+            if (this.getGameRules().getBoolean("doDaylightCycle")) {
+                this.worldData.setDayTime(this.worldData.getDayTime() + 1L);
+            }
         }
 
         timings.doChunkUnload.stopTiming(); // Spigot
-- 
2.21.0.windows.1

