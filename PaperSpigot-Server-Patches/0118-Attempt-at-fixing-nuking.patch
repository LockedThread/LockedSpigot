From bcd5e85de107e0daa7cc33c153c9d9c5b2552ba3 Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Sun, 12 May 2019 19:17:35 -0400
Subject: [PATCH] Attempt at fixing nuking


diff --git a/src/main/java/dev/lockedthread/locations/ExplosionLocation.java b/src/main/java/dev/lockedthread/locations/ExplosionLocation.java
new file mode 100644
index 000000000..207066945
--- /dev/null
+++ b/src/main/java/dev/lockedthread/locations/ExplosionLocation.java
@@ -0,0 +1,34 @@
+package dev.lockedthread.locations;
+
+import net.minecraft.server.BlockPosition;
+
+public class ExplosionLocation {
+
+    public final double x, y, z;
+
+    public ExplosionLocation(double x, double y, double z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    public static ExplosionLocation of(BlockPosition blockPosition) {
+        return new ExplosionLocation(blockPosition.getX(), blockPosition.getY(), blockPosition.getZ());
+    }
+
+    public BlockPosition toBlockPosition() {
+        return new BlockPosition(x, y, z);
+    }
+
+    public double getX() {
+        return x;
+    }
+
+    public double getY() {
+        return y;
+    }
+
+    public double getZ() {
+        return z;
+    }
+}
diff --git a/src/main/java/dev/lockedthread/regions/SmallRegion.java b/src/main/java/dev/lockedthread/regions/SmallRegion.java
index 3c2df316b..cd0a48a69 100644
--- a/src/main/java/dev/lockedthread/regions/SmallRegion.java
+++ b/src/main/java/dev/lockedthread/regions/SmallRegion.java
@@ -26,9 +26,7 @@ public class SmallRegion implements Region {
             for (int y = centerY - radius; y <= centerY + radius; y++) {
                 for (int z = centerZ - radius; z <= centerZ + radius; z++) {
                     final BlockPosition key = new BlockPosition(x, y, z);
-                    IBlockData type = world.getType(key);
-                    if (type.getBlock().getMaterial() == Material.AIR) continue;
-                    iBlockDataMap.put(key, type);
+                    iBlockDataMap.put(key, world.getType(key));
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 72f296eb3..a5b48eac3 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import dev.lockedthread.LockedSpigotConfig;
+import dev.lockedthread.locations.ExplosionLocation;
 import dev.lockedthread.locations.RenderedLocation;
 import dev.lockedthread.regions.Region;
 import dev.lockedthread.regions.SmallRegion;
@@ -15,8 +16,8 @@ import java.util.function.Predicate;
 
 public class Explosion {
 
-    public static final Map<BlockPosition, Map<Entity, Float>> EXPLOSION_ENTITY_CACHE = new HashMap<>();
-    public static final Map<BlockPosition, Region> REGION_CACHE = new HashMap<>();
+    public static final Map<ExplosionLocation, Map<Entity, Float>> EXPLOSION_ENTITY_CACHE = new HashMap<>();
+    public static final Map<ExplosionLocation, Region> REGION_CACHE = new HashMap<>();
     private static final Predicate<Entity> ENTITY_SEARCH_PREDICATE = entity -> (!(entity instanceof EntityItem) || LockedSpigotConfig.isExplosionDestroyItems()) && (!(entity instanceof EntityHuman) || !entity.world.paperSpigotConfig.disableExplosionKnockback) && !entity.dead && IEntitySelector.d.apply(entity);
     private final boolean a;
     private final boolean b;
@@ -26,6 +27,7 @@ public class Explosion {
     public final Entity source;
     private final float size;
     private final BlockPosition origin;
+    private ExplosionLocation explosionLocation;
     private Region smallRegion;
     public boolean inWater;
     private final Set<BlockPosition> blocks;
@@ -45,16 +47,20 @@ public class Explosion {
         if (isInWater()) {
             return;
         }
-        final Region smallRegion = REGION_CACHE.get(origin);
+        this.explosionLocation = ExplosionLocation.of(origin);
+        final Region smallRegion = REGION_CACHE.get(explosionLocation);
         if (smallRegion != null) {
             this.smallRegion = smallRegion;
         } else {
-            REGION_CACHE.put(origin, this.smallRegion = new SmallRegion(entity.world, origin, LockedSpigotConfig.getExplosionRegionRadius()));
+            REGION_CACHE.put(explosionLocation, this.smallRegion = new SmallRegion(entity.world, origin, LockedSpigotConfig.getExplosionRegionRadius()));
         }
     }
 
     private boolean isInWater() {
-        return source.world.getType(origin).getBlock().getMaterial().isLiquid();
+        if (smallRegion == null) {
+            return source.world.getType(origin).getBlock().getMaterial().isLiquid();
+        }
+        return smallRegion.getCenter().getBlock().getMaterial().isLiquid();
     }
 
     public void a() {
@@ -91,7 +97,7 @@ public class Explosion {
         }
         float f3 = this.size * 2.0f;
         double maximumDistance = this.size * 2.0;
-        Map<Entity, Float> entityPositionMap = EXPLOSION_ENTITY_CACHE.getOrDefault(origin, new HashMap<>());
+        Map<Entity, Float> entityPositionMap = EXPLOSION_ENTITY_CACHE.getOrDefault(explosionLocation, new HashMap<>());
         Collection<Entity> entities = entityPositionMap.isEmpty()
                 ? this.source.world.a(this.source, new AxisAlignedBB(MathHelper.floor(this.posX - maximumDistance), MathHelper.floor(this.posY - maximumDistance), MathHelper.floor(this.posZ - maximumDistance), MathHelper.floor(this.posX + maximumDistance + 1.0), MathHelper.floor(this.posY + maximumDistance + 1.0), MathHelper.floor(this.posZ + maximumDistance + 1.0)), ENTITY_SEARCH_PREDICATE::test)
                 : entityPositionMap.keySet();
@@ -119,14 +125,13 @@ public class Explosion {
                         CraftEventFactory.entityDamage = null;
                         if (wasDamaged || entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock || entity.forceExplosionKnockback) {
                             double multiplier = (entity instanceof EntityHuman && this.source.world.paperSpigotConfig.disableExplosionKnockback) ? 0.0 : EnchantmentProtection.a(entity, d13);
-
                             entity.g(x * multiplier, y * multiplier, z * multiplier);
                         }
                     }
                 }
             }
         }
-        EXPLOSION_ENTITY_CACHE.put(origin, entityPositionMap);
+        EXPLOSION_ENTITY_CACHE.put(explosionLocation, entityPositionMap);
     }
 
     public void a(boolean flag) {
-- 
2.21.0.windows.1

