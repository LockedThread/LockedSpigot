From 8d407b4fa15bcb5e96b0fc5cee6442425ab41bad Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Tue, 7 May 2019 21:58:59 -0400
Subject: [PATCH] Code cleanups and implemented fast math


diff --git a/src/main/java/dev/lockedthread/locations/RenderedLocation.java b/src/main/java/dev/lockedthread/locations/RenderedLocation.java
index 3e970312b..82787023d 100644
--- a/src/main/java/dev/lockedthread/locations/RenderedLocation.java
+++ b/src/main/java/dev/lockedthread/locations/RenderedLocation.java
@@ -1,5 +1,7 @@
 package dev.lockedthread.locations;
 
+import net.minecraft.server.MathHelper;
+
 import java.util.HashSet;
 import java.util.Set;
 
@@ -28,7 +30,7 @@ public class RenderedLocation {
         this.d0 = k / 15.0f * 2.0f - 1.0f;
         this.d1 = i / 15.0f * 2.0f - 1.0f;
         this.d2 = j / 15.0f * 2.0f - 1.0f;
-        this.d3 = Math.sqrt(this.d0 * this.d0 + this.d1 * this.d1 + this.d2 * this.d2);
+        this.d3 = MathHelper.sqrt(this.d0 * this.d0 + this.d1 * this.d1 + this.d2 * this.d2);
         this.d0 /= this.d3;
         this.d1 /= this.d3;
         this.d2 /= this.d3;
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index 1845ee0d5..19e1225ce 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -3,14 +3,12 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.Set;
+import net.jafama.FastMath;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.util.*;
+
 public abstract class BiomeBase {
 
     private static final Logger aD = LogManager.getLogger();
@@ -317,7 +315,7 @@ public abstract class BiomeBase {
                         --l;
                         chunksnapshot.a(k1, l1, j1, iblockdata1);
                         if (l == 0 && iblockdata1.getBlock() == Blocks.SAND) {
-                            l = random.nextInt(4) + Math.max(0, l1 - 63);
+                            l = random.nextInt(4) + FastMath.max(0, l1 - 63);
                             iblockdata1 = iblockdata1.get(BlockSand.VARIANT) == BlockSand.EnumSandVariant.RED_SAND ? Blocks.RED_SANDSTONE.getBlockData() : Blocks.SANDSTONE.getBlockData();
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/BiomeMesa.java b/src/main/java/net/minecraft/server/BiomeMesa.java
index 65cd706ac..37dcde504 100644
--- a/src/main/java/net/minecraft/server/BiomeMesa.java
+++ b/src/main/java/net/minecraft/server/BiomeMesa.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+
 import java.util.Arrays;
 import java.util.Random;
 
@@ -62,14 +64,14 @@ public class BiomeMesa extends BiomeBase {
         if (this.aI) {
             k = (i & -16) + (j & 15);
             l = (j & -16) + (i & 15);
-            double d2 = Math.min(Math.abs(d0), this.aF.a((double) k * 0.25D, (double) l * 0.25D));
+            double d2 = FastMath.min(FastMath.abs(d0), this.aF.a((double) k * 0.25D, (double) l * 0.25D));
 
             if (d2 > 0.0D) {
                 double d3 = 0.001953125D;
-                double d4 = Math.abs(this.aG.a((double) k * d3, (double) l * d3));
+                double d4 = FastMath.abs(this.aG.a((double) k * d3, (double) l * d3));
 
                 d1 = d2 * d2 * 2.5D;
-                double d5 = Math.ceil(d4 * 50.0D) + 14.0D;
+                double d5 = FastMath.ceil(d4 * 50.0D) + 14.0D;
 
                 if (d1 > d5) {
                     d1 = d5;
@@ -85,7 +87,7 @@ public class BiomeMesa extends BiomeBase {
         IBlockData iblockdata = Blocks.STAINED_HARDENED_CLAY.getBlockData();
         IBlockData iblockdata1 = this.al;
         int j1 = (int) (d0 / 3.0D + 3.0D + random.nextDouble() * 0.25D);
-        boolean flag = Math.cos(d0 / 3.0D * 3.141592653589793D) > 0.0D;
+        boolean flag = FastMath.cos(d0 / 3.0D * 3.141592653589793D) > 0.0D;
         int k1 = -1;
         boolean flag1 = false;
 
@@ -118,7 +120,7 @@ public class BiomeMesa extends BiomeBase {
                             iblockdata = Blocks.WATER.getBlockData();
                         }
 
-                        k1 = j1 + Math.max(0, l1 - i1);
+                        k1 = j1 + FastMath.max(0, l1 - i1);
                         if (l1 >= i1 - 1) {
                             if (this.aJ && l1 > 86 + j1 * 2) {
                                 if (flag) {
@@ -242,7 +244,7 @@ public class BiomeMesa extends BiomeBase {
     }
 
     private IBlockData a(int i, int j, int k) {
-        int l = (int) Math.round(this.aH.a((double) i * 1.0D / 512.0D, (double) i * 1.0D / 512.0D) * 2.0D);
+        int l = (int) FastMath.round(this.aH.a((double) i * 1.0D / 512.0D, (double) i * 1.0D / 512.0D) * 2.0D);
 
         return this.aD[(j + l + 64) % 64];
     }
diff --git a/src/main/java/net/minecraft/server/BlockDaylightDetector.java b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
index 0bb9faf58..0ed9b07da 100644
--- a/src/main/java/net/minecraft/server/BlockDaylightDetector.java
+++ b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+
 import java.util.Random;
 
 public class BlockDaylightDetector extends BlockContainer {
@@ -23,7 +25,7 @@ public class BlockDaylightDetector extends BlockContainer {
     }
 
     public int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection) {
-        return (Integer) iblockdata.get(BlockDaylightDetector.POWER);
+        return iblockdata.get(BlockDaylightDetector.POWER);
     }
 
     public void f(World world, BlockPosition blockposition) {
@@ -34,13 +36,13 @@ public class BlockDaylightDetector extends BlockContainer {
             float f1 = f < 3.1415927F ? 0.0F : 6.2831855F;
 
             f += (f1 - f) * 0.2F;
-            i = Math.round((float) i * MathHelper.cos(f));
+            i = FastMath.round((float) i * MathHelper.cos(f));
             i = MathHelper.clamp(i, 0, 15);
             if (this.b) {
                 i = 15 - i;
             }
 
-            if ((Integer) iblockdata.get(BlockDaylightDetector.POWER) != i) {
+            if (iblockdata.get(BlockDaylightDetector.POWER) != i) {
                 i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), iblockdata.get(POWER), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
                 world.setTypeAndData(blockposition, iblockdata.set(BlockDaylightDetector.POWER, i), 3);
             }
@@ -97,7 +99,7 @@ public class BlockDaylightDetector extends BlockContainer {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return (Integer) iblockdata.get(BlockDaylightDetector.POWER);
+        return iblockdata.get(BlockDaylightDetector.POWER);
     }
 
     protected BlockStateList getStateList() {
diff --git a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
index e1fc0584c..33a970cae 100644
--- a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
@@ -1,8 +1,9 @@
 package net.minecraft.server;
 
-import java.util.Random;
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
-import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+import java.util.Random;
 
 public abstract class BlockDiodeAbstract extends BlockDirectional {
 
@@ -130,7 +131,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
         } else {
             IBlockData iblockdata1 = world.getType(blockposition1);
 
-            return Math.max(i, iblockdata1.getBlock() == Blocks.REDSTONE_WIRE ? (Integer) iblockdata1.get(BlockRedstoneWire.POWER) : 0);
+            return FastMath.max(i, iblockdata1.getBlock() == Blocks.REDSTONE_WIRE ? (Integer) iblockdata1.get(BlockRedstoneWire.POWER) : 0);
         }
     }
 
@@ -139,7 +140,7 @@ public abstract class BlockDiodeAbstract extends BlockDirectional {
         EnumDirection enumdirection1 = enumdirection.e();
         EnumDirection enumdirection2 = enumdirection.f();
 
-        return Math.max(this.c(iblockaccess, blockposition.shift(enumdirection1), enumdirection1), this.c(iblockaccess, blockposition.shift(enumdirection2), enumdirection2));
+        return FastMath.max(this.c(iblockaccess, blockposition.shift(enumdirection1), enumdirection1), this.c(iblockaccess, blockposition.shift(enumdirection2), enumdirection2));
     }
 
     protected int c(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 4239872ff..8c79fc985 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -1,13 +1,15 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Maps;
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockBurnEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
+
 import java.util.Map;
 import java.util.Random;
 
 // CraftBukkit start
-import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.event.block.BlockBurnEvent;
-import org.bukkit.event.block.BlockSpreadEvent;
 // CraftBukkit end
 
 public class BlockFire extends Block {
@@ -301,7 +303,7 @@ public class BlockFire extends Block {
             int j = aenumdirection.length;
 
             for (EnumDirection enumdirection : aenumdirection) {
-                i = Math.max(this.d(world.getType(blockposition.shift(enumdirection)).getBlock()), i);
+                i = FastMath.max(this.d(world.getType(blockposition.shift(enumdirection)).getBlock()), i);
             }
 
             return i;
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index 6154fdbcb..d1416286e 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import dev.lockedthread.LockedSpigotConfig;
+import net.jafama.FastMath;
 
 import java.util.Iterator;
 import java.util.Random;
@@ -177,7 +178,7 @@ public abstract class BlockFluids extends Block {
         }
         if (LockedSpigotConfig.isLiquidsParticlesEnabled()) {
             for (int i = 0; i < 8; ++i) {
-                world.addParticle(EnumParticle.SMOKE_LARGE, d0 + (LockedSpigotConfig.isLiquidsParticlesOffsetEnabled() ? LockedSpigotConfig.getLiquidsParticlesOffset() : Math.random()), d1 + 1.2D, d2 + (LockedSpigotConfig.isLiquidsParticlesOffsetEnabled() ? LockedSpigotConfig.getLiquidsParticlesOffset() : Math.random()), 0.0D, 0.0D, 0.0D);
+                world.addParticle(EnumParticle.SMOKE_LARGE, d0 + (LockedSpigotConfig.isLiquidsParticlesOffsetEnabled() ? LockedSpigotConfig.getLiquidsParticlesOffset() : FastMath.random()), d1 + 1.2D, d2 + (LockedSpigotConfig.isLiquidsParticlesOffsetEnabled() ? LockedSpigotConfig.getLiquidsParticlesOffset() : FastMath.random()), 0.0D, 0.0D, 0.0D);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/BlockGrass.java b/src/main/java/net/minecraft/server/BlockGrass.java
index b23dc816b..4d7b73ac6 100644
--- a/src/main/java/net/minecraft/server/BlockGrass.java
+++ b/src/main/java/net/minecraft/server/BlockGrass.java
@@ -1,13 +1,15 @@
 package net.minecraft.server;
 
-import java.util.Random;
-
-// CraftBukkit start
+import net.jafama.FastMath;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.event.block.BlockSpreadEvent;
 import org.bukkit.event.block.BlockFadeEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
+
+import java.util.Random;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class BlockGrass extends Block implements IBlockFragilePlantElement {
@@ -45,7 +47,7 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
                 // CraftBukkit end
             } else {
                 if (world.tacoSpigotConfig.grassIgnoresLight || world.getLightLevel(blockposition.up()) >= 9) { // TacoSpigot - add an option to ignore light
-                    for (int i = 0; i < Math.min(4, Math.max(20, (int) (4 * 100F / world.growthOdds))); ++i) { // Spigot
+                    for (int i = 0; i < FastMath.min(4, FastMath.max(20, (int) (4 * 100F / world.growthOdds))); ++i) { // Spigot
                         BlockPosition blockposition1 = blockposition.a(random.nextInt(3) - 1, random.nextInt(5) - 3, random.nextInt(3) - 1);
                         Block block = world.getType(blockposition1.up()).getBlock();
                         IBlockData iblockdata1 = world.getType(blockposition1);
diff --git a/src/main/java/net/minecraft/server/BlockMushroom.java b/src/main/java/net/minecraft/server/BlockMushroom.java
index 5e8d280a1..d0c320267 100644
--- a/src/main/java/net/minecraft/server/BlockMushroom.java
+++ b/src/main/java/net/minecraft/server/BlockMushroom.java
@@ -1,12 +1,13 @@
 package net.minecraft.server;
 
-import java.util.Iterator;
-import java.util.Random;
-
-// CraftBukkit start
+import net.jafama.FastMath;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
 import org.bukkit.event.block.BlockSpreadEvent;
+
+import java.util.Random;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class BlockMushroom extends BlockPlant implements IBlockFragilePlantElement {
@@ -20,7 +21,7 @@ public class BlockMushroom extends BlockPlant implements IBlockFragilePlantEleme
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         final int sourceX = blockposition.getX(), sourceY = blockposition.getY(), sourceZ = blockposition.getZ(); // CraftBukkit
-        if (random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfig.mushroomModifier * 25)) == 0) { // Spigot            int i = 5;
+        if (random.nextInt(FastMath.max(1, (int) world.growthOdds / world.spigotConfig.mushroomModifier * 25)) == 0) { // Spigot            int i = 5;
             int i = 5;
             boolean flag = true;
 
diff --git a/src/main/java/net/minecraft/server/BlockMycel.java b/src/main/java/net/minecraft/server/BlockMycel.java
index dcdc535ff..f5648b8c8 100644
--- a/src/main/java/net/minecraft/server/BlockMycel.java
+++ b/src/main/java/net/minecraft/server/BlockMycel.java
@@ -1,12 +1,14 @@
 package net.minecraft.server;
 
-import java.util.Random;
-
-// CraftBukkit start
+import net.jafama.FastMath;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.event.block.BlockFadeEvent;
 import org.bukkit.event.block.BlockSpreadEvent;
+
+import java.util.Random;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class BlockMycel extends Block {
@@ -44,7 +46,7 @@ public class BlockMycel extends Block {
                 // CraftBukkit end
             } else {
                 if (world.getLightLevel(blockposition.up()) >= 9) {
-                    for (int i = 0; i < Math.min(4, Math.max(20, (int) (4 * 100F / world.growthOdds))); ++i) { // Spigot
+                    for (int i = 0; i < FastMath.min(4, FastMath.max(20, (int) (4 * 100F / world.growthOdds))); ++i) { // Spigot
                         BlockPosition blockposition1 = blockposition.a(random.nextInt(3) - 1, random.nextInt(5) - 3, random.nextInt(3) - 1);
                         IBlockData iblockdata1 = world.getType(blockposition1);
                         Block block = world.getType(blockposition1.up()).getBlock();
diff --git a/src/main/java/net/minecraft/server/BlockNetherWart.java b/src/main/java/net/minecraft/server/BlockNetherWart.java
index ca6c691a2..e3bf74666 100644
--- a/src/main/java/net/minecraft/server/BlockNetherWart.java
+++ b/src/main/java/net/minecraft/server/BlockNetherWart.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+
 import java.util.Random;
 
 public class BlockNetherWart extends BlockPlant {
@@ -27,7 +29,7 @@ public class BlockNetherWart extends BlockPlant {
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         int i = (Integer) iblockdata.get(BlockNetherWart.AGE);
 
-        if (i < 3 && random.nextInt(Math.max(1, (int) world.growthOdds / world.spigotConfig.wartModifier * 10)) == 0) { // Spigot
+        if (i < 3 && random.nextInt(FastMath.max(1, (int) world.growthOdds / world.spigotConfig.wartModifier * 10)) == 0) { // Spigot
             iblockdata = iblockdata.set(BlockNetherWart.AGE, i + 1);
             // world.setTypeAndData(blockposition, iblockdata, 2); // CraftBukkit
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(iblockdata)); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/BlockSapling.java b/src/main/java/net/minecraft/server/BlockSapling.java
index ae53e1e44..06491425f 100644
--- a/src/main/java/net/minecraft/server/BlockSapling.java
+++ b/src/main/java/net/minecraft/server/BlockSapling.java
@@ -1,14 +1,15 @@
 package net.minecraft.server;
 
-import java.util.Random;
-
-// CraftBukkit start
-import java.util.List;
-
+import net.jafama.FastMath;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
 import org.bukkit.event.world.StructureGrowEvent;
+
+import java.util.List;
+import java.util.Random;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class BlockSapling extends BlockPlant implements IBlockFragilePlantElement {
@@ -32,7 +33,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
             super.b(world, blockposition, iblockdata, random);
-            if (world.getLightLevel(blockposition.up()) >= 9 && (random.nextInt(Math.max(2, (int) ((world.growthOdds / world.spigotConfig.saplingModifier * 7) + 0.5F))) == 0)) { // Spigot) {
+            if (world.getLightLevel(blockposition.up()) >= 9 && (random.nextInt(FastMath.max(2, (int) ((world.growthOdds / world.spigotConfig.saplingModifier * 7) + 0.5F))) == 0)) { // Spigot) {
                 // CraftBukkit start
                 world.captureTreeGeneration = true;
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/BlockVine.java b/src/main/java/net/minecraft/server/BlockVine.java
index 7f53b8f39..6ddde38c0 100644
--- a/src/main/java/net/minecraft/server/BlockVine.java
+++ b/src/main/java/net/minecraft/server/BlockVine.java
@@ -1,10 +1,11 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+
 import java.util.Iterator;
 import java.util.Random;
 
-import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
-
 public class BlockVine extends Block {
 
     public static final BlockStateBoolean UP = BlockStateBoolean.of("up");
@@ -41,6 +42,44 @@ public class BlockVine extends Block {
         return true;
     }
 
+    public static int d(IBlockData iblockdata) {
+        int i = 0;
+        BlockStateBoolean[] ablockstateboolean = BlockVine.Q;
+        int j = ablockstateboolean.length;
+
+        for (BlockStateBoolean blockstateboolean : ablockstateboolean) {
+            if (iblockdata.get(blockstateboolean)) {
+                ++i;
+            }
+        }
+
+        return i;
+    }
+
+    public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        return null;
+    }
+
+    public boolean canPlace(World world, BlockPosition blockposition, EnumDirection enumdirection) {
+        switch (BlockVine.SyntheticClass_1.a[enumdirection.ordinal()]) {
+            case 1:
+                return this.c(world.getType(blockposition.up()).getBlock());
+
+            case 2:
+            case 3:
+            case 4:
+            case 5:
+                return this.c(world.getType(blockposition.shift(enumdirection.opposite())).getBlock());
+
+            default:
+                return false;
+        }
+    }
+
+    private boolean c(Block block) {
+        return block.d() && block.material.isSolid();
+    }
+
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
         float f = 0.0625F;
         float f1 = 1.0F;
@@ -51,8 +90,8 @@ public class BlockVine extends Block {
         float f6 = 0.0F;
         boolean flag = false;
 
-        if ((Boolean) iblockaccess.getType(blockposition).get(BlockVine.WEST)) {
-            f4 = Math.max(f4, 0.0625F);
+        if (iblockaccess.getType(blockposition).get(BlockVine.WEST)) {
+            f4 = FastMath.max(f4, 0.0625F);
             f1 = 0.0F;
             f2 = 0.0F;
             f5 = 1.0F;
@@ -61,8 +100,8 @@ public class BlockVine extends Block {
             flag = true;
         }
 
-        if ((Boolean) iblockaccess.getType(blockposition).get(BlockVine.EAST)) {
-            f1 = Math.min(f1, 0.9375F);
+        if (iblockaccess.getType(blockposition).get(BlockVine.EAST)) {
+            f1 = FastMath.min(f1, 0.9375F);
             f4 = 1.0F;
             f2 = 0.0F;
             f5 = 1.0F;
@@ -71,8 +110,8 @@ public class BlockVine extends Block {
             flag = true;
         }
 
-        if ((Boolean) iblockaccess.getType(blockposition).get(BlockVine.NORTH)) {
-            f6 = Math.max(f6, 0.0625F);
+        if (iblockaccess.getType(blockposition).get(BlockVine.NORTH)) {
+            f6 = FastMath.max(f6, 0.0625F);
             f3 = 0.0F;
             f1 = 0.0F;
             f4 = 1.0F;
@@ -81,8 +120,8 @@ public class BlockVine extends Block {
             flag = true;
         }
 
-        if ((Boolean) iblockaccess.getType(blockposition).get(BlockVine.SOUTH)) {
-            f3 = Math.min(f3, 0.9375F);
+        if (iblockaccess.getType(blockposition).get(BlockVine.SOUTH)) {
+            f3 = FastMath.min(f3, 0.9375F);
             f6 = 1.0F;
             f1 = 0.0F;
             f4 = 1.0F;
@@ -92,7 +131,7 @@ public class BlockVine extends Block {
         }
 
         if (!flag && this.c(iblockaccess.getType(blockposition.up()).getBlock())) {
-            f2 = Math.min(f2, 0.9375F);
+            f2 = FastMath.min(f2, 0.9375F);
             f5 = 1.0F;
             f1 = 0.0F;
             f4 = 1.0F;
@@ -103,28 +142,12 @@ public class BlockVine extends Block {
         this.a(f1, f2, f3, f4, f5, f6);
     }
 
-    public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        return null;
-    }
-
-    public boolean canPlace(World world, BlockPosition blockposition, EnumDirection enumdirection) {
-        switch (BlockVine.SyntheticClass_1.a[enumdirection.ordinal()]) {
-        case 1:
-            return this.c(world.getType(blockposition.up()).getBlock());
-
-        case 2:
-        case 3:
-        case 4:
-        case 5:
-            return this.c(world.getType(blockposition.shift(enumdirection.opposite())).getBlock());
-
-        default:
-            return false;
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        if (!world.isClientSide && !this.e(world, blockposition, iblockdata)) {
+            this.b(world, blockposition, iblockdata, 0);
+            world.setAir(blockposition);
         }
-    }
 
-    private boolean c(Block block) {
-        return block.d() && block.material.isSolid();
     }
 
     private boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -133,10 +156,10 @@ public class BlockVine extends Block {
         for (EnumDirection enumdirection : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
             BlockStateBoolean blockstateboolean = getDirection(enumdirection);
 
-            if ((Boolean) iblockdata.get(blockstateboolean) && !this.c(world.getType(blockposition.shift(enumdirection)).getBlock())) {
+            if (iblockdata.get(blockstateboolean) && !this.c(world.getType(blockposition.shift(enumdirection)).getBlock())) {
                 IBlockData iblockdata2 = world.getType(blockposition.up());
 
-                if (iblockdata2.getBlock() != this || !(Boolean) iblockdata2.get(blockstateboolean)) {
+                if (iblockdata2.getBlock() != this || !iblockdata2.get(blockstateboolean)) {
                     iblockdata = iblockdata.set(blockstateboolean, Boolean.FALSE);
                 }
             }
@@ -153,14 +176,34 @@ public class BlockVine extends Block {
         }
     }
 
-    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        if (!world.isClientSide && !this.e(world, blockposition, iblockdata)) {
-            this.b(world, blockposition, iblockdata, 0);
-            world.setAir(blockposition);
+    public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
+        IBlockData iblockdata = this.getBlockData().set(BlockVine.UP, Boolean.FALSE).set(BlockVine.NORTH, Boolean.FALSE).set(BlockVine.EAST, Boolean.FALSE).set(BlockVine.SOUTH, Boolean.FALSE).set(BlockVine.WEST, Boolean.FALSE);
+
+        return enumdirection.k().c() ? iblockdata.set(getDirection(enumdirection.opposite()), Boolean.TRUE) : iblockdata;
+    }
+
+    public Item getDropType(IBlockData iblockdata, Random random, int i) {
+        return null;
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+
+    public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, TileEntity tileentity) {
+        if (!world.isClientSide && entityhuman.bZ() != null && entityhuman.bZ().getItem() == Items.SHEARS) {
+            entityhuman.b(StatisticList.MINE_BLOCK_COUNT[Block.getId(this)]);
+            a(world, blockposition, new ItemStack(Blocks.VINE, 1, 0));
+        } else {
+            super.a(world, entityhuman, blockposition, iblockdata, tileentity);
         }
 
     }
 
+    public IBlockData fromLegacyData(int i) {
+        return this.getBlockData().set(BlockVine.SOUTH, (i & 1) > 0).set(BlockVine.WEST, (i & 2) > 0).set(BlockVine.NORTH, (i & 4) > 0).set(BlockVine.EAST, (i & 8) > 0);
+    }
+
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
             if (world.random.nextInt(4) == 0) {
@@ -198,7 +241,7 @@ public class BlockVine extends Block {
                             }
                         }
 
-                        if ((Boolean) iblockdata1.get(BlockVine.NORTH) || (Boolean) iblockdata1.get(BlockVine.EAST) || (Boolean) iblockdata1.get(BlockVine.SOUTH) || (Boolean) iblockdata1.get(BlockVine.WEST)) {
+                        if (iblockdata1.get(BlockVine.NORTH) || iblockdata1.get(BlockVine.EAST) || iblockdata1.get(BlockVine.SOUTH) || iblockdata1.get(BlockVine.WEST)) {
                             // CraftBukkit start - Call BlockSpreadEvent
                             // world.setTypeAndData(blockposition1, iblockdata1, 2);
                             org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -211,7 +254,7 @@ public class BlockVine extends Block {
                 } else {
                     BlockPosition blockposition2;
 
-                    if (enumdirection.k().c() && !(Boolean) iblockdata.get(getDirection(enumdirection))) {
+                    if (enumdirection.k().c() && !iblockdata.get(getDirection(enumdirection))) {
                         if (!flag) {
                             blockposition2 = blockposition.shift(enumdirection);
                             Block block = world.getType(blockposition2).getBlock();
@@ -219,8 +262,8 @@ public class BlockVine extends Block {
                             if (block.material == Material.AIR) {
                                 enumdirection1 = enumdirection.e();
                                 EnumDirection enumdirection2 = enumdirection.f();
-                                boolean flag1 = (Boolean) iblockdata.get(getDirection(enumdirection1));
-                                boolean flag2 = (Boolean) iblockdata.get(getDirection(enumdirection2));
+                                boolean flag1 = iblockdata.get(getDirection(enumdirection1));
+                                boolean flag2 = iblockdata.get(getDirection(enumdirection2));
                                 BlockPosition blockposition3 = blockposition2.shift(enumdirection1);
                                 BlockPosition blockposition4 = blockposition2.shift(enumdirection2);
 
@@ -272,7 +315,7 @@ public class BlockVine extends Block {
                                     }
                                 }
 
-                                if ((Boolean) iblockdata3.get(BlockVine.NORTH) || (Boolean) iblockdata3.get(BlockVine.EAST) || (Boolean) iblockdata3.get(BlockVine.SOUTH) || (Boolean) iblockdata3.get(BlockVine.WEST)) {
+                                if (iblockdata3.get(BlockVine.NORTH) || iblockdata3.get(BlockVine.EAST) || iblockdata3.get(BlockVine.SOUTH) || iblockdata3.get(BlockVine.WEST)) {
                                     // CraftBukkit start - Call BlockSpreadEvent
                                     // world.setTypeAndData(blockposition2, iblockdata3, 2);
                                     org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -288,12 +331,12 @@ public class BlockVine extends Block {
                                     enumdirection3 = (EnumDirection) iterator1.next();
                                     BlockStateBoolean blockstateboolean = getDirection(enumdirection3);
 
-                                    if (random.nextBoolean() && (Boolean) iblockdata.get(blockstateboolean)) {
+                                    if (random.nextBoolean() && iblockdata.get(blockstateboolean)) {
                                         iblockdata3 = iblockdata3.set(blockstateboolean, Boolean.TRUE);
                                     }
                                 }
 
-                                if ((Boolean) iblockdata3.get(BlockVine.NORTH) || (Boolean) iblockdata3.get(BlockVine.EAST) || (Boolean) iblockdata3.get(BlockVine.SOUTH) || (Boolean) iblockdata3.get(BlockVine.WEST)) {
+                                if (iblockdata3.get(BlockVine.NORTH) || iblockdata3.get(BlockVine.EAST) || iblockdata3.get(BlockVine.SOUTH) || iblockdata3.get(BlockVine.WEST)) {
                                     world.setTypeAndData(blockposition2, iblockdata3, 2);
                                 }
                             }
@@ -305,56 +348,6 @@ public class BlockVine extends Block {
         }
     }
 
-    public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
-        IBlockData iblockdata = this.getBlockData().set(BlockVine.UP, Boolean.FALSE).set(BlockVine.NORTH, Boolean.FALSE).set(BlockVine.EAST, Boolean.FALSE).set(BlockVine.SOUTH, Boolean.FALSE).set(BlockVine.WEST, Boolean.FALSE);
-
-        return enumdirection.k().c() ? iblockdata.set(getDirection(enumdirection.opposite()), Boolean.TRUE) : iblockdata;
-    }
-
-    public Item getDropType(IBlockData iblockdata, Random random, int i) {
-        return null;
-    }
-
-    public int a(Random random) {
-        return 0;
-    }
-
-    public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, TileEntity tileentity) {
-        if (!world.isClientSide && entityhuman.bZ() != null && entityhuman.bZ().getItem() == Items.SHEARS) {
-            entityhuman.b(StatisticList.MINE_BLOCK_COUNT[Block.getId(this)]);
-            a(world, blockposition, new ItemStack(Blocks.VINE, 1, 0));
-        } else {
-            super.a(world, entityhuman, blockposition, iblockdata, tileentity);
-        }
-
-    }
-
-    public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockVine.SOUTH, (i & 1) > 0).set(BlockVine.WEST, (i & 2) > 0).set(BlockVine.NORTH, (i & 4) > 0).set(BlockVine.EAST, (i & 8) > 0);
-    }
-
-    public int toLegacyData(IBlockData iblockdata) {
-        int i = 0;
-
-        if ((Boolean) iblockdata.get(BlockVine.SOUTH)) {
-            i |= 1;
-        }
-
-        if ((Boolean) iblockdata.get(BlockVine.WEST)) {
-            i |= 2;
-        }
-
-        if ((Boolean) iblockdata.get(BlockVine.NORTH)) {
-            i |= 4;
-        }
-
-        if ((Boolean) iblockdata.get(BlockVine.EAST)) {
-            i |= 8;
-        }
-
-        return i;
-    }
-
     protected BlockStateList getStateList() {
         return new BlockStateList(this, BlockVine.UP, BlockVine.NORTH, BlockVine.EAST, BlockVine.SOUTH, BlockVine.WEST);
     }
@@ -381,15 +374,23 @@ public class BlockVine extends Block {
         }
     }
 
-    public static int d(IBlockData iblockdata) {
+    public int toLegacyData(IBlockData iblockdata) {
         int i = 0;
-        BlockStateBoolean[] ablockstateboolean = BlockVine.Q;
-        int j = ablockstateboolean.length;
 
-        for (BlockStateBoolean blockstateboolean : ablockstateboolean) {
-            if ((Boolean) iblockdata.get(blockstateboolean)) {
-                ++i;
-            }
+        if (iblockdata.get(BlockVine.SOUTH)) {
+            i |= 1;
+        }
+
+        if (iblockdata.get(BlockVine.WEST)) {
+            i |= 2;
+        }
+
+        if (iblockdata.get(BlockVine.NORTH)) {
+            i |= 4;
+        }
+
+        if (iblockdata.get(BlockVine.EAST)) {
+            i |= 8;
         }
 
         return i;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 65d5ff8f5..494b779fb 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+
 import java.util.List;
 import java.util.Random;
 
@@ -237,7 +239,7 @@ public class ChunkProviderHell implements IChunkProvider {
         int l1;
 
         for (l1 = 0; l1 < i1; ++l1) {
-            adouble1[l1] = Math.cos((double) l1 * 3.141592653589793D * 6.0D / (double) i1) * 2.0D;
+            adouble1[l1] = FastMath.cos((double) l1 * 3.141592653589793D * 6.0D / (double) i1) * 2.0D;
             double d2 = (double) l1;
 
             if (l1 > i1 / 2) {
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
index c8327c757..d697d929d 100644
--- a/src/main/java/net/minecraft/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -2,14 +2,9 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import net.jafama.FastMath;
+
+import java.util.*;
 
 public class CommandScoreboard extends CommandAbstract {
 
@@ -821,14 +816,14 @@ public class CommandScoreboard extends CommandAbstract {
                         scoreboardscore.setScore(scoreboardscore1.getScore());
                         break;
                     case "<":
-                        scoreboardscore.setScore(Math.min(scoreboardscore.getScore(), scoreboardscore1.getScore()));
+                        scoreboardscore.setScore(FastMath.min(scoreboardscore.getScore(), scoreboardscore1.getScore()));
                         break;
                     case ">":
-                        scoreboardscore.setScore(Math.max(scoreboardscore.getScore(), scoreboardscore1.getScore()));
+                        scoreboardscore.setScore(FastMath.max(scoreboardscore.getScore(), scoreboardscore1.getScore()));
                         break;
                     default:
                         if (!s1.equals("><")) {
-                            throw new CommandException("commands.scoreboard.players.operation.invalidOperation", new Object[]{s1});
+                            throw new CommandException("commands.scoreboard.players.operation.invalidOperation", s1);
                         }
 
                         int j = scoreboardscore.getScore();
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index 1f3c5c192..a85e5ffef 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -3,12 +3,9 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
+import net.jafama.FastMath;
+
+import java.util.*;
 
 public class CommandSpreadPlayers extends CommandAbstract {
 
@@ -128,7 +125,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
                         CommandSpreadPlayers.Location2D commandspreadplayers_location2d3 = acommandspreadplayers_location2d[l];
                         double d6 = commandspreadplayers_location2d2.a(commandspreadplayers_location2d3);
 
-                        d5 = Math.min(d6, d5);
+                        d5 = FastMath.min(d6, d5);
                         if (d6 < d0) {
                             ++j;
                             commandspreadplayers_location2d1.a += commandspreadplayers_location2d3.a - commandspreadplayers_location2d2.a;
@@ -205,7 +202,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
                 if (commandspreadplayers_location2d != location2D) {
                     double d2 = commandspreadplayers_location2d.a(location2D);
 
-                    d1 = Math.min(d2, d1);
+                    d1 = FastMath.min(d2, d1);
                 }
             }
 
@@ -256,7 +253,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             double d0 = this.a - commandspreadplayers_location2d.a;
             double d1 = this.b - commandspreadplayers_location2d.b;
 
-            return Math.sqrt(d0 * d0 + d1 * d1);
+            return FastMath.sqrt(d0 * d0 + d1 * d1);
         }
 
         void a() {
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index e144deca2..6d980e3d1 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -2,20 +2,17 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-
-// CraftBukkit start
-import java.util.HashMap;
-import java.util.Map;
+import net.jafama.FastMath;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.Event.Result;
 import org.bukkit.event.inventory.InventoryDragEvent;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryView;
+
+import java.util.*;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public abstract class Container {
@@ -115,6 +112,68 @@ public abstract class Container {
         return slot != null ? slot.getItem() : null;
     }
 
+    public static int b(IInventory iinventory) {
+        if (iinventory == null) {
+            return 0;
+        } else {
+            int i = 0;
+            float f = 0.0F;
+
+            for (int j = 0; j < iinventory.getSize(); ++j) {
+                ItemStack itemstack = iinventory.getItem(j);
+
+                if (itemstack != null) {
+                    f += (float) itemstack.count / (float) FastMath.min(iinventory.getMaxStackSize(), itemstack.getMaxStackSize());
+                    ++i;
+                }
+            }
+
+            f /= (float) iinventory.getSize();
+            return MathHelper.d(f * 14.0F) + (i > 0 ? 1 : 0);
+        }
+    }
+
+    public boolean a(ItemStack itemstack, Slot slot) {
+        return true;
+    }
+
+    protected void a(int i, int j, boolean flag, EntityHuman entityhuman) {
+        this.clickItem(i, j, 1, entityhuman);
+    }
+
+    public void b(EntityHuman entityhuman) {
+        PlayerInventory playerinventory = entityhuman.inventory;
+
+        if (playerinventory.getCarried() != null) {
+            entityhuman.drop(playerinventory.getCarried(), false);
+            playerinventory.setCarried(null);
+        }
+
+    }
+
+    public void a(IInventory iinventory) {
+        this.b();
+    }
+
+    public void setItem(int i, ItemStack itemstack) {
+        this.getSlot(i).set(itemstack);
+    }
+
+    public boolean c(EntityHuman entityhuman) {
+        return !this.i.contains(entityhuman);
+    }
+
+    public void a(EntityHuman entityhuman, boolean flag) {
+        if (flag) {
+            this.i.remove(entityhuman);
+        } else {
+            this.i.add(entityhuman);
+        }
+
+    }
+
+    public abstract boolean a(EntityHuman entityhuman);
+
     public ItemStack clickItem(int i, int j, int k, EntityHuman entityhuman) {
         ItemStack itemstack = null;
         PlayerInventory playerinventory = entityhuman.inventory;
@@ -331,7 +390,7 @@ public abstract class Container {
                             } else if (itemstack1.getItem() == itemstack4.getItem() && itemstack4.getMaxStackSize() > 1 && (!itemstack1.usesData() || itemstack1.getData() == itemstack4.getData()) && ItemStack.equals(itemstack1, itemstack4)) {
                                 k1 = itemstack1.count;
                                 // CraftBukkit start - itemstack4.getMaxStackSize() -> maxStack
-                                int maxStack = Math.min(itemstack4.getMaxStackSize(), slot2.getMaxStackSize());
+                                int maxStack = FastMath.min(itemstack4.getMaxStackSize(), slot2.getMaxStackSize());
                                 if (k1 > 0 && k1 + itemstack4.count <= maxStack) {
                                     itemstack4.count += k1;
                                     itemstack1 = slot2.a(k1);
@@ -418,7 +477,7 @@ public abstract class Container {
                             Slot slot3 = this.c.get(i2);
 
                             if (slot3.hasItem() && a(slot3, itemstack1, true) && slot3.isAllowed(entityhuman) && this.a(itemstack1, slot3) && (l1 != 0 || slot3.getItem().count != slot3.getItem().getMaxStackSize())) {
-                                int j2 = Math.min(itemstack1.getMaxStackSize() - itemstack1.count, slot3.getItem().count);
+                                int j2 = FastMath.min(itemstack1.getMaxStackSize() - itemstack1.count, slot3.getItem().count);
                                 ItemStack itemstack5 = slot3.a(j2);
 
                                 itemstack1.count += j2;
@@ -439,46 +498,57 @@ public abstract class Container {
         return itemstack;
     }
 
-    public boolean a(ItemStack itemstack, Slot slot) {
-        return true;
+    public static int b(int i) {
+        return i >> 2 & 3;
     }
 
-    protected void a(int i, int j, boolean flag, EntityHuman entityhuman) {
-        this.clickItem(i, j, 1, entityhuman);
+    public static int c(int i) {
+        return i & 3;
     }
 
-    public void b(EntityHuman entityhuman) {
-        PlayerInventory playerinventory = entityhuman.inventory;
-
-        if (playerinventory.getCarried() != null) {
-            entityhuman.drop(playerinventory.getCarried(), false);
-            playerinventory.setCarried(null);
-        }
-
+    public static boolean a(int i, EntityHuman entityhuman) {
+        return i == 0 ? true : (i == 1 ? true : i == 2 && entityhuman.abilities.canInstantlyBuild);
     }
 
-    public void a(IInventory iinventory) {
-        this.b();
+    protected void d() {
+        this.g = 0;
+        this.h.clear();
     }
 
-    public void setItem(int i, ItemStack itemstack) {
-        this.getSlot(i).set(itemstack);
-    }
+    public static boolean a(Slot slot, ItemStack itemstack, boolean flag) {
+        boolean flag1 = slot == null || !slot.hasItem();
 
-    public boolean c(EntityHuman entityhuman) {
-        return !this.i.contains(entityhuman);
+        if (slot != null && slot.hasItem() && itemstack != null && itemstack.doMaterialsMatch(slot.getItem()) && ItemStack.equals(slot.getItem(), itemstack)) {
+            flag1 |= slot.getItem().count + (flag ? 0 : itemstack.count) <= itemstack.getMaxStackSize();
+        }
+
+        return flag1;
     }
 
-    public void a(EntityHuman entityhuman, boolean flag) {
-        if (flag) {
-            this.i.remove(entityhuman);
-        } else {
-            this.i.add(entityhuman);
+    public static void a(Set<Slot> set, int i, ItemStack itemstack, int j) {
+        switch (i) {
+            case 0:
+                itemstack.count = MathHelper.d((float) itemstack.count / (float) set.size());
+                break;
+
+            case 1:
+                itemstack.count = 1;
+                break;
+
+            case 2:
+                itemstack.count = itemstack.getItem().getMaxStackSize();
         }
 
+        itemstack.count += j;
     }
 
-    public abstract boolean a(EntityHuman entityhuman);
+    public boolean b(Slot slot) {
+        return true;
+    }
+
+    public static int a(TileEntity tileentity) {
+        return tileentity instanceof IInventory ? b((IInventory) tileentity) : 0;
+    }
 
     protected boolean a(ItemStack itemstack, int i, int j, boolean flag) {
         boolean flag1 = false;
@@ -499,7 +569,7 @@ public abstract class Container {
                     int l = itemstack1.count + itemstack.count;
 
                     // CraftBukkit start - itemstack.getMaxStackSize() -> maxStack
-                    int maxStack = Math.min(itemstack.getMaxStackSize(), slot.getMaxStackSize());
+                    int maxStack = FastMath.min(itemstack.getMaxStackSize(), slot.getMaxStackSize());
                     if (l <= maxStack) {
                         itemstack.count = 0;
                         itemstack1.count = l;
@@ -550,77 +620,4 @@ public abstract class Container {
 
         return flag1;
     }
-
-    public static int b(int i) {
-        return i >> 2 & 3;
-    }
-
-    public static int c(int i) {
-        return i & 3;
-    }
-
-    public static boolean a(int i, EntityHuman entityhuman) {
-        return i == 0 ? true : (i == 1 ? true : i == 2 && entityhuman.abilities.canInstantlyBuild);
-    }
-
-    protected void d() {
-        this.g = 0;
-        this.h.clear();
-    }
-
-    public static boolean a(Slot slot, ItemStack itemstack, boolean flag) {
-        boolean flag1 = slot == null || !slot.hasItem();
-
-        if (slot != null && slot.hasItem() && itemstack != null && itemstack.doMaterialsMatch(slot.getItem()) && ItemStack.equals(slot.getItem(), itemstack)) {
-            flag1 |= slot.getItem().count + (flag ? 0 : itemstack.count) <= itemstack.getMaxStackSize();
-        }
-
-        return flag1;
-    }
-
-    public static void a(Set<Slot> set, int i, ItemStack itemstack, int j) {
-        switch (i) {
-        case 0:
-            itemstack.count = MathHelper.d((float) itemstack.count / (float) set.size());
-            break;
-
-        case 1:
-            itemstack.count = 1;
-            break;
-
-        case 2:
-            itemstack.count = itemstack.getItem().getMaxStackSize();
-        }
-
-        itemstack.count += j;
-    }
-
-    public boolean b(Slot slot) {
-        return true;
-    }
-
-    public static int a(TileEntity tileentity) {
-        return tileentity instanceof IInventory ? b((IInventory) tileentity) : 0;
-    }
-
-    public static int b(IInventory iinventory) {
-        if (iinventory == null) {
-            return 0;
-        } else {
-            int i = 0;
-            float f = 0.0F;
-
-            for (int j = 0; j < iinventory.getSize(); ++j) {
-                ItemStack itemstack = iinventory.getItem(j);
-
-                if (itemstack != null) {
-                    f += (float) itemstack.count / (float) Math.min(iinventory.getMaxStackSize(), itemstack.getMaxStackSize());
-                    ++i;
-                }
-            }
-
-            f /= (float) iinventory.getSize();
-            return MathHelper.d(f * 14.0F) + (i > 0 ? 1 : 0);
-        }
-    }
 }
diff --git a/src/main/java/net/minecraft/server/ContainerAnvil.java b/src/main/java/net/minecraft/server/ContainerAnvil.java
index 7cbe406ce..9ef534a49 100644
--- a/src/main/java/net/minecraft/server/ContainerAnvil.java
+++ b/src/main/java/net/minecraft/server/ContainerAnvil.java
@@ -1,12 +1,12 @@
 package net.minecraft.server;
 
-import java.util.Iterator;
-import java.util.Map;
+import net.jafama.FastMath;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
-import org.bukkit.craftbukkit.inventory.CraftInventoryView; // CraftBukkit
+import java.util.Map;
 
 public class ContainerAnvil extends Container {
 
@@ -141,7 +141,7 @@ public class ContainerAnvil extends Container {
                 int i1;
 
                 if (itemstack1.e() && itemstack1.getItem().a(itemstack, itemstack2)) {
-                    k = Math.min(itemstack1.h(), itemstack1.j() / 4);
+                    k = FastMath.min(itemstack1.h(), itemstack1.j() / 4);
                     if (k <= 0) {
                         this.g.setItem(0, null);
                         this.a = 0;
@@ -152,7 +152,7 @@ public class ContainerAnvil extends Container {
                         i1 = itemstack1.h() - k;
                         itemstack1.setData(i1);
                         ++i;
-                        k = Math.min(itemstack1.h(), itemstack1.j() / 4);
+                        k = FastMath.min(itemstack1.h(), itemstack1.j() / 4);
                     }
 
                     this.k = l;
@@ -197,7 +197,7 @@ public class ContainerAnvil extends Container {
                                 ++l1;
                                 i2 = l1;
                             } else {
-                                i2 = Math.max(l1, j1);
+                                i2 = FastMath.max(l1, j1);
                             }
 
                             l1 = i2;
@@ -250,7 +250,7 @@ public class ContainerAnvil extends Container {
                                 }
 
                                 if (flag7) {
-                                    k2 = Math.max(1, k2 / 2);
+                                    k2 = FastMath.max(1, k2 / 2);
                                 }
 
                                 i += k2 * l1;
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index b36f95bc9..9af546c39 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import co.aikar.timings.SpigotTimings;
 import com.google.common.collect.Lists;
 import dev.lockedthread.LockedSpigotConfig;
+import net.jafama.FastMath;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -448,7 +449,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         BlockPosition blockposition1 = world.getSpawn();
         int i = MathHelper.a(blockposition.getX() - blockposition1.getX());
         int j = MathHelper.a(blockposition.getZ() - blockposition1.getZ());
-        int k = Math.max(i, j);
+        int k = FastMath.max(i, j);
 
         return k <= this.getSpawnProtection();
     }
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 7f2910b45..8e60164d1 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -2,13 +2,9 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
+import net.jafama.FastMath;
+
+import java.util.*;
 
 public class EnchantmentManager {
 
@@ -250,7 +246,7 @@ public class EnchantmentManager {
 
             int l = random.nextInt(8) + 1 + (j >> 1) + random.nextInt(j + 1);
 
-            return i == 0 ? Math.max(l / 3, 1) : (i == 1 ? l * 2 / 3 + 1 : Math.max(l, j * 2));
+            return i == 0 ? FastMath.max(l / 3, 1) : (i == 1 ? l * 2 / 3 + 1 : FastMath.max(l, j * 2));
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 5e67a59f7..6c00afeac 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import co.aikar.timings.SpigotTimings;
 import co.aikar.timings.Timing;
 import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
+import net.jafama.FastMath;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Server;
@@ -27,7 +28,6 @@ import org.bukkit.event.vehicle.VehicleExitEvent;
 import org.bukkit.plugin.PluginManager;
 import org.spigotmc.event.entity.EntityDismountEvent;
 
-import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.UUID;
@@ -459,299 +459,229 @@ public abstract class Entity implements ICommandListener {
         }
     }
 
-
     public void move(double d0, double d1, double d2) {
-        //TODO: Figure out better way
         if (this.loadChunks) {
-            if (this instanceof EntityTNTPrimed) {
-                loadTntChunk();
-            } else {
-                loadChunks(); // PaperSpigot - Load chunks
-            }
+            this.loadChunks();
         }
-
         if (this.noclip) {
             this.a(this.getBoundingBox().c(d0, d1, d2));
             this.recalcPosition();
         } else {
-            // CraftBukkit start - Don't do anything if we aren't moving
-            // We need to do this regardless of whether or not we are moving thanks to portals
             try {
                 this.checkBlockCollisions();
             } catch (Throwable throwable) {
-                CrashReport crashreport = CrashReport.a(throwable, "Checking entity block collision");
-                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being checked for collision");
-
+                final CrashReport crashreport = CrashReport.a(throwable, "Checking entity block collision");
+                final CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being checked for collision");
                 this.appendEntityCrashDetails(crashreportsystemdetails);
                 throw new ReportedException(crashreport);
             }
-            // Check if we're moving
-            if (d0 == 0 && d1 == 0 && d2 == 0 && this.vehicle == null && this.passenger == null) {
+            if (d0 == 0.0 && d1 == 0.0 && d2 == 0.0 && this.vehicle == null && this.passenger == null) {
                 return;
             }
-            // CraftBukkit end
             this.world.methodProfiler.a("move");
-            double d3 = this.locX;
-            double d4 = this.locY;
-            double d5 = this.locZ;
-
+            final double d3 = this.locX;
+            final double d4 = this.locY;
+            final double d5 = this.locZ;
             if (this.H) {
                 this.H = false;
-                d0 *= 0.25D;
-                d1 *= 0.05000000074505806D;
-                d2 *= 0.25D;
-                this.motX = 0.0D;
-                this.motY = 0.0D;
-                this.motZ = 0.0D;
+                d0 *= 0.25;
+                d1 *= 0.05000000074505806;
+                d2 *= 0.25;
+                this.motX = 0.0;
+                this.motY = 0.0;
+                this.motZ = 0.0;
             }
-
             double d6 = d0;
-            double d7 = d1;
+            final double d7 = d1;
             double d8 = d2;
-            boolean flag = this.onGround && this.isSneaking() && this instanceof EntityHuman;
-
+            final boolean flag = this.onGround && this.isSneaking() && this instanceof EntityHuman;
             if (flag) {
-                double d9;
-
-                for (d9 = 0.05D; d0 != 0.0D && this.world.getCubes(this, this.getBoundingBox().c(d0, -1.0D, 0.0D)).isEmpty(); d6 = d0) {
+                final double d9 = 0.05;
+                while (d0 != 0.0) {
+                    if (!this.world.getCubes(this, this.getBoundingBox().c(d0, -1.0, 0.0)).isEmpty()) {
+                        break;
+                    }
                     if (d0 < d9 && d0 >= -d9) {
-                        d0 = 0.0D;
-                    } else if (d0 > 0.0D) {
+                        d0 = 0.0;
+                    } else if (d0 > 0.0) {
                         d0 -= d9;
                     } else {
                         d0 += d9;
                     }
+                    d6 = d0;
                 }
-
-                for (; d2 != 0.0D && this.world.getCubes(this, this.getBoundingBox().c(0.0D, -1.0D, d2)).isEmpty(); d8 = d2) {
+                while (d2 != 0.0) {
+                    if (!this.world.getCubes(this, this.getBoundingBox().c(0.0, -1.0, d2)).isEmpty()) {
+                        break;
+                    }
                     if (d2 < d9 && d2 >= -d9) {
-                        d2 = 0.0D;
-                    } else if (d2 > 0.0D) {
+                        d2 = 0.0;
+                    } else if (d2 > 0.0) {
                         d2 -= d9;
                     } else {
                         d2 += d9;
                     }
+                    d8 = d2;
                 }
-
-                for (; d0 != 0.0D && d2 != 0.0D && this.world.getCubes(this, this.getBoundingBox().c(d0, -1.0D, d2)).isEmpty(); d8 = d2) {
+                while (d0 != 0.0 && d2 != 0.0 && this.world.getCubes(this, this.getBoundingBox().c(d0, -1.0, d2)).isEmpty()) {
                     if (d0 < d9 && d0 >= -d9) {
-                        d0 = 0.0D;
-                    } else if (d0 > 0.0D) {
+                        d0 = 0.0;
+                    } else if (d0 > 0.0) {
                         d0 -= d9;
                     } else {
                         d0 += d9;
                     }
-
                     d6 = d0;
                     if (d2 < d9 && d2 >= -d9) {
-                        d2 = 0.0D;
-                    } else if (d2 > 0.0D) {
+                        d2 = 0.0;
+                    } else if (d2 > 0.0) {
                         d2 -= d9;
                     } else {
                         d2 += d9;
                     }
+                    d8 = d2;
                 }
             }
-
-            // TacoSpigot start - do axis by axis scan if the entity is travelling a large area
-            AxisAlignedBB totalArea = this.getBoundingBox().a(d0, d1, d2);
-            double xLength = totalArea.d - totalArea.a;
-            double yLength = totalArea.e - totalArea.b;
-            double zLength = totalArea.f - totalArea.c;
-            boolean axisScan = this.world.tacoSpigotConfig.optimizeTntMovement && xLength * yLength * zLength > 10;
-
-            List list = this.world.getCubes(this, axisScan ? this.getBoundingBox().a(0, d1, 0) : totalArea);
-            // TacoSpigot end
-
-            AxisAlignedBB axisalignedbb = this.getBoundingBox();
-
-            AxisAlignedBB axisalignedbb1;
-
-            for (Iterator iterator = list.iterator(); iterator.hasNext(); d1 = axisalignedbb1.b(this.getBoundingBox(), d1)) {
-                axisalignedbb1 = (AxisAlignedBB) iterator.next();
-            }
-
-            this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
-            boolean flag1 = this.onGround || d7 != d1 && d7 < 0.0D;
-
-            AxisAlignedBB axisalignedbb2;
-            Iterator iterator1;
-
-            if (this.world.tacoSpigotConfig.fixEastWest && Math.abs(d0) > Math.abs(d2)) { //TacoSpigot - fix east/west cannoning by calculating the z movement before x if the x velocity is greater
-                if (axisScan)
-                    list = this.world.getCubes(this, this.getBoundingBox().a(0, 0, d2)); // TacoSpigot - get z axis blocks
-
-                for (iterator1 = list.iterator(); iterator1.hasNext(); d2 = axisalignedbb2.c(this.getBoundingBox(), d2)) {
-                    axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+            final AxisAlignedBB totalArea = this.getBoundingBox().a(d0, d1, d2);
+            final double xLength = totalArea.d - totalArea.a;
+            final double yLength = totalArea.e - totalArea.b;
+            final double zLength = totalArea.f - totalArea.c;
+            final boolean axisScan = this.world.tacoSpigotConfig.optimizeTntMovement && xLength * yLength * zLength > 10.0;
+            List<AxisAlignedBB> list = this.world.getCubes(this, axisScan ? this.getBoundingBox().a(0.0, d1, 0.0) : totalArea);
+            final AxisAlignedBB axisalignedbb = this.getBoundingBox();
+            for (final AxisAlignedBB axisalignedbb2 : list) {
+                d1 = axisalignedbb2.b(this.getBoundingBox(), d1);
+            }
+            this.a(this.getBoundingBox().c(0.0, d1, 0.0));
+            final boolean flag2 = this.onGround || (d7 != d1 && d7 < 0.0);
+            if (this.world.tacoSpigotConfig.fixEastWest && FastMath.abs(d0) > FastMath.abs(d2)) {
+                if (axisScan) {
+                    list = this.world.getCubes(this, this.getBoundingBox().a(0.0, 0.0, d2));
                 }
-
-                this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
-
-                if (axisScan)
-                    list = this.world.getCubes(this, this.getBoundingBox().a(d0, 0, 0)); // TacoSpigot - get x axis blocks
-
-                for (iterator1 = list.iterator(); iterator1.hasNext(); d0 = axisalignedbb2.a(this.getBoundingBox(), d0)) {
-                    axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+                for (final AxisAlignedBB axisalignedbb3 : list) {
+                    d2 = axisalignedbb3.c(this.getBoundingBox(), d2);
                 }
-
-                this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
-
+                this.a(this.getBoundingBox().c(0.0, 0.0, d2));
+                if (axisScan) {
+                    list = this.world.getCubes(this, this.getBoundingBox().a(d0, 0.0, 0.0));
+                }
+                for (final AxisAlignedBB axisalignedbb3 : list) {
+                    d0 = axisalignedbb3.a(this.getBoundingBox(), d0);
+                }
+                this.a(this.getBoundingBox().c(d0, 0.0, 0.0));
             } else {
-                if (axisScan)
-                    list = this.world.getCubes(this, this.getBoundingBox().a(d0, 0, 0)); // TacoSpigot - get x axis blocks
-
-                for (iterator1 = list.iterator(); iterator1.hasNext(); d0 = axisalignedbb2.a(this.getBoundingBox(), d0)) {
-                    axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+                if (axisScan) {
+                    list = this.world.getCubes(this, this.getBoundingBox().a(d0, 0.0, 0.0));
                 }
-
-                this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
-
-                if (axisScan)
-                    list = this.world.getCubes(this, this.getBoundingBox().a(0, 0, d2)); // TacoSpigot - get z axis blocks
-
-                for (iterator1 = list.iterator(); iterator1.hasNext(); d2 = axisalignedbb2.c(this.getBoundingBox(), d2)) {
-                    axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+                for (final AxisAlignedBB axisalignedbb3 : list) {
+                    d0 = axisalignedbb3.a(this.getBoundingBox(), d0);
                 }
-
-                this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
+                this.a(this.getBoundingBox().c(d0, 0.0, 0.0));
+                if (axisScan) {
+                    list = this.world.getCubes(this, this.getBoundingBox().a(0.0, 0.0, d2));
+                }
+                for (final AxisAlignedBB axisalignedbb3 : list) {
+                    d2 = axisalignedbb3.c(this.getBoundingBox(), d2);
+                }
+                this.a(this.getBoundingBox().c(0.0, 0.0, d2));
             }
-
-            if (this.S > 0.0F && flag1 && (d6 != d0 || d8 != d2)) {
-                double d10 = d0;
-                double d11 = d1;
-                double d12 = d2;
-                AxisAlignedBB axisalignedbb3 = this.getBoundingBox();
-
+            if (this.S > 0.0f && flag2 && (d6 != d0 || d8 != d2)) {
+                final double d10 = d0;
+                final double d11 = d1;
+                final double d12 = d2;
+                final AxisAlignedBB axisalignedbb4 = this.getBoundingBox();
                 this.a(axisalignedbb);
-                d1 = (double) this.S;
-                List list1 = this.world.getCubes(this, this.getBoundingBox().a(d6, d1, d8));
-                AxisAlignedBB axisalignedbb4 = this.getBoundingBox();
-                AxisAlignedBB axisalignedbb5 = axisalignedbb4.a(d6, 0.0D, d8);
+                d1 = this.S;
+                final List<AxisAlignedBB> list2 = this.world.getCubes(this, this.getBoundingBox().a(d6, d1, d8));
+                AxisAlignedBB axisalignedbb5 = this.getBoundingBox();
+                final AxisAlignedBB axisalignedbb6 = axisalignedbb5.a(d6, 0.0, d8);
                 double d13 = d1;
-
-                AxisAlignedBB axisalignedbb6;
-
-                for (Iterator iterator2 = list1.iterator(); iterator2.hasNext(); d13 = axisalignedbb6.b(axisalignedbb5, d13)) {
-                    axisalignedbb6 = (AxisAlignedBB) iterator2.next();
+                for (final AxisAlignedBB axisalignedbb7 : list2) {
+                    d13 = axisalignedbb7.b(axisalignedbb6, d13);
                 }
-
-                axisalignedbb4 = axisalignedbb4.c(0.0D, d13, 0.0D);
+                axisalignedbb5 = axisalignedbb5.c(0.0, d13, 0.0);
                 double d14 = d6;
-
-                AxisAlignedBB axisalignedbb7;
-
-                for (Iterator iterator3 = list1.iterator(); iterator3.hasNext(); d14 = axisalignedbb7.a(axisalignedbb4, d14)) {
-                    axisalignedbb7 = (AxisAlignedBB) iterator3.next();
+                for (final AxisAlignedBB axisalignedbb8 : list2) {
+                    d14 = axisalignedbb8.a(axisalignedbb5, d14);
                 }
-
-                axisalignedbb4 = axisalignedbb4.c(d14, 0.0D, 0.0D);
+                axisalignedbb5 = axisalignedbb5.c(d14, 0.0, 0.0);
                 double d15 = d8;
-
-                AxisAlignedBB axisalignedbb8;
-
-                for (Iterator iterator4 = list1.iterator(); iterator4.hasNext(); d15 = axisalignedbb8.c(axisalignedbb4, d15)) {
-                    axisalignedbb8 = (AxisAlignedBB) iterator4.next();
+                for (final AxisAlignedBB axisalignedbb9 : list2) {
+                    d15 = axisalignedbb9.c(axisalignedbb5, d15);
                 }
-
-                axisalignedbb4 = axisalignedbb4.c(0.0D, 0.0D, d15);
-                AxisAlignedBB axisalignedbb9 = this.getBoundingBox();
+                axisalignedbb5 = axisalignedbb5.c(0.0, 0.0, d15);
+                AxisAlignedBB axisalignedbb10 = this.getBoundingBox();
                 double d16 = d1;
-
-                AxisAlignedBB axisalignedbb10;
-
-                for (Iterator iterator5 = list1.iterator(); iterator5.hasNext(); d16 = axisalignedbb10.b(axisalignedbb9, d16)) {
-                    axisalignedbb10 = (AxisAlignedBB) iterator5.next();
+                for (final AxisAlignedBB axisalignedbb11 : list2) {
+                    d16 = axisalignedbb11.b(axisalignedbb10, d16);
                 }
-
-                axisalignedbb9 = axisalignedbb9.c(0.0D, d16, 0.0D);
+                axisalignedbb10 = axisalignedbb10.c(0.0, d16, 0.0);
                 double d17 = d6;
-
-                AxisAlignedBB axisalignedbb11;
-
-                for (Iterator iterator6 = list1.iterator(); iterator6.hasNext(); d17 = axisalignedbb11.a(axisalignedbb9, d17)) {
-                    axisalignedbb11 = (AxisAlignedBB) iterator6.next();
+                for (final AxisAlignedBB axisalignedbb12 : list2) {
+                    d17 = axisalignedbb12.a(axisalignedbb10, d17);
                 }
-
-                axisalignedbb9 = axisalignedbb9.c(d17, 0.0D, 0.0D);
+                axisalignedbb10 = axisalignedbb10.c(d17, 0.0, 0.0);
                 double d18 = d8;
-
-                AxisAlignedBB axisalignedbb12;
-
-                for (Iterator iterator7 = list1.iterator(); iterator7.hasNext(); d18 = axisalignedbb12.c(axisalignedbb9, d18)) {
-                    axisalignedbb12 = (AxisAlignedBB) iterator7.next();
+                for (final AxisAlignedBB axisalignedbb13 : list2) {
+                    d18 = axisalignedbb13.c(axisalignedbb10, d18);
                 }
-
-                axisalignedbb9 = axisalignedbb9.c(0.0D, 0.0D, d18);
-                double d19 = d14 * d14 + d15 * d15;
-                double d20 = d17 * d17 + d18 * d18;
-
+                axisalignedbb10 = axisalignedbb10.c(0.0, 0.0, d18);
+                final double d19 = d14 * d14 + d15 * d15;
+                final double d20 = d17 * d17 + d18 * d18;
                 if (d19 > d20) {
                     d0 = d14;
                     d2 = d15;
                     d1 = -d13;
-                    this.a(axisalignedbb4);
+                    this.a(axisalignedbb5);
                 } else {
                     d0 = d17;
                     d2 = d18;
                     d1 = -d16;
-                    this.a(axisalignedbb9);
+                    this.a(axisalignedbb10);
                 }
-
-                AxisAlignedBB axisalignedbb13;
-
-                for (Iterator iterator8 = list1.iterator(); iterator8.hasNext(); d1 = axisalignedbb13.b(this.getBoundingBox(), d1)) {
-                    axisalignedbb13 = (AxisAlignedBB) iterator8.next();
+                for (final AxisAlignedBB axisalignedbb14 : list2) {
+                    d1 = axisalignedbb14.b(this.getBoundingBox(), d1);
                 }
-
-                this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
+                this.a(this.getBoundingBox().c(0.0, d1, 0.0));
                 if (d10 * d10 + d12 * d12 >= d0 * d0 + d2 * d2) {
                     d0 = d10;
                     d1 = d11;
                     d2 = d12;
-                    this.a(axisalignedbb3);
+                    this.a(axisalignedbb4);
                 }
             }
-
             this.world.methodProfiler.b();
             this.world.methodProfiler.a("rest");
             this.recalcPosition();
-            this.positionChanged = d6 != d0 || d8 != d2;
-            this.E = d7 != d1;
-            this.onGround = this.E && d7 < 0.0D;
-            this.F = this.positionChanged || this.E;
-            int i = MathHelper.floor(this.locX);
-            int j = MathHelper.floor(this.locY - 0.20000000298023224D);
-            int k = MathHelper.floor(this.locZ);
+            this.positionChanged = (d6 != d0 || d8 != d2);
+            this.E = (d7 != d1);
+            this.onGround = (this.E && d7 < 0.0);
+            this.F = (this.positionChanged || this.E);
+            final int i = MathHelper.floor(this.locX);
+            final int j = MathHelper.floor(this.locY - 0.20000000298023224);
+            final int k = MathHelper.floor(this.locZ);
             BlockPosition blockposition = new BlockPosition(i, j, k);
-            Block block = this.world.getType(blockposition).getBlock();
-
+            net.minecraft.server.Block block = this.world.getType(blockposition).getBlock();
             if (block.getMaterial() == Material.AIR) {
-                Block block1 = this.world.getType(blockposition.down()).getBlock();
-
-                if (block1 instanceof BlockFence || block1 instanceof BlockCobbleWall || block1 instanceof BlockFenceGate) {
-                    block = block1;
+                final net.minecraft.server.Block block2 = this.world.getType(blockposition.down()).getBlock();
+                if (block2 instanceof BlockFence || block2 instanceof BlockCobbleWall || block2 instanceof BlockFenceGate) {
+                    block = block2;
                     blockposition = blockposition.down();
                 }
             }
-
             this.a(d1, this.onGround, block, blockposition);
             if (d6 != d0) {
-                this.motX = 0.0D;
+                this.motX = 0.0;
             }
-
             if (d8 != d2) {
-                this.motZ = 0.0D;
+                this.motZ = 0.0;
             }
-
             if (d7 != d1) {
                 block.a(this.world, this);
             }
-
-            // CraftBukkit start
-            if (positionChanged && getBukkitEntity() instanceof Vehicle) {
-                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+            if (this.positionChanged && this.getBukkitEntity() instanceof Vehicle) {
+                final Vehicle vehicle = (Vehicle) this.getBukkitEntity();
                 org.bukkit.block.Block bl = this.world.getWorld().getBlockAt(MathHelper.floor(this.locX), MathHelper.floor(this.locY), MathHelper.floor(this.locZ));
-
                 if (d6 > d0) {
                     bl = bl.getRelative(BlockFace.EAST);
                 } else if (d6 < d0) {
@@ -761,90 +691,60 @@ public abstract class Entity implements ICommandListener {
                 } else if (d8 < d2) {
                     bl = bl.getRelative(BlockFace.NORTH);
                 }
-
-                VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
-                world.getServer().getPluginManager().callEvent(event);
+                final VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+                this.world.getServer().getPluginManager().callEvent(event);
             }
-            // CraftBukkit end
-
             if (this.s_() && !flag && this.vehicle == null) {
-                double d21 = this.locX - d3;
+                final double d21 = this.locX - d3;
                 double d22 = this.locY - d4;
-                double d23 = this.locZ - d5;
-
+                final double d23 = this.locZ - d5;
                 if (block != Blocks.LADDER) {
-                    d22 = 0.0D;
+                    d22 = 0.0;
                 }
-
-                if (block != null && this.onGround) {
-                    // block.a(this.world, blockposition, this); // CraftBukkit moved down
+                if (block != null) {
                 }
-
-                this.M = (float) ((double) this.M + (double) MathHelper.sqrt(d21 * d21 + d23 * d23) * 0.6D);
-                this.N = (float) ((double) this.N + (double) MathHelper.sqrt(d21 * d21 + d22 * d22 + d23 * d23) * 0.6D);
-                if (this.N > (float) this.h && block.getMaterial() != Material.AIR) {
+                this.M += (float) (MathHelper.sqrt(d21 * d21 + d23 * d23) * 0.6);
+                this.N += (float) (MathHelper.sqrt(d21 * d21 + d22 * d22 + d23 * d23) * 0.6);
+                if (this.N > this.h && block.getMaterial() != Material.AIR) {
                     this.h = (int) this.N + 1;
                     if (this.V()) {
-                        float f = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.35F;
-
-                        if (f > 1.0F) {
-                            f = 1.0F;
+                        float f = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224 + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224) * 0.35f;
+                        if (f > 1.0f) {
+                            f = 1.0f;
                         }
-
-                        this.makeSound(this.P(), f, 1.0F + (getRandom().nextFloat() - getRandom().nextFloat()) * 0.4F);
+                        this.makeSound(this.P(), f, 1.0f + (this.random.nextFloat() - this.random.nextFloat()) * 0.4f);
                     }
-
                     this.a(blockposition, block);
-                    block.a(this.world, blockposition, this); // CraftBukkit moved from above
+                    block.a(this.world, blockposition, this);
                 }
             }
-
-            // CraftBukkit start - Move to the top of the method
-            /*
-            try {
-                this.checkBlockCollisions();
-            } catch (Throwable throwable) {
-                CrashReport crashreport = CrashReport.a(throwable, "Checking entity block collision");
-                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being checked for collision");
-
-                this.appendEntityCrashDetails(crashreportsystemdetails);
-                throw new ReportedException(crashreport);
-            }
-            */
-            // CraftBukkit end
-
-            boolean flag2 = this.U();
-
-            if (this.world.e(this.getBoundingBox().shrink(0.001D, 0.001D, 0.001D))) {
-                this.burn(1);
-                if (!flag2) {
+            final boolean flag3 = this.U();
+            if (this.world.e(this.getBoundingBox().shrink(0.001, 0.001, 0.001))) {
+                this.burn(1.0f);
+                if (!flag3) {
                     ++this.fireTicks;
-                    // CraftBukkit start - Not on fire yet
-                    if (this.fireTicks <= 0) { // Only throw events on the first combust, otherwise it spams
-                        EntityCombustEvent event = new EntityCombustEvent(getBukkitEntity(), 8);
-                        world.getServer().getPluginManager().callEvent(event);
-
-                        if (!event.isCancelled()) {
-                            setOnFire(event.getDuration());
+                    if (this.fireTicks <= 0) {
+                        final EntityCombustEvent event2 = new EntityCombustEvent(this.getBukkitEntity(), 8);
+                        this.world.getServer().getPluginManager().callEvent(event2);
+                        if (!event2.isCancelled()) {
+                            this.setOnFire(event2.getDuration());
                         }
                     } else {
-                        // CraftBukkit end
                         this.setOnFire(8);
                     }
                 }
             } else if (this.fireTicks <= 0) {
                 this.fireTicks = -this.maxFireTicks;
             }
-
-            if (flag2 && this.fireTicks > 0) {
-                this.makeSound("random.fizz", 0.7F, 1.6F + (getRandom().nextFloat() - getRandom().nextFloat()) * 0.4F);
+            if (flag3 && this.fireTicks > 0) {
+                this.makeSound("random.fizz", 0.7f, 1.6f + (this.random.nextFloat() - this.random.nextFloat()) * 0.4f);
                 this.fireTicks = -this.maxFireTicks;
             }
-
             this.world.methodProfiler.b();
         }
     }
 
+
     private void recalcPosition() {
         this.locX = (this.getBoundingBox().a + this.getBoundingBox().d) / 2.0D;
         this.locY = this.getBoundingBox().b;
@@ -1347,15 +1247,15 @@ public abstract class Entity implements ICommandListener {
             this.motZ = nbttaglist1.d(2);
 
             /* CraftBukkit start - Moved section down
-            if (Math.abs(this.motX) > 10.0D) {
+            if (FastMath.abs(this.motX) > 10.0D) {
                 this.motX = 0.0D;
             }
 
-            if (Math.abs(this.motY) > 10.0D) {
+            if (FastMath.abs(this.motY) > 10.0D) {
                 this.motY = 0.0D;
             }
 
-            if (Math.abs(this.motZ) > 10.0D) {
+            if (FastMath.abs(this.motZ) > 10.0D) {
                 this.motZ = 0.0D;
             }
             // CraftBukkit end */
@@ -1410,15 +1310,15 @@ public abstract class Entity implements ICommandListener {
 
             // CraftBukkit start - Exempt Vehicles from notch's sanity check
             if (!(getBukkitEntity() instanceof Vehicle)) {
-                if (Math.abs(this.motX) > 10.0D) {
+                if (FastMath.abs(this.motX) > 10.0D) {
                     this.motX = 0.0D;
                 }
 
-                if (Math.abs(this.motY) > 10.0D) {
+                if (FastMath.abs(this.motY) > 10.0D) {
                     this.motY = 0.0D;
                 }
 
-                if (Math.abs(this.motZ) > 10.0D) {
+                if (FastMath.abs(this.motZ) > 10.0D) {
                     this.motZ = 0.0D;
                 }
             }
@@ -1740,7 +1640,7 @@ public abstract class Entity implements ICommandListener {
                 double d0 = shapedetector_shapedetectorcollection.b().k() == EnumDirection.EnumAxis.X ? (double) shapedetector_shapedetectorcollection.a().getZ() : (double) shapedetector_shapedetectorcollection.a().getX();
                 double d1 = shapedetector_shapedetectorcollection.b().k() == EnumDirection.EnumAxis.X ? this.locZ : this.locX;
 
-                d1 = Math.abs(MathHelper.c(d1 - (double) (shapedetector_shapedetectorcollection.b().e().c() == EnumDirection.EnumAxisDirection.NEGATIVE ? 1 : 0), d0, d0 - (double) shapedetector_shapedetectorcollection.d()));
+                d1 = FastMath.abs(MathHelper.c(d1 - (double) (shapedetector_shapedetectorcollection.b().e().c() == EnumDirection.EnumAxisDirection.NEGATIVE ? 1 : 0), d0, d0 - (double) shapedetector_shapedetectorcollection.d()));
                 double d2 = MathHelper.c(this.locY - 1.0D, (double) shapedetector_shapedetectorcollection.a().getY(), (double) (shapedetector_shapedetectorcollection.a().getY() - shapedetector_shapedetectorcollection.e()));
 
                 this.ao = new Vec3D(d1, d2, 0.0D);
diff --git a/src/main/java/net/minecraft/server/EntityBat.java b/src/main/java/net/minecraft/server/EntityBat.java
index ec8c3a5c9..921a4ded6 100644
--- a/src/main/java/net/minecraft/server/EntityBat.java
+++ b/src/main/java/net/minecraft/server/EntityBat.java
@@ -6,6 +6,7 @@
 package net.minecraft.server;
 
 import dev.lockedthread.LockedSpigotConfig;
+import net.jafama.FastMath;
 
 import java.util.Calendar;
 
@@ -115,9 +116,9 @@ public class EntityBat extends EntityAmbient {
             double var3 = (double) this.a.getX() + 0.5D - this.locX;
             double var5 = (double) this.a.getY() + 0.1D - this.locY;
             double var7 = (double) this.a.getZ() + 0.5D - this.locZ;
-            this.motX += (Math.signum(var3) * 0.5D - this.motX) * 0.10000000149011612D;
-            this.motY += (Math.signum(var5) * 0.699999988079071D - this.motY) * 0.10000000149011612D;
-            this.motZ += (Math.signum(var7) * 0.5D - this.motZ) * 0.10000000149011612D;
+            this.motX += (FastMath.signum(var3) * 0.5D - this.motX) * 0.10000000149011612D;
+            this.motY += (FastMath.signum(var5) * 0.699999988079071D - this.motY) * 0.10000000149011612D;
+            this.motZ += (FastMath.signum(var7) * 0.5D - this.motZ) * 0.10000000149011612D;
             float var9 = (float) (MathHelper.b(this.motZ, this.motX) * 180.0D / 3.1415927410125732D) - 90.0F;
             float var10 = MathHelper.g(var9 - this.yaw);
             this.ba = 0.5F;
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 8ae179427..d29210ca6 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -1,8 +1,6 @@
 package net.minecraft.server;
 
-import java.util.List;
-
-// CraftBukkit start
+import net.jafama.FastMath;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.entity.Vehicle;
@@ -10,6 +8,10 @@ import org.bukkit.event.vehicle.VehicleDamageEvent;
 import org.bukkit.event.vehicle.VehicleDestroyEvent;
 import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
 import org.bukkit.event.vehicle.VehicleMoveEvent;
+
+import java.util.List;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class EntityBoat extends Entity {
@@ -182,14 +184,14 @@ public class EntityBoat extends Entity {
             }
         }
 
-        double d3 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+        double d3 = FastMath.sqrt(this.motX * this.motX + this.motZ * this.motZ);
         double d4;
         double d5;
         int j;
 
         if (d3 > 0.2975D) {
-            d4 = Math.cos((double) this.yaw * 3.141592653589793D / 180.0D);
-            d5 = Math.sin((double) this.yaw * 3.141592653589793D / 180.0D);
+            d4 = FastMath.cos((double) this.yaw * 3.141592653589793D / 180.0D);
+            d5 = FastMath.sin((double) this.yaw * 3.141592653589793D / 180.0D);
 
             for (j = 0; (double) j < 1.0D + d3 * 60.0D; ++j) {
                 double d6 = (double) (this.getRandom().nextFloat() * 2.0F - 1.0F);
@@ -255,8 +257,8 @@ public class EntityBoat extends Entity {
                 EntityLiving entityliving = (EntityLiving) this.passenger;
                 float f = this.passenger.yaw + -entityliving.aZ * 90.0F;
 
-                this.motX += -Math.sin((double) (f * 3.1415927F / 180.0F)) * this.b * (double) entityliving.ba * 0.05000000074505806D;
-                this.motZ += Math.cos((double) (f * 3.1415927F / 180.0F)) * this.b * (double) entityliving.ba * 0.05000000074505806D;
+                this.motX += -FastMath.sin((double) (f * 3.1415927F / 180.0F)) * this.b * (double) entityliving.ba * 0.05000000074505806D;
+                this.motZ += FastMath.cos((double) (f * 3.1415927F / 180.0F)) * this.b * (double) entityliving.ba * 0.05000000074505806D;
             }
             // CraftBukkit start - Support unoccupied deceleration
             else if (unoccupiedDeceleration >= 0) {
@@ -272,7 +274,7 @@ public class EntityBoat extends Entity {
             }
             // CraftBukkit end
 
-            d4 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+            d4 = FastMath.sqrt(this.motX * this.motX + this.motZ * this.motZ);
             if (d4 > 0.35D) {
                 d5 = 0.35D / d4;
                 this.motX *= d5;
@@ -410,8 +412,8 @@ public class EntityBoat extends Entity {
 
     public void al() {
         if (this.passenger != null) {
-            double d0 = Math.cos((double) this.yaw * 3.141592653589793D / 180.0D) * 0.4D;
-            double d1 = Math.sin((double) this.yaw * 3.141592653589793D / 180.0D) * 0.4D;
+            double d0 = FastMath.cos((double) this.yaw * 3.141592653589793D / 180.0D) * 0.4D;
+            double d1 = FastMath.sin((double) this.yaw * 3.141592653589793D / 180.0D) * 0.4D;
 
             this.passenger.setPosition(this.locX + d0, this.locY + this.an() + this.passenger.am(), this.locZ + d1);
         }
diff --git a/src/main/java/net/minecraft/server/EntityCreature.java b/src/main/java/net/minecraft/server/EntityCreature.java
index 5ea36f7eb..3a2bcc3f4 100644
--- a/src/main/java/net/minecraft/server/EntityCreature.java
+++ b/src/main/java/net/minecraft/server/EntityCreature.java
@@ -1,9 +1,11 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+import org.bukkit.event.entity.EntityUnleashEvent;
+
 import java.util.UUID;
 
 // CraftBukkit start
-import org.bukkit.event.entity.EntityUnleashEvent;
 // CraftBukkit end
 
 public abstract class EntityCreature extends EntityInsentient {
@@ -99,9 +101,9 @@ public abstract class EntityCreature extends EntityInsentient {
                 double d1 = (entity.locY - this.locY) / (double) f;
                 double d2 = (entity.locZ - this.locZ) / (double) f;
 
-                this.motX += d0 * Math.abs(d0) * 0.4D;
-                this.motY += d1 * Math.abs(d1) * 0.4D;
-                this.motZ += d2 * Math.abs(d2) * 0.4D;
+                this.motX += d0 * FastMath.abs(d0) * 0.4D;
+                this.motY += d1 * FastMath.abs(d1) * 0.4D;
+                this.motZ += d2 * FastMath.abs(d2) * 0.4D;
             }
 
             if (f > 10.0F) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index 22c908299..2f0af0d23 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import net.jafama.FastMath;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -103,7 +104,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         } else {
             this.n();
             f = 0.2F / (MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 10.0F + 1.0F);
-            f *= (float) Math.pow(2.0D, this.motY);
+            f *= (float) FastMath.pow(2.0D, this.motY);
             if (this.bx) {
                 this.bv += f * 0.5F;
             } else {
@@ -157,7 +158,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                         this.c = this.target.locZ;
                         double d5 = this.a - this.locX;
                         double d6 = this.c - this.locZ;
-                        double d7 = Math.sqrt(d5 * d5 + d6 * d6);
+                        double d7 = FastMath.sqrt(d5 * d5 + d6 * d6);
 
                         d4 = 0.4000000059604645D + d7 / 80.0D - 1.0D;
                         if (d4 > 10.0D) {
@@ -202,7 +203,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
                     this.bb *= 0.8F;
                     float f5 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 1.0F + 1.0F;
-                    double d10 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 1.0D + 1.0D;
+                    double d10 = FastMath.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 1.0D + 1.0D;
 
                     if (d10 > 40.0D) {
                         d10 = 40.0D;
@@ -572,7 +573,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                     if (world.spigotConfig.dragonDeathSoundRadius > 0 && distanceSquared > world.spigotConfig.dragonDeathSoundRadius * world.spigotConfig.dragonDeathSoundRadius)
                         continue; // Spigot
                     if (distanceSquared > viewDistance * viewDistance) {
-                        double deltaLength = Math.sqrt(distanceSquared);
+                        double deltaLength = FastMath.sqrt(distanceSquared);
                         double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
                         double relativeZ = player.locZ + (deltaZ / deltaLength) * viewDistance;
                         player.playerConnection.sendPacket(new PacketPlayOutWorldEvent(1018, new BlockPosition((int) relativeX, (int) this.locY, (int) relativeZ), 0, true));
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index 42815bcc4..4c8ee5074 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -5,6 +5,8 @@
 
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+
 public class EntityEnderSignal extends Entity {
     private double a;
     private double b;
@@ -79,7 +81,7 @@ public class EntityEnderSignal extends Entity {
         if (!this.world.isClientSide) {
             double var2 = this.a - this.locX;
             double var4 = this.c - this.locZ;
-            float var6 = (float) Math.sqrt(var2 * var2 + var4 * var4);
+            float var6 = (float) FastMath.sqrt(var2 * var2 + var4 * var4);
             float var7 = (float) MathHelper.b(var4, var2);
             double var8 = (double) var1 + (double) (var6 - var1) * 0.0025D;
             if (var6 < 1.0F) {
@@ -87,8 +89,8 @@ public class EntityEnderSignal extends Entity {
                 this.motY *= 0.8D;
             }
 
-            this.motX = Math.cos((double) var7) * var8;
-            this.motZ = Math.sin((double) var7) * var8;
+            this.motX = FastMath.cos((double) var7) * var8;
+            this.motZ = FastMath.sin((double) var7) * var8;
             if (this.locY < this.b) {
                 this.motY += (1.0D - this.motY) * 0.014999999664723873D;
             } else {
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index f417ddbdf..ecc0a4eec 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -1,10 +1,10 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import java.util.ArrayList;
-import java.util.Iterator;
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
-import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+import java.util.ArrayList;
 
 public class EntityFallingBlock extends Entity {
 
@@ -176,7 +176,7 @@ public class EntityFallingBlock extends Entity {
                     Entity entity = (Entity) o;
 
                     CraftEventFactory.entityDamage = this; // CraftBukkit
-                    entity.damageEntity(damagesource, (float) Math.min(MathHelper.d((float) i * this.fallHurtAmount), this.fallHurtMax));
+                    entity.damageEntity(damagesource, (float) FastMath.min(MathHelper.d((float) i * this.fallHurtAmount), this.fallHurtMax));
                     CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index 688f02c0b..41e935cb3 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -1,14 +1,16 @@
 package net.minecraft.server;
 
-import java.util.Iterator;
-import java.util.List;
+import net.jafama.FastMath;
 import org.apache.commons.lang3.Validate;
-
-// CraftBukkit start
 import org.bukkit.entity.Hanging;
 import org.bukkit.entity.Painting;
 import org.bukkit.event.hanging.HangingBreakEvent;
 import org.bukkit.event.painting.PaintingBreakEvent;
+
+import java.util.Iterator;
+import java.util.List;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public abstract class EntityHanging extends Entity {
@@ -136,8 +138,8 @@ public abstract class EntityHanging extends Entity {
         if (!this.world.getCubes(this, this.getBoundingBox()).isEmpty()) {
             return false;
         } else {
-            int i = Math.max(1, this.l() / 16);
-            int j = Math.max(1, this.m() / 16);
+            int i = FastMath.max(1, this.l() / 16);
+            int j = FastMath.max(1, this.m() / 16);
             BlockPosition blockposition = this.blockPosition.shift(this.direction.opposite());
             EnumDirection enumdirection = this.direction.f();
 
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 1d8569a02..396e577e4 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
+import net.jafama.FastMath;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftItem;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -261,7 +262,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         if (itemstack.m() == EnumAnimation.EAT) {
             for (int j = 0; j < i; ++j) {
-                Vec3D vec3d = new Vec3D(((double) this.getRandom().nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+                Vec3D vec3d = new Vec3D(((double) this.getRandom().nextFloat() - 0.5D) * 0.1D, FastMath.random() * 0.1D + 0.1D, 0.0D);
 
                 vec3d = vec3d.a(-this.pitch * 3.1415927F / 180.0F);
                 vec3d = vec3d.b(-this.yaw * 3.1415927F / 180.0F);
@@ -579,9 +580,9 @@ public abstract class EntityHuman extends EntityLiving {
                 entityitem.motY = (double) (-MathHelper.sin(this.pitch / 180.0F * 3.1415927F) * f + 0.1F);
                 f1 = this.getRandom().nextFloat() * 3.1415927F * 2.0F;
                 f = 0.02F * this.getRandom().nextFloat();
-                entityitem.motX += Math.cos((double) f1) * (double) f;
+                entityitem.motX += FastMath.cos((double) f1) * (double) f;
                 entityitem.motY += (double) ((this.getRandom().nextFloat() - this.getRandom().nextFloat()) * 0.1F);
-                entityitem.motZ += Math.sin((double) f1) * (double) f;
+                entityitem.motZ += FastMath.sin((double) f1) * (double) f;
             }
 
             // CraftBukkit start - fire PlayerDropItemEvent
@@ -857,7 +858,7 @@ public abstract class EntityHuman extends EntityLiving {
             f = this.applyMagicModifier(damagesource, f);
             float f1 = f;
 
-            f = Math.max(f - this.getAbsorptionHearts(), 0.0F);
+            f = FastMath.max(f - this.getAbsorptionHearts(), 0.0F);
             this.setAbsorptionHearts(this.getAbsorptionHearts() - (f1 - f));
             if (f != 0.0F) {
                 this.applyExhaustion(damagesource.getExhaustionCost());
@@ -866,7 +867,7 @@ public abstract class EntityHuman extends EntityLiving {
                 this.setHealth(this.getHealth() - f);
                 this.bs().a(damagesource, f2, f);
                 if (f < 3.4028235E37F) {
-                    this.a(StatisticList.x, Math.round(f * 10.0F));
+                    this.a(StatisticList.x, FastMath.round(f * 10.0F));
                 }
 
             }
@@ -1067,7 +1068,7 @@ public abstract class EntityHuman extends EntityLiving {
                         }
 
                         if (entity instanceof EntityLiving) {
-                            this.a(StatisticList.w, Math.round(f * 10.0F));
+                            this.a(StatisticList.w, FastMath.round(f * 10.0F));
                             if (j > 0) {
                                 // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
                                 EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), j * 4);
@@ -1127,7 +1128,7 @@ public abstract class EntityHuman extends EntityLiving {
                 return EntityHuman.EnumBedResult.NOT_POSSIBLE_NOW;
             }
 
-            if (Math.abs(this.locX - (double) blockposition.getX()) > 3.0D || Math.abs(this.locY - (double) blockposition.getY()) > 2.0D || Math.abs(this.locZ - (double) blockposition.getZ()) > 3.0D) {
+            if (FastMath.abs(this.locX - (double) blockposition.getX()) > 3.0D || FastMath.abs(this.locY - (double) blockposition.getY()) > 2.0D || FastMath.abs(this.locZ - (double) blockposition.getZ()) > 3.0D) {
                 return EntityHuman.EnumBedResult.TOO_FAR_AWAY;
             }
 
@@ -1378,23 +1379,23 @@ public abstract class EntityHuman extends EntityLiving {
             int i;
 
             if (this.a(Material.WATER)) {
-                i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
+                i = FastMath.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.p, i);
                     this.applyExhaustion(world.paperSpigotConfig.playerSwimmingExhaustion * (float) i * 0.01F); // PaperSpigot - Configurable swimming exhaustion
                 }
             } else if (this.V()) {
-                i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
+                i = FastMath.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.l, i);
                     this.applyExhaustion(world.paperSpigotConfig.playerSwimmingExhaustion * (float) i * 0.01F); // PaperSpigot - Configurable swimming (diving) exhaustion
                 }
             } else if (this.k_()) {
                 if (d1 > 0.0D) {
-                    this.a(StatisticList.n, (int) Math.round(d1 * 100.0D));
+                    this.a(StatisticList.n, (int) FastMath.round(d1 * 100.0D));
                 }
             } else if (this.onGround) {
-                i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
+                i = FastMath.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.i, i);
                     if (this.isSprinting()) {
@@ -1409,7 +1410,7 @@ public abstract class EntityHuman extends EntityLiving {
                     }
                 }
             } else {
-                i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
+                i = FastMath.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 25) {
                     this.a(StatisticList.o, i);
                 }
@@ -1420,7 +1421,7 @@ public abstract class EntityHuman extends EntityLiving {
 
     private void l(double d0, double d1, double d2) {
         if (this.vehicle != null) {
-            int i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
+            int i = FastMath.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
 
             if (i > 0) {
                 if (this.vehicle instanceof EntityMinecartAbstract) {
@@ -1445,7 +1446,7 @@ public abstract class EntityHuman extends EntityLiving {
     public void e(float f, float f1) {
         if (!this.abilities.canFly) {
             if (f >= 2.0F) {
-                this.a(StatisticList.m, (int) Math.round((double) f * 100.0D));
+                this.a(StatisticList.m, (int) FastMath.round((double) f * 100.0D));
             }
 
             super.e(f, f1);
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index c7918de16..a3d4335ee 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import dev.lockedthread.LockedSpigotConfig;
+import net.jafama.FastMath;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.EntityTargetEvent;
@@ -633,7 +634,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
             if (itemstack != null && (flag || flag1) && this.getRandom().nextFloat() - (float) i * 0.01F < this.dropChances[j]) {
                 if (!flag1 && itemstack.e()) {
-                    int k = Math.max(itemstack.j() - 25, 1);
+                    int k = FastMath.max(itemstack.j() - 25, 1);
                     int l = itemstack.j() - this.getRandom().nextInt(this.getRandom().nextInt(k) + 1);
 
                     if (l > k) {
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 70ebf386b..9ec1bb39e 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -1,10 +1,10 @@
 package net.minecraft.server;
 
-import java.util.Iterator;
+import net.jafama.FastMath;
+import net.techcable.tacospigot.HopperPusher;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import org.bukkit.event.player.PlayerPickupItemEvent; // CraftBukkit
-import net.techcable.tacospigot.HopperPusher; // TacoSpigot
+import org.bukkit.event.player.PlayerPickupItemEvent;
 
 // TacoSpigot start - implement HopperPusher
 public class EntityItem extends Entity implements HopperPusher {
@@ -26,13 +26,13 @@ public class EntityItem extends Entity implements HopperPusher {
     public EntityItem(World world, double d0, double d1, double d2) {
         super(world);
         this.e = 5;
-        this.a = (float) (Math.random() * 3.141592653589793D * 2.0D);
+        this.a = (float) (FastMath.random() * 3.141592653589793D * 2.0D);
         this.setSize(0.25F, 0.25F);
         this.setPosition(d0, d1, d2);
-        this.yaw = (float) (Math.random() * 360.0D);
-        this.motX = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+        this.yaw = (float) (FastMath.random() * 360.0D);
+        this.motX = (double) ((float) (FastMath.random() * 0.20000000298023224D - 0.10000000149011612D));
         this.motY = 0.20000000298023224D;
-        this.motZ = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+        this.motZ = (double) ((float) (FastMath.random() * 0.20000000298023224D - 0.10000000149011612D));
     }
 
     public EntityItem(World world, double d0, double d1, double d2, ItemStack itemstack) {
@@ -52,7 +52,7 @@ public class EntityItem extends Entity implements HopperPusher {
     public EntityItem(World world) {
         super(world);
         this.e = 5;
-        this.a = (float) (Math.random() * 3.141592653589793D * 2.0D);
+        this.a = (float) (FastMath.random() * 3.141592653589793D * 2.0D);
         this.setSize(0.25F, 0.25F);
         this.setItemStack(new ItemStack(Blocks.AIR, 0));
     }
@@ -191,8 +191,8 @@ public class EntityItem extends Entity implements HopperPusher {
                         // Spigot start
                         if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemMergeEvent(entityitem, this).isCancelled()) return false; // CraftBukkit
                         itemstack.count += itemstack1.count;
-                        this.pickupDelay = Math.max(entityitem.pickupDelay, this.pickupDelay);
-                        this.age = Math.min(entityitem.age, this.age);
+                        this.pickupDelay = FastMath.max(entityitem.pickupDelay, this.pickupDelay);
+                        this.age = FastMath.min(entityitem.age, this.age);
                         this.setItemStack(itemstack);
                         entityitem.die();
                         // Spigot end
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index 68105baf4..84181c86f 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -1,8 +1,9 @@
 package net.minecraft.server;
 
-import java.util.List;
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
-import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+import java.util.List;
 
 public class EntityLightning extends EntityWeather {
 
@@ -76,7 +77,7 @@ public class EntityLightning extends EntityWeather {
                 double deltaZ = this.locZ - player.locZ;
                 double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
                 if (distanceSquared > viewDistance * viewDistance) {
-                    double deltaLength = Math.sqrt(distanceSquared);
+                    double deltaLength = FastMath.sqrt(distanceSquared);
                     double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
                     double relativeZ = player.locZ + (deltaZ / deltaLength) * viewDistance;
                     player.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("ambient.weather.thunder", relativeX, this.locY, relativeZ, 10000.0F, pitch));
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 2403ff2e3..905c7fe1d 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -6,6 +6,7 @@ import com.google.common.base.Predicates;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import dev.lockedthread.LockedSpigotConfig;
+import net.jafama.FastMath;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.entity.LivingEntity;
@@ -109,10 +110,10 @@ public abstract class EntityLiving extends Entity {
         // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
         this.datawatcher.watch(6, (float) this.getAttributeInstance(GenericAttributes.maxHealth).getValue());
         this.k = true;
-        this.aH = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
+        this.aH = (float) ((FastMath.random() + 1.0D) * 0.009999999776482582D);
         this.setPosition(this.locX, this.locY, this.locZ);
-        this.aG = (float) Math.random() * 12398.0F;
-        this.yaw = (float) (Math.random() * 3.1415927410125732D * 2.0D);
+        this.aG = (float) FastMath.random() * 12398.0F;
+        this.yaw = (float) (FastMath.random() * 3.1415927410125732D * 2.0D);
         this.aK = this.yaw;
         this.S = 0.6F;
     }
@@ -141,7 +142,7 @@ public abstract class EntityLiving extends Entity {
             float f = (float) MathHelper.f(this.fallDistance - 3.0F);
 
             if (block1.getMaterial() != Material.AIR) {
-                double d1 = (double) Math.min(0.2F + f / 15.0F, 10.0F);
+                double d1 = (double) FastMath.min(0.2F + f / 15.0F, 10.0F);
 
                 if (d1 > 2.5D) {
                     d1 = 2.5D;
@@ -179,7 +180,7 @@ public abstract class EntityLiving extends Entity {
                 double d0 = this.world.getWorldBorder().a(this) + this.world.getWorldBorder().getDamageBuffer();
 
                 if (d0 < 0.0D) {
-                    this.damageEntity(DamageSource.STUCK, (float) Math.max(1, MathHelper.floor(-d0 * this.world.getWorldBorder().getDamageAmount())));
+                    this.damageEntity(DamageSource.STUCK, (float) FastMath.max(1, MathHelper.floor(-d0 * this.world.getWorldBorder().getDamageAmount())));
                 }
             }
         }
@@ -368,7 +369,7 @@ public abstract class EntityLiving extends Entity {
 
     public void b(NBTTagCompound nbttagcompound) {
         nbttagcompound.setFloat("HealF", this.getHealth());
-        nbttagcompound.setShort("Health", (short) ((int) Math.ceil((double) this.getHealth())));
+        nbttagcompound.setShort("Health", (short) ((int) FastMath.ceil((double) this.getHealth())));
         nbttagcompound.setShort("HurtTime", (short) this.hurtTicks);
         nbttagcompound.setInt("HurtByTimestamp", this.hurtTimestamp);
         nbttagcompound.setShort("DeathTime", (short) this.deathTicks);
@@ -789,14 +790,14 @@ public abstract class EntityLiving extends Entity {
 
                         double d1;
 
-                        for (d1 = entity.locZ - this.locZ; d0 * d0 + d1 * d1 < 1.0E-4D; d1 = (Math.random() - Math.random()) * 0.01D) {
-                            d0 = (Math.random() - Math.random()) * 0.01D;
+                        for (d1 = entity.locZ - this.locZ; d0 * d0 + d1 * d1 < 1.0E-4D; d1 = (FastMath.random() - FastMath.random()) * 0.01D) {
+                            d0 = (FastMath.random() - FastMath.random()) * 0.01D;
                         }
 
                         this.aw = (float) (MathHelper.b(d1, d0) * 180.0D / 3.1415927410125732D - (double) this.yaw);
                         this.a(entity, f, d0, d1);
                     } else {
-                        this.aw = (float) ((int) (Math.random() * 2.0D) * 180);
+                        this.aw = (float) ((int) (FastMath.random() * 2.0D) * 180);
                     }
                 }
 
@@ -827,7 +828,7 @@ public abstract class EntityLiving extends Entity {
         this.makeSound("random.break", 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
 
         for (int i = 0; i < 5; ++i) {
-            Vec3D vec3d = new Vec3D(((double) this.getRandom().nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            Vec3D vec3d = new Vec3D(((double) this.getRandom().nextFloat() - 0.5D) * 0.1D, FastMath.random() * 0.1D + 0.1D, 0.0D);
 
             vec3d = vec3d.a(-this.pitch * 3.1415927F / 180.0F);
             vec3d = vec3d.b(-this.yaw * 3.1415927F / 180.0F);
@@ -1070,7 +1071,7 @@ public abstract class EntityLiving extends Entity {
             float magicModifier = magic.apply((double) f).floatValue();
             f += magicModifier;
 
-            Function<Double, Double> absorption = f12 -> -(Math.max(f12 - Math.max(f12 - EntityLiving.this.getAbsorptionHearts(), 0.0F), 0.0F));
+            Function<Double, Double> absorption = f12 -> -(FastMath.max(f12 - FastMath.max(f12 - EntityLiving.this.getAbsorptionHearts(), 0.0F), 0.0F));
             float absorptionModifier = absorption.apply((double) f).floatValue();
 
             EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
@@ -1092,13 +1093,13 @@ public abstract class EntityLiving extends Entity {
             }
 
             absorptionModifier = (float) -event.getDamage(DamageModifier.ABSORPTION);
-            this.setAbsorptionHearts(Math.max(this.getAbsorptionHearts() - absorptionModifier, 0.0F));
+            this.setAbsorptionHearts(FastMath.max(this.getAbsorptionHearts() - absorptionModifier, 0.0F));
             if (f != 0.0F) {
                 if (human) {
                     // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
                     ((EntityHuman) this).applyExhaustion(damagesource.getExhaustionCost());
                     if (f < 3.4028235E37F) {
-                        ((EntityHuman) this).a(StatisticList.x, Math.round(f * 10.0F));
+                        ((EntityHuman) this).a(StatisticList.x, FastMath.round(f * 10.0F));
                     }
                 }
                 // CraftBukkit end
@@ -1481,8 +1482,8 @@ public abstract class EntityLiving extends Entity {
 
         if (f > 0.0025000002F) {
             f3 = 1.0F;
-            f2 = (float) Math.sqrt((double) f) * 3.0F;
-            // CraftBukkit - Math -> TrigMath
+            f2 = (float) FastMath.sqrt((double) f) * 3.0F;
+            // CraftBukkit - FastMath -> TrigMath
             f1 = (float) org.bukkit.craftbukkit.TrigMath.atan2(d1, d0) * 180.0F / 3.1415927F - 90.0F;
         }
 
@@ -1585,15 +1586,15 @@ public abstract class EntityLiving extends Entity {
             this.motZ *= 0.98D;
         }
 
-        if (Math.abs(this.motX) < 0.005D) {
+        if (FastMath.abs(this.motX) < 0.005D) {
             this.motX = 0.0D;
         }
 
-        if (Math.abs(this.motY) < 0.005D) {
+        if (FastMath.abs(this.motY) < 0.005D) {
             this.motY = 0.0D;
         }
 
-        if (Math.abs(this.motZ) < 0.005D) {
+        if (FastMath.abs(this.motZ) < 0.005D) {
             this.motZ = 0.0D;
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index feefb6f97..6dbcac147 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -1,16 +1,17 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Maps;
-import java.util.Iterator;
-import java.util.Map;
-
-// CraftBukkit start
+import net.jafama.FastMath;
 import org.bukkit.Location;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.event.vehicle.VehicleDamageEvent;
 import org.bukkit.event.vehicle.VehicleDestroyEvent;
 import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
 import org.bukkit.util.Vector;
+
+import java.util.Map;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public abstract class EntityMinecartAbstract extends Entity implements INamableTileEntity {
@@ -412,7 +413,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         int[][] aint = EntityMinecartAbstract.matrix[blockminecarttrackabstract_enumtrackposition.a()];
         double d1 = (double) (aint[1][0] - aint[0][0]);
         double d2 = (double) (aint[1][2] - aint[0][2]);
-        double d3 = Math.sqrt(d1 * d1 + d2 * d2);
+        double d3 = FastMath.sqrt(d1 * d1 + d2 * d2);
         double d4 = this.motX * d1 + this.motZ * d2;
 
         if (d4 < 0.0D) {
@@ -420,7 +421,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             d2 = -d2;
         }
 
-        double d5 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+        double d5 = FastMath.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
         if (d5 > 2.0D) {
             d5 = 2.0D;
@@ -436,8 +437,8 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         if (this.passenger instanceof EntityLiving) {
             d6 = (double) ((EntityLiving) this.passenger).ba;
             if (d6 > 0.0D) {
-                d7 = -Math.sin((double) (this.passenger.yaw * 3.1415927F / 180.0F));
-                d8 = Math.cos((double) (this.passenger.yaw * 3.1415927F / 180.0F));
+                d7 = -FastMath.sin((double) (this.passenger.yaw * 3.1415927F / 180.0F));
+                d8 = FastMath.cos((double) (this.passenger.yaw * 3.1415927F / 180.0F));
                 d9 = this.motX * this.motX + this.motZ * this.motZ;
                 if (d9 < 0.01D) {
                     this.motX += d7 * 0.1D;
@@ -448,7 +449,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         }
 
         if (flag1) {
-            d6 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+            d6 = FastMath.sqrt(this.motX * this.motX + this.motZ * this.motZ);
             if (d6 < 0.03D) {
                 this.motX *= 0.0D;
                 this.motY *= 0.0D;
@@ -510,7 +511,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         if (vec3d1 != null && vec3d != null) {
             double d14 = (vec3d.b - vec3d1.b) * 0.05D;
 
-            d5 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+            d5 = FastMath.sqrt(this.motX * this.motX + this.motZ * this.motZ);
             if (d5 > 0.0D) {
                 this.motX = this.motX / d5 * (d5 + d14);
                 this.motZ = this.motZ / d5 * (d5 + d14);
@@ -523,13 +524,13 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         int j = MathHelper.floor(this.locZ);
 
         if (i != blockposition.getX() || j != blockposition.getZ()) {
-            d5 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+            d5 = FastMath.sqrt(this.motX * this.motX + this.motZ * this.motZ);
             this.motX = d5 * (double) (i - blockposition.getX());
             this.motZ = d5 * (double) (j - blockposition.getZ());
         }
 
         if (flag) {
-            double d15 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+            double d15 = FastMath.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
             if (d15 > 0.01D) {
                 double d16 = 0.06D;
@@ -725,7 +726,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                             double d5 = entity.locZ - this.locZ;
                             Vec3D vec3d = (new Vec3D(d4, 0.0D, d5)).a();
                             Vec3D vec3d1 = (new Vec3D((double) MathHelper.cos(this.yaw * 3.1415927F / 180.0F), 0.0D, (double) MathHelper.sin(this.yaw * 3.1415927F / 180.0F))).a();
-                            double d6 = Math.abs(vec3d.b(vec3d1));
+                            double d6 = FastMath.abs(vec3d.b(vec3d1));
 
                             if (d6 < 0.800000011920929D) {
                                 return;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index b72876c00..e0eaacd4b 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
+import net.jafama.FastMath;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
@@ -84,7 +85,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         BlockPosition blockposition = worldserver.getSpawn();
 
         if (!worldserver.worldProvider.o() && worldserver.getWorldData().getGameType() != WorldSettings.EnumGamemode.ADVENTURE) {
-            int i = Math.max(5, minecraftserver.getSpawnProtection() - 6);
+            int i = FastMath.max(5, minecraftserver.getSpawnProtection() - 6);
             int j = MathHelper.floor(worldserver.getWorldBorder().b((double) blockposition.getX(), (double) blockposition.getZ()));
 
             if (j < i) {
@@ -215,7 +216,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         }
 
         while (!this.removeQueue.isEmpty()) {
-            int i = Math.min(this.removeQueue.size(), Integer.MAX_VALUE);
+            int i = FastMath.min(this.removeQueue.size(), Integer.MAX_VALUE);
             int[] aint = new int[i];
             Iterator iterator = this.removeQueue.iterator();
             int j = 0;
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index ca6c60f69..2680364da 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.entity.Player;
@@ -119,8 +120,8 @@ public class EntityTrackerEntry {
                 int k1 = j - this.yLoc;
                 int l1 = k - this.zLoc;
                 Object object = null;
-                boolean flag = Math.abs(j1) >= 4 || Math.abs(k1) >= 4 || Math.abs(l1) >= 4 || this.m % 60 == 0;
-                boolean flag1 = Math.abs(l - this.yRot) >= 4 || Math.abs(i1 - this.xRot) >= 4;
+                boolean flag = FastMath.abs(j1) >= 4 || FastMath.abs(k1) >= 4 || FastMath.abs(l1) >= 4 || this.m % 60 == 0;
+                boolean flag1 = FastMath.abs(l - this.yRot) >= 4 || FastMath.abs(i1 - this.xRot) >= 4;
 
                 if (this.m > 0 || this.tracker instanceof EntityArrow) { // PaperSpigot - Moved up
                     // CraftBukkit start - Code moved from below
@@ -214,7 +215,7 @@ public class EntityTrackerEntry {
             } else {
                 i = MathHelper.d(this.tracker.yaw * 256.0F / 360.0F);
                 j = MathHelper.d(this.tracker.pitch * 256.0F / 360.0F);
-                boolean flag2 = Math.abs(i - this.yRot) >= 4 || Math.abs(j - this.xRot) >= 4;
+                boolean flag2 = FastMath.abs(i - this.yRot) >= 4 || FastMath.abs(j - this.xRot) >= 4;
 
                 if (flag2) {
                     this.broadcast(new PacketPlayOutEntity.PacketPlayOutEntityLook(this.tracker.getId(), (byte) i, (byte) j, this.tracker.onGround));
@@ -230,7 +231,7 @@ public class EntityTrackerEntry {
             }
 
             i = MathHelper.d(this.tracker.getHeadRotation() * 256.0F / 360.0F);
-            if (Math.abs(i - this.i) >= 4) {
+            if (FastMath.abs(i - this.i) >= 4) {
                 this.broadcast(new PacketPlayOutEntityHeadRotation(this.tracker, (byte) i));
                 this.i = i;
             }
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index 70681c793..1797ac4fd 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -1,14 +1,16 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+
 import java.util.Calendar;
 import java.util.List;
 import java.util.UUID;
 
 //CraftBukkit start
-import org.bukkit.event.entity.CreatureSpawnEvent;
-import org.bukkit.event.entity.EntityCombustByEntityEvent;
-import org.bukkit.event.entity.EntityCombustEvent;
-import org.bukkit.event.entity.EntityTargetEvent;
 //CraftBukkit end
 
 public class EntityZombie extends EntityMonster {
@@ -124,7 +126,7 @@ public class EntityZombie extends EntityMonster {
     public void m() {
         if (this.world.w() && !this.world.isClientSide && !this.isBaby()) {
             float f = this.c(1.0F);
-            BlockPosition blockposition = new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ);
+            BlockPosition blockposition = new BlockPosition(this.locX, (double) FastMath.round(this.locY), this.locZ);
 
             if (f > 0.5F && this.getRandom().nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.i(blockposition)) {
                 boolean flag = true;
@@ -463,7 +465,7 @@ public class EntityZombie extends EntityMonster {
         this.bn = i;
         this.getDataWatcher().watch(14, (byte) 1);
         this.removeEffect(MobEffectList.WEAKNESS.id);
-        this.addEffect(new MobEffect(MobEffectList.INCREASE_DAMAGE.id, i, Math.min(this.world.getDifficulty().a() - 1, 0)));
+        this.addEffect(new MobEffect(MobEffectList.INCREASE_DAMAGE.id, i, FastMath.min(this.world.getDifficulty().a() - 1, 0)));
         this.world.broadcastEntityEffect(this, (byte) 16);
     }
 
diff --git a/src/main/java/net/minecraft/server/InventorySubcontainer.java b/src/main/java/net/minecraft/server/InventorySubcontainer.java
index 51fac3f05..141d01e82 100644
--- a/src/main/java/net/minecraft/server/InventorySubcontainer.java
+++ b/src/main/java/net/minecraft/server/InventorySubcontainer.java
@@ -1,11 +1,13 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-
-// CraftBukkit start
-import java.util.List;
+import net.jafama.FastMath;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
+
+import java.util.List;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class InventorySubcontainer implements IInventory {
@@ -110,8 +112,8 @@ public class InventorySubcontainer implements IInventory {
             }
 
             if (ItemStack.c(itemstack2, itemstack1)) {
-                int j = Math.min(this.getMaxStackSize(), itemstack2.getMaxStackSize());
-                int k = Math.min(itemstack1.count, j - itemstack2.count);
+                int j = FastMath.min(this.getMaxStackSize(), itemstack2.getMaxStackSize());
+                int k = FastMath.min(itemstack1.count, j - itemstack2.count);
 
                 if (k > 0) {
                     itemstack2.count += k;
diff --git a/src/main/java/net/minecraft/server/MathHelper.java b/src/main/java/net/minecraft/server/MathHelper.java
new file mode 100644
index 000000000..604f71c5c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MathHelper.java
@@ -0,0 +1,299 @@
+package net.minecraft.server;
+
+import net.jafama.FastMath;
+
+import java.util.Random;
+import java.util.UUID;
+
+public class MathHelper {
+    public static float a;
+    private static float[] b;
+    private static int[] c;
+    private static double d;
+    private static double[] e;
+    private static double[] f;
+
+    static {
+        a = c(2.0f);
+        b = new float[65536];
+        for (int i = 0; i < 65536; ++i) {
+            MathHelper.b[i] = (float) FastMath.sin(i * 3.141592653589793 * 2.0 / 65536.0);
+        }
+        c = new int[]{0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
+        d = Double.longBitsToDouble(4805340802404319232L);
+        e = new double[257];
+        f = new double[257];
+        for (int j = 0; j < 257; ++j) {
+            double asin = FastMath.asin(j / 256.0);
+            MathHelper.f[j] = FastMath.cos(asin);
+            MathHelper.e[j] = asin;
+        }
+    }
+
+    public static float sin(float n) {
+        return MathHelper.b[(int) (n * 10430.378f) & 0xFFFF];
+    }
+
+    public static float cos(float n) {
+        return MathHelper.b[(int) (n * 10430.378f + 16384.0f) & 0xFFFF];
+    }
+
+    public static float c(float n) {
+        return (float) FastMath.sqrt(n);
+    }
+
+    public static float sqrt(double n) {
+        return (float) FastMath.sqrt(n);
+    }
+
+    public static int d(float n) {
+        int n2 = (int) n;
+        return (n < n2) ? (n2 - 1) : n2;
+    }
+
+    public static int floor(double n) {
+        int n2 = (int) n;
+        return (n < n2) ? (n2 - 1) : n2;
+    }
+
+    public static long d(double n) {
+        long n2 = (long) n;
+        return (n < n2) ? (n2 - 1L) : n2;
+    }
+
+    public static float e(float n) {
+        return (n >= 0.0f) ? n : (-n);
+    }
+
+    public static int a(int n) {
+        return (n >= 0) ? n : (-n);
+    }
+
+    public static int f(float n) {
+        int n2 = (int) n;
+        return (n > n2) ? (n2 + 1) : n2;
+    }
+
+    public static int f(double n) {
+        int n2 = (int) n;
+        return (n > n2) ? (n2 + 1) : n2;
+    }
+
+    public static int clamp(int n, int n2, int n3) {
+        if (n < n2) {
+            return n2;
+        }
+        if (n > n3) {
+            return n3;
+        }
+        return n;
+    }
+
+    public static float a(float n, float n2, float n3) {
+        if (n < n2) {
+            return n2;
+        }
+        if (n > n3) {
+            return n3;
+        }
+        return n;
+    }
+
+    public static double a(double n, double n2, double n3) {
+        if (n < n2) {
+            return n2;
+        }
+        if (n > n3) {
+            return n3;
+        }
+        return n;
+    }
+
+    public static double b(double n, double n2, double n3) {
+        if (n3 < 0.0) {
+            return n;
+        }
+        if (n3 > 1.0) {
+            return n2;
+        }
+        return n + (n2 - n) * n3;
+    }
+
+    public static double a(double n, double n2) {
+        if (n < 0.0) {
+            n = -n;
+        }
+        if (n2 < 0.0) {
+            n2 = -n2;
+        }
+        return (n > n2) ? n : n2;
+    }
+
+    public static int nextInt(Random random, int n, int n2) {
+        if (n >= n2) {
+            return n;
+        }
+        return random.nextInt(n2 - n + 1) + n;
+    }
+
+    public static float a(Random random, float n, float n2) {
+        if (n >= n2) {
+            return n;
+        }
+        return random.nextFloat() * (n2 - n) + n;
+    }
+
+    public static double a(Random random, double n, double n2) {
+        if (n >= n2) {
+            return n;
+        }
+        return random.nextDouble() * (n2 - n) + n;
+    }
+
+    public static double a(long[] array) {
+        long n = 0L;
+        for (int length = array.length, i = 0; i < length; ++i) {
+            n += array[i];
+        }
+        return n / (double) array.length;
+    }
+
+    public static float g(float n) {
+        n %= 360.0f;
+        if (n >= 180.0f) {
+            n -= 360.0f;
+        }
+        if (n < -180.0f) {
+            n += 360.0f;
+        }
+        return n;
+    }
+
+    public static double g(double n) {
+        n %= 360.0;
+        if (n >= 180.0) {
+            n -= 360.0;
+        }
+        if (n < -180.0) {
+            n += 360.0;
+        }
+        return n;
+    }
+
+    public static int a(String s, int n) {
+        try {
+            return Integer.parseInt(s);
+        } catch (Throwable t) {
+            return n;
+        }
+    }
+
+    public static int a(String s, int n, int n2) {
+        return FastMath.max(n2, a(s, n));
+    }
+
+    public static double a(String s, double n) {
+        try {
+            return Double.parseDouble(s);
+        } catch (Throwable t) {
+            return n;
+        }
+    }
+
+    public static double a(String s, double n, double n2) {
+        return FastMath.max(n2, a(s, n));
+    }
+
+    public static int b(int n) {
+        int n2 = n - 1;
+        int n3 = n2 | n2 >> 1;
+        int n4 = n3 | n3 >> 2;
+        int n5 = n4 | n4 >> 4;
+        int n6 = n5 | n5 >> 8;
+        return (n6 | n6 >> 16) + 1;
+    }
+
+    private static boolean d(int n) {
+        return n != 0 && (n & n - 1) == 0x0;
+    }
+
+    private static int e(int n) {
+        n = (d(n) ? n : b(n));
+        return MathHelper.c[(int) (n * 125613361L >> 27) & 0x1F];
+    }
+
+    public static int c(int n) {
+        return e(n) - (d(n) ? 0 : 1);
+    }
+
+    public static int c(int n, int n2) {
+        if (n2 == 0) {
+            return 0;
+        }
+        if (n == 0) {
+            return n2;
+        }
+        if (n < 0) {
+            n2 *= -1;
+        }
+        int n3 = n % n2;
+        if (n3 == 0) {
+            return n;
+        }
+        return n + n2 - n3;
+    }
+
+    public static UUID a(Random random) {
+        return new UUID((random.nextLong() & 0xFFFFFFFFFFFF0FFFL) | 0x4000L, (random.nextLong() & 0x3FFFFFFFFFFFFFFFL) | Long.MIN_VALUE);
+    }
+
+    public static double c(double n, double n2, double n3) {
+        return (n - n2) / (n3 - n2);
+    }
+
+    public static double b(double n, double n2) {
+        double n3 = n2 * n2 + n * n;
+        if (Double.isNaN(n3)) {
+            return Double.NaN;
+        }
+        boolean b = n < 0.0;
+        if (b) {
+            n = -n;
+        }
+        boolean b2 = n2 < 0.0;
+        if (b2) {
+            n2 = -n2;
+        }
+        boolean b3 = n > n2;
+        if (b3) {
+            double n4 = n2;
+            n2 = n;
+            n = n4;
+        }
+        double i = i(n3);
+        n2 *= i;
+        n *= i;
+        double n5 = MathHelper.d + n;
+        int n6 = (int) Double.doubleToRawLongBits(n5);
+        double n7 = MathHelper.e[n6];
+        double n8 = n * MathHelper.f[n6] - n2 * (n5 - MathHelper.d);
+        double n9 = n7 + (6.0 + n8 * n8) * n8 * 0.16666666666666666;
+        if (b3) {
+            n9 = 1.5707963267948966 - n9;
+        }
+        if (b2) {
+            n9 = 3.141592653589793 - n9;
+        }
+        if (b) {
+            n9 = -n9;
+        }
+        return n9;
+    }
+
+    public static double i(double longBitsToDouble) {
+        double n = 0.5 * longBitsToDouble;
+        longBitsToDouble = Double.longBitsToDouble(6910469410427058090L - (Double.doubleToRawLongBits(longBitsToDouble) >> 1));
+        longBitsToDouble *= 1.5 - n * longBitsToDouble * longBitsToDouble;
+        return longBitsToDouble;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index db93f6150..82fe79148 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -18,6 +18,7 @@ import io.netty.handler.codec.base64.Base64;
 import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
 import jline.console.ConsoleReader;
 import joptsimple.OptionSet;
+import net.jafama.FastMath;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -581,7 +582,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                     if (wait > 0) {
                         // TacoSpigot start - fix the tick loop improvements
                         if (catchupTime < 2E6) {
-                            wait += Math.abs(catchupTime);
+                            wait += FastMath.abs(catchupTime);
                         } else if (wait < catchupTime) {
                             catchupTime -= wait;
                             wait = 0;
@@ -597,7 +598,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                         wait = TICK_TIME - (curTime - lastTick);
                     }
 
-                    catchupTime = Math.min(MAX_CATCHUP_BUFFER, catchupTime - wait);
+                    catchupTime = FastMath.min(MAX_CATCHUP_BUFFER, catchupTime - wait);
 
                     if (++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0) {
                         final long diff = curTime - tickSection;
@@ -724,7 +725,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         if (i - this.X >= 5000000000L) {
             this.X = i;
             this.r.setPlayerSample(new ServerPing.ServerPingPlayerSample(this.J(), this.I()));
-            GameProfile[] agameprofile = new GameProfile[Math.min(this.I(), 12)];
+            GameProfile[] agameprofile = new GameProfile[FastMath.min(this.I(), 12)];
             int j = MathHelper.nextInt(this.s, 0, this.I() - agameprofile.length);
 
             for (int k = 0; k < agameprofile.length; ++k) {
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index b50cdcc59..701372e85 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -1,15 +1,16 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Maps;
-import java.util.Iterator;
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
 import java.util.UUID;
-import java.util.Map.Entry;
 
 // CraftBukkit start
-import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 // CraftBukkit end
 
 public class MobEffectList {
@@ -122,7 +123,7 @@ public class MobEffectList {
                 entityliving.damageEntity(DamageSource.MAGIC, (float) (6 << i));
             }
         } else {
-            entityliving.heal((float) Math.max(4 << i, 0), RegainReason.MAGIC); // CraftBukkit
+            entityliving.heal((float) FastMath.max(4 << i, 0), RegainReason.MAGIC); // CraftBukkit
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index db4c75687..23e405852 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -7,6 +7,7 @@ import com.google.common.primitives.Floats;
 import dev.lockedthread.LockedSpigotConfig;
 import io.netty.buffer.Unpooled;
 import io.netty.util.concurrent.GenericFutureListener;
+import net.jafama.FastMath;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -230,8 +231,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                 }
 
                 // Prevent 40 event-calls for less than a single pixel of movement >.>
-                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
-                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+                double delta = FastMath.pow(this.lastPosX - to.getX(), 2) + FastMath.pow(this.lastPosY - to.getY(), 2) + FastMath.pow(this.lastPosZ - to.getZ(), 2);
+                float deltaAngle = FastMath.abs(this.lastYaw - to.getYaw()) + FastMath.abs(this.lastPitch - to.getPitch());
 
                 if ((delta > 1f / 256 || deltaAngle > 10f) && (this.checkMovement && !this.player.dead)) {
                     this.lastPosX = to.getX();
@@ -345,7 +346,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                         d7 = packetplayinflying.a();
                         d8 = packetplayinflying.b();
                         d9 = packetplayinflying.c();
-                        if (Math.abs(packetplayinflying.a()) > 3.0E7D || Math.abs(packetplayinflying.c()) > 3.0E7D) {
+                        if (FastMath.abs(packetplayinflying.a()) > 3.0E7D || FastMath.abs(packetplayinflying.c()) > 3.0E7D) {
                             this.disconnect("Illegal position");
                             return;
                         }
@@ -1476,8 +1477,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                                     } else if (slot.isAllowed(cursor)) {
                                         if (clickedItem.doMaterialsMatch(cursor) && ItemStack.equals(clickedItem, cursor)) {
                                             int toPlace = packetplayinwindowclick.c() == 0 ? cursor.count : 1;
-                                            toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.count);
-                                            toPlace = Math.min(toPlace, slot.inventory.getMaxStackSize() - clickedItem.count);
+                                            toPlace = FastMath.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.count);
+                                            toPlace = FastMath.min(toPlace, slot.inventory.getMaxStackSize() - clickedItem.count);
                                             if (toPlace == 1) {
                                                 action = InventoryAction.PLACE_ONE;
                                             } else if (toPlace == cursor.count) {
diff --git a/src/main/java/net/minecraft/server/PlayerInventory.java b/src/main/java/net/minecraft/server/PlayerInventory.java
index d3b9192cc..805141cb2 100644
--- a/src/main/java/net/minecraft/server/PlayerInventory.java
+++ b/src/main/java/net/minecraft/server/PlayerInventory.java
@@ -1,12 +1,13 @@
 package net.minecraft.server;
 
-import java.util.concurrent.Callable;
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
 
-// CraftBukkit start
 import java.util.List;
+import java.util.concurrent.Callable;
 
-import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-import org.bukkit.entity.HumanEntity;
+// CraftBukkit start
 // CraftBukkit end
 
 public class PlayerInventory implements IInventory {
@@ -119,7 +120,7 @@ public class PlayerInventory implements IInventory {
         for (l = 0; l < this.items.length; ++l) {
             itemstack = this.items[l];
             if (itemstack != null && (item == null || itemstack.getItem() == item) && (i <= -1 || itemstack.getData() == i) && (nbttagcompound == null || GameProfileSerializer.a(nbttagcompound, itemstack.getTag(), true))) {
-                i1 = j <= 0 ? itemstack.count : Math.min(j - k, itemstack.count);
+                i1 = j <= 0 ? itemstack.count : FastMath.min(j - k, itemstack.count);
                 k += i1;
                 if (j != 0) {
                     this.items[l].count -= i1;
@@ -137,7 +138,7 @@ public class PlayerInventory implements IInventory {
         for (l = 0; l < this.armor.length; ++l) {
             itemstack = this.armor[l];
             if (itemstack != null && (item == null || itemstack.getItem() == item) && (i <= -1 || itemstack.getData() == i) && (nbttagcompound == null || GameProfileSerializer.a(nbttagcompound, itemstack.getTag(), false))) {
-                i1 = j <= 0 ? itemstack.count : Math.min(j - k, itemstack.count);
+                i1 = j <= 0 ? itemstack.count : FastMath.min(j - k, itemstack.count);
                 k += i1;
                 if (j != 0) {
                     this.armor[l].count -= i1;
@@ -165,7 +166,7 @@ public class PlayerInventory implements IInventory {
                 return k;
             }
 
-            l = j <= 0 ? this.f.count : Math.min(j - k, this.f.count);
+            l = j <= 0 ? this.f.count : FastMath.min(j - k, this.f.count);
             k += l;
             if (j != 0) {
                 this.f.count -= l;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 5f6b3806e..d6bc10a3d 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -5,6 +5,7 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
+import net.jafama.FastMath;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
@@ -131,7 +132,7 @@ public abstract class PlayerList {
         final BlockPosition blockposition = worldserver.getSpawn();
         this.a(entityplayer, null, worldserver);
         final PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
-        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimension(), worldserver.getDifficulty(), Math.min(this.getMaxPlayers(), 60), worlddata.getType(), worldserver.getGameRules().getBoolean("reducedDebugInfo")));
+        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimension(), worldserver.getDifficulty(), FastMath.min(this.getMaxPlayers(), 60), worlddata.getType(), worldserver.getGameRules().getBoolean("reducedDebugInfo")));
         entityplayer.getBukkitEntity().sendSupportedChannels();
         playerconnection.sendPacket(new PacketPlayOutCustomPayload("MC|Brand", new PacketDataSerializer(Unpooled.buffer()).a(this.getServer().getServerModName())));
         playerconnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
diff --git a/src/main/java/net/minecraft/server/RecipeArmorDye.java b/src/main/java/net/minecraft/server/RecipeArmorDye.java
index 1fb6f0076..d6654af8c 100644
--- a/src/main/java/net/minecraft/server/RecipeArmorDye.java
+++ b/src/main/java/net/minecraft/server/RecipeArmorDye.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import net.jafama.FastMath;
+
 import java.util.ArrayList;
 import java.util.Collections;
 
@@ -72,7 +74,7 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
                         f1 = (float) (l >> 8 & 255) / 255.0F;
                         float f2 = (float) (l & 255) / 255.0F;
 
-                        i = (int) ((float) i + Math.max(f, Math.max(f1, f2)) * 255.0F);
+                        i = (int) ((float) i + FastMath.max(f, FastMath.max(f1, f2)) * 255.0F);
                         aint[0] = (int) ((float) aint[0] + f * 255.0F);
                         aint[1] = (int) ((float) aint[1] + f1 * 255.0F);
                         aint[2] = (int) ((float) aint[2] + f2 * 255.0F);
@@ -88,7 +90,7 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
                     int k1 = (int) (afloat[1] * 255.0F);
 
                     i1 = (int) (afloat[2] * 255.0F);
-                    i += Math.max(j1, Math.max(k1, i1));
+                    i += FastMath.max(j1, FastMath.max(k1, i1));
                     aint[0] += j1;
                     aint[1] += k1;
                     aint[2] += i1;
@@ -105,7 +107,7 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
 
             l = aint[2] / j;
             f = (float) i / (float) j;
-            f1 = (float) Math.max(k, Math.max(l1, l));
+            f1 = (float) FastMath.max(k, FastMath.max(l1, l));
             k = (int) ((float) k * f / f1);
             l1 = (int) ((float) l1 * f / f1);
             l = (int) ((float) l * f / f1);
diff --git a/src/main/java/net/minecraft/server/TileEntityChest.java b/src/main/java/net/minecraft/server/TileEntityChest.java
index c2d73c69c..6d7f28457 100644
--- a/src/main/java/net/minecraft/server/TileEntityChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityChest.java
@@ -1,10 +1,12 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+
 import java.util.List;
 
 // CraftBukkit start
-import org.bukkit.craftbukkit.entity.CraftHumanEntity;
-import org.bukkit.entity.HumanEntity;
 // CraftBukkit end
 
 public class TileEntityChest extends TileEntityContainer implements IInventory { // PaperSpigot - remove IUpdatePlayerListBox
@@ -337,7 +339,7 @@ public class TileEntityChest extends TileEntityContainer implements IInventory {
             if (this.l < 0) {
                 this.l = 0;
             }
-            int oldPower = Math.max(0, Math.min(15, this.l)); // CraftBukkit - Get power before new viewer is added
+            int oldPower = FastMath.max(0, FastMath.min(15, this.l)); // CraftBukkit - Get power before new viewer is added
 
             ++this.l;
             if (this.world == null) return; // CraftBukkit
@@ -367,7 +369,7 @@ public class TileEntityChest extends TileEntityContainer implements IInventory {
 
             // CraftBukkit start - Call redstone event
             if (this.w() == Blocks.TRAPPED_CHEST) {
-                int newPower = Math.max(0, Math.min(15, this.l));
+                int newPower = FastMath.max(0, FastMath.min(15, this.l));
 
                 if (oldPower != newPower) {
                     org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, position.getX(), position.getY(), position.getZ(), oldPower, newPower);
@@ -382,7 +384,7 @@ public class TileEntityChest extends TileEntityContainer implements IInventory {
 
     public void closeContainer(EntityHuman entityhuman) {
         if (!entityhuman.isSpectator() && this.w() instanceof BlockChest) {
-            int oldPower = Math.max(0, Math.min(15, this.l)); // CraftBukkit - Get power before new viewer is added
+            int oldPower = FastMath.max(0, FastMath.min(15, this.l)); // CraftBukkit - Get power before new viewer is added
             --this.l;
             if (this.world == null) return; // CraftBukkit
 
@@ -416,7 +418,7 @@ public class TileEntityChest extends TileEntityContainer implements IInventory {
 
             // CraftBukkit start - Call redstone event
             if (this.w() == Blocks.TRAPPED_CHEST) {
-                int newPower = Math.max(0, Math.min(15, this.l));
+                int newPower = FastMath.max(0, FastMath.min(15, this.l));
 
                 if (oldPower != newPower) {
                     org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, position.getX(), position.getY(), position.getZ(), oldPower, newPower);
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 72476e293..b378881ee 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -1,17 +1,18 @@
 package net.minecraft.server;
 
-import java.util.Iterator;
-import java.util.List;
-
-// CraftBukkit start
+import net.jafama.FastMath;
+import net.techcable.tacospigot.HopperHelper;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryMoveItemEvent;
 import org.bukkit.event.inventory.InventoryPickupItemEvent;
 import org.bukkit.inventory.Inventory;
+
+import java.util.List;
+
+// CraftBukkit start
 // CraftBukkit end
-import net.techcable.tacospigot.HopperHelper; // TacoSpigot
 
 public class TileEntityHopper extends TileEntityContainer implements IHopper, IUpdatePlayerListBox {
 
@@ -545,7 +546,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 flag = true;
             } else if (a(itemstack1, itemstack)) {
                 int j = itemstack.getMaxStackSize() - itemstack1.count;
-                int k = Math.min(itemstack.count, j);
+                int k = FastMath.min(itemstack.count, j);
 
                 itemstack.count -= k;
                 itemstack1.count += k;
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index b61a7a3bc..be872571e 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
+import net.jafama.FastMath;
+
 import java.util.Iterator;
 import java.util.List;
 import java.util.TreeMap;
@@ -198,7 +200,7 @@ public class Village {
                 }
 
                 villagedoor = (VillageDoor) iterator.next();
-            } while (villagedoor.d().getX() != blockposition.getX() || villagedoor.d().getZ() != blockposition.getZ() || Math.abs(villagedoor.d().getY() - blockposition.getY()) > 1);
+            } while (villagedoor.d().getX() != blockposition.getX() || villagedoor.d().getZ() != blockposition.getZ() || FastMath.abs(villagedoor.d().getY() - blockposition.getY()) > 1);
 
             return villagedoor;
         }
@@ -277,7 +279,7 @@ public class Village {
         while (iterator.hasNext()) {
             Village.Aggressor village_aggressor = (Village.Aggressor) iterator.next();
 
-            if (!village_aggressor.a.isAlive() || Math.abs(this.g - village_aggressor.b) > 300) {
+            if (!village_aggressor.a.isAlive() || FastMath.abs(this.g - village_aggressor.b) > 300) {
                 iterator.remove();
             }
         }
@@ -296,7 +298,7 @@ public class Village {
                 villagedoor.a();
             }
 
-            if (!this.f(villagedoor.d()) || Math.abs(this.g - villagedoor.h()) > 1200) {
+            if (!this.f(villagedoor.d()) || FastMath.abs(this.g - villagedoor.h()) > 1200) {
                 this.c = this.c.b(villagedoor.d());
                 flag = true;
                 villagedoor.a(true);
@@ -328,11 +330,11 @@ public class Village {
 
             VillageDoor villagedoor;
 
-            for (Iterator iterator = this.b.iterator(); iterator.hasNext(); j = Math.max(villagedoor.a(this.d), j)) {
+            for (Iterator iterator = this.b.iterator(); iterator.hasNext(); j = FastMath.max(villagedoor.a(this.d), j)) {
                 villagedoor = (VillageDoor) iterator.next();
             }
 
-            this.e = Math.max(32, (int) Math.sqrt((double) j) + 1);
+            this.e = FastMath.max(32, (int) FastMath.sqrt((double) j) + 1);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 315fcc640..b92dce7eb 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
+import net.jafama.FastMath;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
@@ -1134,7 +1135,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public List<AxisAlignedBB> getCubes(Entity entity, AxisAlignedBB axisalignedbb) {
-        ArrayList arraylist = Lists.newArrayList();
+        List<AxisAlignedBB> arraylist = new ArrayList<>();
         int i = MathHelper.floor(axisalignedbb.a);
         int j = MathHelper.floor(axisalignedbb.d + 1.0D);
         int k = MathHelper.floor(axisalignedbb.b);
@@ -1209,11 +1210,11 @@ public abstract class World implements IBlockAccess {
         if (entity instanceof EntityFallingBlock) return arraylist; // TacoSpigot - Optimize falling block movement
 
         double d0 = 0.25D;
-        List list = this.getEntities(entity, axisalignedbb.grow(d0, d0, d0));
+        List<Entity> list = this.getEntities(entity, axisalignedbb.grow(d0, d0, d0));
 
         for (int j2 = 0; j2 < list.size(); ++j2) {
             if (entity.passenger != list && entity.vehicle != list) {
-                AxisAlignedBB axisalignedbb1 = ((Entity) list.get(j2)).S();
+                AxisAlignedBB axisalignedbb1 = list.get(j2).S();
 
                 if (axisalignedbb1 != null && axisalignedbb1.b(axisalignedbb)) {
                     arraylist.add(axisalignedbb1);
@@ -1891,8 +1892,8 @@ public abstract class World implements IBlockAccess {
         double d0 = 1.0D / ((axisalignedbb.d - axisalignedbb.a) * 2.0D + 1.0D);
         double d1 = 1.0D / ((axisalignedbb.e - axisalignedbb.b) * 2.0D + 1.0D);
         double d2 = 1.0D / ((axisalignedbb.f - axisalignedbb.c) * 2.0D + 1.0D);
-        double d3 = (1.0D - Math.floor(1.0D / d0) * d0) / 2.0D;
-        double d4 = (1.0D - Math.floor(1.0D / d2) * d2) / 2.0D;
+        double d3 = (1.0D - FastMath.floor(1.0D / d0) * d0) / 2.0D;
+        double d4 = (1.0D - FastMath.floor(1.0D / d2) * d2) / 2.0D;
 
         if (d0 >= 0.0D && d1 >= 0.0D && d2 >= 0.0D) {
             int i = 0;
@@ -2175,12 +2176,12 @@ public abstract class World implements IBlockAccess {
         // Quick conditions to allow us to exist early
         if (optimalChunks > 0) {
             // Keep chunks with growth inside of the optimal chunk range
-            int chunksPerPlayer = Math.min(200, Math.max(1, (int) (((optimalChunks - players.size()) / (double) players.size()) + 0.5)));
+            int chunksPerPlayer = FastMath.min(200, FastMath.max(1, (int) (((optimalChunks - players.size()) / (double) players.size()) + 0.5)));
             int randRange = 3 + chunksPerPlayer / 30;
             // Limit to normal tick radius - including view distance
             randRange = (randRange > chunkTickRadius) ? chunkTickRadius : randRange;
             // odds of growth happening vs growth happening in vanilla
-            this.growthOdds = this.modifiedOdds = Math.max(35, Math.min(100, ((chunksPerPlayer + 1) * 100F) / 15F));
+            this.growthOdds = this.modifiedOdds = FastMath.max(35, FastMath.min(100, ((chunksPerPlayer + 1) * 100F) / 15F));
             // Spigot end
             for (i = 0; i < this.players.size(); ++i) {
                 entityhuman = this.players.get(i);
@@ -2190,7 +2191,7 @@ public abstract class World implements IBlockAccess {
 
                 // Spigot start - Always update the chunk the player is on
                 long key = chunkToKey(j, k);
-                int existingPlayers = Math.max(0, chunkTickList.get(key)); // filter out -1
+                int existingPlayers = FastMath.max(0, chunkTickList.get(key)); // filter out -1
                 chunkTickList.put(key, (short) (existingPlayers + 1));
 
                 // Check and see if we update the chunks surrounding the player this tick
@@ -2426,7 +2427,7 @@ public abstract class World implements IBlockAccess {
                                     int i5 = k2 + enumdirection.getAdjacentZ();
 
                                     blockposition_mutableblockposition.c(k4, l4, i5);
-                                    int j5 = Math.max(1, this.getType(blockposition_mutableblockposition).getBlock().p());
+                                    int j5 = FastMath.max(1, this.getType(blockposition_mutableblockposition).getBlock().p());
 
                                     l2 = this.b(enumskyblock, blockposition_mutableblockposition);
                                     if (l2 == l3 - j5 && j < this.H.length) {
@@ -2456,9 +2457,9 @@ public abstract class World implements IBlockAccess {
                 if (l2 != k5) {
                     this.a(enumskyblock, blockposition2, l2);
                     if (l2 > k5) {
-                        i3 = Math.abs(i2 - i1);
-                        j3 = Math.abs(j2 - j1);
-                        k3 = Math.abs(k2 - k1);
+                        i3 = FastMath.abs(i2 - i1);
+                        j3 = FastMath.abs(j2 - j1);
+                        k3 = FastMath.abs(k2 - k1);
                         boolean flag = j < this.H.length - 6;
 
                         if (i3 + j3 + k3 < 17 && flag) {
@@ -2736,28 +2737,28 @@ public abstract class World implements IBlockAccess {
 
     public int getBlockPower(BlockPosition blockposition) {
         byte b0 = 0;
-        int i = Math.max(b0, this.getBlockPower(blockposition.down(), EnumDirection.DOWN));
+        int i = FastMath.max(b0, this.getBlockPower(blockposition.down(), EnumDirection.DOWN));
 
         if (i >= 15) {
             return i;
         } else {
-            i = Math.max(i, this.getBlockPower(blockposition.up(), EnumDirection.UP));
+            i = FastMath.max(i, this.getBlockPower(blockposition.up(), EnumDirection.UP));
             if (i >= 15) {
                 return i;
             } else {
-                i = Math.max(i, this.getBlockPower(blockposition.north(), EnumDirection.NORTH));
+                i = FastMath.max(i, this.getBlockPower(blockposition.north(), EnumDirection.NORTH));
                 if (i >= 15) {
                     return i;
                 } else {
-                    i = Math.max(i, this.getBlockPower(blockposition.south(), EnumDirection.SOUTH));
+                    i = FastMath.max(i, this.getBlockPower(blockposition.south(), EnumDirection.SOUTH));
                     if (i >= 15) {
                         return i;
                     } else {
-                        i = Math.max(i, this.getBlockPower(blockposition.west(), EnumDirection.WEST));
+                        i = FastMath.max(i, this.getBlockPower(blockposition.west(), EnumDirection.WEST));
                         if (i >= 15) {
                             return i;
                         } else {
-                            i = Math.max(i, this.getBlockPower(blockposition.east(), EnumDirection.EAST));
+                            i = FastMath.max(i, this.getBlockPower(blockposition.east(), EnumDirection.EAST));
                             return i >= 15 ? i : i;
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index 3080778c0..ec84796c7 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -1,7 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import java.util.Iterator;
+import net.jafama.FastMath;
+
 import java.util.List;
 
 public class WorldBorder {
@@ -61,10 +62,10 @@ public class WorldBorder {
         double d3 = this.e() - d1;
         double d4 = d0 - this.b();
         double d5 = this.d() - d0;
-        double d6 = Math.min(d4, d5);
+        double d6 = FastMath.min(d4, d5);
 
-        d6 = Math.min(d6, d2);
-        return Math.min(d6, d3);
+        d6 = FastMath.min(d6, d2);
+        return FastMath.min(d6, d3);
     }
 
     public EnumWorldBorderState getState() {
diff --git a/src/main/java/net/minecraft/server/WorldGenForestTree.java b/src/main/java/net/minecraft/server/WorldGenForestTree.java
index 882bf99ca..c816c62ca 100644
--- a/src/main/java/net/minecraft/server/WorldGenForestTree.java
+++ b/src/main/java/net/minecraft/server/WorldGenForestTree.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+
 import java.util.Random;
 
 public class WorldGenForestTree extends WorldGenTreeAbstract {
@@ -87,7 +89,7 @@ public class WorldGenForestTree extends WorldGenTreeAbstract {
 
                 for (j2 = -3; j2 <= 4; ++j2) {
                     for (k2 = -3; k2 <= 4; ++k2) {
-                        if ((j2 != -3 || k2 != -3) && (j2 != -3 || k2 != 4) && (j2 != 4 || k2 != -3) && (j2 != 4 || k2 != 4) && (Math.abs(j2) < 3 || Math.abs(k2) < 3)) {
+                        if ((j2 != -3 || k2 != -3) && (j2 != -3 || k2 != 4) && (j2 != 4 || k2 != -3) && (j2 != 4 || k2 != 4) && (FastMath.abs(j2) < 3 || FastMath.abs(k2) < 3)) {
                             this.a(world, k1 + j2, i2, l1 + k2);
                         }
                     }
@@ -114,7 +116,7 @@ public class WorldGenForestTree extends WorldGenTreeAbstract {
 
                             for (i3 = -2; i3 <= 2; ++i3) {
                                 for (j3 = -2; j3 <= 2; ++j3) {
-                                    if (Math.abs(i3) != 2 || Math.abs(j3) != 2) {
+                                    if (FastMath.abs(i3) != 2 || FastMath.abs(j3) != 2) {
                                         this.a(world, k1 + j2 + i3, i2 - 1, l1 + k2 + j3);
                                     }
                                 }
diff --git a/src/main/java/net/minecraft/server/WorldGenGroundBush.java b/src/main/java/net/minecraft/server/WorldGenGroundBush.java
index 16bdc77b5..3a0b566db 100644
--- a/src/main/java/net/minecraft/server/WorldGenGroundBush.java
+++ b/src/main/java/net/minecraft/server/WorldGenGroundBush.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+
 import java.util.Random;
 
 public class WorldGenGroundBush extends WorldGenTrees {
@@ -36,7 +38,7 @@ public class WorldGenGroundBush extends WorldGenTrees {
                     for (int j1 = blockposition.getZ() - k; j1 <= blockposition.getZ() + k; ++j1) {
                         int k1 = j1 - blockposition.getZ();
 
-                        if (Math.abs(i1) != k || Math.abs(k1) != k || random.nextInt(2) != 0) {
+                        if (FastMath.abs(i1) != k || FastMath.abs(k1) != k || random.nextInt(2) != 0) {
                             BlockPosition blockposition1 = new BlockPosition(l, i, j1);
 
                             if (!world.getType(blockposition1).getBlock().o()) {
diff --git a/src/main/java/net/minecraft/server/WorldGenPackedIce2.java b/src/main/java/net/minecraft/server/WorldGenPackedIce2.java
index 3d08a8296..38534c2a1 100644
--- a/src/main/java/net/minecraft/server/WorldGenPackedIce2.java
+++ b/src/main/java/net/minecraft/server/WorldGenPackedIce2.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.jafama.FastMath;
+
 import java.util.Random;
 
 public class WorldGenPackedIce2 extends WorldGenerator {
@@ -68,7 +70,7 @@ public class WorldGenPackedIce2 extends WorldGenerator {
                     BlockPosition blockposition1 = blockposition.a(k1, -1, l);
                     int l1 = 50;
 
-                    if (Math.abs(k1) == 1 && Math.abs(l) == 1) {
+                    if (FastMath.abs(k1) == 1 && FastMath.abs(l) == 1) {
                         l1 = random.nextInt(5);
                     }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenRegistration.java b/src/main/java/net/minecraft/server/WorldGenRegistration.java
index 6e4dfb585..0bb01c5d8 100644
--- a/src/main/java/net/minecraft/server/WorldGenRegistration.java
+++ b/src/main/java/net/minecraft/server/WorldGenRegistration.java
@@ -1,7 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import java.util.Iterator;
+import net.jafama.FastMath;
+
 import java.util.List;
 import java.util.Random;
 
@@ -630,7 +631,7 @@ public class WorldGenRegistration {
                     for (int i1 = this.l.a; i1 <= this.l.d; ++i1) {
                         blockposition_mutableblockposition.c(i1, 64, l);
                         if (structureboundingbox.b(blockposition_mutableblockposition)) {
-                            j += Math.max(world.r(blockposition_mutableblockposition).getY(), world.worldProvider.getSeaLevel());
+                            j += FastMath.max(world.r(blockposition_mutableblockposition).getY(), world.worldProvider.getSeaLevel());
                             ++k;
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
index cdcfbd009..66d136c41 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import net.jafama.FastMath;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -132,7 +134,7 @@ public class WorldGenVillagePieces {
     private static StructurePiece d(WorldGenVillagePieces.WorldGenVillageStartPiece worldgenvillagepieces_worldgenvillagestartpiece, List<StructurePiece> list, Random random, int i, int j, int k, EnumDirection enumdirection, int l) {
         if (l > 50) {
             return null;
-        } else if (Math.abs(i - worldgenvillagepieces_worldgenvillagestartpiece.c().a) <= 112 && Math.abs(k - worldgenvillagepieces_worldgenvillagestartpiece.c().c) <= 112) {
+        } else if (FastMath.abs(i - worldgenvillagepieces_worldgenvillagestartpiece.c().a) <= 112 && FastMath.abs(k - worldgenvillagepieces_worldgenvillagestartpiece.c().c) <= 112) {
             WorldGenVillagePieces.WorldGenVillagePiece worldgenvillagepieces_worldgenvillagepiece = c(worldgenvillagepieces_worldgenvillagestartpiece, list, random, i, j, k, enumdirection, l + 1);
 
             if (worldgenvillagepieces_worldgenvillagepiece != null) {
@@ -158,7 +160,7 @@ public class WorldGenVillagePieces {
     private static StructurePiece e(WorldGenVillagePieces.WorldGenVillageStartPiece worldgenvillagepieces_worldgenvillagestartpiece, List<StructurePiece> list, Random random, int i, int j, int k, EnumDirection enumdirection, int l) {
         if (l > 3 + worldgenvillagepieces_worldgenvillagestartpiece.c) {
             return null;
-        } else if (Math.abs(i - worldgenvillagepieces_worldgenvillagestartpiece.c().a) <= 112 && Math.abs(k - worldgenvillagepieces_worldgenvillagestartpiece.c().c) <= 112) {
+        } else if (FastMath.abs(i - worldgenvillagepieces_worldgenvillagestartpiece.c().a) <= 112 && FastMath.abs(k - worldgenvillagepieces_worldgenvillagestartpiece.c().c) <= 112) {
             StructureBoundingBox structureboundingbox = WorldGenVillagePieces.WorldGenVillageRoad.a(worldgenvillagepieces_worldgenvillagestartpiece, list, random, i, j, k, enumdirection);
 
             if (structureboundingbox != null && structureboundingbox.b > 10) {
@@ -1228,7 +1230,7 @@ public class WorldGenVillagePieces {
             super(worldgenvillagepieces_worldgenvillagestartpiece, i);
             this.m = enumdirection;
             this.l = structureboundingbox;
-            this.a = Math.max(structureboundingbox.c(), structureboundingbox.e());
+            this.a = FastMath.max(structureboundingbox.c(), structureboundingbox.e());
         }
 
         protected void a(NBTTagCompound nbttagcompound) {
@@ -1250,7 +1252,7 @@ public class WorldGenVillagePieces {
             for (i = random.nextInt(5); i < this.a - 8; i += 2 + random.nextInt(5)) {
                 structurepiece1 = this.a((WorldGenVillagePieces.WorldGenVillageStartPiece) structurepiece, list, random, 0, i);
                 if (structurepiece1 != null) {
-                    i += Math.max(structurepiece1.l.c(), structurepiece1.l.e());
+                    i += FastMath.max(structurepiece1.l.c(), structurepiece1.l.e());
                     flag = true;
                 }
             }
@@ -1258,7 +1260,7 @@ public class WorldGenVillagePieces {
             for (i = random.nextInt(5); i < this.a - 8; i += 2 + random.nextInt(5)) {
                 structurepiece1 = this.b((WorldGenVillagePieces.WorldGenVillageStartPiece) structurepiece, list, random, 0, i);
                 if (structurepiece1 != null) {
-                    i += Math.max(structurepiece1.l.c(), structurepiece1.l.e());
+                    i += FastMath.max(structurepiece1.l.c(), structurepiece1.l.e());
                     flag = true;
                 }
             }
@@ -1513,7 +1515,7 @@ public class WorldGenVillagePieces {
                 for (int l = this.l.a; l <= this.l.d; ++l) {
                     blockposition_mutableblockposition.c(l, 64, k);
                     if (structureboundingbox.b(blockposition_mutableblockposition)) {
-                        i += Math.max(world.r(blockposition_mutableblockposition).getY(), world.worldProvider.getSeaLevel());
+                        i += FastMath.max(world.r(blockposition_mutableblockposition).getY(), world.worldProvider.getSeaLevel());
                         ++j;
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 097fd5710..2691f9afe 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -3,16 +3,16 @@ package net.minecraft.server;
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.Iterator;
+import net.jafama.FastMath;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.map.CraftMapView;
+
 import java.util.List;
 import java.util.Map;
-
-// CraftBukkit start
 import java.util.UUID;
 
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftWorld;
-import org.bukkit.craftbukkit.map.CraftMapView;
+// CraftBukkit start
 // CraftBukkit end
 
 public class WorldMap extends PersistentBase {
@@ -203,7 +203,7 @@ public class WorldMap extends PersistentBase {
                 b3 = (byte) (k * k * 34187121 + k * 121 >> 15 & 15);
             }
         } else {
-            if (Math.abs(f) >= 320.0F || Math.abs(f1) >= 320.0F) {
+            if (FastMath.abs(f) >= 320.0F || FastMath.abs(f1) >= 320.0F) {
                 this.decorations.remove(s);
                 return;
             }
@@ -296,10 +296,10 @@ public class WorldMap extends PersistentBase {
 
         public void a(int i, int j) {
             if (this.d) {
-                this.e = Math.min(this.e, i);
-                this.f = Math.min(this.f, j);
-                this.g = Math.max(this.g, i);
-                this.h = Math.max(this.h, j);
+                this.e = FastMath.min(this.e, i);
+                this.f = FastMath.min(this.f, j);
+                this.g = FastMath.max(this.g, i);
+                this.h = FastMath.max(this.h, j);
             } else {
                 this.d = true;
                 this.e = i;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 0f3753ce1..9b7eda2ed 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -830,11 +830,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
         final PacketPlayOutExplosion packet = new PacketPlayOutExplosion(d0, d1, d2, f, new ArrayList<>(explosion.getBlocks()), null);
         for (EntityHuman entityhuman : this.players) {
-            EntityPlayer entityPlayer = (EntityPlayer) entityhuman;
-            if (entityPlayer.isTntToggle()) {
-                if (entityhuman.e(d0, d1, d2) < 4096.0) {
-                    entityPlayer.playerConnection.sendPacket(packet);
-                }
+            if (entityhuman.e(d0, d1, d2) < 4096.0) {
+                ((EntityPlayer) entityhuman).playerConnection.sendPacket(packet);
             }
         }
         return explosion;
diff --git a/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java b/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
index b2633199b..a71fdd49c 100644
--- a/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
+++ b/src/main/java/net/techcable/tacospigot/utils/BlockHelper.java
@@ -1,12 +1,13 @@
 package net.techcable.tacospigot.utils;
 
-import java.util.function.BiConsumer;
-import java.util.function.BiPredicate;
-
+import net.jafama.FastMath;
 import net.minecraft.server.Block;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.World;
 
+import java.util.function.BiConsumer;
+import java.util.function.BiPredicate;
+
 public class BlockHelper {
     private BlockHelper() {}
 
@@ -25,8 +26,8 @@ public class BlockHelper {
         // Make sure to keep this below the inline threshold!!!
         int startX = pos.getX() - radius;
         int endX = pos.getX() + radius;
-        int startY = Math.max(0, pos.getY() - radius);
-        int endY = Math.min(255, pos.getY() + radius);
+        int startY = FastMath.max(0, pos.getY() - radius);
+        int endY = FastMath.min(255, pos.getY() + radius);
         int startZ = pos.getZ() - radius;
         int endZ = pos.getZ() + radius;
         BlockPosition.MutableBlockPosition adjacent = new BlockPosition.MutableBlockPosition();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a78b8c4db..f4c54bb97 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -16,6 +16,7 @@ import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.base64.Base64;
 import jline.console.ConsoleReader;
+import net.jafama.FastMath;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.WorldType;
 import net.minecraft.server.*;
@@ -355,7 +356,7 @@ public final class CraftServer implements Server {
         int delta = Integer.MAX_VALUE;
         for (Player player : getOnlinePlayers()) {
             if (player.getName().toLowerCase().startsWith(lowerName)) {
-                int curDelta = Math.abs(player.getName().length() - lowerName.length());
+                int curDelta = FastMath.abs(player.getName().length() - lowerName.length());
                 if (curDelta < delta) {
                     found = player;
                     delta = curDelta;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 94da183b3..a87071040 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -1,49 +1,32 @@
 package org.bukkit.craftbukkit;
 
 import com.google.common.base.Preconditions;
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Iterator;
-import java.util.Random;
-import java.util.Set;
-import java.util.UUID;
-
+import net.jafama.FastMath;
 import net.minecraft.server.*;
-
 import org.apache.commons.lang.Validate;
-import org.bukkit.BlockChangeDelegate;
-import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
 import org.bukkit.ChunkSnapshot;
-import org.bukkit.Difficulty;
-import org.bukkit.Effect;
-import org.bukkit.Location;
-import org.bukkit.Sound;
-import org.bukkit.TreeType;
 import org.bukkit.World;
 import org.bukkit.WorldBorder;
+import org.bukkit.*;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockState;
-import org.bukkit.craftbukkit.entity.*;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.craftbukkit.entity.CraftLightningStrike;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.metadata.BlockMetadataStore;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.LongHash;
-import org.bukkit.entity.*;
 import org.bukkit.entity.Entity;
-import org.bukkit.entity.minecart.ExplosiveMinecart;
-import org.bukkit.entity.minecart.HopperMinecart;
+import org.bukkit.entity.*;
 import org.bukkit.entity.minecart.PoweredMinecart;
-import org.bukkit.entity.minecart.SpawnerMinecart;
 import org.bukkit.entity.minecart.StorageMinecart;
+import org.bukkit.entity.minecart.*;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.event.world.SpawnChangeEvent;
 import org.bukkit.generator.BlockPopulator;
@@ -54,6 +37,9 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.util.Vector;
 
+import java.io.File;
+import java.util.*;
+
 public class CraftWorld implements World {
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
 
@@ -337,23 +323,23 @@ public class CraftWorld implements World {
         double prevY = loc.getY();
         double prevZ = loc.getZ();
         loc.add(xs, ys, zs);
-        if (loc.getX() < Math.floor(prevX)) {
-            loc.setX(Math.floor(prevX));
+        if (loc.getX() < FastMath.floor(prevX)) {
+            loc.setX(FastMath.floor(prevX));
         }
-        if (loc.getX() >= Math.ceil(prevX)) {
-            loc.setX(Math.ceil(prevX - 0.01));
+        if (loc.getX() >= FastMath.ceil(prevX)) {
+            loc.setX(FastMath.ceil(prevX - 0.01));
         }
-        if (loc.getY() < Math.floor(prevY)) {
-            loc.setY(Math.floor(prevY));
+        if (loc.getY() < FastMath.floor(prevY)) {
+            loc.setY(FastMath.floor(prevY));
         }
-        if (loc.getY() >= Math.ceil(prevY)) {
-            loc.setY(Math.ceil(prevY - 0.01));
+        if (loc.getY() >= FastMath.ceil(prevY)) {
+            loc.setY(FastMath.ceil(prevY - 0.01));
         }
-        if (loc.getZ() < Math.floor(prevZ)) {
-            loc.setZ(Math.floor(prevZ));
+        if (loc.getZ() < FastMath.floor(prevZ)) {
+            loc.setZ(FastMath.floor(prevZ));
         }
-        if (loc.getZ() >= Math.ceil(prevZ)) {
-            loc.setZ(Math.ceil(prevZ - 0.01));
+        if (loc.getZ() >= FastMath.ceil(prevZ)) {
+            loc.setZ(FastMath.ceil(prevZ - 0.01));
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 6d1afb81d..26d8c6b41 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
+import net.jafama.FastMath;
 import net.minecraft.server.*;
 import org.bukkit.Chunk;
 import org.bukkit.Location;
@@ -348,7 +349,7 @@ public class CraftBlock implements Block {
 
         Block relative = getRelative(face);
         if (relative.getType() == Material.REDSTONE_WIRE) {
-            return Math.max(power, relative.getData()) > 0;
+            return FastMath.max(power, relative.getData()) > 0;
         }
 
         return power > 0;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 8f4abb293..fd5b71fc7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -1,34 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-
-import net.minecraft.server.DamageSource;
-import net.minecraft.server.EntityArmorStand;
-import net.minecraft.server.EntityArrow;
-import net.minecraft.server.EntityEgg;
-import net.minecraft.server.EntityEnderPearl;
-import net.minecraft.server.EntityFishingHook;
-import net.minecraft.server.EntityHuman;
-import net.minecraft.server.EntityFireball;
-import net.minecraft.server.EntityInsentient;
-import net.minecraft.server.EntityLargeFireball;
-import net.minecraft.server.EntityLiving;
-import net.minecraft.server.EntityPlayer;
-import net.minecraft.server.EntityPotion;
-import net.minecraft.server.EntitySmallFireball;
-import net.minecraft.server.EntitySnowball;
-import net.minecraft.server.EntityThrownExpBottle;
-import net.minecraft.server.EntityWither;
-import net.minecraft.server.EntityWitherSkull;
-import net.minecraft.server.GenericAttributes;
-import net.minecraft.server.MobEffect;
-import net.minecraft.server.MobEffectList;
-
+import net.jafama.FastMath;
+import net.minecraft.server.*;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -37,22 +10,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.Arrow;
-import org.bukkit.entity.Egg;
-import org.bukkit.entity.EnderPearl;
 import org.bukkit.entity.Entity;
-import org.bukkit.entity.EntityType;
-import org.bukkit.entity.Fireball;
-import org.bukkit.entity.Fish;
-import org.bukkit.entity.HumanEntity;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Player;
-import org.bukkit.entity.Projectile;
-import org.bukkit.entity.SmallFireball;
-import org.bukkit.entity.Snowball;
-import org.bukkit.entity.ThrownExpBottle;
-import org.bukkit.entity.ThrownPotion;
-import org.bukkit.entity.WitherSkull;
+import org.bukkit.entity.*;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.ItemStack;
@@ -62,6 +21,8 @@ import org.bukkit.util.BlockIterator;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
+import java.util.*;
+
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     private CraftEntityEquipment equipment;
 
@@ -74,7 +35,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     public double getHealth() {
-        return Math.min(Math.max(0, getHandle().getHealth()), getMaxHealth());
+        return FastMath.min(FastMath.max(0, getHandle().getHealth()), getMaxHealth());
     }
 
     public void setHealth(double health) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d5cf0ba05..839b5a41c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
+import net.jafama.FastMath;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.*;
 import net.minecraft.server.PacketPlayOutTitle.EnumTitleAction;
@@ -477,7 +478,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 break;
         }
 
-        float f = (float) Math.pow(2.0D, (note - 12.0D) / 12.0D);
+        float f = (float) FastMath.pow(2.0D, (note - 12.0D) / 12.0D);
         getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("note." + instrumentName, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
     }
 
@@ -627,7 +628,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 instrumentName = "bassattack";
                 break;
         }
-        float f = (float) Math.pow(2.0D, (note.getId() - 12.0D) / 12.0D);
+        float f = (float) FastMath.pow(2.0D, (note.getId() - 12.0D) / 12.0D);
         getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("note." + instrumentName, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
     }
 
@@ -1374,7 +1375,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public int getNoDamageTicks() {
         if (getHandle().invulnerableTicks > 0) {
-            return Math.max(getHandle().invulnerableTicks, getHandle().noDamageTicks);
+            return FastMath.max(getHandle().invulnerableTicks, getHandle().noDamageTicks);
         } else {
             return getHandle().noDamageTicks;
         }
@@ -1391,7 +1392,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void setFlySpeed(float value) {
         validateSpeed(value);
         EntityPlayer player = getHandle();
-        player.abilities.flySpeed = Math.max(value, 0.0001f) / 2f; // Spigot
+        player.abilities.flySpeed = FastMath.max(value, 0.0001f) / 2f; // Spigot
         player.updateAbilities();
 
     }
@@ -1421,7 +1422,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void setMaxHealth(double amount) {
         super.setMaxHealth(amount);
-        this.health = Math.min(this.health, health);
+        this.health = FastMath.min(this.health, health);
         getHandle().triggerHealthUpdate();
     }
 
@@ -1506,7 +1507,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void setWalkSpeed(float value) {
         validateSpeed(value);
         EntityPlayer player = getHandle();
-        player.abilities.walkSpeed = Math.max(value, 0.0001f) / 2f; // Spigot
+        player.abilities.walkSpeed = FastMath.max(value, 0.0001f) / 2f; // Spigot
         player.updateAbilities();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index b9b6f3247..a203d71b4 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1,16 +1,10 @@
 package org.bukkit.craftbukkit.event;
 
-import java.net.InetAddress;
-import java.util.ArrayList;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
-
+import net.jafama.FastMath;
+import net.minecraft.server.Entity;
 import net.minecraft.server.*;
-
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Server;
@@ -32,19 +26,7 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftMetaBook;
 import org.bukkit.craftbukkit.util.CraftDamageSource;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.entity.Arrow;
-import org.bukkit.entity.Creeper;
-import org.bukkit.entity.EntityType;
-import org.bukkit.entity.Firework;
-import org.bukkit.entity.Horse;
-import org.bukkit.entity.LightningStrike;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Pig;
-import org.bukkit.entity.PigZombie;
-import org.bukkit.entity.Player;
-import org.bukkit.entity.Projectile;
-import org.bukkit.entity.ThrownExpBottle;
-import org.bukkit.entity.ThrownPotion;
+import org.bukkit.entity.*;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.*;
@@ -61,6 +43,12 @@ import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.meta.BookMeta;
 
+import java.net.InetAddress;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
 public class CraftEventFactory {
     public static final DamageSource MELTING = CraftDamageSource.copyOf(DamageSource.BURN);
     public static final DamageSource POISON = CraftDamageSource.copyOf(DamageSource.MAGIC);
@@ -79,7 +67,7 @@ public class CraftEventFactory {
 
         BlockPosition chunkcoordinates = worldServer.getSpawn();
 
-        int distanceFromSpawn = Math.max(Math.abs(x - chunkcoordinates.getX()), Math.abs(z - chunkcoordinates.getY()));
+        int distanceFromSpawn = FastMath.max(FastMath.abs(x - chunkcoordinates.getX()), FastMath.abs(z - chunkcoordinates.getY()));
         return distanceFromSpawn > spawnSize;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index f5c5f962b..404264bd6 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.generator;
 
 import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
+import net.jafama.FastMath;
 import net.minecraft.server.*;
 import org.bukkit.block.Biome;
 import org.bukkit.craftbukkit.block.CraftBlock;
@@ -56,7 +57,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
             chunk = new Chunk(this.world, x, z);
             
             ChunkSection[] csect = chunk.getSections();
-            int scnt = Math.min(csect.length, sections.length);
+            int scnt = FastMath.min(csect.length, sections.length);
             
             // Loop through returned sections
             for (int sec = 0; sec < scnt; sec++) {
@@ -85,7 +86,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
                 chunk = new Chunk(this.world, x, z);
                 
                 ChunkSection[] csect = chunk.getSections();
-                int scnt = Math.min(csect.length, xbtypes.length);
+                int scnt = FastMath.min(csect.length, xbtypes.length);
                 
                 // Loop through returned sections
                 for (int sec = 0; sec < scnt; sec++) {
@@ -109,7 +110,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
                     chunk = new Chunk(this.world, x, z);
                     
                     ChunkSection[] csect = chunk.getSections();
-                    int scnt = Math.min(csect.length, btypes.length);
+                    int scnt = FastMath.min(csect.length, btypes.length);
                     
                     for (int sec = 0; sec < scnt; sec++) {
                         if (btypes[sec] == null) {
@@ -133,8 +134,8 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
                     chunk = new Chunk(this.world, x, z); // Create empty chunk
                     
                     ChunkSection[] csect = chunk.getSections();
-                    
-                    scnt = Math.min(scnt, csect.length);
+
+                    scnt = FastMath.min(scnt, csect.length);
                     // Loop through sections
                     for (int sec = 0; sec < scnt; sec++) {
                         ChunkSection cs = null; // Add sections when needed
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 3b7a73bb7..26abe53f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -1,28 +1,18 @@
 package org.bukkit.craftbukkit.inventory;
 
-import java.util.HashMap;
-import java.util.List;
-import java.util.ListIterator;
-
-import net.minecraft.server.IHopper;
-import net.minecraft.server.IInventory;
-import net.minecraft.server.InventoryCrafting;
-import net.minecraft.server.InventoryEnderChest;
-import net.minecraft.server.InventoryMerchant;
-import net.minecraft.server.PlayerInventory;
-import net.minecraft.server.TileEntityBeacon;
-import net.minecraft.server.TileEntityBrewingStand;
-import net.minecraft.server.TileEntityDispenser;
-import net.minecraft.server.TileEntityDropper;
-import net.minecraft.server.TileEntityFurnace;
-
+import net.jafama.FastMath;
+import net.minecraft.server.*;
 import org.apache.commons.lang.Validate;
+import org.bukkit.Material;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.Material;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.ListIterator;
 
 public class CraftInventory implements Inventory {
     protected final IInventory inventory;
@@ -52,7 +42,7 @@ public class CraftInventory implements Inventory {
         ItemStack[] items = new ItemStack[getSize()];
         net.minecraft.server.ItemStack[] mcItems = getInventory().getContents();
 
-        int size = Math.min(items.length, mcItems.length);
+        int size = FastMath.min(items.length, mcItems.length);
         for (int i = 0; i < size; i++) {
             items[i] = mcItems[i] == null ? null : CraftItemStack.asCraftMirror(mcItems[i]);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
index d0031b6d3..6908eb420 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
@@ -2,9 +2,7 @@ package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
+import net.jafama.FastMath;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
 import org.bukkit.DyeColor;
@@ -14,6 +12,10 @@ import org.bukkit.block.banner.PatternType;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.inventory.meta.BannerMeta;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     
@@ -50,7 +52,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
 
         if (entityTag.hasKey(PATTERNS.NBT)) {
             NBTTagList patterns = entityTag.getList(PATTERNS.NBT, 10);
-            for (int i = 0; i < Math.min(patterns.size(), 20); i++) {
+            for (int i = 0; i < FastMath.min(patterns.size(), 20); i++) {
                 NBTTagCompound p = patterns.get(i);
                 this.patterns.add(new Pattern(DyeColor.getByDyeData((byte) p.getInt(COLOR.NBT)), PatternType.getByIdentifier(p.getString(PATTERN.NBT))));
             }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 1dd81c96e..9488c7b29 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -1,6 +1,7 @@
 package org.spigotmc;
 
 import co.aikar.timings.SpigotTimings;
+import net.jafama.FastMath;
 import net.minecraft.server.*;
 
 import java.util.List;
@@ -67,9 +68,9 @@ public class ActivationRange {
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
         final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
 
-        int maxRange = Math.max(monsterActivationRange, animalActivationRange);
-        maxRange = Math.max(maxRange, miscActivationRange);
-        maxRange = Math.min((world.spigotConfig.viewDistance << 4) - 8, maxRange);
+        int maxRange = FastMath.max(monsterActivationRange, animalActivationRange);
+        maxRange = FastMath.max(maxRange, miscActivationRange);
+        maxRange = FastMath.min((world.spigotConfig.viewDistance << 4) - 8, maxRange);
 
         for (Entity player : (List<Entity>) (List) world.players) {
 
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index f3a2c846b..a9fe2679f 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -1,22 +1,19 @@
 package org.spigotmc;
 
+import co.aikar.timings.SpigotTimings;
 import gnu.trove.set.TByteSet;
 import gnu.trove.set.hash.TByteHashSet;
-import net.minecraft.server.Block;
-import net.minecraft.server.BlockPosition;
-import net.minecraft.server.Blocks;
-import net.minecraft.server.ChunkSection;
-import net.minecraft.server.World;
+import net.jafama.FastMath;
+import net.minecraft.server.*;
+import net.techcable.tacospigot.utils.BlockHelper;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import co.aikar.timings.SpigotTimings;
 
-// PaperSpigot start
 import java.util.HashSet;
 import java.util.Set;
+
+// PaperSpigot start
 // PaperSpigot end
 // TacoSpigot start
-import net.minecraft.server.Chunk;
-import net.techcable.tacospigot.utils.BlockHelper;
 // TacoSpigot end
 
 public class AntiXray
@@ -217,8 +214,8 @@ public class AntiXray
     private void updateNearbyBlocks(World world, final BlockPosition startPos, int radius, boolean updateSelf) {
         int startX = startPos.getX() - radius;
         int endX = startPos.getX() + radius;
-        int startY = Math.max(0, startPos.getY() - radius);
-        int endY = Math.min(255, startPos.getY() + radius);
+        int startY = FastMath.max(0, startPos.getY() - radius);
+        int endY = FastMath.min(255, startPos.getY() + radius);
         int startZ = startPos.getZ() - radius;
         int endZ = startPos.getZ() + radius;
         BlockPosition.MutableBlockPosition adjacent = new BlockPosition.MutableBlockPosition();
-- 
2.21.0.windows.1

