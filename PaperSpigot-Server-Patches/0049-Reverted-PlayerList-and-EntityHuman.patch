From 414642acbd85c928a3c4ce85f4e505f6a08a15a6 Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Sun, 5 May 2019 01:56:51 -0400
Subject: [PATCH] Reverted PlayerList and EntityHuman


diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index b4bd0a4a9..1d8569a02 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -316,7 +316,7 @@ public abstract class EntityHuman extends EntityLiving {
                 return;
             }
             // CraftBukkit end
-            
+
             ItemStack itemstack = this.g.b(this.world, this);
 
             if (itemstack != this.g || itemstack != null && itemstack.count != i) {
@@ -401,7 +401,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         this.k((float) attributeinstance.getValue());
         float f = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
-        float f1 = (float) ( org.bukkit.craftbukkit.TrigMath.atan(-this.motY * 0.20000000298023224D) * 15.0D); // CraftBukkit
+        float f1 = (float) (org.bukkit.craftbukkit.TrigMath.atan(-this.motY * 0.20000000298023224D) * 15.0D); // CraftBukkit
 
         if (f > 0.1F) {
             f = 0.1F;
@@ -641,21 +641,21 @@ public abstract class EntityHuman extends EntityLiving {
             float f1 = 1.0F;
 
             switch (this.getEffect(MobEffectList.SLOWER_DIG).getAmplifier()) {
-            case 0:
-                f1 = 0.3F;
-                break;
+                case 0:
+                    f1 = 0.3F;
+                    break;
 
-            case 1:
-                f1 = 0.09F;
-                break;
+                case 1:
+                    f1 = 0.09F;
+                    break;
 
-            case 2:
-                f1 = 0.0027F;
-                break;
+                case 2:
+                    f1 = 0.0027F;
+                    break;
 
-            case 3:
-            default:
-                f1 = 8.1E-4F;
+                case 3:
+                default:
+                    f1 = 8.1E-4F;
             }
 
             f *= f1;
@@ -874,19 +874,26 @@ public abstract class EntityHuman extends EntityLiving {
         return false; // CraftBukkit
     }
 
-    public void openSign(TileEntitySign tileentitysign) {}
+    public void openSign(TileEntitySign tileentitysign) {
+    }
 
-    public void a(CommandBlockListenerAbstract commandblocklistenerabstract) {}
+    public void a(CommandBlockListenerAbstract commandblocklistenerabstract) {
+    }
 
-    public void openTrade(IMerchant imerchant) {}
+    public void openTrade(IMerchant imerchant) {
+    }
 
-    public void openContainer(IInventory iinventory) {}
+    public void openContainer(IInventory iinventory) {
+    }
 
-    public void openHorseInventory(EntityHorse entityhorse, IInventory iinventory) {}
+    public void openHorseInventory(EntityHorse entityhorse, IInventory iinventory) {
+    }
 
-    public void openTileEntity(ITileEntityContainer itileentitycontainer) {}
+    public void openTileEntity(ITileEntityContainer itileentitycontainer) {
+    }
 
-    public void openBook(ItemStack itemstack) {}
+    public void openBook(ItemStack itemstack) {
+    }
 
     public boolean u(Entity entity) {
         if (this.isSpectator()) {
@@ -1001,7 +1008,7 @@ public abstract class EntityHuman extends EntityLiving {
                             // CraftBukkit start - Add Velocity Event
                             boolean cancelled = false;
                             Player player = (Player) entity.getBukkitEntity();
-                            org.bukkit.util.Vector velocity = new Vector( d0, d1, d2 );
+                            org.bukkit.util.Vector velocity = new Vector(d0, d1, d2);
 
                             PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
                             world.getServer().getPluginManager().callEvent(event);
@@ -1013,7 +1020,7 @@ public abstract class EntityHuman extends EntityLiving {
                             }
 
                             if (!cancelled) {
-                                ( (EntityPlayer) entity ).playerConnection.sendPacket( new PacketPlayOutEntityVelocity( entity ) );
+                                ((EntityPlayer) entity).playerConnection.sendPacket(new PacketPlayOutEntityVelocity(entity));
                                 entity.velocityChanged = false;
                                 entity.motX = d0;
                                 entity.motY = d1;
@@ -1083,9 +1090,11 @@ public abstract class EntityHuman extends EntityLiving {
         }
     }
 
-    public void b(Entity entity) {}
+    public void b(Entity entity) {
+    }
 
-    public void c(Entity entity) {}
+    public void c(Entity entity) {
+    }
 
     public void die() {
         super.die();
@@ -1156,20 +1165,20 @@ public abstract class EntityHuman extends EntityLiving {
             float f1 = 0.5F;
 
             switch (EntityHuman.SyntheticClass_1.a[enumdirection.ordinal()]) {
-            case 1:
-                f1 = 0.9F;
-                break;
+                case 1:
+                    f1 = 0.9F;
+                    break;
 
-            case 2:
-                f1 = 0.1F;
-                break;
+                case 2:
+                    f1 = 0.1F;
+                    break;
 
-            case 3:
-                f = 0.1F;
-                break;
+                case 3:
+                    f = 0.1F;
+                    break;
 
-            case 4:
-                f = 0.9F;
+                case 4:
+                    f = 0.9F;
             }
 
             this.a(enumdirection);
@@ -1193,20 +1202,20 @@ public abstract class EntityHuman extends EntityLiving {
         this.by = 0.0F;
         this.bz = 0.0F;
         switch (EntityHuman.SyntheticClass_1.a[enumdirection.ordinal()]) {
-        case 1:
-            this.bz = -1.8F;
-            break;
+            case 1:
+                this.bz = -1.8F;
+                break;
 
-        case 2:
-            this.bz = 1.8F;
-            break;
+            case 2:
+                this.bz = 1.8F;
+                break;
 
-        case 3:
-            this.by = 1.8F;
-            break;
+            case 3:
+                this.by = 1.8F;
+                break;
 
-        case 4:
-            this.by = -1.8F;
+            case 4:
+                this.by = -1.8F;
         }
 
     }
@@ -1295,7 +1304,8 @@ public abstract class EntityHuman extends EntityLiving {
         return this.sleeping && this.sleepTicks >= 100;
     }
 
-    public void b(IChatBaseComponent ichatbasecomponent) {}
+    public void b(IChatBaseComponent ichatbasecomponent) {
+    }
 
     public BlockPosition getBed() {
         return this.c;
@@ -1322,9 +1332,11 @@ public abstract class EntityHuman extends EntityLiving {
         this.a(statistic, 1);
     }
 
-    public void a(Statistic statistic, int i) {}
+    public void a(Statistic statistic, int i) {
+    }
 
-    public void a(Statistic statistic) {}
+    public void a(Statistic statistic) {
+    }
 
     public void bF() {
         super.bF();
@@ -1620,9 +1632,11 @@ public abstract class EntityHuman extends EntityLiving {
         return !this.abilities.isFlying;
     }
 
-    public void updateAbilities() {}
+    public void updateAbilities() {
+    }
 
-    public void a(WorldSettings.EnumGamemode worldsettings_enumgamemode) {}
+    public void a(WorldSettings.EnumGamemode worldsettings_enumgamemode) {
+    }
 
     public String getName() {
         return this.bH.getName();
@@ -1792,7 +1806,8 @@ public abstract class EntityHuman extends EntityLiving {
 
         OK, NOT_POSSIBLE_HERE, NOT_POSSIBLE_NOW, TOO_FAR_AWAY, OTHER_PROBLEM, NOT_SAFE;
 
-        EnumBedResult() {}
+        EnumBedResult() {
+        }
     }
 
     public enum EnumChatVisibility {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index f77d82543..5f6b3806e 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -5,51 +5,54 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
-import java.io.File;
-import java.net.SocketAddress;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
-// CraftBukkit start
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftWorld;
-import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
-
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.TravelAgent;
+import org.bukkit.WeatherType;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftTravelAgent;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
+import org.bukkit.craftbukkit.command.ColouredConsoleSender;
+import org.bukkit.craftbukkit.command.ConsoleCommandCompleter;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
-import org.bukkit.event.player.PlayerChangedWorldEvent;
-import org.bukkit.event.player.PlayerPortalEvent;
-import org.bukkit.event.player.PlayerJoinEvent;
-import org.bukkit.event.player.PlayerLoginEvent;
-import org.bukkit.event.player.PlayerQuitEvent;
-import org.bukkit.event.player.PlayerRespawnEvent;
-import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.bukkit.event.player.*;
 import org.bukkit.util.Vector;
+import org.spigotmc.CaseInsensitiveMap;
+import org.spigotmc.SpigotConfig;
 import org.spigotmc.event.player.PlayerSpawnLocationEvent;
-// CraftBukkit end
 
-public abstract class PlayerList {
+import java.io.File;
+import java.lang.reflect.Field;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.concurrent.CopyOnWriteArrayList;
 
-    public static final File a = new File("banned-players.json");
-    public static final File b = new File("banned-ips.json");
-    public static final File c = new File("ops.json");
-    public static final File d = new File("whitelist.json");
-    private static final Logger f = LogManager.getLogger();
-    private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
+public abstract class PlayerList {
+    public static final File a;
+    public static final File b;
+    public static final File c;
+    public static final File d;
+    private static final Logger f;
+    private static final SimpleDateFormat g;
     private final MinecraftServer server;
-    public final List<EntityPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
-    private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
+
+    static {
+        a = new File("banned-players.json");
+        b = new File("banned-ips.json");
+        c = new File("ops.json");
+        d = new File("whitelist.json");
+        f = LogManager.getLogger();
+        g = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
+    }
+
+    public final List<EntityPlayer> players;
     private final GameProfileBanList k;
     private final IpBanList l;
     private final OpList operators;
@@ -62,17 +65,19 @@ public abstract class PlayerList {
     private WorldSettings.EnumGamemode s;
     private boolean t;
     private int u;
-
-    // CraftBukkit start
     private CraftServer cserver;
-    private final Map<String,EntityPlayer> playersByName = new org.spigotmc.CaseInsensitiveMap<>();
-
-    public PlayerList(MinecraftServer minecraftserver) {
-        this.cserver = minecraftserver.server = new CraftServer(minecraftserver, this);
-        minecraftserver.console = org.bukkit.craftbukkit.command.ColouredConsoleSender.getInstance();
-        minecraftserver.reader.addCompleter(new org.bukkit.craftbukkit.command.ConsoleCommandCompleter(minecraftserver.server));
-        // CraftBukkit end
-        
+    private final Map<UUID, EntityPlayer> j;
+    private final Map<String, EntityPlayer> playersByName;
+
+    public PlayerList(final MinecraftServer minecraftserver) {
+        this.players = new CopyOnWriteArrayList<EntityPlayer>();
+        this.j = Maps.newHashMap();
+        this.playersByName = new CaseInsensitiveMap<>();
+        final CraftServer craftServer = new CraftServer(minecraftserver, this);
+        minecraftserver.server = craftServer;
+        this.cserver = craftServer;
+        minecraftserver.console = ColouredConsoleSender.getInstance();
+        minecraftserver.reader.addCompleter(new ConsoleCommandCompleter(minecraftserver.server));
         this.k = new GameProfileBanList(PlayerList.a);
         this.l = new IpBanList(PlayerList.b);
         this.operators = new OpList(PlayerList.c);
@@ -84,27 +89,21 @@ public abstract class PlayerList {
         this.maxPlayers = 8;
     }
 
-    public void a(NetworkManager networkmanager, EntityPlayer entityplayer) {
-        GameProfile gameprofile = entityplayer.getProfile();
-        UserCache usercache = this.server.getUserCache();
-        GameProfile gameprofile1 = usercache.a(gameprofile.getId());
-        String s = gameprofile1 == null ? gameprofile.getName() : gameprofile1.getName();
-
+    public void a(final NetworkManager networkmanager, final EntityPlayer entityplayer) {
+        final GameProfile gameprofile = entityplayer.getProfile();
+        final UserCache usercache = this.server.getUserCache();
+        final GameProfile gameprofile2 = usercache.a(gameprofile.getId());
+        String s = (gameprofile2 == null) ? gameprofile.getName() : gameprofile2.getName();
         usercache.a(gameprofile);
-        NBTTagCompound nbttagcompound = this.a(entityplayer);
-        // CraftBukkit start - Better rename detection
+        final NBTTagCompound nbttagcompound = this.a(entityplayer);
         if (nbttagcompound != null && nbttagcompound.hasKey("bukkit")) {
-            NBTTagCompound bukkit = nbttagcompound.getCompound("bukkit");
-            s = bukkit.hasKeyOfType("lastKnownName", 8) ? bukkit.getString("lastKnownName") : s;
+            final NBTTagCompound bukkit = nbttagcompound.getCompound("bukkit");
+            s = (bukkit.hasKeyOfType("lastKnownName", 8) ? bukkit.getString("lastKnownName") : s);
         }
-        // CraftBukkit end
-
-        // PaperSpigot start - support PlayerInitialSpawnEvent
-        Location originalLoc = new Location(entityplayer.world.getWorld(), entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
-        org.bukkit.event.player.PlayerInitialSpawnEvent event = new org.bukkit.event.player.PlayerInitialSpawnEvent(entityplayer.getBukkitEntity(), originalLoc);
+        final Location originalLoc = new Location(entityplayer.world.getWorld(), entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
+        final PlayerInitialSpawnEvent event = new PlayerInitialSpawnEvent(entityplayer.getBukkitEntity(), originalLoc);
         this.server.server.getPluginManager().callEvent(event);
-
-        Location newLoc = event.getSpawnLocation();
+        final Location newLoc = event.getSpawnLocation();
         entityplayer.world = ((CraftWorld) newLoc.getWorld()).getHandle();
         entityplayer.locX = newLoc.getX();
         entityplayer.locY = newLoc.getY();
@@ -113,41 +112,28 @@ public abstract class PlayerList {
         entityplayer.pitch = newLoc.getPitch();
         entityplayer.dimension = ((CraftWorld) newLoc.getWorld()).getHandle().dimension;
         entityplayer.spawnWorld = entityplayer.world.worldData.getName();
-        // PaperSpigot end
-
         entityplayer.spawnIn(this.server.getWorldServer(entityplayer.dimension));
         entityplayer.playerInteractManager.a((WorldServer) entityplayer.world);
-        String s1 = "local";
-
+        String s2 = "local";
         if (networkmanager.getSocketAddress() != null) {
-            s1 = networkmanager.getSocketAddress().toString();
+            s2 = networkmanager.getSocketAddress().toString();
         }
-
-        // Spigot start - spawn location event
-        Player bukkitPlayer = entityplayer.getBukkitEntity();
-        PlayerSpawnLocationEvent ev = new PlayerSpawnLocationEvent(bukkitPlayer, bukkitPlayer.getLocation());
+        final Player bukkitPlayer = entityplayer.getBukkitEntity();
+        final PlayerSpawnLocationEvent ev = new PlayerSpawnLocationEvent(bukkitPlayer, bukkitPlayer.getLocation());
         Bukkit.getPluginManager().callEvent(ev);
-
-        Location loc = ev.getSpawnLocation();
-        WorldServer world = ((CraftWorld) loc.getWorld()).getHandle();
-
+        final Location loc = ev.getSpawnLocation();
+        final WorldServer world = ((CraftWorld) loc.getWorld()).getHandle();
         entityplayer.spawnIn(world);
         entityplayer.setPosition(loc.getX(), loc.getY(), loc.getZ());
-        entityplayer.setYawPitch(loc.getYaw(), loc.getPitch()); 
-        // Spigot end
-
-        // CraftBukkit - Moved message to after join
-        // PlayerList.f.info(entityplayer.getName() + "[" + s1 + "] logged in with entity id " + entityplayer.getId() + " at (" + entityplayer.locX + ", " + entityplayer.locY + ", " + entityplayer.locZ + ")");
+        entityplayer.setYawPitch(loc.getYaw(), loc.getPitch());
         WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
-        WorldData worlddata = worldserver.getWorldData();
-        BlockPosition blockposition = worldserver.getSpawn();
-
+        final WorldData worlddata = worldserver.getWorldData();
+        final BlockPosition blockposition = worldserver.getSpawn();
         this.a(entityplayer, null, worldserver);
-        PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
-
-        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimension(), worldserver.getDifficulty(), Math.min(this.getMaxPlayers(), 60), worlddata.getType(), worldserver.getGameRules().getBoolean("reducedDebugInfo"))); // CraftBukkit - cap player list to 60
-        entityplayer.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
-        playerconnection.sendPacket(new PacketPlayOutCustomPayload("MC|Brand", (new PacketDataSerializer(Unpooled.buffer())).a(this.getServer().getServerModName())));
+        final PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
+        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimension(), worldserver.getDifficulty(), Math.min(this.getMaxPlayers(), 60), worlddata.getType(), worldserver.getGameRules().getBoolean("reducedDebugInfo")));
+        entityplayer.getBukkitEntity().sendSupportedChannels();
+        playerconnection.sendPacket(new PacketPlayOutCustomPayload("MC|Brand", new PacketDataSerializer(Unpooled.buffer()).a(this.getServer().getServerModName())));
         playerconnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition));
         playerconnection.sendPacket(new PacketPlayOutAbilities(entityplayer.abilities));
@@ -156,37 +142,25 @@ public abstract class PlayerList {
         entityplayer.getStatisticManager().updateStatistics(entityplayer);
         this.sendScoreboard((ScoreboardServer) worldserver.getScoreboard(), entityplayer);
         this.server.aH();
-        // CraftBukkit start - login message is handled in the event
-        // ChatMessage chatmessage;
-
         String joinMessage;
         if (!entityplayer.getName().equalsIgnoreCase(s)) {
-            // chatmessage = new ChatMessage("multiplayer.player.joined.renamed", new Object[] { entityplayer.getScoreboardDisplayName(), s});
-            joinMessage = "\u00A7e" + LocaleI18n.a("multiplayer.player.joined.renamed", entityplayer.getName(), s);
+            joinMessage = "§e" + LocaleI18n.a("multiplayer.player.joined.renamed", entityplayer.getName(), s);
         } else {
-            // chatmessage = new ChatMessage("multiplayer.player.joined", new Object[] { entityplayer.getScoreboardDisplayName()});
-            joinMessage = "\u00A7e" + LocaleI18n.a("multiplayer.player.joined", entityplayer.getName());
+            joinMessage = "§e" + LocaleI18n.a("multiplayer.player.joined", entityplayer.getName());
         }
-
-        // chatmessage.getChatModifier().setColor(EnumChatFormat.YELLOW);
-        // this.sendMessage(chatmessage);
         this.onPlayerJoin(entityplayer, joinMessage);
-        // CraftBukkit end
-        worldserver = server.getWorldServer(entityplayer.dimension);  // CraftBukkit - Update in case join event changed it
+        worldserver = this.server.getWorldServer(entityplayer.dimension);
         playerconnection.a(entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
         this.b(entityplayer, worldserver);
         if (this.server.getResourcePack().length() > 0) {
             entityplayer.setResourcePack(this.server.getResourcePack(), this.server.getResourcePackHash());
         }
-
-        for (MobEffect mobeffect : entityplayer.getEffects()) {
+        for (final MobEffect mobeffect : entityplayer.getEffects()) {
             playerconnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer.getId(), mobeffect));
         }
-
         entityplayer.syncInventory();
         if (nbttagcompound != null && nbttagcompound.hasKeyOfType("Riding", 10)) {
-            Entity entity = EntityTypes.a(nbttagcompound.getCompound("Riding"), worldserver);
-
+            final Entity entity = EntityTypes.a(nbttagcompound.getCompound("Riding"), worldserver);
             if (entity != null) {
                 entity.attachedToPlayer = true;
                 worldserver.addEntity(entity);
@@ -194,272 +168,214 @@ public abstract class PlayerList {
                 entity.attachedToPlayer = false;
             }
         }
-
-        // CraftBukkit - Moved from above, added world
-        PlayerList.f.info(entityplayer.getName() + "[" + s1 + "] logged in with entity id " + entityplayer.getId() + " at ([" + entityplayer.world.worldData.getName() + "]" + entityplayer.locX + ", " + entityplayer.locY + ", " + entityplayer.locZ + ")");
+        PlayerList.f.info(entityplayer.getName() + "[" + s2 + "] logged in with entity id " + entityplayer.getId() + " at ([" + entityplayer.world.worldData.getName() + "]" + entityplayer.locX + ", " + entityplayer.locY + ", " + entityplayer.locZ + ")");
     }
 
-    public void sendScoreboard(ScoreboardServer scoreboardserver, EntityPlayer entityplayer) {
-        HashSet hashset = Sets.newHashSet();
-
-        for (ScoreboardTeam scoreboardteam : scoreboardserver.getTeams()) {
+    public void sendScoreboard(final ScoreboardServer scoreboardserver, final EntityPlayer entityplayer) {
+        final HashSet hashset = Sets.newHashSet();
+        for (final ScoreboardTeam scoreboardteam : scoreboardserver.getTeams()) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutScoreboardTeam(scoreboardteam, 0));
         }
-
         for (int i = 0; i < 19; ++i) {
-            ScoreboardObjective scoreboardobjective = scoreboardserver.getObjectiveForSlot(i);
-
+            final ScoreboardObjective scoreboardobjective = scoreboardserver.getObjectiveForSlot(i);
             if (scoreboardobjective != null && !hashset.contains(scoreboardobjective)) {
-                List list = scoreboardserver.getScoreboardScorePacketsForObjective(scoreboardobjective);
-
-                for (Object value : list) {
-                    Packet packet = (Packet) value;
-
+                final List<Packet> list = scoreboardserver.getScoreboardScorePacketsForObjective(scoreboardobjective);
+                for (final Packet packet : list) {
                     entityplayer.playerConnection.sendPacket(packet);
                 }
-
                 hashset.add(scoreboardobjective);
             }
         }
-
     }
 
-    public void setPlayerFileData(WorldServer[] aworldserver) {
-        if (playerFileData != null) return; // CraftBukkit
+    public void setPlayerFileData(final WorldServer[] aworldserver) {
+        if (this.playerFileData != null) {
+            return;
+        }
         this.playerFileData = aworldserver[0].getDataManager().getPlayerFileData();
         aworldserver[0].getWorldBorder().a(new IWorldBorderListener() {
-            public void a(WorldBorder worldborder, double d0) {
+            @Override
+            public void a(final WorldBorder worldborder, final double d0) {
                 PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_SIZE));
             }
 
-            public void a(WorldBorder worldborder, double d0, double d1, long i) {
+            @Override
+            public void a(final WorldBorder worldborder, final double d0, final double d1, final long i) {
                 PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.LERP_SIZE));
             }
 
-            public void a(WorldBorder worldborder, double d0, double d1) {
+            @Override
+            public void a(final WorldBorder worldborder, final double d0, final double d1) {
                 PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_CENTER));
             }
 
-            public void a(WorldBorder worldborder, int i) {
+            @Override
+            public void a(final WorldBorder worldborder, final int i) {
                 PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_TIME));
             }
 
-            public void b(WorldBorder worldborder, int i) {
+            @Override
+            public void b(final WorldBorder worldborder, final int i) {
                 PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_BLOCKS));
             }
 
-            public void b(WorldBorder worldborder, double d0) {}
+            @Override
+            public void b(final WorldBorder worldborder, final double d0) {
+            }
 
-            public void c(WorldBorder worldborder, double d0) {}
+            @Override
+            public void c(final WorldBorder worldborder, final double d0) {
+            }
         });
     }
 
-    public void a(EntityPlayer entityplayer, WorldServer worldserver) {
-        WorldServer worldserver1 = entityplayer.u();
-
+    public void a(final EntityPlayer entityplayer, final WorldServer worldserver) {
+        final WorldServer worldserver2 = entityplayer.u();
         if (worldserver != null) {
             worldserver.getPlayerChunkMap().removePlayer(entityplayer);
         }
-
-        worldserver1.getPlayerChunkMap().addPlayer(entityplayer);
-        worldserver1.chunkProviderServer.getChunkAt((int) entityplayer.locX >> 4, (int) entityplayer.locZ >> 4);
+        worldserver2.getPlayerChunkMap().addPlayer(entityplayer);
+        worldserver2.chunkProviderServer.getChunkAt((int) entityplayer.locX >> 4, (int) entityplayer.locZ >> 4);
     }
 
     public int d() {
         return PlayerChunkMap.getFurthestViewableBlock(this.s());
     }
 
-    public NBTTagCompound a(EntityPlayer entityplayer) {
-        NBTTagCompound nbttagcompound = this.server.worlds.get(0).getWorldData().i(); // CraftBukkit
-        NBTTagCompound nbttagcompound1;
-
+    public NBTTagCompound a(final EntityPlayer entityplayer) {
+        final NBTTagCompound nbttagcompound = this.server.worlds.get(0).getWorldData().i();
+        NBTTagCompound nbttagcompound2;
         if (entityplayer.getName().equals(this.server.S()) && nbttagcompound != null) {
             entityplayer.f(nbttagcompound);
-            nbttagcompound1 = nbttagcompound;
+            nbttagcompound2 = nbttagcompound;
             PlayerList.f.debug("loading single player");
         } else {
-            nbttagcompound1 = this.playerFileData.load(entityplayer);
+            nbttagcompound2 = this.playerFileData.load(entityplayer);
         }
-
-        return nbttagcompound1;
+        return nbttagcompound2;
     }
 
-    protected void savePlayerFile(EntityPlayer entityplayer) {
+    protected void savePlayerFile(final EntityPlayer entityplayer) {
         this.playerFileData.save(entityplayer);
-        ServerStatisticManager serverstatisticmanager = this.o.get(entityplayer.getUniqueID());
-
+        final ServerStatisticManager serverstatisticmanager = this.o.get(entityplayer.getUniqueID());
         if (serverstatisticmanager != null) {
             serverstatisticmanager.b();
         }
-
     }
 
-    public void onPlayerJoin(EntityPlayer entityplayer, String joinMessage) { // CraftBukkit added param
+    public void onPlayerJoin(final EntityPlayer entityplayer, String joinMessage) {
         this.players.add(entityplayer);
-        this.playersByName.put(entityplayer.getName(), entityplayer); // Spigot
+        this.playersByName.put(entityplayer.getName(), entityplayer);
         this.j.put(entityplayer.getUniqueID(), entityplayer);
-        // this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer})); // CraftBukkit - replaced with loop below
-        WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
-
-        // CraftBukkit start
-        PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(cserver.getPlayer(entityplayer), joinMessage);
-        cserver.getPluginManager().callEvent(playerJoinEvent);
-
+        final WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
+        final PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(this.cserver.getPlayer(entityplayer), joinMessage);
+        this.cserver.getPluginManager().callEvent(playerJoinEvent);
         joinMessage = playerJoinEvent.getJoinMessage();
-
         if (joinMessage != null && joinMessage.length() > 0) {
-            for (IChatBaseComponent line : org.bukkit.craftbukkit.util.CraftChatMessage.fromString(joinMessage)) {
-                server.getPlayerList().sendAll(new PacketPlayOutChat(line));
+            IChatBaseComponent[] fromString;
+            for (int length = (fromString = CraftChatMessage.fromString(joinMessage)).length, j = 0; j < length; ++j) {
+                final IChatBaseComponent line = fromString[j];
+                this.server.getPlayerList().sendAll(new PacketPlayOutChat(line));
             }
         }
-
-        ChunkIOExecutor.adjustPoolSize(getPlayerCount());
-        // CraftBukkit end
-
-        // CraftBukkit start - sendAll above replaced with this loop
-        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer);
-
-        for (EntityPlayer player : this.players) {
-            EntityPlayer entityplayer1 = (EntityPlayer) player;
-
-            if (entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
-                entityplayer1.playerConnection.sendPacket(packet);
+        ChunkIOExecutor.adjustPoolSize(this.getPlayerCount());
+        final PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer);
+        for (int i = 0; i < this.players.size(); ++i) {
+            final EntityPlayer entityplayer2 = this.players.get(i);
+            if (entityplayer2.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
+                entityplayer2.playerConnection.sendPacket(packet);
             }
-
-            if (!entityplayer.getBukkitEntity().canSee(entityplayer1.getBukkitEntity())) {
-                continue;
+            if (entityplayer.getBukkitEntity().canSee(entityplayer2.getBukkitEntity())) {
+                entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer2));
             }
-
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer1));
         }
-        // CraftBukkit end
-
-        // CraftBukkit start - Only add if the player wasn't moved in the event
         if (entityplayer.world == worldserver && !worldserver.players.contains(entityplayer)) {
             worldserver.addEntity(entityplayer);
             this.a(entityplayer, (WorldServer) null);
         }
-        // CraftBukkit end
     }
 
-    public void d(EntityPlayer entityplayer) {
+    public void d(final EntityPlayer entityplayer) {
         entityplayer.u().getPlayerChunkMap().movePlayer(entityplayer);
     }
 
-    public String disconnect(EntityPlayer entityplayer) { // CraftBukkit - return string
+    public String disconnect(final EntityPlayer entityplayer) {
         entityplayer.b(StatisticList.f);
-
-        // CraftBukkit start - Quitting must be before we do final save of data, in case plugins need to modify it
-        org.bukkit.craftbukkit.event.CraftEventFactory.handleInventoryCloseEvent(entityplayer);
-
-        PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(cserver.getPlayer(entityplayer), "\u00A7e" + entityplayer.getName() + " left the game.");
-        cserver.getPluginManager().callEvent(playerQuitEvent);
+        CraftEventFactory.handleInventoryCloseEvent(entityplayer);
+        final PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(this.cserver.getPlayer(entityplayer), "§e" + entityplayer.getName() + " left the game.");
+        this.cserver.getPluginManager().callEvent(playerQuitEvent);
         entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
-        // CraftBukkit end
-        
         this.savePlayerFile(entityplayer);
-        WorldServer worldserver = entityplayer.u();
-
-        if (entityplayer.vehicle != null && !(entityplayer.vehicle instanceof EntityPlayer)) { // CraftBukkit - Don't remove players
+        final WorldServer worldserver = entityplayer.u();
+        if (entityplayer.vehicle != null && !(entityplayer.vehicle instanceof EntityPlayer)) {
             worldserver.removeEntity(entityplayer.vehicle);
             PlayerList.f.debug("removing player mount");
         }
-
         worldserver.kill(entityplayer);
         worldserver.getPlayerChunkMap().removePlayer(entityplayer);
         this.players.remove(entityplayer);
-        this.playersByName.remove(entityplayer.getName()); // Spigot
-        UUID uuid = entityplayer.getUniqueID();
-        EntityPlayer entityplayer1 = this.j.get(uuid);
-
-        if (entityplayer1 == entityplayer) {
+        this.playersByName.remove(entityplayer.getName());
+        final UUID uuid = entityplayer.getUniqueID();
+        final EntityPlayer entityplayer2 = this.j.get(uuid);
+        if (entityplayer2 == entityplayer) {
             this.j.remove(uuid);
             this.o.remove(uuid);
         }
-
-        // CraftBukkit start
-        //  this.sendAll(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER, new EntityPlayer[] { entityplayer}));
-        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, entityplayer);
-        for (EntityPlayer player : players) {
-            EntityPlayer entityplayer2 = (EntityPlayer) player;
-
-            if (entityplayer2.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
-                entityplayer2.playerConnection.sendPacket(packet);
+        final PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, entityplayer);
+        for (int i = 0; i < this.players.size(); ++i) {
+            final EntityPlayer entityplayer3 = this.players.get(i);
+            if (entityplayer3.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
+                entityplayer3.playerConnection.sendPacket(packet);
             } else {
-                entityplayer2.getBukkitEntity().removeDisconnectingPlayer(entityplayer.getBukkitEntity());
+                entityplayer3.getBukkitEntity().removeDisconnectingPlayer(entityplayer.getBukkitEntity());
             }
         }
-        // This removes the scoreboard (and player reference) for the specific player in the manager
-        cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
-        // CraftBukkit end
-
-        ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
-
-        return playerQuitEvent.getQuitMessage(); // CraftBukkit
+        this.cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
+        ChunkIOExecutor.adjustPoolSize(this.getPlayerCount());
+        return playerQuitEvent.getQuitMessage();
     }
 
-    // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
-    public EntityPlayer attemptLogin(LoginListener loginlistener, GameProfile gameprofile, String hostname) {
-        // Moved from processLogin
-        UUID uuid = EntityHuman.a(gameprofile);
-        ArrayList arraylist = Lists.newArrayList();
-
-        EntityPlayer entityplayer;
-
-        for (EntityPlayer entityPlayer : this.players) {
-            entityplayer = (EntityPlayer) entityPlayer;
+    public EntityPlayer attemptLogin(final LoginListener loginlistener, final GameProfile gameprofile, final String hostname) {
+        final UUID uuid = EntityHuman.a(gameprofile);
+        final ArrayList<EntityPlayer> arraylist = Lists.newArrayList();
+        for (int i = 0; i < this.players.size(); ++i) {
+            final EntityPlayer entityplayer = this.players.get(i);
             if (entityplayer.getUniqueID().equals(uuid)) {
                 arraylist.add(entityplayer);
             }
         }
-
-        for (Object value : arraylist) {
-            entityplayer = (EntityPlayer) value;
-            savePlayerFile(entityplayer); // CraftBukkit - Force the player's inventory to be saved
+        final Iterator<EntityPlayer> iterator = arraylist.iterator();
+        while (iterator.hasNext()) {
+            final EntityPlayer entityplayer = iterator.next();
+            this.savePlayerFile(entityplayer);
             entityplayer.playerConnection.disconnect("You logged in from another location");
         }
-
-        // Instead of kicking then returning, we need to store the kick reason
-        // in the event, check with plugins to see if it's ok, and THEN kick
-        // depending on the outcome.
-        SocketAddress socketaddress = loginlistener.networkManager.getSocketAddress();
-
-        EntityPlayer entity = new EntityPlayer(server, server.getWorldServer(0), gameprofile, new PlayerInteractManager(server.getWorldServer(0)));
-        Player player = entity.getBukkitEntity();
-        PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((java.net.InetSocketAddress) socketaddress).getAddress(), ((java.net.InetSocketAddress) loginlistener.networkManager.getRawAddress()).getAddress());
-        String s;
-
-        if (getProfileBans().isBanned(gameprofile) && !getProfileBans().get(gameprofile).hasExpired()) {
-            GameProfileBanEntry gameprofilebanentry = this.k.get(gameprofile);
-
-            s = "You are banned from this server!\nReason: " + gameprofilebanentry.getReason();
+        final SocketAddress socketaddress = loginlistener.networkManager.getSocketAddress();
+        final EntityPlayer entity = new EntityPlayer(this.server, this.server.getWorldServer(0), gameprofile, new PlayerInteractManager(this.server.getWorldServer(0)));
+        final Player player = entity.getBukkitEntity();
+        final PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, ((InetSocketAddress) socketaddress).getAddress(), ((InetSocketAddress) loginlistener.networkManager.getRawAddress()).getAddress());
+        if (this.getProfileBans().isBanned(gameprofile) && !this.getProfileBans().get(gameprofile).hasExpired()) {
+            final GameProfileBanEntry gameprofilebanentry = this.k.get(gameprofile);
+            String s = "You are banned from this server!\nReason: " + gameprofilebanentry.getReason();
             if (gameprofilebanentry.getExpires() != null) {
                 s = s + "\nYour ban will be removed on " + PlayerList.g.format(gameprofilebanentry.getExpires());
             }
-
-            // return s;
-            if (!gameprofilebanentry.hasExpired()) event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s); // Spigot
+            if (!gameprofilebanentry.hasExpired()) {
+                event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s);
+            }
         } else if (!this.isWhitelisted(gameprofile)) {
-            // return "You are not white-listed on this server!";
-            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, org.spigotmc.SpigotConfig.whitelistMessage); // Spigot
-        } else if (getIPBans().isBanned(socketaddress) && !getIPBans().get(socketaddress).hasExpired()) {
-            IpBanEntry ipbanentry = this.l.get(socketaddress);
-
-            s = "Your IP address is banned from this server!\nReason: " + ipbanentry.getReason();
+            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, SpigotConfig.whitelistMessage);
+        } else if (this.getIPBans().isBanned(socketaddress) && !this.getIPBans().get(socketaddress).hasExpired()) {
+            final IpBanEntry ipbanentry = this.l.get(socketaddress);
+            String s = "Your IP address is banned from this server!\nReason: " + ipbanentry.getReason();
             if (ipbanentry.getExpires() != null) {
                 s = s + "\nYour ban will be removed on " + PlayerList.g.format(ipbanentry.getExpires());
             }
-
-            // return s;
             event.disallow(PlayerLoginEvent.Result.KICK_BANNED, s);
-        } else {
-            // return this.players.size() >= this.maxPlayers && !this.f(gameprofile) ? "The server is full!" : null;
-            if (this.players.size() >= this.maxPlayers && !this.f(gameprofile)) {
-                event.disallow(PlayerLoginEvent.Result.KICK_FULL, org.spigotmc.SpigotConfig.serverFullMessage); // Spigot
-            }
+        } else if (this.players.size() >= this.maxPlayers && !this.f(gameprofile)) {
+            event.disallow(PlayerLoginEvent.Result.KICK_FULL, SpigotConfig.serverFullMessage);
         }
-
-        cserver.getPluginManager().callEvent(event);
+        this.cserver.getPluginManager().callEvent(event);
         if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
             loginlistener.disconnect(event.getKickMessage());
             return null;
@@ -467,412 +383,220 @@ public abstract class PlayerList {
         return entity;
     }
 
-    public EntityPlayer processLogin(GameProfile gameprofile, EntityPlayer player) { // CraftBukkit - added EntityPlayer
-        /* CraftBukkit startMoved up
-        UUID uuid = EntityHuman.a(gameprofile);
-        ArrayList arraylist = Lists.newArrayList();
-
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
-
-            if (entityplayer.getUniqueID().equals(uuid)) {
-                arraylist.add(entityplayer);
-            }
-        }
-
-        EntityPlayer entityplayer1 = (EntityPlayer) this.j.get(gameprofile.getId());
-
-        if (entityplayer1 != null && !arraylist.contains(entityplayer1)) {
-            arraylist.add(entityplayer1);
-        }
-
-        Iterator iterator = arraylist.iterator();
-
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer2 = (EntityPlayer) iterator.next();
-
-            entityplayer2.playerConnection.disconnect("You logged in from another location");
-        }
-
-        Object object;
-
-        if (this.server.X()) {
-            object = new DemoPlayerInteractManager(this.server.getWorldServer(0));
-        } else {
-            object = new PlayerInteractManager(this.server.getWorldServer(0));
-        }
-
-        return new EntityPlayer(this.server, this.server.getWorldServer(0), gameprofile, (PlayerInteractManager) object);
-        */
+    public EntityPlayer processLogin(final GameProfile gameprofile, final EntityPlayer player) {
         return player;
-        // CraftBukkit end 
     }
 
-    // CraftBukkit start
-    public EntityPlayer moveToWorld(EntityPlayer entityplayer, int i, boolean flag) {
+    public EntityPlayer moveToWorld(final EntityPlayer entityplayer, final int i, final boolean flag) {
         return this.moveToWorld(entityplayer, i, flag, null, true);
     }
-    public EntityPlayer moveToWorld(EntityPlayer entityplayer, int i, boolean flag, Location location, boolean avoidSuffocation) {
+
+    public EntityPlayer moveToWorld(final EntityPlayer entityplayer, final int i, final boolean flag, Location location, final boolean avoidSuffocation) {
         entityplayer.u().getTracker().untrackPlayer(entityplayer);
-        // entityplayer.u().getTracker().untrackEntity(entityplayer); // CraftBukkit
         entityplayer.u().getPlayerChunkMap().removePlayer(entityplayer);
         this.players.remove(entityplayer);
-        this.playersByName.remove(entityplayer.getName()); // Spigot
+        this.playersByName.remove(entityplayer.getName());
         this.server.getWorldServer(entityplayer.dimension).removeEntity(entityplayer);
         BlockPosition blockposition = entityplayer.getBed();
-        boolean flag1 = entityplayer.isRespawnForced();
-
-        /* CraftBukkit start
-        entityplayer.dimension = i;
-        Object object;
-
-        if (this.server.X()) {
-            object = new DemoPlayerInteractManager(this.server.getWorldServer(entityplayer.dimension));
-        } else {
-            object = new PlayerInteractManager(this.server.getWorldServer(entityplayer.dimension));
-        }
-
-        EntityPlayer entityplayer1 = new EntityPlayer(this.server, this.server.getWorldServer(entityplayer.dimension), entityplayer.getProfile(), (PlayerInteractManager) object);
-        // */
-        org.bukkit.World fromWorld = entityplayer.getBukkitEntity().getWorld();
+        final boolean flag2 = entityplayer.isRespawnForced();
+        final EntityPlayer entityplayer2 = entityplayer;
+        final org.bukkit.World fromWorld = entityplayer.getBukkitEntity().getWorld();
         entityplayer.viewingCredits = false;
-        // CraftBukkit end
-        
-        entityplayer.playerConnection = entityplayer.playerConnection;
-        entityplayer.copyTo(entityplayer, flag);
-        entityplayer.d(entityplayer.getId());
-        entityplayer.o(entityplayer);
-        // WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);  // CraftBukkit - handled later
-
-        // this.a(entityplayer1, entityplayer, worldserver); // CraftBukkit - removed
-        BlockPosition blockposition1;
-
-        // CraftBukkit start - fire PlayerRespawnEvent
+        entityplayer2.playerConnection = entityplayer.playerConnection;
+        entityplayer2.copyTo(entityplayer, flag);
+        entityplayer2.d(entityplayer.getId());
+        entityplayer2.o(entityplayer);
         if (location == null) {
             boolean isBedSpawn = false;
             CraftWorld cworld = (CraftWorld) this.server.server.getWorld(entityplayer.spawnWorld);
             if (cworld != null && blockposition != null) {
-                blockposition1 = EntityHuman.getBed(cworld.getHandle(), blockposition, flag1);
-                if (blockposition1 != null) {
+                final BlockPosition blockposition2 = EntityHuman.getBed(cworld.getHandle(), blockposition, flag2);
+                if (blockposition2 != null) {
                     isBedSpawn = true;
-                    location = new Location(cworld, blockposition1.getX() + 0.5, blockposition1.getY(), blockposition1.getZ() + 0.5);
+                    location = new Location(cworld, blockposition2.getX() + 0.5, blockposition2.getY(), blockposition2.getZ() + 0.5);
                 } else {
-                    entityplayer.setRespawnPosition(null, true);
-                    entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(0, 0.0F));
+                    entityplayer2.setRespawnPosition(null, true);
+                    entityplayer2.playerConnection.sendPacket(new PacketPlayOutGameStateChange(0, 0.0f));
                 }
             }
-
             if (location == null) {
                 cworld = (CraftWorld) this.server.server.getWorlds().get(0);
                 blockposition = cworld.getHandle().getSpawn();
                 location = new Location(cworld, blockposition.getX() + 0.5, blockposition.getY(), blockposition.getZ() + 0.5);
             }
-
-            Player respawnPlayer = cserver.getPlayer(entityplayer);
-            PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn);
-            cserver.getPluginManager().callEvent(respawnEvent);
-            // Spigot Start
+            final Player respawnPlayer = this.cserver.getPlayer(entityplayer2);
+            final PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn);
+            this.cserver.getPluginManager().callEvent(respawnEvent);
             if (entityplayer.playerConnection.isDisconnected()) {
                 return entityplayer;
             }
-            // Spigot End
-
             location = respawnEvent.getRespawnLocation();
             entityplayer.reset();
         } else {
-            location.setWorld(server.getWorldServer(i).getWorld());
+            location.setWorld(this.server.getWorldServer(i).getWorld());
         }
-        WorldServer worldserver = ((CraftWorld) location.getWorld()).getHandle();
-        entityplayer.setLocation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
-        // CraftBukkit end
-
-        worldserver.chunkProviderServer.getChunkAt((int) entityplayer.locX >> 4, (int) entityplayer.locZ >> 4);
-
-        while (avoidSuffocation && !worldserver.getCubes(entityplayer, entityplayer.getBoundingBox()).isEmpty() && entityplayer.locY < 256.0D) {
-            entityplayer.setPosition(entityplayer.locX, entityplayer.locY + 1.0D, entityplayer.locZ);
+        final WorldServer worldserver = ((CraftWorld) location.getWorld()).getHandle();
+        entityplayer2.setLocation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+        worldserver.chunkProviderServer.getChunkAt((int) entityplayer2.locX >> 4, (int) entityplayer2.locZ >> 4);
+        while (avoidSuffocation && !worldserver.getCubes(entityplayer2, entityplayer2.getBoundingBox()).isEmpty() && entityplayer2.locY < 256.0) {
+            entityplayer2.setPosition(entityplayer2.locX, entityplayer2.locY + 1.0, entityplayer2.locZ);
         }
-        // CraftBukkit start
-        byte actualDimension = (byte) (worldserver.getWorld().getEnvironment().getId());
-        // Force the client to refresh their chunk cache
+        final byte actualDimension = (byte) worldserver.getWorld().getEnvironment().getId();
         if (fromWorld.getEnvironment() == worldserver.getWorld().getEnvironment()) {
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutRespawn((byte) (actualDimension >= 0 ? -1 : 0), worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer.playerInteractManager.getGameMode()));
-        }
-        entityplayer.playerConnection.sendPacket(new PacketPlayOutRespawn(actualDimension, worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer.playerInteractManager.getGameMode()));
-        entityplayer.spawnIn(worldserver);
-        entityplayer.dead = false;
-        entityplayer.playerConnection.teleport(new Location(worldserver.getWorld(), entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch));
-        entityplayer.setSneaking(false);
-        blockposition1 = worldserver.getSpawn();
-        // entityplayer1.playerConnection.a(entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch);
-        entityplayer.playerConnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition1));
-        entityplayer.playerConnection.sendPacket(new PacketPlayOutExperience(entityplayer.exp, entityplayer.expTotal, entityplayer.expLevel));
-        this.b(entityplayer, worldserver);
-
+            entityplayer2.playerConnection.sendPacket(new PacketPlayOutRespawn((byte) ((actualDimension >= 0) ? -1 : 0), worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer.playerInteractManager.getGameMode()));
+        }
+        entityplayer2.playerConnection.sendPacket(new PacketPlayOutRespawn(actualDimension, worldserver.getDifficulty(), worldserver.getWorldData().getType(), entityplayer2.playerInteractManager.getGameMode()));
+        entityplayer2.spawnIn(worldserver);
+        entityplayer2.dead = false;
+        entityplayer2.playerConnection.teleport(new Location(worldserver.getWorld(), entityplayer2.locX, entityplayer2.locY, entityplayer2.locZ, entityplayer2.yaw, entityplayer2.pitch));
+        entityplayer2.setSneaking(false);
+        final BlockPosition blockposition2 = worldserver.getSpawn();
+        entityplayer2.playerConnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition2));
+        entityplayer2.playerConnection.sendPacket(new PacketPlayOutExperience(entityplayer2.exp, entityplayer2.expTotal, entityplayer2.expLevel));
+        this.b(entityplayer2, worldserver);
         if (!entityplayer.playerConnection.isDisconnected()) {
-            worldserver.getPlayerChunkMap().addPlayer(entityplayer);
-            worldserver.addEntity(entityplayer);
-            this.players.add(entityplayer);
-            this.playersByName.put(entityplayer.getName(), entityplayer); // Spigot
-            this.j.put(entityplayer.getUniqueID(), entityplayer);
+            worldserver.getPlayerChunkMap().addPlayer(entityplayer2);
+            worldserver.addEntity(entityplayer2);
+            this.players.add(entityplayer2);
+            this.playersByName.put(entityplayer2.getName(), entityplayer2);
+            this.j.put(entityplayer2.getUniqueID(), entityplayer2);
         }
-        // Added from changeDimension
-        updateClient(entityplayer); // Update health, etc...
+        this.updateClient(entityplayer);
         entityplayer.updateAbilities();
-        for (Object o1 : entityplayer.getEffects()) {
-            MobEffect mobEffect = (MobEffect) o1;
+        for (final Object o1 : entityplayer.getEffects()) {
+            final MobEffect mobEffect = (MobEffect) o1;
             entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityEffect(entityplayer.getId(), mobEffect));
         }
-        // entityplayer1.syncInventory();
-        // CraftBukkit end
-        entityplayer.setHealth(entityplayer.getHealth());
-
-        // CraftBukkit start
-        // Don't fire on respawn
+        entityplayer2.setHealth(entityplayer2.getHealth());
         if (fromWorld != location.getWorld()) {
-            PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(entityplayer.getBukkitEntity(), fromWorld);
-            server.server.getPluginManager().callEvent(event);
+            final PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(entityplayer.getBukkitEntity(), fromWorld);
+            this.server.server.getPluginManager().callEvent(event);
         }
-
-        // Save player file again if they were disconnected
         if (entityplayer.playerConnection.isDisconnected()) {
             this.savePlayerFile(entityplayer);
         }
-        // CraftBukkit end
-        return entityplayer;
+        return entityplayer2;
     }
 
-    // CraftBukkit start - Replaced the standard handling of portals with a more customised method.
-    public void changeDimension(EntityPlayer entityplayer, int i, TeleportCause cause) {
+    public void changeDimension(final EntityPlayer entityplayer, final int i, final PlayerTeleportEvent.TeleportCause cause) {
         WorldServer exitWorld = null;
-        if (entityplayer.dimension < CraftWorld.CUSTOM_DIMENSION_OFFSET) { // plugins must specify exit from custom Bukkit worlds
-            // only target existing worlds (compensate for allow-nether/allow-end as false)
-            for (WorldServer world : this.server.worlds) {
+        if (entityplayer.dimension < 10) {
+            for (final WorldServer world : this.server.worlds) {
                 if (world.dimension == i) {
                     exitWorld = world;
                 }
             }
         }
-
-        Location enter = entityplayer.getBukkitEntity().getLocation();
+        final Location enter = entityplayer.getBukkitEntity().getLocation();
         Location exit = null;
-        boolean useTravelAgent = false; // don't use agent for custom worlds or return from THE_END
+        boolean useTravelAgent = false;
         if (exitWorld != null) {
-            if ((cause == TeleportCause.END_PORTAL) && (i == 0)) {
-                // THE_END -> NORMAL; use bed if available, otherwise default spawn
+            if (cause == PlayerTeleportEvent.TeleportCause.END_PORTAL && i == 0) {
                 exit = entityplayer.getBukkitEntity().getBedSpawnLocation();
                 if (exit == null || ((CraftWorld) exit.getWorld()).getHandle().dimension != 0) {
                     exit = exitWorld.getWorld().getSpawnLocation();
                 }
             } else {
-                // NORMAL <-> NETHER or NORMAL -> THE_END
                 exit = this.calculateTarget(enter, exitWorld);
                 useTravelAgent = true;
             }
         }
-
-        TravelAgent agent = exit != null ? (TravelAgent) ((CraftWorld) exit.getWorld()).getHandle().getTravelAgent() : org.bukkit.craftbukkit.CraftTravelAgent.DEFAULT; // return arbitrary TA to compensate for implementation dependent plugins
-        agent.setCanCreatePortal(cause != TeleportCause.END_PORTAL); // PaperSpigot - Configurable end credits, don't allow End Portals to create portals
-
-        PlayerPortalEvent event = new PlayerPortalEvent(entityplayer.getBukkitEntity(), enter, exit, agent, cause);
+        final TravelAgent agent = (TravelAgent) ((exit != null) ? ((CraftWorld) exit.getWorld()).getHandle().getTravelAgent() : CraftTravelAgent.DEFAULT);
+        agent.setCanCreatePortal(cause != PlayerTeleportEvent.TeleportCause.END_PORTAL);
+        final PlayerPortalEvent event = new PlayerPortalEvent(entityplayer.getBukkitEntity(), enter, exit, agent, cause);
         event.useTravelAgent(useTravelAgent);
         Bukkit.getServer().getPluginManager().callEvent(event);
         if (event.isCancelled() || event.getTo() == null) {
             return;
         }
-
-        // PaperSpigot - Configurable end credits, if a plugin sets to use a travel agent even if the cause is an end portal, ignore it
-        exit = cause != TeleportCause.END_PORTAL && event.useTravelAgent() ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo();
+        exit = ((cause != PlayerTeleportEvent.TeleportCause.END_PORTAL && event.useTravelAgent()) ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo());
         if (exit == null) {
             return;
         }
         exitWorld = ((CraftWorld) exit.getWorld()).getHandle();
-
-        org.bukkit.event.player.PlayerTeleportEvent tpEvent = new org.bukkit.event.player.PlayerTeleportEvent(entityplayer.getBukkitEntity(), enter, exit, cause);
+        final PlayerTeleportEvent tpEvent = new PlayerTeleportEvent(entityplayer.getBukkitEntity(), enter, exit, cause);
         Bukkit.getServer().getPluginManager().callEvent(tpEvent);
         if (tpEvent.isCancelled() || tpEvent.getTo() == null) {
             return;
         }
-
-        Vector velocity = entityplayer.getBukkitEntity().getVelocity();
-        boolean before = exitWorld.chunkProviderServer.forceChunkLoad;
+        final org.bukkit.util.Vector velocity = entityplayer.getBukkitEntity().getVelocity();
+        final boolean before = exitWorld.chunkProviderServer.forceChunkLoad;
         exitWorld.chunkProviderServer.forceChunkLoad = true;
         exitWorld.getTravelAgent().adjustExit(entityplayer, exit, velocity);
         exitWorld.chunkProviderServer.forceChunkLoad = before;
-
-        this.moveToWorld(entityplayer, exitWorld.dimension, true, exit, false); // Vanilla doesn't check for suffocation when handling portals, so neither should we
+        this.moveToWorld(entityplayer, exitWorld.dimension, true, exit, false);
         if (entityplayer.motX != velocity.getX() || entityplayer.motY != velocity.getY() || entityplayer.motZ != velocity.getZ()) {
             entityplayer.getBukkitEntity().setVelocity(velocity);
         }
     }
 
-    public void changeWorld(Entity entity, int i, WorldServer worldserver, WorldServer worldserver1) {
-        // CraftBukkit start - Split into modular functions
-        Location exit = calculateTarget(entity.getBukkitEntity().getLocation(), worldserver1);
-        repositionEntity(entity, exit, true);
+    public void changeWorld(final Entity entity, final int i, final WorldServer worldserver, final WorldServer worldserver1) {
+        final Location exit = this.calculateTarget(entity.getBukkitEntity().getLocation(), worldserver1);
+        this.repositionEntity(entity, exit, true);
     }
 
-    // Copy of original changeWorld(Entity, int, WorldServer, WorldServer) method with only location calculation logic
-    public Location calculateTarget(Location enter, World target) {
-        WorldServer worldserver = ((CraftWorld) enter.getWorld()).getHandle();
-        WorldServer worldserver1 = target.getWorld().getHandle();
-        int i = worldserver.dimension;
-
+    public Location calculateTarget(final Location enter, final net.minecraft.server.World target) {
+        final WorldServer worldserver = ((CraftWorld) enter.getWorld()).getHandle();
+        WorldServer worldserver2 = target.getWorld().getHandle();
+        final int i = worldserver.dimension;
         double y = enter.getY();
-        float yaw = enter.getYaw();
-        float pitch = enter.getPitch();
+        final float yaw = enter.getYaw();
+        final float pitch = enter.getPitch();
         double d0 = enter.getX();
-        double d1 = enter.getZ();
-         double d2 = 8.0D;
-        /*
-        double d0 = entity.locX;
-        double d1 = entity.locZ;
-        double d2 = 8.0D;
-        float f = entity.yaw;
-
-        worldserver.methodProfiler.a("moving");
-        */
-        if (worldserver1.dimension == -1) {
-            d0 = MathHelper.a(d0 / d2, worldserver1.getWorldBorder().b()+ 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
-            d1 = MathHelper.a(d1 / d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
-            /*
-            entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-            if (entity.isAlive()) {
-                worldserver.entityJoinedWorld(entity, false);
-            }
-            */
-        } else if (worldserver1.dimension == 0) {
-            d0 = MathHelper.a(d0 * d2, worldserver1.getWorldBorder().b() + 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
-            d1 = MathHelper.a(d1 * d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
-            /*
-            entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-            if (entity.isAlive()) {
-                worldserver.entityJoinedWorld(entity, false);
-            }
-            */
+        double d2 = enter.getZ();
+        final double d3 = 8.0;
+        if (worldserver2.dimension == -1) {
+            d0 = MathHelper.a(d0 / d3, worldserver2.getWorldBorder().b() + 16.0, worldserver2.getWorldBorder().d() - 16.0);
+            d2 = MathHelper.a(d2 / d3, worldserver2.getWorldBorder().c() + 16.0, worldserver2.getWorldBorder().e() - 16.0);
+        } else if (worldserver2.dimension == 0) {
+            d0 = MathHelper.a(d0 * d3, worldserver2.getWorldBorder().b() + 16.0, worldserver2.getWorldBorder().d() - 16.0);
+            d2 = MathHelper.a(d2 * d3, worldserver2.getWorldBorder().c() + 16.0, worldserver2.getWorldBorder().e() - 16.0);
         } else {
             BlockPosition blockposition;
-
             if (i == 1) {
-                // use default NORMAL world spawn instead of target
-                worldserver1 = this.server.worlds.get(0);
-                blockposition = worldserver1.getSpawn();
+                worldserver2 = this.server.worlds.get(0);
+                blockposition = worldserver2.getSpawn();
             } else {
-                blockposition = worldserver1.getDimensionSpawn();
-            }
-
-            d0 = (double) blockposition.getX();
-            y = (double) blockposition.getY();
-            d1 = (double) blockposition.getZ();
-            /*
-            entity.setPositionRotation(d0, entity.locY, d1, 90.0F, 0.0F);
-            if (entity.isAlive()) {
-                worldserver.entityJoinedWorld(entity, false);
+                blockposition = worldserver2.getDimensionSpawn();
             }
-            */
+            d0 = blockposition.getX();
+            y = blockposition.getY();
+            d2 = blockposition.getZ();
         }
-
-        // worldserver.methodProfiler.b();
         if (i != 1) {
             worldserver.methodProfiler.a("placing");
-            d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
-            d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
-            /*
-            if (entity.isAlive()) {
-                entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-                worldserver1.getTravelAgent().a(entity, f);
-                worldserver1.addEntity(entity);
-                worldserver1.entityJoinedWorld(entity, false);
-            }
-
-            worldserver.methodProfiler.b();
-            */
+            d0 = MathHelper.clamp((int) d0, -29999872, 29999872);
+            d2 = MathHelper.clamp((int) d2, -29999872, 29999872);
         }
-
-        // entity.spawnIn(worldserver1);
-        return new Location(worldserver1.getWorld(), d0, y, d1, yaw, pitch);
+        return new Location(worldserver2.getWorld(), d0, y, d2, yaw, pitch);
     }
 
-    // copy of original a(Entity, int, WorldServer, WorldServer) method with only entity repositioning logic
-    public void repositionEntity(Entity entity, Location exit, boolean portal) {
-        WorldServer worldserver = (WorldServer) entity.world;
-        WorldServer worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
-        int i = worldserver.dimension;
-
-        /*
-        double d0 = entity.locX;
-        double d1 = entity.locZ;
-        double d2 = 8.0D;
-        float f = entity.yaw;
-
-        worldserver.methodProfiler.a("moving");
-        */
+    public void repositionEntity(final Entity entity, final Location exit, final boolean portal) {
+        final WorldServer worldserver = (WorldServer) entity.world;
+        final WorldServer worldserver2 = ((CraftWorld) exit.getWorld()).getHandle();
+        final int i = worldserver.dimension;
         entity.setPositionRotation(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
         if (entity.isAlive()) {
             worldserver.entityJoinedWorld(entity, false);
         }
-        /*
-        if (entity.dimension == -1) {
-            d0 = MathHelper.a(d0 / d2, worldserver1.getWorldBorder().b() + 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
-            d1 = MathHelper.a(d1 / d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
-            entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-            if (entity.isAlive()) {
-                worldserver.entityJoinedWorld(entity, false);
-            }
-        } else if (entity.dimension == 0) {
-            d0 = MathHelper.a(d0 * d2, worldserver1.getWorldBorder().b() + 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
-            d1 = MathHelper.a(d1 * d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
-            entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-            if (entity.isAlive()) {
-                worldserver.entityJoinedWorld(entity, false);
-            }
-        } else {
-            BlockPosition blockposition;
-
-            if (i == 1) {
-                // use default NORMAL world spawn instead of target
-                worldserver1 = this.server.worlds.get(0);
-                blockposition = worldserver1.getSpawn();
-            } else {
-                blockposition = worldserver1.getDimensionSpawn();
-            }
-
-            d0 = (double) blockposition.getX();
-            entity.locY = (double) blockposition.getY();
-            d1 = (double) blockposition.getZ();
-            entity.setPositionRotation(d0, entity.locY, d1, 90.0F, 0.0F);
-            if (entity.isAlive()) {
-                worldserver.entityJoinedWorld(entity, false);
-            }
-        }
-        */
-
         worldserver.methodProfiler.b();
         if (i != 1) {
             worldserver.methodProfiler.a("placing");
-            /*
-            d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
-            d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
-            */
             if (entity.isAlive()) {
-                // entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
-                // worldserver1.getTravelAgent().a(entity, f);
                 if (portal) {
-                    Vector velocity = entity.getBukkitEntity().getVelocity();
-                    worldserver1.getTravelAgent().adjustExit(entity, exit, velocity);
+                    final Vector velocity = entity.getBukkitEntity().getVelocity();
+                    worldserver2.getTravelAgent().adjustExit(entity, exit, velocity);
                     entity.setPositionRotation(exit.getX(), exit.getY(), exit.getZ(), exit.getYaw(), exit.getPitch());
                     if (entity.motX != velocity.getX() || entity.motY != velocity.getY() || entity.motZ != velocity.getZ()) {
                         entity.getBukkitEntity().setVelocity(velocity);
                     }
                 }
-                worldserver1.addEntity(entity);
-                worldserver1.entityJoinedWorld(entity, false);
+                worldserver2.addEntity(entity);
+                worldserver2.entityJoinedWorld(entity, false);
             }
-
             worldserver.methodProfiler.b();
         }
-
-        entity.spawnIn(worldserver1);
-        // CraftBukkit end
+        entity.spawnIn(worldserver2);
     }
 
     public void tick() {
@@ -880,115 +604,94 @@ public abstract class PlayerList {
             this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY, this.players));
             this.u = 0;
         }
-
     }
 
-    public void sendAll(Packet packet) {
-        for (EntityPlayer player : this.players) {
-            ((EntityPlayer) player).playerConnection.sendPacket(packet);
+    public void sendAll(final Packet packet) {
+        for (int i = 0; i < this.players.size(); ++i) {
+            this.players.get(i).playerConnection.sendPacket(packet);
         }
-
     }
 
-    // CraftBukkit start - add a world/entity limited version
-    public void sendAll(Packet packet, EntityHuman entityhuman) {
-        for (EntityPlayer entityplayer : this.players) {
-            if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
-                continue;
+    public void sendAll(final Packet packet, final EntityHuman entityhuman) {
+        for (int i = 0; i < this.players.size(); ++i) {
+            final EntityPlayer entityplayer = this.players.get(i);
+            if (entityhuman == null || !(entityhuman instanceof EntityPlayer) || entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
+                this.players.get(i).playerConnection.sendPacket(packet);
             }
-            ((EntityPlayer) entityplayer).playerConnection.sendPacket(packet);
         }
     }
 
-    public void sendAll(Packet packet, World world) {
-        for (int i = 0; i < world.players.size(); ++i) {
-            ((EntityPlayer) world.players.get(i)).playerConnection.sendPacket(packet);
+    public void sendAll(final Packet packet, final net.minecraft.server.World world) {
+        for (EntityHuman player : world.players) {
+            EntityPlayer entityplayer = (EntityPlayer) player;
+            entityplayer.playerConnection.sendPacket(packet);
         }
-
     }
-    // CraftBukkit end
-
-    public void a(Packet packet, int i) {
-        for (EntityPlayer player : this.players) {
-            EntityPlayer entityplayer = (EntityPlayer) player;
 
+    public void a(final Packet packet, final int i) {
+        for (int j = 0; j < this.players.size(); ++j) {
+            final EntityPlayer entityplayer = this.players.get(j);
             if (entityplayer.dimension == i) {
                 entityplayer.playerConnection.sendPacket(packet);
             }
         }
-
     }
 
-    public void a(EntityHuman entityhuman, IChatBaseComponent ichatbasecomponent) {
-        ScoreboardTeamBase scoreboardteambase = entityhuman.getScoreboardTeam();
-
+    public void a(final EntityHuman entityhuman, final IChatBaseComponent ichatbasecomponent) {
+        final ScoreboardTeamBase scoreboardteambase = entityhuman.getScoreboardTeam();
         if (scoreboardteambase != null) {
-            Collection collection = scoreboardteambase.getPlayerNameSet();
-
-            for (Object value : collection) {
-                String s = (String) value;
-                EntityPlayer entityplayer = this.getPlayer(s);
-
+            final Collection<String> collection = scoreboardteambase.getPlayerNameSet();
+            for (final String s : collection) {
+                final EntityPlayer entityplayer = this.getPlayer(s);
                 if (entityplayer != null && entityplayer != entityhuman) {
                     entityplayer.sendMessage(ichatbasecomponent);
                 }
             }
-
         }
     }
 
-    public void b(EntityHuman entityhuman, IChatBaseComponent ichatbasecomponent) {
-        ScoreboardTeamBase scoreboardteambase = entityhuman.getScoreboardTeam();
-
+    public void b(final EntityHuman entityhuman, final IChatBaseComponent ichatbasecomponent) {
+        final ScoreboardTeamBase scoreboardteambase = entityhuman.getScoreboardTeam();
         if (scoreboardteambase == null) {
             this.sendMessage(ichatbasecomponent);
         } else {
-            for (EntityPlayer player : this.players) {
-                EntityPlayer entityplayer = (EntityPlayer) player;
-
+            for (int i = 0; i < this.players.size(); ++i) {
+                final EntityPlayer entityplayer = this.players.get(i);
                 if (entityplayer.getScoreboardTeam() != scoreboardteambase) {
                     entityplayer.sendMessage(ichatbasecomponent);
                 }
             }
-
         }
     }
 
-    public String b(boolean flag) {
-        StringBuilder s = new StringBuilder();
-        ArrayList arraylist = Lists.newArrayList(this.players);
-
+    public String b(final boolean flag) {
+        String s = "";
+        final ArrayList<EntityPlayer> arraylist = Lists.newArrayList(this.players);
         for (int i = 0; i < arraylist.size(); ++i) {
             if (i > 0) {
-                s.append(", ");
+                s = s + ", ";
             }
-
-            s.append(((EntityPlayer) arraylist.get(i)).getName());
+            s = s + arraylist.get(i).getName();
             if (flag) {
-                s.append(" (").append(((EntityPlayer) arraylist.get(i)).getUniqueID().toString()).append(")");
+                s = s + " (" + arraylist.get(i).getUniqueID().toString() + ")";
             }
         }
-
-        return s.toString();
+        return s;
     }
 
     public String[] f() {
-        String[] astring = new String[this.players.size()];
-
+        final String[] astring = new String[this.players.size()];
         for (int i = 0; i < this.players.size(); ++i) {
             astring[i] = this.players.get(i).getName();
         }
-
         return astring;
     }
 
     public GameProfile[] g() {
-        GameProfile[] agameprofile = new GameProfile[this.players.size()];
-
+        final GameProfile[] agameprofile = new GameProfile[this.players.size()];
         for (int i = 0; i < this.players.size(); ++i) {
             agameprofile[i] = this.players.get(i).getProfile();
         }
-
         return agameprofile;
     }
 
@@ -1000,79 +703,101 @@ public abstract class PlayerList {
         return this.l;
     }
 
-    public void addOp(GameProfile gameprofile) {
+    public void addOp(final GameProfile gameprofile) {
         this.operators.add(new OpListEntry(gameprofile, this.server.p(), this.operators.b(gameprofile)));
-
-        // CraftBukkit start
-        Player player = server.server.getPlayer(gameprofile.getId());
+        final Player player = this.server.server.getPlayer(gameprofile.getId());
         if (player != null) {
-           player.recalculatePermissions();
+            player.recalculatePermissions();
         }
-        // CraftBukkit end
     }
 
-    public void removeOp(GameProfile gameprofile) {
+    public void removeOp(final GameProfile gameprofile) {
         this.operators.remove(gameprofile);
-
-        // CraftBukkit start
-        Player player = server.server.getPlayer(gameprofile.getId());
+        final Player player = this.server.server.getPlayer(gameprofile.getId());
         if (player != null) {
             player.recalculatePermissions();
         }
-        // CraftBukkit end
     }
 
-    public boolean isWhitelisted(GameProfile gameprofile) {
+    public boolean isWhitelisted(final GameProfile gameprofile) {
         return !this.hasWhitelist || this.operators.d(gameprofile) || this.whitelist.d(gameprofile);
     }
 
-    public boolean isOp(GameProfile gameprofile) {
-        return this.operators.d(gameprofile) || this.server.T() && this.server.worlds.get(0).getWorldData().v() && this.server.S().equalsIgnoreCase(gameprofile.getName()) || this.t; // CraftBukkit
+    public boolean isOp(final GameProfile gameprofile) {
+        return this.operators.d(gameprofile) || (this.server.T() && this.server.worlds.get(0).getWorldData().v() && this.server.S().equalsIgnoreCase(gameprofile.getName())) || this.t;
     }
 
-    public EntityPlayer getPlayer(String s) {
-        return this.playersByName.get(s); // Spigot
+    public EntityPlayer getPlayer(final String s) {
+        return this.playersByName.get(s);
     }
 
-    public void sendPacketNearby(double d0, double d1, double d2, double d3, int i, Packet packet) {
+    public void sendPacketNearby(final double d0, final double d1, final double d2, final double d3, final int i, final Packet packet) {
         this.sendPacketNearby(null, d0, d1, d2, d3, i, packet);
     }
 
-    public void sendPacketNearby(EntityHuman entityhuman, double d0, double d1, double d2, double d3, int i, Packet packet) {
-        for (EntityPlayer player : this.players) {
-            EntityPlayer entityplayer = (EntityPlayer) player;
-
-            // CraftBukkit start - Test if player receiving packet can see the source of the packet
+    public void sendPacketNearby(final EntityHuman entityhuman, final double d0, final double d1, final double d2, final double d3, final int i, final Packet packet) {
+        final Set<EntityPlayer> recivers = new HashSet<EntityPlayer>();
+        for (final EntityPlayer entityplayer : this.players) {
             if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
                 continue;
             }
-            // CraftBukkit end
-
+            recivers.add(entityplayer);
+        }
+        if (recivers.isEmpty()) {
+            return;
+        }
+        if (packet instanceof PacketPlayOutNamedSoundEffect) {
+            final PacketPlayOutNamedSoundEffect packetPlayOutNamedSoundEffect = (PacketPlayOutNamedSoundEffect) packet;
+            try {
+                final Field field = packetPlayOutNamedSoundEffect.getClass().getDeclaredField("a");
+                field.setAccessible(true);
+                final String type = (String) field.get(packetPlayOutNamedSoundEffect);
+                if (type.startsWith("step.") && recivers.size() >= 2) {
+                    if (recivers.size() > 10) {
+                        return;
+                    }
+                    final Set<EntityPlayer> oldPlayers = new HashSet<EntityPlayer>();
+                    oldPlayers.addAll(recivers);
+                    recivers.clear();
+                    int index = 0;
+                    for (final EntityPlayer oldPlayer : oldPlayers) {
+                        if (index >= 3) {
+                            break;
+                        }
+                        recivers.add(oldPlayer);
+                        ++index;
+                    }
+                }
+            } catch (NoSuchFieldException | IllegalAccessException ex2) {
+                ex2.printStackTrace();
+            }
+        }
+        for (final EntityPlayer entityplayer : recivers) {
             if (entityplayer != entityhuman && entityplayer.dimension == i) {
-                double d4 = d0 - entityplayer.locX;
-                double d5 = d1 - entityplayer.locY;
-                double d6 = d2 - entityplayer.locZ;
-
-                if (d4 * d4 + d5 * d5 + d6 * d6 < d3 * d3) {
-                    entityplayer.playerConnection.sendPacket(packet);
+                final double d4 = d0 - entityplayer.locX;
+                final double d5 = d1 - entityplayer.locY;
+                final double d6 = d2 - entityplayer.locZ;
+                final double g1 = d4 * d4 + d5 * d5 + d6 * d6;
+                final double g2 = d3 * d3;
+                if (g1 >= g2) {
+                    continue;
                 }
+                entityplayer.playerConnection.sendPacket(packet);
             }
         }
-
     }
 
     public void savePlayers() {
-        for (EntityPlayer player : this.players) {
-            this.savePlayerFile((EntityPlayer) player);
+        for (int i = 0; i < this.players.size(); ++i) {
+            this.savePlayerFile(this.players.get(i));
         }
-
     }
 
-    public void addWhitelist(GameProfile gameprofile) {
+    public void addWhitelist(final GameProfile gameprofile) {
         this.whitelist.add(new WhiteListEntry(gameprofile));
     }
 
-    public void removeWhitelist(GameProfile gameprofile) {
+    public void removeWhitelist(final GameProfile gameprofile) {
         this.whitelist.remove(gameprofile);
     }
 
@@ -1092,29 +817,22 @@ public abstract class PlayerList {
         return this.operators.getEntries();
     }
 
-    public void reloadWhitelist() {}
-
-    public void b(EntityPlayer entityplayer, WorldServer worldserver) {
-        WorldBorder worldborder = entityplayer.world.getWorldBorder(); // CraftBukkit
+    public void reloadWhitelist() {
+    }
 
+    public void b(final EntityPlayer entityplayer, final WorldServer worldserver) {
+        final WorldBorder worldborder = entityplayer.world.getWorldBorder();
         entityplayer.playerConnection.sendPacket(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.INITIALIZE));
         entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean("doDaylightCycle")));
         if (worldserver.S()) {
-            // CraftBukkit start - handle player weather
-            // entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(1, 0.0F));
-            // entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(7, worldserver.j(1.0F)));
-            // entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(8, worldserver.h(1.0F)));
-            entityplayer.setPlayerWeather(org.bukkit.WeatherType.DOWNFALL, false);
+            entityplayer.setPlayerWeather(WeatherType.DOWNFALL, false);
             entityplayer.updateWeather(-worldserver.p, worldserver.p, -worldserver.r, worldserver.r);
-            // CraftBukkit end
         }
-
     }
 
-    public void updateClient(EntityPlayer entityplayer) {
+    public void updateClient(final EntityPlayer entityplayer) {
         entityplayer.updateInventory(entityplayer.defaultContainer);
-        // entityplayer.triggerHealthUpdate();
-        entityplayer.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
+        entityplayer.getBukkitEntity().updateScaledHealth();
         entityplayer.playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
     }
 
@@ -1127,27 +845,25 @@ public abstract class PlayerList {
     }
 
     public String[] getSeenPlayers() {
-        return this.server.worlds.get(0).getDataManager().getPlayerFileData().getSeenPlayers(); // CraftBukkit
+        return this.server.worlds.get(0).getDataManager().getPlayerFileData().getSeenPlayers();
     }
 
     public boolean getHasWhitelist() {
         return this.hasWhitelist;
     }
 
-    public void setHasWhitelist(boolean flag) {
+    public void setHasWhitelist(final boolean flag) {
         this.hasWhitelist = flag;
     }
 
-    public List<EntityPlayer> b(String s) {
-        ArrayList arraylist = Lists.newArrayList();
-
-        for (EntityPlayer entityplayer : this.players) {
+    public List<EntityPlayer> b(final String s) {
+        final ArrayList arraylist = Lists.newArrayList();
+        for (final EntityPlayer entityplayer : this.players) {
             if (entityplayer.w().equals(s)) {
                 arraylist.add(entityplayer);
             }
         }
-
-        return arraylist;
+        return (List<EntityPlayer>) arraylist;
     }
 
     public int s() {
@@ -1162,84 +878,67 @@ public abstract class PlayerList {
         return null;
     }
 
-    private void a(EntityPlayer entityplayer, EntityPlayer entityplayer1, World world) {
+    private void a(final EntityPlayer entityplayer, final EntityPlayer entityplayer1, final net.minecraft.server.World world) {
         if (entityplayer1 != null) {
             entityplayer.playerInteractManager.setGameMode(entityplayer1.playerInteractManager.getGameMode());
         } else if (this.s != null) {
             entityplayer.playerInteractManager.setGameMode(this.s);
         }
-
         entityplayer.playerInteractManager.b(world.getWorldData().getGameType());
     }
 
     public void u() {
-        for (EntityPlayer player : this.players) {
-            ((EntityPlayer) player).playerConnection.disconnect(this.server.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
+        for (int i = 0; i < this.players.size(); ++i) {
+            this.players.get(i).playerConnection.disconnect(this.server.server.getShutdownMessage());
         }
-
     }
 
-    // CraftBukkit start
-    public void sendMessage(IChatBaseComponent[] iChatBaseComponents) {
-        for (IChatBaseComponent component : iChatBaseComponents) {
-            sendMessage(component, true);
+    public void sendMessage(final IChatBaseComponent[] iChatBaseComponents) {
+        for (final IChatBaseComponent component : iChatBaseComponents) {
+            this.sendMessage(component, true);
         }
     }
-    // CraftBukkit end
 
-    public void sendMessage(IChatBaseComponent ichatbasecomponent, boolean flag) {
+    public void sendMessage(final IChatBaseComponent ichatbasecomponent, final boolean flag) {
         this.server.sendMessage(ichatbasecomponent);
-        int i = flag ? 1 : 0;
-
-        // CraftBukkit start - we run this through our processor first so we can get web links etc
+        final int i = flag ? 1 : 0;
         this.sendAll(new PacketPlayOutChat(CraftChatMessage.fixComponent(ichatbasecomponent), (byte) i));
-        // CraftBukkit end
     }
 
-    public void sendMessage(IChatBaseComponent ichatbasecomponent) {
+    public void sendMessage(final IChatBaseComponent ichatbasecomponent) {
         this.sendMessage(ichatbasecomponent, true);
     }
 
-    public ServerStatisticManager a(EntityHuman entityhuman) {
-        UUID uuid = entityhuman.getUniqueID();
-        ServerStatisticManager serverstatisticmanager = uuid == null ? null : this.o.get(uuid);
-
+    public ServerStatisticManager a(final EntityHuman entityhuman) {
+        final UUID uuid = entityhuman.getUniqueID();
+        ServerStatisticManager serverstatisticmanager = (uuid == null) ? null : this.o.get(uuid);
         if (serverstatisticmanager == null) {
-            File file = new File(this.server.getWorldServer(0).getDataManager().getDirectory(), "stats");
-            File file1 = new File(file, uuid.toString() + ".json");
-
-            if (!file1.exists()) {
-                File file2 = new File(file, entityhuman.getName() + ".json");
-
-                if (file2.exists() && file2.isFile()) {
-                    file2.renameTo(file1);
+            final File file = new File(this.server.getWorldServer(0).getDataManager().getDirectory(), "stats");
+            final File file2 = new File(file, uuid.toString() + ".json");
+            if (!file2.exists()) {
+                final File file3 = new File(file, entityhuman.getName() + ".json");
+                if (file3.exists() && file3.isFile()) {
+                    file3.renameTo(file2);
                 }
             }
-
-            serverstatisticmanager = new ServerStatisticManager(this.server, file1);
+            serverstatisticmanager = new ServerStatisticManager(this.server, file2);
             serverstatisticmanager.a();
             this.o.put(uuid, serverstatisticmanager);
         }
-
         return serverstatisticmanager;
     }
 
-    public void a(int i) {
+    public void a(final int i) {
         this.r = i;
         if (this.server.worldServer != null) {
-            WorldServer[] aworldserver = this.server.worldServer;
-            int j = aworldserver.length;
-
-            // CraftBukkit start
-            for (int k = 0; k < server.worlds.size(); ++k) {
-                WorldServer worldserver = server.worlds.get(0);
-                // CraftBukkit end
-
+            final WorldServer[] aworldserver = this.server.worldServer;
+            final int length = aworldserver.length;
+            for (int k = 0; k < this.server.worlds.size(); ++k) {
+                final WorldServer worldserver = this.server.worlds.get(0);
                 if (worldserver != null) {
                     worldserver.getPlayerChunkMap().a(i);
                 }
             }
-
         }
     }
 
@@ -1247,11 +946,11 @@ public abstract class PlayerList {
         return this.players;
     }
 
-    public EntityPlayer a(UUID uuid) {
+    public EntityPlayer a(final UUID uuid) {
         return this.j.get(uuid);
     }
 
-    public boolean f(GameProfile gameprofile) {
+    public boolean f(final GameProfile gameprofile) {
         return false;
     }
 }
-- 
2.21.0.windows.1

