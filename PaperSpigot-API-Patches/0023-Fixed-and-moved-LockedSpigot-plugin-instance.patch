From c60d88079d5508685e1f64de139b0c3c2dbac1f6 Mon Sep 17 00:00:00 2001
From: Admin <lockedthreaddev@gmail.com>
Date: Mon, 13 May 2019 15:14:44 -0400
Subject: [PATCH] Fixed and moved LockedSpigot plugin instance


diff --git a/src/main/java/dev/lockedthread/plugin/LockedSpigot.java b/src/main/java/dev/lockedthread/plugin/LockedSpigot.java
new file mode 100644
index 00000000..b65ebfbe
--- /dev/null
+++ b/src/main/java/dev/lockedthread/plugin/LockedSpigot.java
@@ -0,0 +1,154 @@
+package dev.lockedthread.plugin;
+
+import com.avaje.ebean.EbeanServer;
+import dev.lockedthread.menu.MenuListener;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.PluginLoader;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List;
+import java.util.logging.Logger;
+
+public class LockedSpigot implements Plugin {
+
+    private static LockedSpigot lockedSpigot = null;
+
+    private File file;
+    private FileConfiguration fileConfiguration;
+    private Server server;
+
+    public LockedSpigot(File file, FileConfiguration fileConfiguration, Server server) {
+        this.file = file;
+        this.fileConfiguration = fileConfiguration;
+        this.server = server;
+        lockedSpigot = this;
+        server.getPluginManager().registerEvents(new MenuListener(), lockedSpigot);
+    }
+
+    public static LockedSpigot getLockedSpigot() {
+        return lockedSpigot;
+    }
+
+    @Override
+    public File getDataFolder() {
+        return new File(Bukkit.getWorldContainer(), "plugins");
+    }
+
+    @Override
+    public PluginDescriptionFile getDescription() {
+        return new PluginDescriptionFile("LockedSpigot", "1.0", "dev.lockedthread.plugin.LockedSpigot");
+    }
+
+    @Override
+    public FileConfiguration getConfig() {
+        return fileConfiguration;
+    }
+
+    @Override
+    public InputStream getResource(String filename) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public void saveConfig() {
+        try {
+            fileConfiguration.save(file);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void saveDefaultConfig() {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public void saveResource(String resourcePath, boolean replace) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public void reloadConfig() {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public PluginLoader getPluginLoader() {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public Server getServer() {
+        return server;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+
+    @Override
+    public void onDisable() {
+        System.out.println("Disabling LockedSpigot plugin instance");
+    }
+
+    @Override
+    public void onLoad() {
+        System.out.println("Loading LockedSpigot plugin instance");
+    }
+
+    @Override
+    public void onEnable() {
+        System.out.println("Enabling LockedSpigot plugin instance");
+    }
+
+    @Override
+    public boolean isNaggable() {
+        return false;
+    }
+
+    @Override
+    public void setNaggable(boolean canNag) {
+
+    }
+
+    @Override
+    public EbeanServer getDatabase() {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public Logger getLogger() {
+        return Bukkit.getLogger();
+    }
+
+    @Override
+    public String getName() {
+        return "LockedSpigotPluginInstance";
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+
+    @Override
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+        throw new UnsupportedOperationException("Contact LockedThread immediately if you're running into this error!");
+    }
+}
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index ae947885..0d159d5f 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -2,6 +2,7 @@ package org.bukkit.plugin;
 
 import com.google.common.collect.ImmutableSet;
 import dev.lockedthread.menu.MenuListener;
+import dev.lockedthread.plugin.LockedSpigot;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
@@ -218,16 +219,9 @@ public final class SimplePluginManager implements PluginManager {
                     }
                 }
                 if (softDependencies.containsKey(plugin)) {
-                    Iterator<String> softDependencyIterator = softDependencies.get(plugin).iterator();
 
-                    while (softDependencyIterator.hasNext()) {
-                        String softDependency = softDependencyIterator.next();
-
-                        // Soft depend is no longer around
-                        if (!plugins.containsKey(softDependency)) {
-                            softDependencyIterator.remove();
-                        }
-                    }
+                    // Soft depend is no longer around
+                    softDependencies.get(plugin).removeIf(softDependency -> !plugins.containsKey(softDependency));
 
                     if (softDependencies.get(plugin).isEmpty()) {
                         softDependencies.remove(plugin);
@@ -287,7 +281,9 @@ public final class SimplePluginManager implements PluginManager {
             }
         }
 
-        return result.toArray(new Plugin[result.size()]);
+        result.add(new LockedSpigot(null, null, server));
+
+        return result.toArray(new Plugin[0]);
     }
 
     /**
-- 
2.21.0.windows.1

